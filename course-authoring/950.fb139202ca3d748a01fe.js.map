{"version":3,"file":"950.fb139202ca3d748a01fe.js","mappings":"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","sources":["webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/app-settings-modal/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/app-settings-modal/AppSettingsModal.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/constants.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/LiveCommonFields.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/ZoomSettings.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/BBBSettings.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/Settings.jsx"],"sourcesContent":["import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  cancel: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n  save: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.save',\n    defaultMessage: 'Save',\n  },\n  saving: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.saving',\n    defaultMessage: 'Saving',\n  },\n  saved: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.saved',\n    defaultMessage: 'Saved',\n  },\n  retry: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.retry',\n    defaultMessage: 'Retry',\n  },\n  enabled: {\n    id: 'course-authoring.pages-resources.app-settings-modal.badge.enabled',\n    defaultMessage: 'Enabled',\n  },\n  disabled: {\n    id: 'course-authoring.pages-resources.app-settings-modal.badge.disabled',\n    defaultMessage: 'Disabled',\n  },\n  errorSavingTitle: {\n    id: 'course-authoring.pages-resources.app-settings-modal.save-error.title',\n    defaultMessage: 'We couldn\\'t apply your changes.',\n  },\n  errorSavingMessage: {\n    id: 'course-authoring.pages-resources.app-settings-modal.save-error.message',\n    defaultMessage: 'Please check your entries and try again.',\n  },\n});\n\nexport default messages;\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  Alert,\n  Badge,\n  Form,\n  Hyperlink,\n  ModalDialog,\n  StatefulButton,\n  TransitionReplace,\n} from '@edx/paragon';\nimport { Info } from '@edx/paragon/icons';\n\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport React, {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport { RequestStatus } from '../../data/constants';\nimport ConnectionErrorAlert from '../../generic/ConnectionErrorAlert';\nimport FormSwitchGroup from '../../generic/FormSwitchGroup';\nimport Loading from '../../generic/Loading';\nimport { useModel } from '../../generic/model-store';\nimport PermissionDeniedAlert from '../../generic/PermissionDeniedAlert';\nimport { useIsMobile } from '../../utils';\nimport { getLoadingStatus, getSavingStatus } from '../data/selectors';\nimport { updateSavingStatus } from '../data/slice';\nimport { updateAppStatus } from '../data/thunks';\nimport AppConfigFormDivider from '../discussions/app-config-form/apps/shared/AppConfigFormDivider';\nimport { PagesAndResourcesContext } from '../PagesAndResourcesProvider';\nimport messages from './messages';\n\nconst AppSettingsForm = ({\n  formikProps, children, showForm,\n}) => children && (\n  <TransitionReplace>\n    {showForm ? (\n      <React.Fragment key=\"app-enabled\">\n        {children(formikProps)}\n      </React.Fragment>\n    ) : (\n      <React.Fragment key=\"app-disabled\" />\n    )}\n  </TransitionReplace>\n);\n\nAppSettingsForm.propTypes = {\n  // Ignore the warning here since we're just passing along the props as-is and the child component should validate\n  // eslint-disable-next-line react/forbid-prop-types\n  formikProps: PropTypes.object.isRequired,\n  showForm: PropTypes.bool.isRequired,\n  children: PropTypes.func,\n};\n\nAppSettingsForm.defaultProps = {\n  children: null,\n};\n\nconst AppSettingsModalBase = ({\n  intl, title, onClose, variant, isMobile, children, footer,\n}) => (\n  <ModalDialog\n    title={title}\n    isOpen\n    onClose={onClose}\n    size=\"lg\"\n    variant={variant}\n    hasCloseButton={isMobile}\n    isFullscreenOnMobile\n  >\n    <ModalDialog.Header>\n      <ModalDialog.Title data-testid=\"modal-title\">\n        {title}\n      </ModalDialog.Title>\n    </ModalDialog.Header>\n    <ModalDialog.Body>\n      {children}\n    </ModalDialog.Body>\n    <ModalDialog.Footer className=\"p-4\">\n      <ActionRow>\n        <ModalDialog.CloseButton variant=\"tertiary\">\n          {intl.formatMessage(messages.cancel)}\n        </ModalDialog.CloseButton>\n        {footer}\n      </ActionRow>\n    </ModalDialog.Footer>\n  </ModalDialog>\n);\n\nAppSettingsModalBase.propTypes = {\n  intl: intlShape.isRequired,\n  title: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.oneOf(['default', 'dark']).isRequired,\n  isMobile: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  footer: PropTypes.node,\n};\n\nAppSettingsModalBase.defaultProps = {\n  footer: null,\n};\n\nconst AppSettingsModal = ({\n  intl,\n  appId,\n  title,\n  children,\n  configureBeforeEnable,\n  initialValues,\n  validationSchema,\n  onClose,\n  onSettingsSave,\n  enableAppLabel,\n  enableAppHelp,\n  learnMoreText,\n  enableReinitialize,\n  hideAppToggle,\n}) => {\n  const { courseId } = useContext(PagesAndResourcesContext);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const updateSettingsRequestStatus = useSelector(getSavingStatus);\n  const alertRef = useRef(null);\n  const [saveError, setSaveError] = useState(false);\n  const appInfo = useModel('courseApps', appId);\n  const dispatch = useDispatch();\n  const submitButtonState = updateSettingsRequestStatus === RequestStatus.IN_PROGRESS ? 'pending' : 'default';\n  const isMobile = useIsMobile();\n  const modalVariant = isMobile ? 'dark' : 'default';\n\n  useEffect(() => {\n    if (updateSettingsRequestStatus === RequestStatus.SUCCESSFUL) {\n      dispatch(updateSavingStatus({ status: '' }));\n      onClose();\n    }\n  }, [updateSettingsRequestStatus]);\n\n  const handleFormSubmit = async (values) => {\n    let success = true;\n    if (appInfo.enabled !== values.enabled) {\n      success = await dispatch(updateAppStatus(courseId, appInfo.id, values.enabled));\n    }\n    // Call the submit handler for the settings component to save its settings\n    if (onSettingsSave) {\n      success = success && await onSettingsSave(values);\n    }\n    await setSaveError(!success);\n    !success && alertRef?.current.scrollIntoView(); // eslint-disable-line no-unused-expressions\n  };\n\n  const handleFormikSubmit = ({ handleSubmit, errors }) => async (event) => {\n    // If submitting the form with errors, show the alert and scroll to it.\n    await handleSubmit(event);\n    if (Object.keys(errors).length > 0) {\n      await setSaveError(true);\n      alertRef?.current.scrollIntoView?.(); // eslint-disable-line no-unused-expressions\n    }\n  };\n\n  const learnMoreLink = appInfo.documentationLinks?.learnMoreConfiguration && (\n    <Hyperlink\n      className=\"text-primary-500\"\n      destination={appInfo.documentationLinks.learnMoreConfiguration}\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n    >\n      {learnMoreText}\n    </Hyperlink>\n  );\n\n  if (loadingStatus === RequestStatus.SUCCESSFUL) {\n    return (\n      <Formik\n        initialValues={{\n          enabled: !!appInfo?.enabled,\n          ...initialValues,\n        }}\n        validationSchema={\n          Yup.object()\n            .shape({\n              enabled: Yup.boolean(),\n              ...validationSchema,\n            })\n        }\n        onSubmit={handleFormSubmit}\n        enableReinitialize={enableReinitialize}\n      >\n        {(formikProps) => (\n          <Form onSubmit={handleFormikSubmit(formikProps)}>\n            <AppSettingsModalBase\n              title={title}\n              isOpen\n              onClose={onClose}\n              variant={modalVariant}\n              isMobile={isMobile}\n              isFullscreenOnMobile\n              intl={intl}\n              footer={(\n                <StatefulButton\n                  labels={{\n                    default: intl.formatMessage(messages.save),\n                    pending: intl.formatMessage(messages.saving),\n                    complete: intl.formatMessage(messages.saved),\n                  }}\n                  state={submitButtonState}\n                  onClick={handleFormikSubmit(formikProps)}\n                />\n              )}\n            >\n              {saveError && (\n                <Alert variant=\"danger\" icon={Info} ref={alertRef}>\n                  <Alert.Heading>\n                    {formikProps.errors.enabled?.title || intl.formatMessage(messages.errorSavingTitle)}\n                  </Alert.Heading>\n                  {formikProps.errors.enabled?.message || intl.formatMessage(messages.errorSavingMessage)}\n                </Alert>\n              )}\n              {!hideAppToggle && (\n                <FormSwitchGroup\n                  id={`enable-${appId}-toggle`}\n                  name=\"enabled\"\n                  onChange={(event) => formikProps.handleChange(event)}\n                  onBlur={formikProps.handleBlur}\n                  checked={formikProps.values.enabled}\n                  label={(\n                    <div className=\"d-flex align-items-center\">\n                      {enableAppLabel}\n                      {formikProps.values.enabled && (\n                        <Badge className=\"ml-2\" variant=\"success\" data-testid=\"enable-badge\">\n                          {intl.formatMessage(messages.enabled)}\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                  helpText={(\n                    <div>\n                      <p>{enableAppHelp}</p>\n                      <span className=\"py-3\">{learnMoreLink}</span>\n                    </div>\n                  )}\n                />\n              )}\n              {(formikProps.values.enabled || configureBeforeEnable) && children\n                && <AppConfigFormDivider marginAdj={{ default: 0, sm: 0 }} />}\n              <AppSettingsForm formikProps={formikProps} showForm={formikProps.values.enabled || configureBeforeEnable}>\n                {children}\n              </AppSettingsForm>\n            </AppSettingsModalBase>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n  return (\n    <AppSettingsModalBase\n      intl={intl}\n      title={title}\n      isOpen\n      onClose={onClose}\n      size=\"sm\"\n      variant={modalVariant}\n      isMobile={isMobile}\n      isFullscreenOnMobile\n    >\n      {loadingStatus === RequestStatus.IN_PROGRESS && <Loading />}\n      {loadingStatus === RequestStatus.FAILED && <ConnectionErrorAlert />}\n      {loadingStatus === RequestStatus.DENIED && <PermissionDeniedAlert />}\n    </AppSettingsModalBase>\n  );\n};\n\nAppSettingsModal.propTypes = {\n  intl: intlShape.isRequired,\n  title: PropTypes.string.isRequired,\n  appId: PropTypes.string.isRequired,\n  children: PropTypes.func,\n  onSettingsSave: PropTypes.func,\n  initialValues: PropTypes.shape({}),\n  validationSchema: PropTypes.shape({}),\n  onClose: PropTypes.func.isRequired,\n  enableAppLabel: PropTypes.string.isRequired,\n  enableAppHelp: PropTypes.string.isRequired,\n  learnMoreText: PropTypes.string.isRequired,\n  configureBeforeEnable: PropTypes.bool,\n  enableReinitialize: PropTypes.bool,\n  hideAppToggle: PropTypes.bool,\n};\n\nAppSettingsModal.defaultProps = {\n  children: null,\n  onSettingsSave: null,\n  initialValues: {},\n  validationSchema: {},\n  configureBeforeEnable: false,\n  enableReinitialize: false,\n  hideAppToggle: false,\n};\n\nexport default injectIntl(AppSettingsModal);\n","import {\n  GoogleMeet, MicrosoftTeams, Zoom, Bbb,\n} from '@edx/paragon/icons';\n\nexport const iconsSrc = {\n  googleMeet: GoogleMeet,\n  microsoftTeams: MicrosoftTeams,\n  zoom: Zoom,\n  bigBlueButton: Bbb,\n};\n\nexport const providerNames = {\n  zoom: 'Zoom',\n  big_blue_button: 'BigBlueButton',\n};\n\nexport const bbbPlanTypes = {\n  free: 'Free',\n  commercial: 'Commercial/self-hosted',\n};\n","/* eslint-disable import/prefer-default-export */\nimport { ensureConfig, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { bbbPlanTypes } from '../constants';\n\nensureConfig([\n  'STUDIO_BASE_URL',\n], 'Course Apps API service');\n\nconst apiBaseUrl = getConfig().STUDIO_BASE_URL;\n\nexport const providersApiUrl = `${apiBaseUrl}/api/course_live/providers`;\nexport const providerConfigurationApiUrl = `${apiBaseUrl}/api/course_live/course`;\n\nfunction normalizeProviders(data) {\n  const apps = Object.entries(data.providers.available).map(([key, app]) => ({\n    id: key,\n    featureIds: app.features,\n    name: app.name,\n    piiSharing: app.pii_sharing,\n    hasFreeTier: app.has_free_tier,\n  }));\n\n  return {\n    activeAppId: data.providers.active,\n    selectedAppId: data.providers.active,\n    apps,\n  };\n}\n\nfunction normalizeLtiConfig(data) {\n  if (!data || Object.keys(data).length < 1) {\n    return {};\n  }\n\n  return {\n    consumerKey: data.lti_1p1_client_key,\n    consumerSecret: data.lti_1p1_client_secret,\n    launchUrl: data.lti_1p1_launch_url,\n    launchEmail: data.lti_config?.additional_parameters?.custom_instructor_email,\n    tierType: data.tierType,\n  };\n}\n\nexport function normalizeSettings(data) {\n  let tier;\n  if (data.provider_type === 'big_blue_button') {\n    tier = data.free_tier === true ? bbbPlanTypes.free : bbbPlanTypes.commercial;\n  }\n  return {\n    enabled: data.enabled,\n    piiSharingAllowed: data.pii_sharing_allowed,\n    appConfig: {\n      id: data.provider_type,\n      ...normalizeLtiConfig({ ...data.lti_configuration, tierType: tier }),\n    },\n  };\n}\n\nexport function deNormalizeSettings(data) {\n  const ltiConfiguration = {};\n  if (data.consumerKey) {\n    ltiConfiguration.lti_1p1_client_key = data.consumerKey;\n  }\n  if (data.consumerSecret) {\n    ltiConfiguration.lti_1p1_client_secret = data.consumerSecret;\n  }\n  if (data.launchUrl) {\n    ltiConfiguration.lti_1p1_launch_url = data.launchUrl;\n  }\n  if (data?.provider === 'zoom' || data.tierType !== 'Free') {\n    ltiConfiguration.lti_config = {};\n    if (data.launchEmail) {\n      ltiConfiguration.lti_config.additional_parameters = {\n        custom_instructor_email: data.launchEmail,\n      };\n    }\n  }\n  if (Object.keys(ltiConfiguration).length > 0) {\n    // Only add this in if we're sending LTI fields.\n    // TODO: Eventually support LTI v1.3 here.\n    ltiConfiguration.version = 'lti_1p1';\n  }\n\n  const apiData = {\n    enabled: data?.enabled || false,\n    lti_configuration: Object.keys(ltiConfiguration).length ? ltiConfiguration : undefined,\n    provider_type: data?.provider || 'zoom',\n    pii_sharing_allowed: data?.piiSharingEnable || false,\n    free_tier: data?.provider === 'zoom' ? false : Boolean(data.tierType === 'Free'),\n  };\n  return apiData;\n}\n\n/**\n * Fetches providers for provided course\n * @param {string} courseId\n * @returns {Promise<[{}]>}\n */\nexport async function getLiveProviders(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${providersApiUrl}/${courseId}/`);\n\n  return normalizeProviders(data);\n}\n\n/**\n * Fetches provider settings for provided course\n * @param {string} courseId\n * @returns {Promise<[{}]>}\n */\nexport async function getLiveConfiguration(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${providerConfigurationApiUrl}/${courseId}/`);\n  return normalizeSettings(data);\n}\n\nexport async function postLiveConfiguration(courseId, config) {\n  const { data } = await getAuthenticatedHttpClient().post(\n    `${providerConfigurationApiUrl}/${courseId}/`,\n    deNormalizeSettings(config),\n  );\n  return normalizeSettings(data);\n}\n","import { history } from '@edx/frontend-platform';\nimport { addModel, addModels, updateModel } from '../../../generic/model-store';\nimport {\n  getLiveConfiguration,\n  getLiveProviders,\n  postLiveConfiguration,\n  normalizeSettings,\n  deNormalizeSettings,\n} from './api';\nimport { loadApps, updateStatus, updateSaveStatus } from './slice';\nimport { RequestStatus } from '../../../data/constants';\n\nfunction updateLiveSettingsState({\n  appConfig,\n  ...liveSettings\n}) {\n  return async (dispatch) => {\n    dispatch(addModel({ modelType: 'liveAppConfigs', model: appConfig }));\n    dispatch(loadApps(liveSettings));\n  };\n}\n\nexport function fetchLiveProviders(courseId) {\n  return async (dispatch) => {\n    const { activeAppId, selectedAppId, apps } = await getLiveProviders(courseId);\n\n    dispatch(addModels({ modelType: 'liveApps', models: apps }));\n    dispatch(loadApps({\n      activeAppId,\n      selectedAppId,\n      appIds: apps.map((app) => app.id),\n    }));\n  };\n}\n\nexport function fetchLiveConfiguration(courseId) {\n  return async (dispatch) => {\n    const settings = await getLiveConfiguration(courseId);\n    dispatch(updateLiveSettingsState(settings));\n  };\n}\n\nexport function fetchLiveData(courseId) {\n  return async (dispatch) => {\n    dispatch(updateStatus({ status: RequestStatus.IN_PROGRESS }));\n    try {\n      await dispatch(fetchLiveProviders(courseId));\n      await dispatch(fetchLiveConfiguration(courseId));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateStatus({ status: RequestStatus.DENIED }));\n      } else {\n        dispatch(updateStatus({ status: RequestStatus.FAILED }));\n      }\n    }\n  };\n}\n\nexport function saveLiveConfiguration(courseId, config) {\n  return async (dispatch) => {\n    dispatch(updateSaveStatus({ status: RequestStatus.IN_PROGRESS }));\n    try {\n      const apps = await postLiveConfiguration(courseId, config);\n      dispatch(updateLiveSettingsState(apps));\n\n      dispatch(updateSaveStatus({ status: RequestStatus.SUCCESSFUL }));\n      history.push(`/course/${courseId}/pages-and-resources/`);\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateSaveStatus({ status: RequestStatus.DENIED }));\n        dispatch(updateStatus({ status: RequestStatus.DENIED }));\n      } else {\n        dispatch(updateSaveStatus({ status: RequestStatus.FAILED }));\n      }\n    }\n  };\n}\n\nexport function saveLiveConfigurationAsDraft(config) {\n  return async (dispatch) => {\n    const { appConfig, ...liveSettings } = normalizeSettings(deNormalizeSettings(config));\n\n    dispatch(updateModel({ modelType: 'liveAppConfigs', model: appConfig }));\n    dispatch(loadApps(liveSettings));\n  };\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  heading: {\n    id: 'authoring.pagesAndResources.live.enableLive.heading',\n    defaultMessage: 'Configure Live',\n    description: 'Heading for live configuration',\n  },\n  enableLiveLabel: {\n    id: 'authoring.pagesAndResources.live.enableLive.label',\n    defaultMessage: 'Live',\n    description: 'Title for configuration',\n  },\n  enableLiveHelp: {\n    id: 'authoring.pagesAndResources.live.enableLive.help',\n    defaultMessage: 'Schedule meetings and conduct live course sessions with learners.',\n    description: 'Tells the purpose of live configuration',\n  },\n  enableLiveLink: {\n    id: 'authoring.pagesAndResources.live.enableLive.link',\n    defaultMessage: 'Learn more about live',\n    description: 'Link text that tells the user to learn about the live',\n  },\n  saveButton: {\n    id: 'authoring.discussions.saveButton',\n    defaultMessage: 'Save',\n    description: 'Button allowing the user to submit their discussion configuration.',\n  },\n  savingButton: {\n    id: 'authoring.discussions.savingButton',\n    defaultMessage: 'Saving',\n    description: 'Button label when the discussion configuration is being submitted.',\n  },\n  savedButton: {\n    id: 'authoring.discussions.savedButton',\n    defaultMessage: 'Saved',\n    description: 'Button label when the discussion configuration has been successfully submitted.',\n  },\n  selectProvider: {\n    id: 'authoring.live.selectProvider',\n    defaultMessage: 'Select a video conferencing tool',\n    description: '',\n  },\n  formInstructions: {\n    id: 'authoring.live.formInstructions',\n    defaultMessage: 'Complete the fields below to set up your video conferencing tool.',\n    description: 'Instruction for configure the video conferencing tool.',\n  },\n  consumerKey: {\n    id: 'authoring.live.consumerKey',\n    defaultMessage: 'Consumer Key',\n    description: 'Label for the Consumer Key field.',\n  },\n  consumerKeyRequired: {\n    id: 'authoring.live.consumerKey.required',\n    defaultMessage: 'Consumer key is a required field',\n    description: 'Tells the user that the Consumer Key field is required and must have a value.',\n  },\n  consumerSecret: {\n    id: 'authoring.live.consumerSecret',\n    defaultMessage: 'Consumer Secret',\n    description: 'Label for the Consumer Secret field.',\n  },\n  consumerSecretRequired: {\n    id: 'authoring.live.consumerSecret.required',\n    defaultMessage: 'Consumer secret is a required field',\n    description: 'Tells the user that the Consumer Secret field is required and must have a value.',\n  },\n  launchUrl: {\n    id: 'authoring.live.launchUrl',\n    defaultMessage: 'Launch URL',\n    description: 'Label for the Launch URL field.',\n  },\n  launchUrlRequired: {\n    id: 'authoring.live.launchUrl.required',\n    defaultMessage: 'Launch URL is a required field',\n    description: 'Tells the user that the Launch URL field is required and must have a value.',\n  },\n  launchEmail: {\n    id: 'authoring.live.launchEmail',\n    defaultMessage: 'Launch Email',\n    description: 'Label for the Launch Email field.',\n  },\n  launchEmailRequired: {\n    id: 'authoring.live.launchEmail.required',\n    defaultMessage: 'Launch Email is a required field',\n    description: 'Tells the user that the Launch Email field is required and must have a value.',\n  },\n  providerHelperText: {\n    id: 'authoring.live.provider.helpText',\n    defaultMessage: 'This configuration will require sharing username and emails of learners and the course team with {providerName}.',\n    description: 'Tells the user that sharing username and email is required for configuration',\n  },\n  requestPiiSharingEnable: {\n    id: 'authoring.live.requestPiiSharingEnable',\n    defaultMessage: 'This configuration will require sharing usernames and emails of learners and the course team with {provider}. To access the LTI configuration for {provider}, please request your edX project coordinator to get PII sharing enabled for this course.',\n    description: 'Tells the user that request edx project coordinator to enable the PII sharing to access the LTI configuration for a provider.',\n  },\n  general: {\n    id: 'authoring.live.appDocInstructions.documentationLink',\n    defaultMessage: 'General documentation',\n    description: 'Application Document Instructions message for documentation link',\n  },\n  accessibility: {\n    id: 'authoring.live.appDocInstructions.accessibilityDocumentationLink',\n    defaultMessage: 'Accessibility documentation',\n    description: 'Application Document Instructions message for accessibility link',\n  },\n  configuration: {\n    id: 'authoring.live.appDocInstructions.configurationLink',\n    defaultMessage: 'Configuration documentation',\n    description: 'Application Document Instructions message for configurations link',\n  },\n  learnMore: {\n    id: 'authoring.live.appDocInstructions.learnMoreLink',\n    defaultMessage: 'Learn more about {providerName}',\n    description: 'Application Document Instructions message for learn more links',\n  },\n  linkTextHeading: {\n    id: 'authoring.live.appDocInstructions.linkTextHeading',\n    defaultMessage: 'External help and documentation',\n    description: 'External help and documentation heading',\n  },\n  linkText: {\n    id: 'authoring.live.appDocInstructions.linkText',\n    defaultMessage: '{link}',\n    description: 'link',\n  },\n  'appName-zoom': {\n    id: 'authoring.live.appName-yellowdig',\n    defaultMessage: 'Zoom',\n    description: 'The name of the Zoom app.',\n  },\n  'appName-googleMeet': {\n    id: 'authoring.live.appName-googleMeet',\n    defaultMessage: 'Google Meet',\n    description: 'The name of the Google Meet app.',\n  },\n  'appName-microsoftTeams': {\n    id: 'authoring.live.appName-microsoftTeams',\n    defaultMessage: 'Microsoft Teams',\n    description: 'The name of the Microsoft Teams app.',\n  },\n  'appName-bigBlueButton': {\n    id: 'authoring.live.appName-bigBlueButton',\n    defaultMessage: 'BigBlueButton',\n    description: 'The name of the Big Blue Button Teams app.',\n  },\n  requestPiiSharingEnableForBbb: {\n    id: 'authoring.live.requestPiiSharingEnableForBbb',\n    defaultMessage: 'This configuration will require sharing usernames of learners and the course team with {provider}.',\n    description: 'Tells the user that they require sharing usernames with the provider to use this feature',\n  },\n\n  piiSharingEnableHelpTextBbb: {\n    id: 'authoring.live.piiSharingEnableHelpText',\n    defaultMessage: 'To enable this feature, contact your edX support team to enable PII sharing for this course.',\n    description: 'Tells the user that request edx project coordinator to enable the PII sharing to access the LTI configuration for a provider.',\n  },\n\n  freePlanMessage: {\n    id: 'authoring.live.freePlanMessage',\n    defaultMessage: 'The free plan is pre-configured, and no additional configurations are required. By selecting the free plan, you are agreeing to Blindside Networks',\n    description: 'Tells user that free plans requires no additional configurations',\n  },\n  privacyPolicy: {\n    id: 'authoring.live.privacyPolicy',\n    defaultMessage: 'Privacy Policy.',\n    description: 'The text of privacy policy hyperlink for free plan',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport messages from './messages';\nimport FormikControl from '../../generic/FormikControl';\n\nconst LiveCommonFields = ({\n  intl,\n  values,\n}) => (\n  <>\n    <p className=\"pb-2\">{intl.formatMessage(messages.formInstructions)}</p>\n    <FormikControl\n      name=\"consumerKey\"\n      value={values.consumerKey}\n      floatingLabel={intl.formatMessage(messages.consumerKey)}\n      className=\"pb-1\"\n      type=\"input\"\n    />\n    <FormikControl\n      name=\"consumerSecret\"\n      value={values.consumerSecret}\n      floatingLabel={intl.formatMessage(messages.consumerSecret)}\n      className=\"pb-1\"\n      type=\"password\"\n    />\n    <FormikControl\n      name=\"launchUrl\"\n      value={values.launchUrl}\n      floatingLabel={intl.formatMessage(messages.launchUrl)}\n      className=\"pb-1\"\n      type=\"input\"\n    />\n  </>\n);\n\nLiveCommonFields.propTypes = {\n  intl: intlShape.isRequired,\n  values: PropTypes.shape({\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    launchUrl: PropTypes.string,\n    launchEmail: PropTypes.string,\n  }).isRequired,\n};\n\nexport default injectIntl(LiveCommonFields);\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport messages from './messages';\nimport { providerNames } from './constants';\nimport LiveCommonFields from './LiveCommonFields';\nimport FormikControl from '../../generic/FormikControl';\n\nconst ZoomSettings = ({\n  intl,\n  values,\n}) => (\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  <>\n    {!values.piiSharingEnable ? (\n      <p data-testid=\"request-pii-sharing\">\n        {intl.formatMessage(messages.requestPiiSharingEnable, { provider: providerNames[values.provider] })}\n      </p>\n    ) : (\n      <>\n        {(values.piiSharingEmail || values.piiSharingUsername)\n          && (\n            <p data-testid=\"helper-text\">\n              {intl.formatMessage(messages.providerHelperText, { providerName: providerNames[values.provider] })}\n            </p>\n          )}\n        <LiveCommonFields values={values} />\n        <FormikControl\n          name=\"launchEmail\"\n          value={values.launchEmail}\n          floatingLabel={intl.formatMessage(messages.launchEmail)}\n          type=\"input\"\n        />\n      </>\n    )}\n  </>\n);\n\nZoomSettings.propTypes = {\n  intl: intlShape.isRequired,\n  values: PropTypes.shape({\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    launchUrl: PropTypes.string,\n    launchEmail: PropTypes.string,\n    provider: PropTypes.string,\n    piiSharingEmail: PropTypes.bool,\n    piiSharingUsername: PropTypes.bool,\n    piiSharingEnable: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default injectIntl(ZoomSettings);\n","import React, { useEffect, useState } from 'react';\nimport { getConfig } from '@edx/frontend-platform';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Form, Hyperlink } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport messages from './messages';\nimport { providerNames, bbbPlanTypes } from './constants';\nimport AppConfigFormDivider from '../discussions/app-config-form/apps/shared/AppConfigFormDivider';\nimport LiveCommonFields from './LiveCommonFields';\nimport { useModel } from '../../generic/model-store';\n\nconst BbbSettings = ({\n  intl,\n  values,\n  setFieldValue,\n}) => {\n  const [bbbPlan, setBbbPlan] = useState(values.tierType);\n\n  useEffect(() => {\n    setBbbPlan(values.tierType);\n  }, [values.tierType]);\n\n  const app = useModel('liveApps', 'big_blue_button');\n  const isPiiDisabled = !values.piiSharingEnable;\n  function getBbbPlanOptions() {\n    const options = ['Select', bbbPlanTypes.commercial];\n    if (app.hasFreeTier) { options.push(bbbPlanTypes.free); }\n    return options.map(option => (\n      <option\n        key={option}\n        value={option}\n        data-testid={option}\n      >\n        {option}\n      </option>\n    ));\n  }\n  const handlePlanChange = (e) => {\n    setBbbPlan(e.target.value);\n    setFieldValue('tierType', e.target.value);\n  };\n  return (\n    <>\n      {isPiiDisabled ? (\n        <p data-testid=\"request-pii-sharing\">\n          {intl.formatMessage(messages.requestPiiSharingEnableForBbb, { provider: providerNames[values.provider] })}\n        </p>\n      ) : (\n        <p data-testid=\"helper-text\">\n          {intl.formatMessage(messages.providerHelperText, { providerName: providerNames[values.provider] })}\n        </p>\n      )}\n\n      <Form.Group controlId=\"bbs-settings\" data-testid=\"plansDropDown\">\n        <Form.Label as=\"planSelector\" className=\"h6\">\n          <FormattedMessage\n            id=\"authoring.live.bbb.selectPlan.label\"\n            defaultMessage=\"Select a plan\"\n            description=\"Label for bbb plan selection\"\n          />\n        </Form.Label>\n        <Form.Control\n          as=\"select\"\n          name=\"tierType\"\n          value={bbbPlan}\n          onChange={handlePlanChange}\n          disabled={isPiiDisabled}\n        >\n          {getBbbPlanOptions()}\n        </Form.Control>\n      </Form.Group>\n\n      <Hyperlink\n        destination={getConfig().BBB_LEARN_MORE_URL}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        showLaunchIcon\n        className=\"text-primary-500 pt-2\"\n      >\n        { intl.formatMessage(messages.learnMore, { providerName: 'plans' }) }\n      </Hyperlink>\n      <>\n        <AppConfigFormDivider thick marginAdj={{ default: 0, sm: 2 }} />\n        {isPiiDisabled ? (\n          <p data-testid=\"help-request-pii-sharing\">\n            {intl.formatMessage(messages.piiSharingEnableHelpTextBbb)}\n          </p>\n        ) : (\n          <>\n            {bbbPlan === bbbPlanTypes.commercial && <LiveCommonFields values={values} />}\n            {bbbPlan === bbbPlanTypes.free && (\n              <span data-testid=\"free-plan-message\">\n                {intl.formatMessage(messages.freePlanMessage)}\n                <Hyperlink\n                  destination=\"https://bigbluebutton.org/privacy-policy/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  showLaunchIcon\n                  className=\"text-gray-700 ml-1\"\n                >\n                  {intl.formatMessage(messages.privacyPolicy)}\n                </Hyperlink>\n              </span>\n            )}\n          </>\n        )}\n      </>\n    </>\n\n  );\n};\n\nBbbSettings.propTypes = {\n  intl: intlShape.isRequired,\n  values: PropTypes.shape({\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    launchUrl: PropTypes.string,\n    launchEmail: PropTypes.string,\n    provider: PropTypes.string,\n    piiSharingEmail: PropTypes.bool,\n    piiSharingUsername: PropTypes.bool,\n    piiSharingEnable: PropTypes.bool,\n    tierType: PropTypes.string,\n  }).isRequired,\n  setFieldValue: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(BbbSettings);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { camelCase } from 'lodash';\nimport { SelectableBox, Icon } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport { fetchLiveData, saveLiveConfiguration, saveLiveConfigurationAsDraft } from './data/thunks';\nimport { selectApp } from './data/slice';\nimport AppSettingsModal from '../app-settings-modal/AppSettingsModal';\nimport { useModel } from '../../generic/model-store';\nimport Loading from '../../generic/Loading';\nimport { iconsSrc, bbbPlanTypes } from './constants';\nimport { RequestStatus } from '../../data/constants';\nimport messages from './messages';\nimport ZoomSettings from './ZoomSettings';\nimport BBBSettings from './BBBSettings';\n\nconst LiveSettings = ({\n  intl,\n  onClose,\n}) => {\n  const dispatch = useDispatch();\n  const courseId = useSelector(state => state.courseDetail.courseId);\n  const availableProviders = useSelector((state) => state.live.appIds);\n  const {\n    piiSharingAllowed, selectedAppId, enabled, status,\n  } = useSelector(state => state.live);\n\n  const appConfig = useModel('liveAppConfigs', selectedAppId);\n  const app = useModel('liveApps', selectedAppId);\n\n  const liveConfiguration = {\n    enabled: enabled || false,\n    consumerKey: appConfig?.consumerKey || '',\n    consumerSecret: appConfig?.consumerSecret || '',\n    launchUrl: appConfig?.launchUrl || '',\n    launchEmail: appConfig?.launchEmail || '',\n    provider: selectedAppId || 'zoom',\n    piiSharingEnable: piiSharingAllowed || false,\n    piiSharingUsername: app?.piiSharing?.username || false,\n    piiSharingEmail: app?.piiSharing?.email || false,\n    tierType: appConfig?.tierType || '',\n  };\n\n  const validationSchema = {\n    enabled: Yup.boolean(),\n    consumerKey: Yup.string().when(['provider', 'tierType'], {\n      is: (provider, tier) => provider === 'zoom' || (provider === 'big_blue_button' && tier === bbbPlanTypes.commercial),\n      then: Yup.string().required(intl.formatMessage(messages.consumerKeyRequired)),\n    }),\n    consumerSecret: Yup.string().when(['provider', 'tierType'], {\n      is: (provider, tier) => provider === 'zoom' || (provider === 'big_blue_button' && tier === bbbPlanTypes.commercial),\n      then: Yup.string().notRequired(intl.formatMessage(messages.consumerSecretRequired)),\n    }),\n    launchUrl: Yup.string().when(['provider', 'tierType'], {\n      is: (provider, tier) => provider === 'zoom' || (provider === 'big_blue_button' && tier === bbbPlanTypes.commercial),\n      then: Yup.string().required(intl.formatMessage(messages.launchUrlRequired)),\n    }),\n    launchEmail: Yup.string(),\n  };\n\n  const handleProviderChange = (providerId, setFieldValue, values) => {\n    dispatch(saveLiveConfigurationAsDraft(values));\n    dispatch(selectApp({ appId: providerId }));\n    setFieldValue('provider', providerId);\n  };\n\n  const handleSettingsSave = async (values) => {\n    await dispatch(saveLiveConfiguration(courseId, values));\n  };\n\n  useEffect(() => {\n    dispatch(fetchLiveData(courseId));\n  }, [courseId]);\n\n  return (\n    <AppSettingsModal\n      appId=\"live\"\n      title={intl.formatMessage(messages.heading)}\n      enableAppHelp={intl.formatMessage(messages.enableLiveHelp)}\n      enableAppLabel={intl.formatMessage(messages.enableLiveLabel)}\n      learnMoreText={intl.formatMessage(messages.enableLiveLink)}\n      onClose={onClose}\n      initialValues={liveConfiguration}\n      validationSchema={validationSchema}\n      onSettingsSave={handleSettingsSave}\n      configureBeforeEnable\n      enableReinitialize\n    >\n      {({ values, setFieldValue }) => (\n        (status === RequestStatus.IN_PROGRESS) ? (\n          <Loading />\n        ) : (\n          <>\n            <h4 className=\"my-3\">{intl.formatMessage(messages.selectProvider)}</h4>\n            <SelectableBox.Set\n              type=\"checkbox\"\n              value={values.provider}\n              onChange={(event) => handleProviderChange(event.target.value, setFieldValue, values)}\n              name=\"provider\"\n              columns={3}\n              className=\"mb-3\"\n            >\n              {availableProviders.map((provider) => (\n                <SelectableBox value={provider} type=\"checkbox\" key={provider}>\n                  <div className=\"d-flex flex-column align-items-center\">\n                    <Icon src={iconsSrc[`${camelCase(provider)}`]} alt={provider} />\n                    <span>{intl.formatMessage(messages[`appName-${camelCase(provider)}`])}</span>\n                  </div>\n                </SelectableBox>\n              ))}\n            </SelectableBox.Set>\n            {values.provider === 'zoom' ? <ZoomSettings values={values} />\n              : (\n                <BBBSettings\n                  values={values}\n                  setFieldValue={setFieldValue}\n                />\n              )}\n          </>\n        )\n      )}\n    </AppSettingsModal>\n  );\n};\n\nLiveSettings.propTypes = {\n  intl: intlShape.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(LiveSettings);\n"],"names":["defineMessages","cancel","id","defaultMessage","save","saving","saved","retry","enabled","disabled","errorSavingTitle","errorSavingMessage","AppSettingsForm","_ref","formikProps","children","showForm","_jsx","TransitionReplace","React","propTypes","PropTypes","defaultProps","AppSettingsModalBase","_ref2","intl","title","onClose","variant","isMobile","footer","_jsxs","ModalDialog","isOpen","size","hasCloseButton","isFullscreenOnMobile","className","ActionRow","formatMessage","messages","intlShape","isRequired","AppSettingsModal","_ref3","appId","configureBeforeEnable","initialValues","validationSchema","onSettingsSave","enableAppLabel","enableAppHelp","learnMoreText","enableReinitialize","hideAppToggle","courseId","useContext","PagesAndResourcesContext","loadingStatus","useSelector","getLoadingStatus","updateSettingsRequestStatus","getSavingStatus","alertRef","useRef","saveError","setSaveError","useState","appInfo","useModel","dispatch","useDispatch","submitButtonState","RequestStatus","useIsMobile","modalVariant","useEffect","updateSavingStatus","status","handleFormikSubmit","_ref4","handleSubmit","errors","async","event","Object","keys","length","current","scrollIntoView","learnMoreLink","documentationLinks","learnMoreConfiguration","Hyperlink","destination","target","rel","Formik","_objectSpread","Yup","shape","onSubmit","success","values","updateAppStatus","Form","StatefulButton","labels","default","pending","complete","state","onClick","Alert","icon","Info","ref","message","FormSwitchGroup","name","onChange","handleChange","onBlur","handleBlur","checked","label","Badge","helpText","AppConfigFormDivider","marginAdj","sm","Loading","ConnectionErrorAlert","PermissionDeniedAlert","injectIntl","iconsSrc","googleMeet","GoogleMeet","microsoftTeams","MicrosoftTeams","zoom","Zoom","bigBlueButton","Bbb","providerNames","big_blue_button","bbbPlanTypes","free","commercial","ensureConfig","apiBaseUrl","getConfig","STUDIO_BASE_URL","providersApiUrl","providerConfigurationApiUrl","normalizeLtiConfig","data","consumerKey","lti_1p1_client_key","consumerSecret","lti_1p1_client_secret","launchUrl","lti_1p1_launch_url","launchEmail","lti_config","additional_parameters","custom_instructor_email","tierType","normalizeSettings","tier","provider_type","free_tier","piiSharingAllowed","pii_sharing_allowed","appConfig","lti_configuration","deNormalizeSettings","ltiConfiguration","provider","version","undefined","piiSharingEnable","Boolean","updateLiveSettingsState","liveSettings","_objectWithoutProperties","_excluded","addModel","modelType","model","loadApps","fetchLiveData","updateStatus","activeAppId","selectedAppId","apps","getAuthenticatedHttpClient","get","entries","providers","available","map","key","app","featureIds","features","piiSharing","pii_sharing","hasFreeTier","has_free_tier","active","normalizeProviders","getLiveProviders","addModels","models","appIds","fetchLiveProviders","settings","getLiveConfiguration","fetchLiveConfiguration","error","response","heading","description","enableLiveLabel","enableLiveHelp","enableLiveLink","saveButton","savingButton","savedButton","selectProvider","formInstructions","consumerKeyRequired","consumerSecretRequired","launchUrlRequired","launchEmailRequired","providerHelperText","requestPiiSharingEnable","general","accessibility","configuration","learnMore","linkTextHeading","linkText","requestPiiSharingEnableForBbb","piiSharingEnableHelpTextBbb","freePlanMessage","privacyPolicy","LiveCommonFields","_Fragment","FormikControl","value","floatingLabel","type","ZoomSettings","piiSharingEmail","piiSharingUsername","providerName","BbbSettings","setFieldValue","bbbPlan","setBbbPlan","isPiiDisabled","controlId","as","FormattedMessage","e","options","push","option","getBbbPlanOptions","BBB_LEARN_MORE_URL","showLaunchIcon","thick","LiveSettings","courseDetail","availableProviders","live","liveConfiguration","username","email","when","is","then","required","notRequired","config","updateSaveStatus","post","postLiveConfiguration","history","saveLiveConfiguration","SelectableBox","handleProviderChange","providerId","_normalizeSettings","_excluded2","updateModel","saveLiveConfigurationAsDraft","selectApp","columns","Icon","src","camelCase","alt","BBBSettings"],"sourceRoot":""}