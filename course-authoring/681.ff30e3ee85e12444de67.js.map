{"version":3,"file":"681.ff30e3ee85e12444de67.js","mappings":"4fAEA,MAiHA,GAjHiBA,E,SAAAA,IAAe,CAC9B,0BAA2B,CACzBC,GAAI,0BACJC,eAAgB,KAChBC,YAAa,2CAEf,2BAA4B,CAC1BF,GAAI,2BACJC,eAAgB,MAChBC,YAAa,4CAEf,oCAAqC,CACnCF,GAAI,oCACJC,eAAgB,eAChBC,YAAa,qCAEf,kDAAmD,CACjDF,GAAI,kDACJC,eAAgB,kBAChBC,YAAa,iDAEf,iDAAkD,CAChDF,GAAI,iDACJC,eAAgB,uDAChBC,YAAa,qDAEf,+BAAgC,CAC9BF,GAAI,+BACJC,eAAgB,UAChBC,YAAa,gDAEf,kCAAmC,CACjCF,GAAI,kCACJC,eAAgB,8BAChBC,YAAa,oDAEf,sCAAuC,CACrCF,GAAI,sCACJC,eAAgB,sBAChBC,YAAa,qDAEf,qCAAsC,CACpCF,GAAI,qCACJC,eAAgB,sEAChBC,YAAa,kDAEf,sDAAuD,CACrDF,GAAI,sDACJC,eAAgB,kEAChBC,YAAa,yGAEf,6CAA8C,CAC5CF,GAAI,6CACJC,eAAgB,gCAChBC,YAAa,yCAEf,4CAA6C,CAC3CF,GAAI,4CACJC,eAAgB,gHAChBC,YAAa,gDAEf,mDAAoD,CAClDF,GAAI,mDACJC,eAAgB,oGAChBC,YAAa,mDAEf,qDAAsD,CACpDF,GAAI,qDACJC,eAAgB,mFAChBC,YAAa,6CAEf,yCAA0C,CACxCF,GAAI,yCACJC,eAAgB,6DAChBC,YAAa,6DAEf,2CAA4C,CAC1CF,GAAI,2CACJC,eAAgB,iDAChBC,YAAa,mDAEf,oCAAqC,CACnCF,GAAI,oCACJC,eAAgB,iCAChBC,YAAa,uDAEf,sCAAuC,CACrCF,GAAI,sDACJC,eAAgB,+CAChBC,YAAa,gDAEf,4BAA6B,CAC3BF,GAAI,4BACJC,eAAgB,OAChBC,YAAa,uCAEf,8BAA+B,CAC7BF,GAAI,8BACJC,eAAgB,YAChBC,YAAa,qDAEf,8BAA+B,CAC7BF,GAAI,8BACJC,eAAgB,SAChBC,YAAa,kDAEf,wCAAyC,CACvCF,GAAI,wCACJC,eAAgB,mCAChBC,YAAa,gD,o/BCrFjB,MAAMC,EAAqBC,IAAuB,IAAtB,KAAEC,EAAI,QAAEC,GAASF,EAC3C,MAOOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAPV,CACxBC,sBAAsB,EACtBC,oBAAoB,EACpBC,4BAA6B,GAC7BC,gBAAgB,EAChBC,sBAAsB,KAGjBC,EAASC,IAAcP,EAAAA,EAAAA,WAAS,IAChCQ,EAAQC,IAAaT,EAAAA,EAAAA,WAAS,IAC9BU,EAAwBC,IAA6BX,EAAAA,EAAAA,WAAS,IAC9DY,EAAwBC,IAA6Bb,EAAAA,EAAAA,WAAS,IAC9Dc,EAAmBC,IAAwBf,EAAAA,EAAAA,WAAS,IACpDgB,EAA8BC,IAAmCjB,EAAAA,EAAAA,UAAS,KAC1EkB,EAAwBC,IAA6BnB,EAAAA,EAAAA,UAAS,KAC9DoB,EAAiBC,IAAsBrB,EAAAA,EAAAA,UAAS,KAChDsB,EAAaC,IAAkBvB,EAAAA,EAAAA,WAAS,IACxCwB,EAAWC,IAAgBzB,EAAAA,EAAAA,WAAS,IACpC0B,EAAsBC,IAA2B3B,EAAAA,EAAAA,WAAS,IAC1D4B,EAAiCC,KAAsC7B,EAAAA,EAAAA,WAAS,GACjF8B,IAAaC,EAAAA,EAAAA,MAAuBC,eACnCC,GAAYC,KAAiBlC,EAAAA,EAAAA,UAAS,CAC3CmC,SAAS,EACTC,OAAQ,CAAC,IAELC,IAAWC,EAAAA,EAAAA,MACXC,GAAeF,GAAW,OAAS,WAEnC,SAAEG,KAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAC1BC,IAAUC,EAAAA,EAAAA,IAAS,aAAc,cACjCC,GAAWC,EAAAA,YACXC,GAAqBD,EAAAA,YACrBE,IAAoCC,EAAAA,EAAAA,QAAO,MAC3CC,GAAoBxB,EAAuB,UAAY,UAEvDyB,GAAgBC,IACpB,MAAM,OAAEC,GAAWD,EACbE,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,OAC7D,KAAEG,GAASJ,EAEjB,GAAI,CAAC,iBAAkB,wBAAwBK,SAASD,GAEtD1D,EAAa4D,EAAAA,EAAC,CAAC,EAAI7D,GAAU,IAAE,CAAC2D,GAAiB,SAAVH,UAClC,GAAa,uBAATG,EAA+B,CACxC,MAAMG,EAAaD,EAAAA,EAAA,GAAQ7D,GAAU,IAAEI,mBAAoBoD,IAE7C,iBAAVA,GACFvD,EAAa4D,EAAAA,EAAC,CAAC,EAAIC,GAAa,IAAEvD,sBAAsB,KACxDwB,IAAmC,KAGjC9B,EADY,oBAAVuD,EACWK,EAAAA,EAAC,CAAC,EAAIC,GAAa,IAAEvD,sBAAsB,IAE1CuD,GAGhB/B,IAAmC,GAEvC,MACE9B,EAAa4D,EAAAA,EAAC,CAAC,EAAI7D,GAAU,IAAE,CAAC2D,GAAOH,IACzC,EAGF,SAASO,GAAcC,GACrB,OAAO5C,EAAuB6C,MAAKC,GAAKA,EAAEP,OAASK,GACrD,CAEA,MAAMG,GAA6CA,KAC7CjB,IAAqCA,GAAkCkB,SACzElB,GAAkCkB,QAAQC,OAC5C,EA2FF,SAASC,KACP,MAAMC,EAAcC,IAAOA,OAAUC,OAAO,4BAI5C,OAAQzC,IAHmBuC,EAAcjD,CAI3C,CAEA,SAASoD,GAAiBV,GACxB,IAAIW,GAAe,EAInB,OAHIL,OACFK,EAAeX,IAAahE,EAAWI,oBAElCuE,CACT,CAEA,SAASC,GAAwBZ,GAE/B,OAAO5C,EAAuByD,MAAKX,GAAKA,EAAEP,OAASK,KAAWc,cAAgBd,CAChF,CA8BA,MAAMe,GAAgBlC,GAAQmC,oBAAoBC,yBAChDC,EAAAA,EAAAA,KAACC,EAAAA,GAAS,CACRC,UAAU,mBACVC,YAAaxC,GAAQmC,mBAAmBC,uBACxC1B,OAAO,SACP+B,IAAI,sBAAqBC,SAExBzF,EAAK0F,cAAcC,EAAAA,sCAqTxB,OA9EAC,EAAAA,EAAAA,YAAU,KACRC,QAAQC,IAAI,CACVC,EAAAA,EAAAA,6BAA8CnD,IAC9CoD,EAAAA,EAAAA,cAAgCA,EAAAA,EAAAA,2BAA2CpD,IAAYiD,QAAQI,UAC/FD,EAAAA,EAAAA,cAAgCA,EAAAA,EAAAA,wBAA0CH,QAAQI,YAEjFC,MACCC,IAAkE,IAAhEC,EAAkBC,EAAoBC,GAAqBH,EAC3D,MAAMI,EAAwBH,EAAiBI,KAAKC,wBACpD5F,GAAU,GACVF,GAAW,GACXoB,GAAwB,GACxBN,EAAmB2E,EAAiBI,KAAKE,mBACzC,MAAMC,EAA+D,iBAA9CJ,EAAsBK,oBAC7C3E,GAAmC0E,GACnCtF,EAAgC+E,EAAiBI,KAAKK,gCACtD,MAAMC,EAA4BP,EAAsBQ,4BAMlDC,EAA4BZ,EAAiBI,KAAKK,+BAClDI,EAAyBX,GAAsBE,MAAQ,GACvDU,EAAqBF,EAA0BlD,SAAS,gBAC9D3C,EAAqB+F,GACrB3F,EAA0B0F,GAE1B,IASIE,EATAC,EAAqBJ,EAA0BK,QAAO3D,GAAmB,iBAAVA,IAC/DwD,IACFE,EAAqBH,EAAuBK,QAC1C,CAACC,EAAQrD,IAAa,IAAIqD,EAAQrD,EAASL,OAC3CuD,IAGJ/F,EAAgC+F,GAI9BD,EADgD,iBAA9CZ,EAAsBK,oBACLP,EAAmBG,KAAKtC,SAExBqC,EAAsBK,oBAE3CzG,EAAa4D,EAAAA,EAAC,CAAC,EACV7D,GAAU,IACbI,mBAAoB6G,EACpB9G,qBAAsBkG,EAAsBiB,uBAC5ChH,eAAgB+F,EAAsBkB,yBACtChH,qBAAsB8F,EAAsBmB,uBAI5CnH,4BAA2D,OAA9BuG,EAAqC,GAAKA,IACvE,IAEJa,OACAC,IACiC,MAA3BA,EAAMC,UAAUC,OAClB7G,GAA0B,GAE1BF,GAA0B,GAE5BJ,GAAW,GACXE,GAAU,GACVkB,GAAwB,EAAM,GAEjC,GACF,KAEH6D,EAAAA,EAAAA,YAAU,MACHlE,GAAeE,IAAgBuB,GAAmBmB,SACrDnB,GAAmBmB,QAAQC,SAExBlC,GAAWE,SAAaU,GAASqB,SACpCrB,GAASqB,QAAQC,OACnB,GACC,CAAClC,GAAYX,EAAaE,KAG3BwD,EAAAA,EAAAA,KAAC2C,EAAAA,EAAW,CACVC,MAAM,sBACNC,QAAM,EACNhI,QAASA,EACTiI,KAAK,KACLC,QAASxF,GACTyF,eAAgB3F,GAChB4F,oBAAkB,EAClBC,sBAAoB,EAAA7C,UAEpB8C,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,SAvaYjF,IAEpB,GADAA,EAAMkF,iBAE8B,iBAAlCxI,EAAWI,oBACPqI,EAAAA,SAAwBzI,EAAWK,8BACS,KAA3CL,EAAWK,8BAAuCL,EAAWG,qBA+B7D,EA7ET,WACE,MAAMuI,EAAgB3E,GAAc/D,EAAWI,oBACzCuI,EAAuB,CAC3BpC,wBAAyB,CACvBe,uBAAwBtH,EAAWG,qBAEnCuG,oBAAqBgC,EAAgB,eAAiB1I,EAAWI,mBACjEoH,uBAAwBxH,EAAWO,uBAGnCyB,KACF2G,EAAqBpC,wBAAwBgB,yBAA2BvH,EAAWM,gBAG/C,iBAAlCN,EAAWI,qBACbuI,EAAqBpC,wBAAwBM,4BAAyE,KAA3C7G,EAAWK,4BAAqC,KAAOL,EAAWK,6BAI/IwB,GAAwB,GACxB,MAAM+G,EAAiB,CAAC/C,EAAAA,EAAAA,8BAA+CnD,GAAUiG,IAC7E3H,GAAqB8E,EAAAA,EAAAA,eACvB8C,EAAeC,KACb/C,EAAAA,EAAAA,4BACEpD,GACA,CAAEsB,SAAU0E,EAAgB1I,EAAWI,mBAAqB,QAIlEuF,QAAQC,IAAIgD,GACT5C,MAAK,KACJvE,GAAe,GACfE,GAAa,GACbE,GAAwB,EAAM,IAC7B4F,OAAM,KACPhG,GAAe,GACfE,GAAa,GACbE,GAAwB,EAAM,GAEpC,CAuCIiH,GACA,MAAMxG,EAAMuB,EAAA,GAAQ1B,GAAWG,eACxBA,EAAOyG,gCACd3G,GAAc,CACZC,SAAS,EACTC,UAEJ,MArCE,GAA+C,KAA3CtC,EAAWK,4BAAoC,CACjD,MAAM2I,EAAelJ,EAAK0F,cAAcC,EAAAA,qDAExCrD,GAAc,CACZC,SAAS,EACTC,OAAQ,CACNyG,gCAAiC,CAC/BE,oBACE/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAAA,KAAU,CAACC,QAAShF,GAA4CiF,KAAK,mCAAmC,cAAY,uCAAsC7D,SACxJyD,IAGLK,kBAAmBL,KAI3B,KAAO,CACL,MAAMA,EAAelJ,EAAK0F,cAAcC,EAAAA,uDAExCrD,GAAc,CACZC,SAAS,EACTC,OAAQ,CACNyG,gCAAiC,CAC/BE,oBAAqB/D,EAAAA,EAAAA,KAACgE,EAAAA,EAAAA,KAAU,CAACC,QAAShF,GAA4CiF,KAAK,mCAAmC,cAAY,uCAAsC7D,SAAEyD,IAClLK,kBAAmBL,KAI3B,CASF,EA2XgC,cAAY,iBAAgBzD,SAAA,EACxDL,EAAAA,EAAAA,KAAC2C,EAAAA,EAAAA,OAAkB,CAAAtC,UACjBL,EAAAA,EAAAA,KAAC2C,EAAAA,EAAAA,MAAiB,CAAAtC,SAAC,+BAIrB8C,EAAAA,EAAAA,MAACR,EAAAA,EAAAA,KAAgB,CAAAtC,SAAA,CACd/E,GAzKL0E,EAAAA,EAAAA,KAACoE,EAAAA,EAAO,IAyKyB,KAC5B9H,EA1JT,WACE,MAAM+H,EAAqB1D,EAAAA,EAAAA,sBAAuCnD,IAClE,OACEwC,EAAAA,EAAAA,KAACgE,EAAAA,EAAK,CACJjB,QAAQ,UACR,cAAY,cACZuB,SAAS,KACTC,IAAKxG,GACLlD,QAASA,IAAM0B,GAAe,GAC9BiI,aAAW,EAAAnE,UAEXL,EAAAA,EAAAA,KAACyE,EAAAA,EAAgB,CACflK,GAAG,qCACHC,eAAiB,8FAGjBkK,OAAQ,CACNL,oBACErE,EAAAA,EAAAA,KAACgE,EAAAA,EAAAA,KAAU,CAACE,KAAMG,EAAmBhE,SAClCzF,EAAK0F,cAAcC,EAAAA,gDAOlC,CAgIuBoE,GAAsB,KACpCnI,GA7HLwD,EAAAA,EAAAA,KAACgE,EAAAA,EAAK,CACJjB,QAAQ,SACR,cAAY,YACZuB,SAAS,KACTC,IAAKxG,GACLlD,QAASA,IAAM4B,GAAa,GAC5B+H,aAAW,EAAAnE,UAEXL,EAAAA,EAAAA,KAACyE,EAAAA,EAAgB,CACflK,GAAG,qCACHC,eAAiB,+QAKjBkK,OAAQ,CACNE,cACE5E,EAAAA,EAAAA,KAACgE,EAAAA,EAAAA,KAAU,CAACE,MAAMW,EAAAA,EAAAA,MAAYC,YAAYzE,SACvCzF,EAAK0F,cAAcC,EAAAA,6CA2GO,KAChC/E,GApUL2H,EAAAA,EAAAA,MAAA4B,EAAAA,SAAA,CAAA1E,SAAA,EACIpD,GAAWE,SAAWF,GAAWG,OAAOyG,kCAGtC7D,EAAAA,EAAAA,KAACgE,EAAAA,EAAK,CACJzJ,GAAG,mCACHwI,QAAQ,SACRuB,SAAS,KACT,cAAY,mCACZC,IAAK1G,GAASwC,SArC1B,WACE,MAAM2E,EAAcC,OAAOC,KAAKjI,GAAWG,QAAQ+H,OAC7C/H,EAAS6H,OAAOG,QAAQnI,GAAWG,QAAQiI,KAAIC,IAAA,IAAE/K,EAAIiI,GAAM8C,EAAA,OAAKtF,EAAAA,EAAAA,KAAA,MAAAK,SAAcmC,EAAMuB,oBAAXxJ,EAAmC,IAC5GgL,EAAYP,EAAc,EAAI,sCAAwC,oCAE5E,OACE7B,EAAAA,EAAAA,MAAA4B,EAAAA,SAAA,CAAA1E,SAAA,EACEL,EAAAA,EAAAA,KAAA,OAAAK,SAAMzF,EAAK0F,cAAcC,EAASgF,GAAY,CAAEP,mBAChDhF,EAAAA,EAAAA,KAAA,MAAAK,SACGjD,MAIT,CA0BaoI,MAKPxF,EAAAA,EAAAA,KAACyF,EAAAA,EAAe,CACdlL,GAAG,2BACHkE,KAAK,uBACLiH,SAAUvH,GACVK,QAAS1D,EAAWG,qBACpB0K,OACExC,EAAAA,EAAAA,MAAA,OAAKjD,UAAU,4BAA2BG,SAAA,CACvCzF,EAAK0F,cAAcC,EAAAA,oDAElBzF,EAAWG,uBACT+E,EAAAA,EAAAA,KAAC4F,EAAAA,EAAK,CAAC1F,UAAU,OAAO6C,QAAQ,UAAS1C,SACtCzF,EAAK0F,cAAcC,EAAAA,sCAM9BsF,UACE1C,EAAAA,EAAAA,MAAA,OAAA9C,SAAA,EACEL,EAAAA,EAAAA,KAAA,KAAAK,SACGzF,EAAK0F,cAAcC,EAAAA,sDAEtBP,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMG,SAAER,UAM5B/E,EAAWG,uBACXkI,EAAAA,EAAAA,MAAA4B,EAAAA,SAAA,CAAA1E,SAAA,EACEL,EAAAA,EAAAA,KAAA,UACAmD,EAAAA,EAAAA,MAACC,EAAAA,GAAAA,MAAU,CAAC0C,UAAU,yBAAwBzF,SAAA,EAC5CL,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAU,CAAC2C,GAAG,SAAS7F,UAAU,mBAAkBG,SACjDzF,EAAK0F,cAAcC,EAAAA,2CAEtBP,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,QAAY,CACX2C,GAAG,SACHtH,KAAK,qBACLH,MAAOxD,EAAWI,mBAClBwK,SAAUvH,GACV,mBAAiB,6BAA4BkC,UAjGrB2F,GAmGMhK,EAlGnCgK,GAAUX,KAAIvG,IACnBkB,EAAAA,EAAAA,KAAA,UAEE1B,MAAOQ,EACPmH,SAAUzG,GAAiBV,GAC3B,cAAaA,EAASuB,SAErBX,GAAwBZ,IALpBA,SAkGCkB,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,KAAS,CAAC7I,GAAG,6BAA4B8F,SAEtCjB,KACIxE,EAAK0F,cAAcC,EAAAA,wDACnB3F,EAAK0F,cAAcC,EAAAA,+CAQhC3D,GAAmC9B,EAAWG,uBAC7CkI,EAAAA,EAAAA,MAACC,EAAAA,GAAAA,MAAU,CAAC0C,UAAU,kCAAiCzF,SAAA,EACrDL,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAU,CAAClD,UAAU,mBAAkBG,SACrCzF,EAAK0F,cAAcC,EAAAA,kDAEtBP,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,QAAY,CACXmB,IAAKvG,GACLO,KAAK,QACLE,KAAK,8BACL,cAAY,kBACZiH,SAAUvH,GACVG,MAAOxD,EAAWK,4BAClB+K,UAAWjB,OAAOkB,UAAUC,eAAeC,KAAKpJ,GAAWG,OAAQ,mCACnE,mBAAiB,yCAEnB4C,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,KAAS,CAAC7I,GAAG,sCAAqC8F,SAChDzF,EAAK0F,cAAcC,EAAAA,gDAErB0E,OAAOkB,UAAUC,eAAeC,KAAKpJ,GAAWG,OAAQ,qCACvD4C,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,QAAAA,SAAqB,CAAC7E,KAAK,UAAS8B,SAEjCpD,GAAWG,OAAOyG,iCACf5G,GAAWG,OAAOyG,gCAAgCM,uBAQ7DrH,IAAchC,EAAWG,uBACzB+E,EAAAA,EAAAA,KAAA,YAAU,mBAAiB,yBAAwBK,UACjD8C,EAAAA,EAAAA,MAACC,EAAAA,GAAAA,MAAU,CAAC0C,UAAU,wBAAuBzF,SAAA,EAC3CL,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAU,CAAC2C,GAAG,SAAS7F,UAAU,mBAAkBG,SACjDzF,EAAK0F,cAAcC,EAAAA,8CAEtB4C,EAAAA,EAAAA,MAACC,EAAAA,GAAAA,SAAa,CACZ3E,KAAK,iBACLH,MAAOxD,EAAWM,eAAekL,WACjCZ,SAAUvH,GAAakC,SAAA,EAEvBL,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAU,CAAC9E,MAAM,OAAO,cAAY,oBAAmB+B,SACrDzF,EAAK0F,cAAcC,EAAAA,gCAEtBP,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAU,CAAC9E,MAAM,QAAQ,cAAY,mBAAkB+B,SACrDzF,EAAK0F,cAAcC,EAAAA,sCAQ5BzD,IAAchC,EAAWG,uBAAyB4D,GAAc/D,EAAWI,sBAC3E8E,EAAAA,EAAAA,KAAA,YAAU,mBAAiB,2BAA0BK,UACnD8C,EAAAA,EAAAA,MAACC,EAAAA,GAAAA,MAAU,CAAC0C,UAAU,2BAA0BzF,SAAA,EAC9CL,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAU,CAAC2C,GAAG,SAAS7F,UAAU,mBAAkBG,SACjDzF,EAAK0F,cAAcC,EAAAA,gDAEtB4C,EAAAA,EAAAA,MAACC,EAAAA,GAAAA,SAAa,CACZ3E,KAAK,uBACLH,MAAOxD,EAAWO,qBAAqBiL,WACvCZ,SAAUvH,GAAakC,SAAA,EAEvBL,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAU,CAAC9E,MAAM,OAAO,cAAY,0BAAyB+B,SAC3DzF,EAAK0F,cAAcC,EAAAA,gCAEtBP,EAAAA,EAAAA,KAACoD,EAAAA,GAAAA,MAAU,CAAC9E,MAAM,QAAQ,cAAY,yBAAwB+B,SAC3DzF,EAAK0F,cAAcC,EAAAA,yCAwLA,KAC3B7E,GAvKLsE,EAAAA,EAAAA,KAACuG,EAAAA,EAAoB,IAuKmC,KACnD3K,GAlKLoE,EAAAA,EAAAA,KAACwG,EAAAA,EAAqB,IAkKkC,SAEtDxG,EAAAA,EAAAA,KAAC2C,EAAAA,EAAAA,OAAkB,CACjBzC,UAAWuG,IACT,OACApG,UAEF8C,EAAAA,EAAAA,MAACuD,EAAAA,EAAS,CAAArG,SAAA,EACRL,EAAAA,EAAAA,KAAC2C,EAAAA,EAAAA,YAAuB,CAACI,QAAQ,WAAU1C,SACxCzF,EAAK0F,cAAcC,EAAAA,mCAEtBP,EAAAA,EAAAA,KAAC2G,EAAAA,EAAc,CACbC,OAAQ,CACNC,QAASjM,EAAK0F,cAAcC,EAAAA,8BAC5BuG,QAASlM,EAAK0F,cAAcC,EAAAA,iCAE9B9F,YAAY,mBACZ,cAAY,mBACZwL,SAAUvJ,EACVqK,MAAO7I,GACPK,KAAK,qBA5VjB,IAvCsCyH,EAwYtB,EAIlBtL,EAAmBsM,UAAY,CAC7BpM,KAAMqM,EAAAA,GAAAA,WACNpM,QAASqM,IAAAA,KAAAA,YAGXxM,EAAmByM,aAAe,CAAC,EAEnC,SAAeC,EAAAA,EAAAA,GAAW1M,E","sources":["webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/proctoring/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/proctoring/Settings.jsx"],"sourcesContent":["import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'authoring.proctoring.no': {\n    id: 'authoring.proctoring.no',\n    defaultMessage: 'No',\n    description: '\"No\" option for yes/no radio button set',\n  },\n  'authoring.proctoring.yes': {\n    id: 'authoring.proctoring.yes',\n    defaultMessage: 'Yes',\n    description: '\"Yes\" option for proctored exam settings',\n  },\n  'authoring.proctoring.support.text': {\n    id: 'authoring.proctoring.support.text',\n    defaultMessage: 'Support Page',\n    description: 'Text linking to the support page.',\n  },\n  'authoring.proctoring.enableproctoredexams.label': {\n    id: 'authoring.proctoring.enableproctoredexams.label',\n    defaultMessage: 'Proctored exams',\n    description: 'Label for checkbox to enable proctored exams.',\n  },\n  'authoring.proctoring.enableproctoredexams.help': {\n    id: 'authoring.proctoring.enableproctoredexams.help',\n    defaultMessage: 'Enable and configure proctored exams in your course.',\n    description: 'Help text for checkbox to enable proctored exams.',\n  },\n  'authoring.proctoring.enabled': {\n    id: 'authoring.proctoring.enabled',\n    defaultMessage: 'Enabled',\n    description: 'Text describing that the feature is enabled.',\n  },\n  'authoring.proctoring.learn.more': {\n    id: 'authoring.proctoring.learn.more',\n    defaultMessage: 'Learn more about proctoring',\n    description: 'Link to learn more about the proctoring feature.',\n  },\n  'authoring.proctoring.provider.label': {\n    id: 'authoring.proctoring.provider.label',\n    defaultMessage: 'Proctoring provider',\n    description: 'Label for proctoring provider dropdown selection.',\n  },\n  'authoring.proctoring.provider.help': {\n    id: 'authoring.proctoring.provider.help',\n    defaultMessage: 'Select the proctoring provider you want to use for this course run.',\n    description: 'Help text for selecting a proctoring provider.',\n  },\n  'authoring.proctoring.provider.help.aftercoursestart': {\n    id: 'authoring.proctoring.provider.help.aftercoursestart',\n    defaultMessage: 'Proctoring provider cannot be modified after course start date.',\n    description: 'Help text notifying the user that the provider cannot be changed for a course that has already begun.',\n  },\n  'authoring.proctoring.escalationemail.label': {\n    id: 'authoring.proctoring.escalationemail.label',\n    defaultMessage: 'Proctortrack escalation email',\n    description: 'Label for escalation email text field',\n  },\n  'authoring.proctoring.escalationemail.help': {\n    id: 'authoring.proctoring.escalationemail.help',\n    defaultMessage: 'Provide an email address to be contacted by the support team for escalations (e.g. appeals, delayed reviews).',\n    description: 'Help text explaining escalation email field.',\n  },\n  'authoring.proctoring.escalationemail.error.blank': {\n    id: 'authoring.proctoring.escalationemail.error.blank',\n    defaultMessage: 'The Proctortrack Escalation Email field cannot be empty if proctortrack is the selected provider.',\n    description: 'Error message for missing required email field.',\n  },\n  'authoring.proctoring.escalationemail.error.invalid': {\n    id: 'authoring.proctoring.escalationemail.error.invalid',\n    defaultMessage: 'The Proctortrack Escalation Email field is in the wrong format and is not valid.',\n    description: 'Error message for a invalid email format.',\n  },\n  'authoring.proctoring.allowoptout.label': {\n    id: 'authoring.proctoring.allowoptout.label',\n    defaultMessage: 'Allow learners to opt out of proctoring on proctored exams',\n    description: 'Label for radio selection allowing proctored exam opt out',\n  },\n  'authoring.proctoring.createzendesk.label': {\n    id: 'authoring.proctoring.createzendesk.label',\n    defaultMessage: 'Create Zendesk tickets for suspicious attempts',\n    description: 'Label for Zendesk ticket creation radio select.',\n  },\n  'authoring.proctoring.error.single': {\n    id: 'authoring.proctoring.error.single',\n    defaultMessage: 'There is 1 error in this form.',\n    description: 'Error alert for one and only one error in the form.',\n  },\n  'authoring.proctoring.error.multiple': {\n    id: 'authoring.proctoring.escalationemail.error.multiple',\n    defaultMessage: 'There are {numOfErrors} errors in this form.',\n    description: 'Error alert for multiple errors in the form.',\n  },\n  'authoring.proctoring.save': {\n    id: 'authoring.proctoring.save',\n    defaultMessage: 'Save',\n    description: 'Button to save proctoring settings.',\n  },\n  'authoring.proctoring.saving': {\n    id: 'authoring.proctoring.saving',\n    defaultMessage: 'Saving...',\n    description: 'Proctoring settings are in the process of saving.',\n  },\n  'authoring.proctoring.cancel': {\n    id: 'authoring.proctoring.cancel',\n    defaultMessage: 'Cancel',\n    description: 'Button to cancel edits to proctoring settings.',\n  },\n  'authoring.proctoring.studio.link.text': {\n    id: 'authoring.proctoring.studio.link.text',\n    defaultMessage: 'Go back to your course in Studio',\n    description: 'Link to go back to the course Studio page.',\n  },\n});\n\nexport default messages;\n","import React, {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport classNames from 'classnames';\nimport EmailValidator from 'email-validator';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow, Alert, Badge, Form, Hyperlink, ModalDialog, StatefulButton,\n} from '@edx/paragon';\n\nimport ExamsApiService from '../../data/services/ExamsApiService';\nimport StudioApiService from '../../data/services/StudioApiService';\nimport Loading from '../../generic/Loading';\nimport ConnectionErrorAlert from '../../generic/ConnectionErrorAlert';\nimport FormSwitchGroup from '../../generic/FormSwitchGroup';\nimport { useModel } from '../../generic/model-store';\nimport PermissionDeniedAlert from '../../generic/PermissionDeniedAlert';\nimport { useIsMobile } from '../../utils';\nimport { PagesAndResourcesContext } from '../PagesAndResourcesProvider';\nimport messages from './messages';\n\nconst ProctoringSettings = ({ intl, onClose }) => {\n  const initialFormValues = {\n    enableProctoredExams: false,\n    proctoringProvider: false,\n    proctortrackEscalationEmail: '',\n    allowOptingOut: false,\n    createZendeskTickets: false,\n  };\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const [loading, setLoading] = useState(true);\n  const [loaded, setLoaded] = useState(false);\n  const [loadingConnectionError, setLoadingConnectionError] = useState(false);\n  const [loadingPermissionError, setLoadingPermissionError] = useState(false);\n  const [allowLtiProviders, setAllowLtiProviders] = useState(false);\n  const [availableProctoringProviders, setAvailableProctoringProviders] = useState([]);\n  const [ltiProctoringProviders, setLtiProctoringProviders] = useState([]);\n  const [courseStartDate, setCourseStartDate] = useState('');\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [saveError, setSaveError] = useState(false);\n  const [submissionInProgress, setSubmissionInProgress] = useState(false);\n  const [showProctortrackEscalationEmail, setShowProctortrackEscalationEmail] = useState(false);\n  const isEdxStaff = getAuthenticatedUser().administrator;\n  const [formStatus, setFormStatus] = useState({\n    isValid: true,\n    errors: {},\n  });\n  const isMobile = useIsMobile();\n  const modalVariant = isMobile ? 'dark' : 'default';\n\n  const { courseId } = useContext(PagesAndResourcesContext);\n  const appInfo = useModel('courseApps', 'proctoring');\n  const alertRef = React.createRef();\n  const saveStatusAlertRef = React.createRef();\n  const proctoringEscalationEmailInputRef = useRef(null);\n  const submitButtonState = submissionInProgress ? 'pending' : 'default';\n\n  const handleChange = (event) => {\n    const { target } = event;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const { name } = target;\n\n    if (['allowOptingOut', 'createZendeskTickets'].includes(name)) {\n      // Form.Radio expects string values, so convert back to a boolean here\n      setFormValues({ ...formValues, [name]: value === 'true' });\n    } else if (name === 'proctoringProvider') {\n      const newFormValues = { ...formValues, proctoringProvider: value };\n\n      if (value === 'proctortrack') {\n        setFormValues({ ...newFormValues, createZendeskTickets: false });\n        setShowProctortrackEscalationEmail(true);\n      } else {\n        if (value === 'software_secure') {\n          setFormValues({ ...newFormValues, createZendeskTickets: true });\n        } else {\n          setFormValues(newFormValues);\n        }\n\n        setShowProctortrackEscalationEmail(false);\n      }\n    } else {\n      setFormValues({ ...formValues, [name]: value });\n    }\n  };\n\n  function isLtiProvider(provider) {\n    return ltiProctoringProviders.some(p => p.name === provider);\n  }\n\n  const setFocusToProctortrackEscalationEmailInput = () => {\n    if (proctoringEscalationEmailInputRef && proctoringEscalationEmailInputRef.current) {\n      proctoringEscalationEmailInputRef.current.focus();\n    }\n  };\n\n  function postSettingsBackToServer() {\n    const providerIsLti = isLtiProvider(formValues.proctoringProvider);\n    const studioDataToPostBack = {\n      proctored_exam_settings: {\n        enable_proctored_exams: formValues.enableProctoredExams,\n        // lti providers are managed outside edx-platform, lti_external indicates this\n        proctoring_provider: providerIsLti ? 'lti_external' : formValues.proctoringProvider,\n        create_zendesk_tickets: formValues.createZendeskTickets,\n      },\n    };\n    if (isEdxStaff) {\n      studioDataToPostBack.proctored_exam_settings.allow_proctoring_opt_out = formValues.allowOptingOut;\n    }\n\n    if (formValues.proctoringProvider === 'proctortrack') {\n      studioDataToPostBack.proctored_exam_settings.proctoring_escalation_email = formValues.proctortrackEscalationEmail === '' ? null : formValues.proctortrackEscalationEmail;\n    }\n\n    // only save back to exam service if necessary\n    setSubmissionInProgress(true);\n    const saveOperations = [StudioApiService.saveProctoredExamSettingsData(courseId, studioDataToPostBack)];\n    if (allowLtiProviders && ExamsApiService.isAvailable()) {\n      saveOperations.push(\n        ExamsApiService.saveCourseExamConfiguration(\n          courseId,\n          { provider: providerIsLti ? formValues.proctoringProvider : null },\n        ),\n      );\n    }\n    Promise.all(saveOperations)\n      .then(() => {\n        setSaveSuccess(true);\n        setSaveError(false);\n        setSubmissionInProgress(false);\n      }).catch(() => {\n        setSaveSuccess(false);\n        setSaveError(true);\n        setSubmissionInProgress(false);\n      });\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (\n      formValues.proctoringProvider === 'proctortrack'\n      && !EmailValidator.validate(formValues.proctortrackEscalationEmail)\n      && !(formValues.proctortrackEscalationEmail === '' && !formValues.enableProctoredExams)\n    ) {\n      if (formValues.proctortrackEscalationEmail === '') {\n        const errorMessage = intl.formatMessage(messages['authoring.proctoring.escalationemail.error.blank']);\n\n        setFormStatus({\n          isValid: false,\n          errors: {\n            formProctortrackEscalationEmail: {\n              dialogErrorMessage: (\n                <Alert.Link onClick={setFocusToProctortrackEscalationEmailInput} href=\"#formProctortrackEscalationEmail\" data-testid=\"proctorTrackEscalationEmailErrorLink\">\n                  {errorMessage}\n                </Alert.Link>\n              ),\n              inputErrorMessage: errorMessage,\n            },\n          },\n        });\n      } else {\n        const errorMessage = intl.formatMessage(messages['authoring.proctoring.escalationemail.error.invalid']);\n\n        setFormStatus({\n          isValid: false,\n          errors: {\n            formProctortrackEscalationEmail: {\n              dialogErrorMessage: (<Alert.Link onClick={setFocusToProctortrackEscalationEmailInput} href=\"#formProctortrackEscalationEmail\" data-testid=\"proctorTrackEscalationEmailErrorLink\">{errorMessage}</Alert.Link>),\n              inputErrorMessage: errorMessage,\n            },\n          },\n        });\n      }\n    } else {\n      postSettingsBackToServer();\n      const errors = { ...formStatus.errors };\n      delete errors.formProctortrackEscalationEmail;\n      setFormStatus({\n        isValid: true,\n        errors,\n      });\n    }\n  };\n\n  function cannotEditProctoringProvider() {\n    const currentDate = moment(moment()).format('YYYY-MM-DD[T]hh:mm:ss[Z]');\n    const isAfterCourseStart = currentDate > courseStartDate;\n\n    // if the user is not edX staff and it is after the course start date, user cannot edit proctoring provider\n    return !isEdxStaff && isAfterCourseStart;\n  }\n\n  function isDisabledOption(provider) {\n    let markDisabled = false;\n    if (cannotEditProctoringProvider()) {\n      markDisabled = provider !== formValues.proctoringProvider;\n    }\n    return markDisabled;\n  }\n\n  function getProviderDisplayLabel(provider) {\n    // if a display label exists for this provider return it\n    return ltiProctoringProviders.find(p => p.name === provider)?.verbose_name || provider;\n  }\n\n  function getProctoringProviderOptions(providers) {\n    return providers.map(provider => (\n      <option\n        key={provider}\n        value={provider}\n        disabled={isDisabledOption(provider)}\n        data-testid={provider}\n      >\n        {getProviderDisplayLabel(provider)}\n      </option>\n    ));\n  }\n\n  function getFormErrorMessage() {\n    const numOfErrors = Object.keys(formStatus.errors).length;\n    const errors = Object.entries(formStatus.errors).map(([id, error]) => <li key={id}>{error.dialogErrorMessage}</li>);\n    const messageId = numOfErrors > 1 ? 'authoring.proctoring.error.multiple' : 'authoring.proctoring.error.single';\n\n    return (\n      <>\n        <div>{intl.formatMessage(messages[messageId], { numOfErrors })}</div>\n        <ul>\n          {errors}\n        </ul>\n      </>\n    );\n  }\n\n  const learnMoreLink = appInfo.documentationLinks?.learnMoreConfiguration && (\n    <Hyperlink\n      className=\"text-primary-500\"\n      destination={appInfo.documentationLinks.learnMoreConfiguration}\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n    >\n      {intl.formatMessage(messages['authoring.proctoring.learn.more'])}\n    </Hyperlink>\n  );\n\n  function renderContent() {\n    return (\n      <>\n        {!formStatus.isValid && formStatus.errors.formProctortrackEscalationEmail\n          && (\n            // tabIndex=\"-1\" to make non-focusable element focusable\n            <Alert\n              id=\"proctortrackEscalationEmailError\"\n              variant=\"danger\"\n              tabIndex=\"-1\"\n              data-testid=\"proctortrackEscalationEmailError\"\n              ref={alertRef}\n            >\n              {getFormErrorMessage()}\n            </Alert>\n          )}\n\n        {/* ENABLE PROCTORED EXAMS */}\n        <FormSwitchGroup\n          id=\"enable-proctoring-toggle\"\n          name=\"enableProctoredExams\"\n          onChange={handleChange}\n          checked={formValues.enableProctoredExams}\n          label={(\n            <div className=\"d-flex align-items-center\">\n              {intl.formatMessage(messages['authoring.proctoring.enableproctoredexams.label'])}\n              {\n                formValues.enableProctoredExams && (\n                  <Badge className=\"ml-2\" variant=\"success\">\n                    {intl.formatMessage(messages['authoring.proctoring.enabled'])}\n                  </Badge>\n                )\n              }\n            </div>\n          )}\n          helpText={(\n            <div>\n              <p>\n                {intl.formatMessage(messages['authoring.proctoring.enableproctoredexams.help'])}\n              </p>\n              <span className=\"py-3\">{learnMoreLink}</span>\n            </div>\n          )}\n        />\n\n        {/* PROCTORING PROVIDER */}\n        { formValues.enableProctoredExams && (\n          <>\n            <hr />\n            <Form.Group controlId=\"formProctoringProvider\">\n              <Form.Label as=\"legend\" className=\"font-weight-bold\">\n                {intl.formatMessage(messages['authoring.proctoring.provider.label'])}\n              </Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"proctoringProvider\"\n                value={formValues.proctoringProvider}\n                onChange={handleChange}\n                aria-describedby=\"proctoringProviderHelpText\"\n              >\n                {getProctoringProviderOptions(availableProctoringProviders)}\n              </Form.Control>\n              <Form.Text id=\"proctoringProviderHelpText\">\n                {\n                  cannotEditProctoringProvider()\n                    ? intl.formatMessage(messages['authoring.proctoring.provider.help.aftercoursestart'])\n                    : intl.formatMessage(messages['authoring.proctoring.provider.help'])\n                }\n              </Form.Text>\n            </Form.Group>\n          </>\n        )}\n\n        {/* PROCTORTRACK ESCALATION EMAIL */}\n        {showProctortrackEscalationEmail && formValues.enableProctoredExams && (\n          <Form.Group controlId=\"formProctortrackEscalationEmail\">\n            <Form.Label className=\"font-weight-bold\">\n              {intl.formatMessage(messages['authoring.proctoring.escalationemail.label'])}\n            </Form.Label>\n            <Form.Control\n              ref={proctoringEscalationEmailInputRef}\n              type=\"email\"\n              name=\"proctortrackEscalationEmail\"\n              data-testid=\"escalationEmail\"\n              onChange={handleChange}\n              value={formValues.proctortrackEscalationEmail}\n              isInvalid={Object.prototype.hasOwnProperty.call(formStatus.errors, 'formProctortrackEscalationEmail')}\n              aria-describedby=\"proctortrackEscalationEmailHelpText\"\n            />\n            <Form.Text id=\"proctortrackEscalationEmailHelpText\">\n              {intl.formatMessage(messages['authoring.proctoring.escalationemail.help'])}\n            </Form.Text>\n            {Object.prototype.hasOwnProperty.call(formStatus.errors, 'formProctortrackEscalationEmail') && (\n              <Form.Control.Feedback type=\"invalid\">\n                {\n                  formStatus.errors.formProctortrackEscalationEmail\n                  && formStatus.errors.formProctortrackEscalationEmail.inputErrorMessage\n                }\n              </Form.Control.Feedback>\n            )}\n          </Form.Group>\n        )}\n\n        {/* ALLOW OPTING OUT OF PROCTORED EXAMS */}\n        { isEdxStaff && formValues.enableProctoredExams && (\n          <fieldset aria-describedby=\"allowOptingOutHelpText\">\n            <Form.Group controlId=\"formAllowingOptingOut\">\n              <Form.Label as=\"legend\" className=\"font-weight-bold\">\n                {intl.formatMessage(messages['authoring.proctoring.allowoptout.label'])}\n              </Form.Label>\n              <Form.RadioSet\n                name=\"allowOptingOut\"\n                value={formValues.allowOptingOut.toString()}\n                onChange={handleChange}\n              >\n                <Form.Radio value=\"true\" data-testid=\"allowOptingOutYes\">\n                  {intl.formatMessage(messages['authoring.proctoring.yes'])}\n                </Form.Radio>\n                <Form.Radio value=\"false\" data-testid=\"allowOptingOutNo\">\n                  {intl.formatMessage(messages['authoring.proctoring.no'])}\n                </Form.Radio>\n              </Form.RadioSet>\n            </Form.Group>\n          </fieldset>\n        )}\n\n        {/* CREATE ZENDESK TICKETS */}\n        { isEdxStaff && formValues.enableProctoredExams && !isLtiProvider(formValues.proctoringProvider) && (\n          <fieldset aria-describedby=\"createZendeskTicketsText\">\n            <Form.Group controlId=\"formCreateZendeskTickets\">\n              <Form.Label as=\"legend\" className=\"font-weight-bold\">\n                {intl.formatMessage(messages['authoring.proctoring.createzendesk.label'])}\n              </Form.Label>\n              <Form.RadioSet\n                name=\"createZendeskTickets\"\n                value={formValues.createZendeskTickets.toString()}\n                onChange={handleChange}\n              >\n                <Form.Radio value=\"true\" data-testid=\"createZendeskTicketsYes\">\n                  {intl.formatMessage(messages['authoring.proctoring.yes'])}\n                </Form.Radio>\n                <Form.Radio value=\"false\" data-testid=\"createZendeskTicketsNo\">\n                  {intl.formatMessage(messages['authoring.proctoring.no'])}\n                </Form.Radio>\n              </Form.RadioSet>\n            </Form.Group>\n          </fieldset>\n        )}\n      </>\n    );\n  }\n\n  function renderLoading() {\n    return (\n      <Loading />\n    );\n  }\n\n  function renderConnectionError() {\n    return (\n      <ConnectionErrorAlert />\n    );\n  }\n\n  function renderPermissionError() {\n    return (\n      <PermissionDeniedAlert />\n    );\n  }\n\n  function renderSaveSuccess() {\n    const studioCourseRunURL = StudioApiService.getStudioCourseRunUrl(courseId);\n    return (\n      <Alert\n        variant=\"success\"\n        data-testid=\"saveSuccess\"\n        tabIndex=\"-1\"\n        ref={saveStatusAlertRef}\n        onClose={() => setSaveSuccess(false)}\n        dismissible\n      >\n        <FormattedMessage\n          id=\"authoring.proctoring.alert.success\"\n          defaultMessage={`\n            Proctored exam settings saved successfully. {studioCourseRunURL}.\n          `}\n          values={{\n            studioCourseRunURL: (\n              <Alert.Link href={studioCourseRunURL}>\n                {intl.formatMessage(messages['authoring.proctoring.studio.link.text'])}\n              </Alert.Link>\n            ),\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  function renderSaveError() {\n    return (\n      <Alert\n        variant=\"danger\"\n        data-testid=\"saveError\"\n        tabIndex=\"-1\"\n        ref={saveStatusAlertRef}\n        onClose={() => setSaveError(false)}\n        dismissible\n      >\n        <FormattedMessage\n          id=\"authoring.examsettings.alert.error\"\n          defaultMessage={`\n            We encountered a technical error while trying to save proctored exam settings.\n            This might be a temporary issue, so please try again in a few minutes.\n            If the problem persists, please go to the {support_link} for help.\n          `}\n          values={{\n            support_link: (\n              <Alert.Link href={getConfig().SUPPORT_URL}>\n                {intl.formatMessage(messages['authoring.proctoring.support.text'])}\n              </Alert.Link>\n            ),\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  useEffect(() => {\n    Promise.all([\n      StudioApiService.getProctoredExamSettingsData(courseId),\n      ExamsApiService.isAvailable() ? ExamsApiService.getCourseExamConfiguration(courseId) : Promise.resolve(),\n      ExamsApiService.isAvailable() ? ExamsApiService.getAvailableProviders() : Promise.resolve(),\n    ])\n      .then(\n        ([settingsResponse, examConfigResponse, ltiProvidersResponse]) => {\n          const proctoredExamSettings = settingsResponse.data.proctored_exam_settings;\n          setLoaded(true);\n          setLoading(false);\n          setSubmissionInProgress(false);\n          setCourseStartDate(settingsResponse.data.course_start_date);\n          const isProctortrack = proctoredExamSettings.proctoring_provider === 'proctortrack';\n          setShowProctortrackEscalationEmail(isProctortrack);\n          setAvailableProctoringProviders(settingsResponse.data.available_proctoring_providers);\n          const proctoringEscalationEmail = proctoredExamSettings.proctoring_escalation_email;\n\n          // The list of providers returned by studio settings are the default behavior. If lti_external\n          // is available as an option display the list of LTI providers returned by the exam service.\n          // Setting 'lti_external' in studio indicates an LTI provider configured outside of edx-platform.\n          // This option is not directly selectable.\n          const proctoringProvidersStudio = settingsResponse.data.available_proctoring_providers;\n          const proctoringProvidersLti = ltiProvidersResponse?.data || [];\n          const enableLtiProviders = proctoringProvidersStudio.includes('lti_external');\n          setAllowLtiProviders(enableLtiProviders);\n          setLtiProctoringProviders(proctoringProvidersLti);\n          // flatten provider objects and coalesce values to just the provider key\n          let availableProviders = proctoringProvidersStudio.filter(value => value !== 'lti_external');\n          if (enableLtiProviders) {\n            availableProviders = proctoringProvidersLti.reduce(\n              (result, provider) => [...result, provider.name],\n              availableProviders,\n            );\n          }\n          setAvailableProctoringProviders(availableProviders);\n\n          let selectedProvider;\n          if (proctoredExamSettings.proctoring_provider === 'lti_external') {\n            selectedProvider = examConfigResponse.data.provider;\n          } else {\n            selectedProvider = proctoredExamSettings.proctoring_provider;\n          }\n          setFormValues({\n            ...formValues,\n            proctoringProvider: selectedProvider,\n            enableProctoredExams: proctoredExamSettings.enable_proctored_exams,\n            allowOptingOut: proctoredExamSettings.allow_proctoring_opt_out,\n            createZendeskTickets: proctoredExamSettings.create_zendesk_tickets,\n            // The backend API may return null for the proctoringEscalationEmail value, which is the default.\n            // In order to keep our email input component controlled, we use the empty string as the default\n            // and perform this conversion during GETs and POSTs.\n            proctortrackEscalationEmail: proctoringEscalationEmail === null ? '' : proctoringEscalationEmail,\n          });\n        },\n      ).catch(\n        error => {\n          if (error.response?.status === 403) {\n            setLoadingPermissionError(true);\n          } else {\n            setLoadingConnectionError(true);\n          }\n          setLoading(false);\n          setLoaded(false);\n          setSubmissionInProgress(false);\n        },\n      );\n  }, []);\n\n  useEffect(() => {\n    if ((saveSuccess || saveError) && !!saveStatusAlertRef.current) {\n      saveStatusAlertRef.current.focus();\n    }\n    if (!formStatus.isValid && !!alertRef.current) {\n      alertRef.current.focus();\n    }\n  }, [formStatus, saveSuccess, saveError]);\n\n  return (\n    <ModalDialog\n      title=\"Proctoring Settings\"\n      isOpen\n      onClose={onClose}\n      size=\"lg\"\n      variant={modalVariant}\n      hasCloseButton={isMobile}\n      isFullscreenScroll\n      isFullscreenOnMobile\n    >\n      <Form onSubmit={handleSubmit} data-testid=\"proctoringForm\">\n        <ModalDialog.Header>\n          <ModalDialog.Title>\n            Proctored Exam Settings\n          </ModalDialog.Title>\n        </ModalDialog.Header>\n        <ModalDialog.Body>\n          {loading ? renderLoading() : null}\n          {saveSuccess ? renderSaveSuccess() : null}\n          {saveError ? renderSaveError() : null}\n          {loaded ? renderContent() : null}\n          {loadingConnectionError ? renderConnectionError() : null}\n          {loadingPermissionError ? renderPermissionError() : null}\n        </ModalDialog.Body>\n        <ModalDialog.Footer\n          className={classNames(\n            'p-4',\n          )}\n        >\n          <ActionRow>\n            <ModalDialog.CloseButton variant=\"tertiary\">\n              {intl.formatMessage(messages['authoring.proctoring.cancel'])}\n            </ModalDialog.CloseButton>\n            <StatefulButton\n              labels={{\n                default: intl.formatMessage(messages['authoring.proctoring.save']),\n                pending: intl.formatMessage(messages['authoring.proctoring.saving']),\n              }}\n              description=\"Form save button\"\n              data-testid=\"submissionButton\"\n              disabled={submissionInProgress}\n              state={submitButtonState}\n              type=\"submit\"\n            />\n          </ActionRow>\n        </ModalDialog.Footer>\n      </Form>\n    </ModalDialog>\n  );\n};\n\nProctoringSettings.propTypes = {\n  intl: intlShape.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nProctoringSettings.defaultProps = {};\n\nexport default injectIntl(ProctoringSettings);\n"],"names":["defineMessages","id","defaultMessage","description","ProctoringSettings","_ref","intl","onClose","formValues","setFormValues","useState","enableProctoredExams","proctoringProvider","proctortrackEscalationEmail","allowOptingOut","createZendeskTickets","loading","setLoading","loaded","setLoaded","loadingConnectionError","setLoadingConnectionError","loadingPermissionError","setLoadingPermissionError","allowLtiProviders","setAllowLtiProviders","availableProctoringProviders","setAvailableProctoringProviders","ltiProctoringProviders","setLtiProctoringProviders","courseStartDate","setCourseStartDate","saveSuccess","setSaveSuccess","saveError","setSaveError","submissionInProgress","setSubmissionInProgress","showProctortrackEscalationEmail","setShowProctortrackEscalationEmail","isEdxStaff","getAuthenticatedUser","administrator","formStatus","setFormStatus","isValid","errors","isMobile","useIsMobile","modalVariant","courseId","useContext","PagesAndResourcesContext","appInfo","useModel","alertRef","React","saveStatusAlertRef","proctoringEscalationEmailInputRef","useRef","submitButtonState","handleChange","event","target","value","type","checked","name","includes","_objectSpread","newFormValues","isLtiProvider","provider","some","p","setFocusToProctortrackEscalationEmailInput","current","focus","cannotEditProctoringProvider","currentDate","moment","format","isDisabledOption","markDisabled","getProviderDisplayLabel","find","verbose_name","learnMoreLink","documentationLinks","learnMoreConfiguration","_jsx","Hyperlink","className","destination","rel","children","formatMessage","messages","useEffect","Promise","all","StudioApiService","ExamsApiService","resolve","then","_ref3","settingsResponse","examConfigResponse","ltiProvidersResponse","proctoredExamSettings","data","proctored_exam_settings","course_start_date","isProctortrack","proctoring_provider","available_proctoring_providers","proctoringEscalationEmail","proctoring_escalation_email","proctoringProvidersStudio","proctoringProvidersLti","enableLtiProviders","selectedProvider","availableProviders","filter","reduce","result","enable_proctored_exams","allow_proctoring_opt_out","create_zendesk_tickets","catch","error","response","status","ModalDialog","title","isOpen","size","variant","hasCloseButton","isFullscreenScroll","isFullscreenOnMobile","_jsxs","Form","onSubmit","preventDefault","EmailValidator","providerIsLti","studioDataToPostBack","saveOperations","push","postSettingsBackToServer","formProctortrackEscalationEmail","errorMessage","dialogErrorMessage","Alert","onClick","href","inputErrorMessage","Loading","studioCourseRunURL","tabIndex","ref","dismissible","FormattedMessage","values","renderSaveSuccess","support_link","getConfig","SUPPORT_URL","_Fragment","numOfErrors","Object","keys","length","entries","map","_ref2","messageId","getFormErrorMessage","FormSwitchGroup","onChange","label","Badge","helpText","controlId","as","providers","disabled","isInvalid","prototype","hasOwnProperty","call","toString","ConnectionErrorAlert","PermissionDeniedAlert","classNames","ActionRow","StatefulButton","labels","default","pending","state","propTypes","intlShape","PropTypes","defaultProps","injectIntl"],"sourceRoot":""}