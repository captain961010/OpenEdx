{"version":3,"file":"app.d6181cc73a3a12c33c75.js","mappings":"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","sources":["webpack://@edx/frontend-app-course-authoring/./node_modules/@edx/frontend-lib-content-components/dist/editors/data/images/videoThumbnail.svg","webpack://@edx/frontend-app-course-authoring/./node_modules/@edx/paragon/dist/Avatar/default-avatar.svg","webpack://@edx/frontend-app-course-authoring/./src/constants.js","webpack://@edx/frontend-app-course-authoring/./src/data/constants.js","webpack://@edx/frontend-app-course-authoring/./src/data/services/ExamsApiService.js","webpack://@edx/frontend-app-course-authoring/./src/data/services/StudioApiService.js","webpack://@edx/frontend-app-course-authoring/./src/generic/model-store/slice.js","webpack://@edx/frontend-app-course-authoring/./src/generic/model-store/hooks.js","webpack://@edx/frontend-app-course-authoring/./src/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/utils.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/data/constants.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/live/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/utils.js","webpack://@edx/frontend-app-course-authoring/./src/generic/CollapsableEditor.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/ConnectionErrorAlert.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/FormSwitchGroup.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/FormikErrorFeedback.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/FormikControl.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/Loading.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/PermissionDeniedAlert.jsx","webpack://@edx/frontend-app-course-authoring/./src/i18n/index.js","webpack://@edx/frontend-app-course-authoring/./src/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/DiscussionsProvider.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-list/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-list/SupportedFeature.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-list/FeaturesList.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-list/AppCard.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-list/FeaturesTable.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-list/AppListNextButton.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-list/AppList.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/data/hook.js","webpack://@edx/frontend-app-course-authoring/./src/generic/SaveFormConnectionErrorAlert.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/AnonymousPostingFields.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/ConfirmationPopup.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/FieldFeedback.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/discussion-restrictions/RestrictDatesInput.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/discussion-restrictions/CollapseCardHeading.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/discussion-restrictions/DiscussionRestrictionItem.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/discussion-restrictions/RestrictionSchedules.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/DiscussionRestriction.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/discussion-topics/TopicItem.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/openedx/OpenedXConfigFormProvider.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/discussion-topics/DiscussionTopics.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/DivisionByGroupFields.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/ReportedContentEmailNotifications.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/InContextDiscussionFields.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/openedx/OpenedXConfigForm.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/lti/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/AppExternalLinks.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/lti/LtiConfigForm.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/AppConfigFormProvider.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/AppConfigFormSaveButton.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/AppConfigForm.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/DiscussionsSettings.jsx","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/generic/processing-notification/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/help-urls/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/generic/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/data/slice.js","webpack://@edx/frontend-app-course-authoring/./src/store.js","webpack://@edx/frontend-app-course-authoring/./src/header/messages.js","webpack://@edx/frontend-app-course-authoring/./src/header/utils.js","webpack://@edx/frontend-app-course-authoring/./src/header/Header.jsx","webpack://@edx/frontend-app-course-authoring/./src/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/CourseAuthoringPage.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/xpert-unit-summary/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/xpert-unit-summary/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/xpert-unit-summary/settings-modal/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/xpert-unit-summary/appInfo.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/xpert-unit-summary/settings-modal/ResetIcon.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/xpert-unit-summary/settings-modal/SettingsModal.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/xpert-unit-summary/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/xpert-unit-summary/XpertUnitSummarySettings.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/pages/PageCard.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/pages/PageGrid.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/utils.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/PagesAndResources.jsx","webpack://@edx/frontend-app-course-authoring/./src/proctored-exam-settings/ProctoredExamSettings.messages.jsx","webpack://@edx/frontend-app-course-authoring/./src/proctored-exam-settings/ProctoredExamSettings.jsx","webpack://@edx/frontend-app-course-authoring/./src/proctored-exam-settings/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/editors/EditorContainer.jsx","webpack://@edx/frontend-app-course-authoring/./src/selectors/VideoSelectorContainer.jsx","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/data/images/previewLmsStaticPages.png","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/messages.js","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/CustomPagesProvider.jsx","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/CustomPageCard.jsx","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/EditModal.jsx","webpack://@edx/frontend-app-course-authoring/./src/custom-pages/CustomPages.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/data/constant.js","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/data/utils.js","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/messages.js","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/FileThumbnail.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/UsageMetricsMessage.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/FileInfo.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/FileInput.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/FilesAndUploadsProvider.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/FileMenu.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/table-components/GalleryCard.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/table-components/ListCard.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/table-components/TableActions.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/ApiStatusToast.jsx","webpack://@edx/frontend-app-course-authoring/./src/files-and-uploads/FilesAndUploads.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/AlertProctoringError.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/alert-message/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/internet-connection-alert/messages.js","webpack://@edx/frontend-app-course-authoring/./src/generic/internet-connection-alert/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/sub-header/SubHeader.jsx","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/setting-card/messages.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/setting-card/SettingCard.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/help-sidebar/constants.js","webpack://@edx/frontend-app-course-authoring/./src/generic/help-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/generic/help-sidebar/HelpSidebarLink.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/help-sidebar/HelpSidebar.jsx","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/settings-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/settings-sidebar/SettingsSidebar.jsx","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/utils.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/messages.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/modal-error/ModalErrorListItem.jsx","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/modal-error/messages.js","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/modal-error/ModalError.jsx","webpack://@edx/frontend-app-course-authoring/./src/advanced-settings/AdvancedSettings.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/generic/section-sub-header/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/basic-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/basic-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/basic-section/constants.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/credit-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/credit-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/details-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/details-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/course-upload-image/messages.js","webpack://@edx/frontend-app-course-authoring/./src/generic/course-upload-image/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/course-upload-image/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/generic/WysiwygEditor.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/introducing-section/introduction-video/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/introducing-section/introduction-video/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/introducing-section/extended-course-details/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/introducing-section/extended-course-details/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/introducing-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/introducing-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/pacing-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/pacing-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/datepicker-control/messages.js","webpack://@edx/frontend-app-course-authoring/./src/generic/datepicker-control/DatepickerControl.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/schedule-section/schedule-row/ScheduleRow.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/schedule-section/certificate-display-row/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/schedule-section/certificate-display-row/CertificateDisplayRow.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/schedule-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/schedule-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/learning-outcomes-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/learning-outcomes-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/instructors-section/instructor-container/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/instructors-section/instructor-container/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/instructors-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/instructors-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/requirements-section/grade-requirements/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/requirements-section/grade-requirements/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/requirements-section/entrance-exam/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/requirements-section/entrance-exam/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/requirements-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/requirements-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/constants.js","webpack://@edx/frontend-app-course-authoring/./src/generic/ApplyWrapper.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/license-icons/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/license-icons/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/license-display/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/license-display/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/license-selector/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/license-selector/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/license-commons-options/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/license-commons-options/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/hooks.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/license-section/utils.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/schedule-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/schedule-sidebar/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/messages.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/utils.js","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/hooks.jsx","webpack://@edx/frontend-app-course-authoring/./src/schedule-and-details/constants.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-scale/react-ranger.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-scale/messages.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-scale/utils.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-scale/components/GradingScaleHandle.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-scale/components/GradingScaleTick.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-scale/components/GradingScaleSegment.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-scale/GradingScale.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/grading-sidebar/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/messages.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/assignment-section/utils/enum.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/assignment-section/utils/validation.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/assignment-section/assignments/AssignmentItem.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/assignment-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/assignment-section/assignments/AssignmentTypeName.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/assignment-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/credit-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/credit-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/deadline-section/utils.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/deadline-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/deadline-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/GradingSettings.jsx","webpack://@edx/frontend-app-course-authoring/./src/grading-settings/hooks.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/course-team-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/course-team-sidebar/CourseTeamSidebar.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-team/add-user-form/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/constants.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/add-user-form/AddUserForm.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-team/add-team-member/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/add-team-member/AddTeamMember.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-team/course-team-member/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/course-team-member/CourseTeamMember.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-team/info-modal/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/info-modal/InfoModal.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-team/utils.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/hooks.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-team/data/thunk.js","webpack://@edx/frontend-app-course-authoring/./src/course-team/CourseTeam.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/processing-notification/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/generic/processing-notification/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-updates/course-handouts/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/course-handouts/CourseHandouts.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-updates/course-update/utils.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/course-update/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/course-update/CourseUpdate.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-updates/delete-modal/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/delete-modal/DeleteModal.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-updates/constants.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/update-form/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/update-form/UpdateForm.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-updates/update-form/utils.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/hooks.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-updates/utils.js","webpack://@edx/frontend-app-course-authoring/./src/course-updates/CourseUpdates.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-updates/data/thunk.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/messages.js","webpack://@edx/frontend-app-course-authoring/./src/help-urls/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/help-urls/hooks.jsx","webpack://@edx/frontend-app-course-authoring/./src/help-urls/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/help-urls/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/export-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/export-sidebar/ExportSidebar.jsx","webpack://@edx/frontend-app-course-authoring/./src/export-page/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/data/constants.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/utils.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/generic/modal-error/ModalError.jsx","webpack://@edx/frontend-app-course-authoring/./src/export-page/export-modal-error/messages.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/export-modal-error/ExportModalError.jsx","webpack://@edx/frontend-app-course-authoring/./src/export-page/export-footer/messages.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/export-footer/ExportFooter.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/course-stepper/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/export-page/export-stepper/messages.js","webpack://@edx/frontend-app-course-authoring/./src/export-page/export-stepper/ExportStepper.jsx","webpack://@edx/frontend-app-course-authoring/./src/export-page/CourseExportPage.jsx","webpack://@edx/frontend-app-course-authoring/./src/import-page/data/constants.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/utils.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/import-stepper/messages.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/import-stepper/ImportStepper.jsx","webpack://@edx/frontend-app-course-authoring/./src/import-page/import-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/import-sidebar/ImportSidebar.jsx","webpack://@edx/frontend-app-course-authoring/./src/import-page/file-section/messages.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/file-section/FileSection.jsx","webpack://@edx/frontend-app-course-authoring/./src/import-page/messages.js","webpack://@edx/frontend-app-course-authoring/./src/import-page/CourseImportPage.jsx","webpack://@edx/frontend-app-course-authoring/./src/CourseAuthoringRoutes.jsx","webpack://@edx/frontend-app-course-authoring/./src/head/messages.js","webpack://@edx/frontend-app-course-authoring/./src/head/Head.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/home-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/home-sidebar/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/messages.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/card-item/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/tabs-section/utils.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/tabs-section/libraries-tab/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/tabs-section/archived-tab/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/collapsible-state-with-action/messages.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/collapsible-state-with-action/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/tabs-section/courses-tab/contact-administrator/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/processing-courses/course-item/messages.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/processing-courses/course-item/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/processing-courses/messages.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/processing-courses/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/tabs-section/courses-tab/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/tabs-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/data/selectors.js","webpack://@edx/frontend-app-course-authoring/./src/generic/data/api.js","webpack://@edx/frontend-app-course-authoring/./src/generic/data/thunks.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/organization-section/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/verify-email-layout/messages.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/verify-email-layout/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/create-or-rerun-course/messages.js","webpack://@edx/frontend-app-course-authoring/./src/generic/create-or-rerun-course/CreateOrRerunCourseForm.jsx","webpack://@edx/frontend-app-course-authoring/./src/generic/create-or-rerun-course/hooks.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/create-new-course-form/messages.js","webpack://@edx/frontend-app-course-authoring/./src/studio-home/create-new-course-form/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/StudioHome.jsx","webpack://@edx/frontend-app-course-authoring/./src/studio-home/hooks.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-rerun/course-rerun-form/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-rerun/course-rerun-form/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-rerun/course-rerun-sidebar/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-rerun/course-rerun-sidebar/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-rerun/messages.js","webpack://@edx/frontend-app-course-authoring/./src/course-rerun/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/course-rerun/hooks.jsx","webpack://@edx/frontend-app-course-authoring/./src/index.scss","webpack://@edx/frontend-app-course-authoring/./src/index.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/PagesAndResourcesProvider.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/discussions/app-config-form/apps/shared/AppConfigFormDivider.jsx","webpack://@edx/frontend-app-course-authoring/./node_modules/@edx/frontend-lib-content-components/dist/editors/data/images/dropdown.png","webpack://@edx/frontend-app-course-authoring/./node_modules/@edx/frontend-lib-content-components/dist/editors/data/images/multiSelect.png","webpack://@edx/frontend-app-course-authoring/./node_modules/@edx/frontend-lib-content-components/dist/editors/data/images/numericalInput.png","webpack://@edx/frontend-app-course-authoring/./node_modules/@edx/frontend-lib-content-components/dist/editors/data/images/singleSelect.png","webpack://@edx/frontend-app-course-authoring/./node_modules/@edx/frontend-lib-content-components/dist/editors/data/images/textInput.png","webpack://@edx/frontend-app-course-authoring/./node_modules/@edx/paragon/dist/Card/fallback-default.png","webpack://@edx/frontend-app-course-authoring/./node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/ lazy ^\\.\\/.*\\/Settings\\.jsx$ namespace object"],"sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgVideoThumbnail = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: 33,\n  height: 33,\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M20.411 10.685V21.35H7.078V10.685H20.41Zm1.333-2.667h-16c-.733 0-1.333.6-1.333 1.333v13.334c0 .733.6 1.333 1.333 1.333h16c.734 0 1.334-.6 1.334-1.333v-4.667l5.333 5.333V8.685l-5.333 5.333V9.351c0-.733-.6-1.333-1.334-1.333Z\",\n  fill: \"#000\"\n})));\nexport { SvgVideoThumbnail as ReactComponent };\nexport default __webpack_public_path__ + \"38f0db2ca902acd8a6aa3b4e0dc34077.svg\";","var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nconst SvgDefaultAvatar = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  width: 36,\n  height: 36,\n  fill: \"none\",\n  xmlns: \"http://www.w3.org/2000/svg\"\n}, props), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#fff\",\n  d: \"M0 0h36v36H0z\"\n})), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M18 18c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4Zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4Z\",\n  fill: \"#00262B\"\n})));\nexport { SvgDefaultAvatar as ReactComponent };\nexport default __webpack_public_path__ + \"95ec738c0b7faac5b5c9126794446bbd.svg\";","export const DATE_FORMAT = 'MM/dd/yyyy';\nexport const TIME_FORMAT = 'HH:mm';\nexport const DATE_TIME_FORMAT = 'YYYY-MM-DDTHH:mm:ss\\\\Z';\nexport const COMMA_SEPARATED_DATE_FORMAT = 'MMMM D, YYYY';\nexport const DEFAULT_EMPTY_WYSIWYG_VALUE = '<p>&nbsp;</p>';\nexport const STATEFUL_BUTTON_STATES = {\n  default: 'default',\n  pending: 'pending',\n  error: 'error',\n};\n\nexport const USER_ROLES = {\n  admin: 'instructor',\n  staff: 'staff',\n};\n\nexport const BADGE_STATES = {\n  danger: 'danger',\n  secondary: 'secondary',\n};\n\nexport const NOTIFICATION_MESSAGES = {\n  saving: 'Saving',\n  duplicating: 'Duplicating',\n  deleting: 'Deleting',\n};\n\nexport const DEFAULT_TIME_STAMP = '00:00';\n\nexport const COURSE_CREATOR_STATES = {\n  unrequested: 'unrequested',\n  pending: 'pending',\n  granted: 'granted',\n  denied: 'denied',\n  disallowedForThisSite: 'disallowed_for_this_site',\n};\n","/* eslint-disable import/prefer-default-export */\n\n/**\n * Enum for request status.\n * @readonly\n * @enum {string}\n */\nexport const RequestStatus = {\n  IN_PROGRESS: 'in-progress',\n  SUCCESSFUL: 'successful',\n  FAILED: 'failed',\n  DENIED: 'denied',\n  PENDING: 'pending',\n  CLEAR: 'clear',\n};\n\n/**\n * Team sizes enum\n * @enum\n * @type {{MIN: number, MAX: number, DEFAULT: number}}\n */\nexport const TeamSizes = {\n  DEFAULT: 5,\n  MIN: 1,\n  MAX: 500,\n};\n\n/**\n * Group types enum\n * @enum\n * @type {{PRIVATE_MANAGED: string, PUBLIC_MANAGED: string, OPEN: string}}\n */\nexport const GroupTypes = {\n  OPEN: 'open',\n  PUBLIC_MANAGED: 'public_managed',\n  PRIVATE_MANAGED: 'private_managed',\n};\n\nexport const DivisionSchemes = {\n  NONE: 'none',\n  COHORT: 'cohort',\n};\n","import { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { getConfig } from '@edx/frontend-platform';\n\nclass ExamsApiService {\n  static isAvailable() {\n    return !!this.getExamsBaseUrl();\n  }\n\n  static getExamsBaseUrl() {\n    return getConfig().EXAMS_BASE_URL;\n  }\n\n  static getExamConfigurationUrl(courseId) {\n    return `${ExamsApiService.getExamsBaseUrl()}/api/v1/configs/course_id/${courseId}`;\n  }\n\n  static getAvailableProviders() {\n    const apiClient = getAuthenticatedHttpClient();\n    const providersUrl = `${ExamsApiService.getExamsBaseUrl()}/api/v1/providers`;\n    return apiClient.get(providersUrl);\n  }\n\n  static getCourseExamConfiguration(courseId) {\n    const apiClient = getAuthenticatedHttpClient();\n    return apiClient.get(this.getExamConfigurationUrl(courseId));\n  }\n\n  static saveCourseExamConfiguration(courseId, dataToSave) {\n    const apiClient = getAuthenticatedHttpClient();\n    return apiClient.patch(this.getExamConfigurationUrl(courseId), dataToSave);\n  }\n}\n\nexport default ExamsApiService;\n","import { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { getConfig, ensureConfig } from '@edx/frontend-platform';\n\nensureConfig([\n  'STUDIO_BASE_URL',\n], 'Studio API service');\n\nconst getStudioBaseUrl = () => getConfig().STUDIO_BASE_URL;\n\nclass StudioApiService {\n  static getProctoredExamSettingsUrl(courseID) {\n    return `${getStudioBaseUrl()}/api/contentstore/v1/proctored_exam_settings/${courseID}`;\n  }\n\n  static getProctoredExamSettingsData(courseID) {\n    const apiClient = getAuthenticatedHttpClient();\n    const url = StudioApiService.getProctoredExamSettingsUrl(courseID);\n    return apiClient.get(url);\n  }\n\n  static saveProctoredExamSettingsData(courseID, dataToSave) {\n    const apiClient = getAuthenticatedHttpClient();\n    const url = StudioApiService.getProctoredExamSettingsUrl(courseID);\n    return apiClient.post(url, dataToSave);\n  }\n\n  static getStudioCourseRunUrl(courseID) {\n    return `${getStudioBaseUrl()}/course/${courseID}`;\n  }\n}\n\nexport default StudioApiService;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nfunction add(state, modelType, model) {\n  const { id } = model;\n  if (state[modelType] === undefined) {\n    state[modelType] = {};\n  }\n  state[modelType][id] = model;\n}\n\nfunction update(state, modelType, model) {\n  if (state[modelType] === undefined) {\n    state[modelType] = {};\n  }\n  state[modelType][model.id] = { ...state[modelType][model.id], ...model };\n}\n\nfunction remove(state, modelType, id) {\n  if (state[modelType] === undefined) {\n    state[modelType] = {};\n  }\n\n  delete state[modelType][id];\n}\n\nconst slice = createSlice({\n  name: 'models',\n  initialState: {},\n  reducers: {\n    addModel: (state, { payload }) => {\n      const { modelType, model } = payload;\n      add(state, modelType, model);\n    },\n    addModels: (state, { payload }) => {\n      const { modelType, models } = payload;\n      models.forEach(model => add(state, modelType, model));\n    },\n    addModelsMap: (state, { payload }) => {\n      const { modelType, modelsMap } = payload;\n      Object.values(modelsMap).forEach(model => add(state, modelType, model));\n    },\n    updateModel: (state, { payload }) => {\n      const { modelType, model } = payload;\n      update(state, modelType, model);\n    },\n    updateModels: (state, { payload }) => {\n      const { modelType, models } = payload;\n      models.forEach(model => update(state, modelType, model));\n    },\n    updateModelsMap: (state, { payload }) => {\n      const { modelType, modelsMap } = payload;\n      Object.values(modelsMap).forEach(model => update(state, modelType, model));\n    },\n    removeModel: (state, { payload }) => {\n      const { modelType, id } = payload;\n      remove(state, modelType, id);\n    },\n    removeModels: (state, { payload }) => {\n      const { modelType, ids } = payload;\n      ids.forEach(id => remove(state, modelType, id));\n    },\n  },\n});\n\nexport const {\n  addModel,\n  addModels,\n  addModelsMap,\n  updateModel,\n  updateModels,\n  updateModelsMap,\n  removeModel,\n  removeModels,\n} = slice.actions;\n\nexport const { reducer } = slice;\n","import { useSelector, shallowEqual } from 'react-redux';\n\nexport function useModel(type, id) {\n  return useSelector(\n    state => (state.models[type] !== undefined ? state.models[type][id] : undefined),\n    shallowEqual,\n  );\n}\n\nexport function useModels(type, ids) {\n  return useSelector(\n    state => ids.map(\n      id => (state.models[type] !== undefined ? state.models[type][id] : undefined),\n    ),\n    shallowEqual,\n  );\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  connectionError: {\n    id: 'authoring.alert.error.connection',\n    defaultMessage: 'We encountered a technical error when loading this page. This might be a temporary issue, so please try again in a few minutes. If the problem persists, please go to the {supportLink} for help.',\n    description: 'Error message shown to users when there is a connectivity issue with the server.',\n  },\n  supportText: {\n    id: 'authoring.alert.support.text',\n    defaultMessage: 'Support Page',\n  },\n});\n\nexport default messages;\n","/* eslint-disable import/prefer-default-export */\n\nexport const getLoadingStatus = (state) => state.pagesAndResources.loadingStatus;\nexport const getSavingStatus = (state) => state.pagesAndResources.savingStatus;\nexport const getCourseAppsApiStatus = (state) => state.pagesAndResources.courseAppsApiStatus;\nexport const getCourseAppSettingValue = (setting) => (state) => (\n  state.pagesAndResources.courseAppSettings[setting]?.value\n);\nexport const getResetStatus = (state) => state.pagesAndResources.resetStatus;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'pagesAndResources',\n  initialState: {\n    courseAppIds: [],\n    loadingStatus: RequestStatus.IN_PROGRESS,\n    savingStatus: '',\n    resetStatus: '',\n    courseAppsApiStatus: {},\n    courseAppSettings: {},\n  },\n  reducers: {\n    fetchCourseAppsSuccess: (state, { payload }) => {\n      state.courseAppIds = payload.courseAppIds;\n    },\n    updateLoadingStatus: (state, { payload }) => {\n      state.loadingStatus = payload.status;\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload.status;\n    },\n    updateResetStatus: (state, { payload }) => {\n      state.resetStatus = payload.status;\n    },\n    updateCourseAppsApiStatus: (state, { payload }) => {\n      state.courseAppsApiStatus = payload.status;\n    },\n    fetchCourseAppsSettingsSuccess: (state, { payload }) => {\n      Object.assign(state.courseAppSettings, payload);\n    },\n    updateCourseAppsSettingsSuccess: (state, { payload }) => {\n      Object.assign(state.courseAppSettings, payload);\n    },\n  },\n});\n\nexport const {\n  fetchCourseAppsSuccess,\n  updateLoadingStatus,\n  updateSavingStatus,\n  updateResetStatus,\n  updateCourseAppsApiStatus,\n  fetchCourseAppsSettingsSuccess,\n  updateCourseAppsSettingsSuccess,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable import/prefer-default-export */\nimport { snakeCase } from 'lodash/string';\n\nimport { camelCaseObject, ensureConfig, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nensureConfig([\n  'STUDIO_BASE_URL',\n], 'Course Apps API service');\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nconst getCourseAppsApiUrl = () => `${getApiBaseUrl()}/api/course_apps/v1/apps`;\nconst getCourseAdvancedSettingsApiUrl = () => `${getApiBaseUrl()}/api/contentstore/v0/advanced_settings`;\n\n/**\n * Fetches the course apps installed for provided course\n * @param {string} courseId\n * @returns {Promise<[{}]>}\n */\nexport async function getCourseApps(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getCourseAppsApiUrl()}/${courseId}`);\n  return camelCaseObject(data);\n}\n\n/**\n * Updates the status of a course app.\n * @param {string} courseId Course ID for the course to operate on\n * @param {string} appId ID for the application to operate on\n * @param {boolean} state The new state\n */\nexport async function updateCourseApp(courseId, appId, state) {\n  await getAuthenticatedHttpClient()\n    .patch(\n      `${getCourseAppsApiUrl()}/${courseId}`,\n      {\n        id: appId,\n        enabled: state,\n      },\n    );\n}\n\n/**\n * Get's advanced setting for a course.\n * @param {string} courseId\n * @param {[string]} settings\n * @returns {Promise<Object>}\n */\nexport async function getCourseAdvancedSettings(courseId, settings) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getCourseAdvancedSettingsApiUrl()}/${courseId}`, { filter_fields: settings.map(snakeCase).join(',') });\n  return camelCaseObject(data);\n}\n\n/**\n * Get's advanced setting for a course.\n * @param {string} courseId\n * @param {string} setting\n * @param {*} value\n * @returns {Promise<Object>}\n */\nexport async function updateCourseAdvancedSettings(courseId, setting, value) {\n  const { data } = await getAuthenticatedHttpClient()\n    .patch(`${getCourseAdvancedSettingsApiUrl()}/${courseId}`, { [snakeCase(setting)]: { value } });\n  return camelCaseObject(data);\n}\n","import { RequestStatus } from '../../data/constants';\nimport { addModels, updateModel } from '../../generic/model-store';\nimport {\n  getCourseAdvancedSettings,\n  getCourseApps, updateCourseAdvancedSettings,\n  updateCourseApp,\n} from './api';\nimport {\n  fetchCourseAppsSettingsSuccess,\n  fetchCourseAppsSuccess,\n  updateCourseAppsApiStatus, updateCourseAppsSettingsSuccess,\n  updateLoadingStatus,\n  updateSavingStatus,\n} from './slice';\n\nconst COURSE_APPS_ORDER = [\n  'progress',\n  'discussion',\n  'teams',\n  'edxnotes',\n  'wiki',\n  'calculator',\n  'proctoring',\n  'live',\n  'textbooks',\n  'custom_pages',\n  'ora_settings',\n];\n\n/* eslint-disable import/prefer-default-export */\nexport function fetchCourseApps(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ courseId, status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const courseApps = await getCourseApps(courseId);\n\n      courseApps.sort((firstEl, secondEl) => (\n        COURSE_APPS_ORDER.indexOf(firstEl.id) - COURSE_APPS_ORDER.indexOf(secondEl.id)));\n\n      dispatch(addModels({ modelType: 'courseApps', models: courseApps }));\n      dispatch(fetchCourseAppsSuccess({\n        courseAppIds: courseApps.map(courseApp => courseApp.id),\n      }));\n      dispatch(updateLoadingStatus({ courseId, status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateCourseAppsApiStatus({ status: RequestStatus.DENIED }));\n      }\n\n      dispatch(updateLoadingStatus({ courseId, status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function updateAppStatus(courseId, appId, state) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      await updateCourseApp(courseId, appId, state);\n      dispatch(updateModel({ modelType: 'courseApps', model: { id: appId, enabled: state } }));\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function fetchCourseAppSettings(courseId, settings) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const settingValues = await getCourseAdvancedSettings(courseId, settings);\n      dispatch(fetchCourseAppsSettingsSuccess(settingValues));\n      dispatch(updateLoadingStatus({ status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateLoadingStatus({ status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function updateCourseAppSetting(courseId, setting, value) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const settingValues = await updateCourseAdvancedSettings(courseId, setting, value);\n      dispatch(updateCourseAppsSettingsSuccess(settingValues));\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  configurationChangeConsequence: {\n    id: 'authoring.discussions.configurationChangeConsequences',\n    defaultMessage:\n      'Students will lose access to any active or previous'\n      + ' discussion posts for your course.',\n    description:\n      'Describes that, as a consequence of changing configuration,'\n      + ' students will lose access posts on the course.',\n  },\n  configureApp: {\n    id: 'authoring.discussions.configure.app',\n    defaultMessage: 'Configure {name}',\n  },\n  configure: {\n    id: 'authoring.discussions.configure',\n    defaultMessage: 'Configure discussions',\n  },\n  ok: {\n    id: 'authoring.discussions.ok',\n    defaultMessage: 'OK',\n    description: 'Button allowing the user to acknowledge the provider change.',\n  },\n  cancel: {\n    id: 'authoring.discussions.cancel',\n    defaultMessage: 'Cancel',\n    description: 'Button allowing the user to return to discussion provider configurations.',\n  },\n  confirm: {\n    id: 'authoring.discussions.confirm',\n    defaultMessage: 'Confirm',\n    description: 'Button allowing the user to confirm Confirmation.',\n  },\n  confirmConfigurationChange: {\n    id: 'authoring.discussions.confirmConfigurationChange',\n    defaultMessage: 'Are you sure you want to change the discussion settings?',\n    description: 'Asks the user whether he/she really wants to change settings.',\n  },\n  confirmEnableDiscussionsLabel: {\n    id: 'authoring.discussions.confirmEnableDiscussionsLabel',\n    defaultMessage: 'Enable discussions on units in graded subsections?',\n    description: 'Asks the user whether he/she really wants to enable discussions on units in graded subsections.',\n  },\n  cancelEnableDiscussionsLabel: {\n    id: 'authoring.discussions.cancelEnableDiscussionsLabel',\n    defaultMessage: 'Disable discussions on units in graded subsections?',\n    description: 'Asks the user whether he/she really wants to disable discussions on units in graded subsections.',\n  },\n  confirmEnableDiscussions: {\n    id: 'authoring.discussions.confirmEnableDiscussions',\n    defaultMessage: 'Enabling this toggle will automatically enable discussion on all units in graded subsections, that are not timed exams.',\n    description: 'Asks the user whether he/she really wants to enable discussions on units in graded subsections.',\n  },\n  cancelEnableDiscussions: {\n    id: 'authoring.discussions.cancelEnableDiscussions',\n    defaultMessage: 'Disabling this toggle will automatically disable discussion on all units in graded subsections. Discussion topics containing at least 1 thread will be listed and accessible under “Archived” in Topics tab on the Discussions page.',\n    description: 'Asks the user whether he/she really wants to disable discussions on units in graded subsections.',\n  },\n  backButton: {\n    id: 'authoring.discussions.backButton',\n    defaultMessage: 'Back',\n    description: 'Button allowing the user to return to discussion app selection.',\n  },\n  saveButton: {\n    id: 'authoring.discussions.saveButton',\n    defaultMessage: 'Save',\n    description: 'Button allowing the user to submit their discussion configuration.',\n  },\n  savingButton: {\n    id: 'authoring.discussions.savingButton',\n    defaultMessage: 'Saving',\n    description: 'Button label when the discussion configuration is being submitted.',\n  },\n  savedButton: {\n    id: 'authoring.discussions.savedButton',\n    defaultMessage: 'Saved',\n    description: 'Button label when the discussion configuration has been successfully submitted.',\n  },\n\n  // App names\n  'appName-piazza': {\n    id: 'authoring.discussions.appConfigForm.appName-piazza',\n    defaultMessage: 'Piazza',\n    description: 'The name of the Piazza app.',\n  },\n  'appName-yellowdig': {\n    id: 'authoring.discussions.appConfigForm.appName-yellowdig',\n    defaultMessage: 'Yellowdig',\n    description: 'The name of the yellowdig app.',\n  },\n  'appName-inscribe': {\n    id: 'authoring.discussions.appConfigForm.appName-inscribe',\n    defaultMessage: 'InScribe',\n    description: 'The name of the inscribe app.',\n  },\n  'appName-discourse': {\n    id: 'authoring.discussions.appConfigForm.appName-discourse',\n    defaultMessage: 'Discourse',\n    description: 'The name of the discourse app.',\n  },\n  'appName-ed-discuss': {\n    id: 'authoring.discussions.appConfigForm.appName-ed-discuss',\n    defaultMessage: 'Ed Discussion',\n    description: 'The name of the Ed Discussion app.',\n  },\n  'appName-legacy': {\n    id: 'authoring.discussions.appConfigForm.appName-legacy',\n    defaultMessage: 'edX',\n    description: 'The name of the Legacy edX Discussions app.',\n  },\n  'appName-openedx': {\n    id: 'authoring.discussions.appConfigForm.appName-openedx',\n    defaultMessage: 'edX (new)',\n    description: 'The name of the new edX Discussions app.',\n  },\n  divisionByGroup: {\n    id: 'authoring.discussions.builtIn.divisionByGroup',\n    defaultMessage: 'Cohorts',\n  },\n  divideByCohortsLabel: {\n    id: 'authoring.discussions.builtIn.divideByCohorts.label',\n    defaultMessage: 'Divide discussions by cohorts',\n    description: 'Label for a switch that enables dividing discussions by cohorts.  allowDivisionByUnit, divideCourseWideTopics, divideGeneralTopic, and divideQuestionsForTAs are only used if this setting is true.',\n  },\n  divideByCohortsHelp: {\n    id: 'authoring.discussions.builtIn.divideByCohorts.help',\n    defaultMessage: 'Learners will only be able to view and respond to discussions posted by members of their cohort.',\n    description: 'Help text for a switch that enables dividing discussions by cohorts.',\n  },\n  divideCourseTopicsByCohortsLabel: {\n    id: 'authoring.discussions.builtIn.divideCourseTopicsByCohorts.label',\n    defaultMessage: 'Divide course-wide discussion topics',\n    description: 'Label for a switch that enables dividing course wide topics by cohorts.',\n  },\n  divideCourseTopicsByCohortsHelp: {\n    id: 'authoring.discussions.builtIn.divideCourseTopicsByCohorts.help',\n    defaultMessage: 'Choose which of your general course-wide discussion topics you would like to divide.',\n    description: 'Help text asking the user to pick course-wide topics that should be divided by cohort.',\n  },\n  divideGeneralTopic: {\n    id: 'authoring.discussions.builtIn.divideGeneralTopic.label',\n    defaultMessage: 'General',\n    description: 'Label for a checkbox allowing a user to divide the General course wide topic by cohorts.',\n  },\n  divideQuestionsForTAsTopic: {\n    id: 'authoring.discussions.builtIn.divideQuestionsForTAsTopic.label',\n    defaultMessage: 'Questions for the TAs',\n    description: 'Label for a checkbox allowing a user to divide the Questions for the TAs (TA stands for \"teaching assistant\") course wide topic by cohorts.',\n  },\n  cohortsEnabled: {\n    id: 'authoring.discussions.builtIn.cohortsEnabled.label',\n    defaultMessage: 'To adjust these settings, enable cohorts on the ',\n    description: 'Label text informing the user to enable cohort',\n  },\n  instructorDashboard: {\n    id: 'authoring.discussions.builtIn.instructorDashboard.label',\n    defaultMessage: 'instructor dashboard',\n    description: 'Label text for instructor dashboard',\n  },\n  // In-context discussion fields\n  visibilityInContext: {\n    id: 'authoring.discussions.builtIn.visibilityInContext',\n    defaultMessage: 'Visibility of in-context discussions',\n  },\n  gradedUnitPagesLabel: {\n    id: 'authoring.discussions.builtIn.gradedUnitPages.label',\n    defaultMessage: 'Enable discussions on units in graded subsections',\n  },\n  gradedUnitPagesHelp: {\n    id: 'authoring.discussions.builtIn.gradedUnitPages.help',\n    defaultMessage: 'Allow learners to engage with discussion on all graded unit pages except timed exams.',\n  },\n  groupInContextSubsectionLabel: {\n    id: 'authoring.discussions.builtIn.groupInContextSubsection.label',\n    defaultMessage: 'Group in context discussion at the subsection level',\n  },\n  groupInContextSubsectionHelp: {\n    id: 'authoring.discussions.builtIn.groupInContextSubsection.help',\n    defaultMessage: 'Learners will be able to view any post in the sub-section no matter which unit page they are viewing. While this is not recommended, if your course has short learning sequences or low enrollment grouping may increase engagement.',\n  },\n\n  // Anonymous posting fields\n  anonymousPosting: {\n    id: 'authoring.discussions.builtIn.anonymousPosting',\n    defaultMessage: 'Anonymous posting',\n  },\n  allowAnonymousPostsLabel: {\n    id: 'authoring.discussions.builtIn.allowAnonymous.label',\n    defaultMessage: 'Allow anonymous discussion posts',\n  },\n  allowAnonymousPostsHelp: {\n    id: 'authoring.discussions.builtIn.allowAnonymous.help',\n    defaultMessage: 'If enabled, learners can create posts that are anonymous to all users.',\n  },\n  allowAnonymousPostsPeersLabel: {\n    id: 'authoring.discussions.builtIn.allowAnonymousPeers.label',\n    defaultMessage: 'Allow anonymous discussion posts to peers',\n  },\n  allowAnonymousPostsPeersHelp: {\n    id: 'authoring.discussions.builtIn.allowAnonymousPeers.help',\n    defaultMessage: 'Learners will be able to post anonymously to other peers but all posts will be visible to course staff.',\n  },\n\n  // Reported Email Notifications\n  reportedContentEmailNotifications: {\n    id: 'authoring.discussions.builtIn.reportedContentEmailNotifications',\n    defaultMessage: 'Notifications',\n  },\n  reportedContentEmailNotificationsLabel: {\n    id: 'authoring.discussions.builtIn.reportedContentEmailNotifications.label',\n    defaultMessage: 'Email notifications for reported content',\n  },\n  reportedContentEmailNotificationsHelp: {\n    id: 'authoring.discussions.builtIn.reportedContentEmailNotifications.help',\n    defaultMessage: 'Discussion Admins, Moderators, Community TAs and Group Community TAs (only for their own cohort) will receive an email notification when content is reported.',\n  },\n\n  // Discussion Topics\n  discussionTopics: {\n    id: 'authoring.discussions.discussionTopics',\n    defaultMessage: 'Discussion topics',\n  },\n  discussionTopicsLabel: {\n    id: 'authoring.discussions.discussionTopics.label',\n    defaultMessage: 'General discussion topics',\n    description: 'Label for a discussion topic section allowing a user to add new topic.',\n  },\n  discussionTopicsHelp: {\n    id: 'authoring.discussions.discussionTopics.help',\n    defaultMessage: 'Discussions can include general topics not contained to the course structure. All courses have a general topic by default.',\n    description: 'Help text for adding new discussion topics that in general discussion topic section.',\n  },\n  discussionTopicRequired: {\n    id: 'authoring.discussions.discussionTopic.required',\n    defaultMessage: 'Topic name is a required field',\n    description: 'Tells the user that the discussion topic field is required and must have a value.',\n  },\n  discussionTopicNameAlreadyExist: {\n    id: 'authoring.discussions.discussionTopic.alreadyExistError',\n    defaultMessage: 'It looks like this name is already in use',\n    description: 'Tells the user that the discussion topic name already in use and must have a unique name.',\n  },\n  addTopicButton: {\n    id: 'authoring.discussions.addTopicButton',\n    defaultMessage: 'Add topic',\n    description: 'Button label when Add a new discussion topic.',\n  },\n  deleteButton: {\n    id: 'authoring.discussions.deleteButton',\n    defaultMessage: 'Delete',\n    description: 'Button label when delete discussion topic from conformation card.',\n  },\n  cancelButton: {\n    id: 'authoring.discussions.cancelButton',\n    defaultMessage: 'Cancel',\n    description: 'Button label when cancel discussion topic deletion conformation.',\n  },\n  discussionTopicDeletionHelp: {\n    id: 'authoring.discussions.discussionTopicDeletion.help',\n    defaultMessage: 'edX recommends that you do not delete discussion topics once your course is running.',\n    description: 'Help text for delete a discussion topic from discussion topic section.',\n  },\n  discussionTopicDeletionLabel: {\n    id: 'authoring.discussions.discussionTopicDeletion.label',\n    defaultMessage: 'Delete this topic?',\n    description: 'Label for discussion topic delete popup allowing a user to delete a topic.',\n  },\n  renameGeneralTopic: {\n    id: 'authoring.discussions.builtIn.renameGeneralTopic.label',\n    defaultMessage: 'Rename general topic',\n    description: 'Label for default topic allowing user to rename default general topic',\n  },\n  generalTopicHelp: {\n    id: 'authoring.discussions.generalTopicHelp.help',\n    defaultMessage: 'This is the default discussion topic for your course.',\n    description: 'Help text for general discussion topic collapsible card.',\n  },\n  configureAdditionalTopic: {\n    id: 'authoring.discussions.builtIn.configureAdditionalTopic.label',\n    defaultMessage: 'Configure topic',\n    description: 'Label for Additional topic allowing user to configure additional topic name',\n  },\n  addTopicHelpText: {\n    id: 'authoring.discussions.addTopicHelpText',\n    defaultMessage: 'Choose a unique name for your topic',\n    description: 'Help text for input field in adding a discussion topic',\n  },\n  // Restricted dates\n  restrictedStartDateHelp: {\n    id: 'authoring.discussions.restrictedStartDate.help',\n    defaultMessage: 'Enter a start date, e.g. 12/10/2023',\n  },\n  restrictedEndDateHelp: {\n    id: 'authoring.discussions.restrictedEndDate.help',\n    defaultMessage: 'Enter an end date, e.g. 12/17/2023',\n  },\n  restrictedStartTimeHelp: {\n    id: 'authoring.discussions.restrictedStartTime.help',\n    defaultMessage: 'Enter a start time, e.g. 09:00 AM',\n  },\n  restrictedEndTimeHelp: {\n    id: 'authoring.discussions.restrictedEndTime.help',\n    defaultMessage: 'Enter an end time, e.g. 05:00 PM',\n  },\n  restrictedDatesStatus: {\n    id: 'authoring.restrictedDates.status',\n    defaultMessage: '{status}',\n  },\n  restrictedStartDateRequired: {\n    id: 'authoring.restrictedDates.startDate.required',\n    defaultMessage: 'Start date is a required field',\n    description: 'Tells the user that the restricted dates must have start date and it is required.',\n  },\n  restrictedEndDateRequired: {\n    id: 'authoring.restrictedDates.endDate.required',\n    defaultMessage: 'End date is a required field',\n    description: 'Tells the user that the restricted dates must have end date and it is required.',\n  },\n  restrictedStartDateInPast: {\n    id: 'authoring.restrictedDates.startDate.inPast',\n    defaultMessage: 'Start date cannot be after end date',\n    description: 'Tells the user that the restricted start date cannot be in past and cannot be after end date',\n  },\n  restrictedEndDateInPast: {\n    id: 'authoring.restrictedDates.endDate.inPast',\n    defaultMessage: 'End date cannot be before start date',\n    description: 'Tells the user that the restricted end date cannot be in past and cannot be before start date',\n  },\n  restrictedStartTimeInPast: {\n    id: 'authoring.restrictedDates.startTime.inPast',\n    defaultMessage: 'Start time cannot be after end time',\n    description: 'Tells the user that the restricted start time cannot be in past and cannot be after end time',\n  },\n  restrictedEndTimeInPast: {\n    id: 'authoring.restrictedDates.endTime.inPast',\n    defaultMessage: 'End time cannot be before start time',\n    description: 'Tells the user that the restricted end time cannot be in past and cannot be before start time',\n  },\n  restrictedStartTimeInValidFormat: {\n    id: 'authoring.restrictedDates.startTime.inValidFormat',\n    defaultMessage: 'Enter a valid start time',\n    description: 'Tells the user that the restricted start time format is in valid',\n  },\n  restrictedEndTimeInValidFormat: {\n    id: 'authoring.restrictedDates.endTime.inValidFormat',\n    defaultMessage: 'Enter a valid end time',\n    description: 'Tells the user that the restricted end time format is in valid',\n  },\n  restrictedStartDateInValidFormat: {\n    id: 'authoring.restrictedDates.startDate.inValidFormat',\n    defaultMessage: 'Enter a valid start Date',\n    description: 'Tells the user that the restricted start date format is in valid',\n  },\n  restrictedEndDateInValidFormat: {\n    id: 'authoring.restrictedDates.endDate.inValidFormat',\n    defaultMessage: 'Enter a valid end date',\n    description: 'Tells the user that the restricted end date format is in valid',\n  },\n  discussionRestrictionLabel: {\n    id: 'authoring.discussions.builtIn.discussionRestriction.label',\n    defaultMessage: 'Discussion restrictions',\n  },\n  discussionRestrictionHelp: {\n    id: 'authoring.discussions.discussionRestriction.help',\n    defaultMessage: 'If enabled, learners will not be able to post in discussions.',\n  },\n  discussionRestrictionDatesHelp: {\n    id: 'authoring.discussions.discussionRestrictionDates.help',\n    defaultMessage: 'If added, learners will not be able to post in discussions between these dates.',\n  },\n  addRestrictedDatesButton: {\n    id: 'authoring.discussions.addRestrictedDatesButton',\n    defaultMessage: 'Add restricted dates',\n  },\n  configureRestrictedDates: {\n    id: 'authoring.discussions.builtIn.configureRestrictedDates.label',\n    defaultMessage: 'Configure restricted date range',\n  },\n  activeRestrictedDatesDeletionLabel: {\n    id: 'authoring.discussions.activeRestrictedDatesDeletion.label',\n    defaultMessage: 'Delete active restricted dates?',\n    description: 'Label for active restricted dates delete popup allowing a user to delete a restricted date range.',\n  },\n  activeRestrictedDatesDeletionHelp: {\n    id: 'authoring.discussions.activeRestrictedDatesDeletion.help',\n    defaultMessage: 'These restricted dates are currently active. If deleted, learners will be able to post in discussions during these dates. Are you sure you want to proceed?',\n    description: 'Help text for delete a active restricted dates from restricted dates section.',\n  },\n  completeRestrictedDatesDeletionHelp: {\n    id: 'authoring.discussions.completeRestrictedDatesDeletion.help',\n    defaultMessage: 'Are you sure you want to delete these restricted dates?',\n    description: 'Help text for delete a complete restricted dates from restricted dates section.',\n  },\n  restrictedDatesDeletionLabel: {\n    id: 'authoring.discussions.restrictedDatesDeletion.label',\n    defaultMessage: 'Delete restricted dates?',\n    description: 'Label for restricted dates delete popup allowing a user to delete a restricted date range.',\n  },\n  restrictedDatesDeletionHelp: {\n    id: 'authoring.discussions.restrictedDatesDeletion.help',\n    defaultMessage: 'If deleted, learners will be able to post in discussions during these dates.',\n    description: 'Help text for delete a upcoming restricted dates from restricted dates section.',\n  },\n  discussionRestrictionOffLabelHelpText: {\n    id: 'authoring.discussions.discussionRestrictionOff.label',\n    defaultMessage: 'If enabled, learners will be able to post in discussions',\n  },\n  discussionRestrictionOnLabelHelpText: {\n    id: 'authoring.discussions.discussionRestrictionOn.label',\n    defaultMessage: 'If enabled, learners will not be able to post in discussions',\n  },\n  discussionRestrictionScheduledLabelHelpText: {\n    id: 'authoring.discussions.discussionRestrictionScheduled.label',\n    defaultMessage: 'If added, learners will not be able to post in discussions between these dates.',\n  },\n  enableRestrictedDatesConfirmationLabel: {\n    id: 'authoring.discussions.enableRestrictedDatesConfirmation.label',\n    defaultMessage: 'Enable restricted dates?',\n  },\n  enableRestrictedDatesConfirmationHelp: {\n    id: 'authoring.discussions.enableRestrictedDatesConfirmation.help',\n    defaultMessage: 'Learners will not be able to post in discussions.',\n  },\n  deleteAltText: {\n    id: 'authoring.topics.delete',\n    defaultMessage: 'Delete Topic',\n  },\n  expandAltText: {\n    id: 'authoring.topics.expand',\n    defaultMessage: 'Expand',\n  },\n  collapseAltText: {\n    id: 'authoring.topics.collapse',\n    defaultMessage: 'Collapse',\n  },\n  startDateLabel: {\n    id: 'authoring.restrictedDates.start.date',\n    defaultMessage: 'Start date',\n    description: 'Label for start date field',\n  },\n  startTimeLabel: {\n    id: 'authoring.restrictedDates.start.time',\n    defaultMessage: 'Start time (optional)',\n    description: 'label for start time field',\n  },\n  endDateLabel: {\n    id: 'authoring.restrictedDates.end.date',\n    defaultMessage: 'End date',\n    description: 'label for end date field',\n  },\n  endTimeLabel: {\n    id: 'authoring.restrictedDates.end.time',\n    defaultMessage: 'End time (optional)',\n    description: 'label for end time field',\n  },\n});\n\nexport default messages;\n","import moment from 'moment';\nimport _ from 'lodash';\nimport { getIn } from 'formik';\nimport { restrictedDatesStatus as constants } from '../data/constants';\n\nexport const filterItemFromObject = (array, key, value) => (\n  array.filter(item => item[key] !== value)\n);\n\nexport const checkFieldErrors = (touched, errors, fieldPath, propertyName) => {\n  const path = fieldPath ? `${fieldPath}.${propertyName}` : propertyName;\n  return Boolean(getIn(errors, path) && getIn(touched, path));\n};\n\nexport const errorExists = (errors, fieldPath, propertyName) => getIn(errors, `${fieldPath}.${propertyName}`);\n\nexport const checkStatus = ([startDate, endDate]) => {\n  const today = moment(); let status;\n\n  if (moment(endDate).isBefore(today, 'days')) {\n    status = constants.COMPLETE;\n  } else if (moment(startDate).isAfter(today, 'days')) {\n    status = constants.UPCOMING;\n  } else {\n    status = constants.ACTIVE;\n  }\n  return status;\n};\n\nexport const validTimeFormats = ['hh:mm A', 'HH:mm'];\nexport const mergeDateTime = (date, time) => ((date && time) ? `${date}T${time}` : date);\nexport const isSameDay = (startDate, endDate) => moment(startDate).isSame(endDate, 'day');\nexport const isSameMonth = (startDate, endDate) => moment(startDate).isSame(endDate, 'month');\nexport const isSameYear = (startDate, endDate) => moment(startDate).isSame(endDate, 'year');\nexport const getTime = (dateTime) => (dateTime ? dateTime.split('T')[1] : '');\nexport const hasValidDateFormat = (date) => moment(date, ['MM/DD/YYYY', 'YYYY-MM-DD'], true).isValid();\nexport const hasValidTimeFormat = (time) => time && moment(time, validTimeFormats, true).isValid();\nexport const startOfDayTime = (time) => time || moment().startOf('day').format('HH:mm');\nexport const endOfDayTime = (time) => time || moment().endOf('day').format('HH:mm');\nexport const normalizeTime = (time) => time && moment(time, validTimeFormats, true).format('HH:mm');\nexport const normalizeDate = (date) => moment(date, ['MM/DD/YYYY', 'YYYY-MM-DDTHH:mm', 'YYYY-MM-DD'], true).format('YYYY-MM-DD');\n\nexport const decodeDateTime = (date, time) => {\n  const nDate = normalizeDate(date);\n  const nTime = normalizeTime(time);\n\n  return moment(mergeDateTime(nDate, nTime));\n};\n\nexport const sortRestrictedDatesByStatus = (data, status, order) => (\n  _.orderBy(\n    data.filter(date => date.status === status),\n    [(obj) => decodeDateTime(obj.startDate, startOfDayTime(obj.startTime))],\n    [order],\n  )\n);\n\nexport const formatRestrictedDates = ({\n  startDate, startTime, endDate, endTime,\n}) => {\n  let formattedDate;\n  const hasSameDay = isSameDay(startDate, endDate);\n  const hasSameMonth = isSameMonth(startDate, endDate);\n  const hasSameYear = isSameYear(startDate, endDate);\n  const isTimeAvailable = Boolean(startTime || endTime);\n  const mStartDate = moment(startDate);\n  const mEndDate = moment(endDate);\n  const mStartDateTime = decodeDateTime(startDate, startOfDayTime(startTime));\n  const mEndDateTime = decodeDateTime(endDate, endOfDayTime(endTime));\n\n  if (hasSameDay && !isTimeAvailable) {\n    formattedDate = mStartDate.format('MMMM D, YYYY');\n  } else if (hasSameDay && isTimeAvailable) {\n    formattedDate = `\n      ${mStartDateTime.format('MMMM D, YYYY, h:mma')} -\n      ${mEndDateTime.format('h:mma')}\n    `;\n  } else if (hasSameMonth && !isTimeAvailable) {\n    formattedDate = `\n      ${mStartDate.format('MMMM D')} -\n      ${mEndDate.format('D, YYYY')}\n    `;\n  } else if (!hasSameMonth && hasSameYear && !isTimeAvailable) {\n    formattedDate = `\n      ${mStartDate.format('MMMM D')} -\n      ${mEndDate.format('MMMM D, YYYY')}\n    `;\n  } else if (!hasSameMonth && !hasSameYear && !isTimeAvailable) {\n    formattedDate = `\n      ${mStartDate.format('MMMM D, YYYY')} -\n      ${mEndDate.format('MMMM D, YYYY')}\n    `;\n  } else {\n    formattedDate = `\n      ${mStartDateTime.format('MMMM D, YYYY, h:mma')} -\n      ${mEndDateTime.format('MMMM D, YYYY, h:mma')}\n    `;\n  }\n  return formattedDate;\n};\n","import moment from 'moment';\n\nimport messages from '../app-config-form/messages';\n\nexport const restrictedDatesStatus = {\n  UPCOMING: 'UPCOMING',\n  COMPLETE: 'COMPLETE',\n  ACTIVE: 'ACTIVE',\n};\n\nexport const badgeVariant = {\n  UPCOMING: 'primary',\n  COMPLETE: 'light',\n  ACTIVE: 'success',\n};\n\nexport const deleteRestrictedDatesHelperText = {\n  UPCOMING: messages.restrictedDatesDeletionHelp,\n  COMPLETE: messages.completeRestrictedDatesDeletionHelp,\n  ACTIVE: messages.activeRestrictedDatesDeletionHelp,\n};\n\nexport const discussionRestriction = {\n  DISABLED: 'disabled',\n  ENABLED: 'enabled',\n  SCHEDULED: 'scheduled',\n};\n\nexport const discussionRestrictionLabels = {\n  OFF: 'Off',\n  ON: 'On',\n  SCHEDULED: 'Scheduled',\n};\n\nexport const discussionRestrictionOptions = [\n  {\n    value: discussionRestriction.DISABLED,\n    message: messages.discussionRestrictionOffLabelHelpText,\n    label: discussionRestrictionLabels.OFF,\n  },\n  {\n    value: discussionRestriction.ENABLED,\n    message: messages.discussionRestrictionOnLabelHelpText,\n    label: discussionRestrictionLabels.ON,\n  },\n  {\n    value: discussionRestriction.SCHEDULED,\n    message: messages.discussionRestrictionScheduledLabelHelpText,\n    label: discussionRestrictionLabels.SCHEDULED,\n  },\n];\n\nexport const today = moment();\nexport const active = [today.format('YYYY-MM-DDTHH:mm'), today.add(5, 'hours').format('YYYY-MM-DDTHH:mm')];\nexport const upcoming = [today.add(2, 'days').format('YYYY-MM-DD'), today.add(5, 'days').format('YYYY-MM-DD')];\nexport const complete = [today.subtract(7, 'days').format('YYYY-MM-DD'), today.subtract(5, 'days').format('YYYY-MM-DD')];\n\nexport const FEATURE_TYPES = ['basic', 'partial', 'full', 'common'];\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { RequestStatus } from '../../../data/constants';\n\nconst slice = createSlice({\n  name: 'live',\n  initialState: {\n    appIds: [],\n    // activeAppId is the ID of the app that has been configured for the course.\n    activeAppId: null,\n    // selectedAppId is the ID of the app that has been selected in the UI.  This happens when an\n    // activeAppId has been configured but the user is about to configure a different provider\n    // instead.\n    selectedAppId: null,\n    status: RequestStatus.IN_PROGRESS,\n    saveStatus: RequestStatus.SUCCESSFUL,\n  },\n  reducers: {\n    loadApps: (state, { payload }) => {\n      state.status = RequestStatus.SUCCESSFUL;\n      state.saveStatus = RequestStatus.SUCCESSFUL;\n      Object.assign(state, payload);\n    },\n    selectApp: (state, { payload }) => {\n      const { appId } = payload;\n      state.selectedAppId = appId;\n    },\n    updateStatus: (state, { payload }) => {\n      const { status } = payload;\n      state.status = status;\n    },\n    updateSaveStatus: (state, { payload }) => {\n      const { status } = payload;\n      state.saveStatus = status;\n    },\n  },\n});\n\nexport const {\n  loadApps,\n  selectApp,\n  updateStatus,\n  updateSaveStatus,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","import { useContext, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport * as Yup from 'yup';\nimport { snakeCase } from 'lodash/string';\nimport moment from 'moment';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { RequestStatus } from './data/constants';\nimport { getCourseAppSettingValue, getLoadingStatus } from './pages-and-resources/data/selectors';\nimport { fetchCourseAppSettings, updateCourseAppSetting } from './pages-and-resources/data/thunks';\nimport { PagesAndResourcesContext } from './pages-and-resources/PagesAndResourcesProvider';\nimport {\n  hasValidDateFormat, hasValidTimeFormat, decodeDateTime, endOfDayTime, startOfDayTime,\n} from './pages-and-resources/discussions/app-config-form/utils';\nimport { DATE_TIME_FORMAT } from './constants';\n\nexport const executeThunk = async (thunk, dispatch, getState) => {\n  await thunk(dispatch, getState);\n  await new Promise(setImmediate);\n};\n\nexport function useIsMobile() {\n  return useMediaQuery({ query: '(max-width: 767.98px)' });\n}\n\nexport function useIsDesktop() {\n  return useMediaQuery({ query: '(min-width: 992px)' });\n}\n\nexport function convertObjectToSnakeCase(obj, unpacked = false) {\n  return Object.keys(obj).reduce((snakeCaseObj, key) => {\n    const snakeCaseKey = snakeCase(key);\n    const value = unpacked ? obj[key] : { value: obj[key] };\n    return {\n      ...snakeCaseObj,\n      [snakeCaseKey]: value,\n    };\n  }, {});\n}\n\nexport function deepConvertingKeysToCamelCase(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map((item) => deepConvertingKeysToCamelCase(item));\n  }\n\n  const camelCaseObj = {};\n  Object.keys(obj).forEach((key) => {\n    const camelCaseKey = key.replace(/_([a-z])/g, (match, p1) => p1.toUpperCase());\n    camelCaseObj[camelCaseKey] = deepConvertingKeysToCamelCase(obj[key]);\n  });\n  return camelCaseObj;\n}\n\nexport function deepConvertingKeysToSnakeCase(obj) {\n  if (typeof obj !== 'object' || obj === null) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map((item) => deepConvertingKeysToSnakeCase(item));\n  }\n\n  const snakeCaseObj = {};\n  Object.entries(obj).forEach(([key, value]) => {\n    const snakeCaseKey = key.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n    snakeCaseObj[snakeCaseKey] = key === 'gradeCutoffs' ? value : deepConvertingKeysToSnakeCase(value);\n  });\n  return snakeCaseObj;\n}\n\nexport function transformKeysToCamelCase(obj) {\n  return obj.key.replace(/_([a-z])/g, (match, letter) => letter.toUpperCase());\n}\n\nexport function parseArrayOrObjectValues(obj) {\n  const result = {};\n\n  Object.entries(obj).forEach(([key, value]) => {\n    try {\n      if (!Number.isNaN(Number(value))) {\n        result[key] = value;\n      } else {\n        result[key] = JSON.parse(value);\n      }\n    } catch (e) {\n      result[key] = value;\n    }\n  });\n\n  return result;\n}\n\n/**\n * Create a correct inner path depend on config PUBLIC_PATH.\n * @param {string} checkPath - the internal route path that is validated\n * @returns {string} - the correct internal route path\n */\nexport const createCorrectInternalRoute = (checkPath) => {\n  let basePath = getConfig().PUBLIC_PATH;\n\n  if (basePath.endsWith('/')) {\n    basePath = basePath.slice(0, -1);\n  }\n\n  if (!checkPath.startsWith(basePath)) {\n    return `${basePath}${checkPath}`;\n  }\n\n  return checkPath;\n};\n\nexport function getPagePath(courseId, isMfePageEnabled, urlParameter) {\n  if (isMfePageEnabled === 'true') {\n    if (urlParameter === 'tabs') {\n      return createCorrectInternalRoute(`/course/${courseId}/pages-and-resources`);\n    }\n    return createCorrectInternalRoute(`/course/${courseId}/${urlParameter}`);\n  }\n  return `${getConfig().STUDIO_BASE_URL}/${urlParameter}/${courseId}`;\n}\n\nexport function useAppSetting(settingName) {\n  const dispatch = useDispatch();\n  const { courseId } = useContext(PagesAndResourcesContext);\n  const settingValue = useSelector(getCourseAppSettingValue(settingName));\n  const loadingStatus = useSelector(getLoadingStatus);\n  useEffect(() => {\n    if ([RequestStatus.DENIED, RequestStatus.FAILED].includes(loadingStatus)) {\n      return;\n    }\n    if (settingValue === undefined || settingValue === null) {\n      dispatch(fetchCourseAppSettings(courseId, [settingName]));\n    }\n  }, [courseId]);\n\n  const saveSetting = async (value) => dispatch(updateCourseAppSetting(courseId, settingName, value));\n  return [settingValue, saveSetting];\n}\n\nexport const getLabelById = (options, id) => {\n  const foundOption = options.find((option) => option.id === id);\n  return foundOption ? foundOption.label : '';\n};\n\n/**\n * Adds additional validation methods to Yup.\n */\nexport function setupYupExtensions() {\n  // Add a uniqueProperty method to arrays that allows validating that the specified property path is unique\n  // across all objects in the array.\n  // Credit: https://github.com/jquense/yup/issues/345#issuecomment-717400071\n  Yup.addMethod(Yup.array, 'uniqueProperty', function uniqueProperty(property, message) {\n    return this.test('unique', '', function testUniqueness(list) {\n      const errors = [];\n\n      list.forEach((item, index) => {\n        const propertyValue = item[property];\n\n        if (propertyValue && list.filter(entry => entry[property] === propertyValue).length > 1) {\n          errors.push(\n            this.createError({\n              path: `${this.path}[${index}].${property}`,\n              message,\n            }),\n          );\n        }\n      });\n\n      if (errors.length > 0) {\n        throw new Yup.ValidationError(errors);\n      }\n\n      return true;\n    });\n  });\n\n  Yup.addMethod(Yup.object, 'uniqueObjectProperty', function uniqueObjectProperty(propertyName, message) {\n    return this.test('unique', message, function testUniqueness(discussionTopic) {\n      if (!discussionTopic || !discussionTopic[propertyName]) {\n        return true;\n      }\n      const isDuplicate = this.parent.filter(topic => topic !== discussionTopic)\n        .some(topic => topic[propertyName]?.toLowerCase() === discussionTopic[propertyName].toLowerCase());\n\n      if (isDuplicate) {\n        throw this.createError({\n          path: `${this.path}.${propertyName}`,\n          error: message,\n        });\n      }\n      return true;\n    });\n  });\n\n  Yup.addMethod(Yup.string, 'compare', function compare(message, type) {\n    return this.test('isGreater', message, function isGreater() {\n      // This function compare 2 dates or 2 times. It return no error if dateInstance/timeInstance is empty\n      // of if startTime or endTime is not present for time comparesion\n      // or startDate or endDate is not present for date comparesion\n\n      if (!this.parent\n        || (!(this.parent.startTime && this.parent.endTime) && type === 'time')\n        || (!(this.parent.startDate && this.parent.endDate) && type === 'date')\n      ) {\n        return true;\n      }\n\n      const startDateTime = decodeDateTime(this.parent.startDate, startOfDayTime(this.parent.startTime));\n      const endDateTime = decodeDateTime(this.parent.endDate, endOfDayTime(this.parent.endTime));\n      let isInvalidStartDateTime;\n\n      if (type === 'date') {\n        isInvalidStartDateTime = startDateTime.isAfter(endDateTime);\n      } else if (type === 'time') {\n        isInvalidStartDateTime = startDateTime.isSameOrAfter(endDateTime);\n      }\n\n      if (isInvalidStartDateTime) {\n        throw this.createError({\n          path: `${this.path}`,\n          error: message,\n        });\n      }\n      return true;\n    });\n  });\n\n  Yup.addMethod(Yup.string, 'checkFormat', function checkFormat(message, type) {\n    return this.test('isValidFormat', message, function isValidFormat() {\n      if (!this.originalValue) {\n        return true;\n      }\n      let isValid;\n\n      if (type === 'date') {\n        isValid = hasValidDateFormat(this.originalValue);\n      } else if (type === 'time') {\n        isValid = hasValidTimeFormat(this.originalValue);\n      }\n\n      if (!isValid) {\n        throw this.createError({\n          path: `${this.path}`,\n          error: message,\n        });\n      }\n      return true;\n    });\n  });\n}\n\nexport const convertToDateFromString = (dateStr) => {\n  if (!dateStr) {\n    return '';\n  }\n\n  return moment(dateStr).utc().toDate();\n};\n\nexport const convertToStringFromDate = (date) => {\n  if (!date) {\n    return '';\n  }\n\n  return moment(date).utc().format(DATE_TIME_FORMAT);\n};\n\nexport const isValidDate = (date) => {\n  const formattedValue = convertToStringFromDate(date).split('T')[0];\n\n  return Boolean(formattedValue.length <= 10);\n};\n","import { Collapsible, Icon, IconButton } from '@edx/paragon';\nimport { Delete, ExpandLess, ExpandMore } from '@edx/paragon/icons';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst CollapsableEditor = ({\n  title,\n  open,\n  defaultOpen,\n  onToggle,\n  onClose,\n  onDelete,\n  children,\n  expandAlt,\n  deleteAlt,\n  collapseAlt,\n  ...props\n}) => (\n  <Collapsible.Advanced\n    className=\"collapsible-card rounded mb-3 px-3 py-2\"\n    onToggle={onToggle}\n    onClose={onClose}\n    defaultOpen={defaultOpen}\n    open={open}\n    {...props}\n  >\n    <Collapsible.Trigger\n      className=\"collapsible-trigger d-flex border-0 align-items-center\"\n      style={{ justifyContent: 'unset' }}\n    >\n      <div className=\"d-flex flex-grow-1 w-75\">{title}</div>\n      <Collapsible.Visible whenClosed>\n        <div className=\"align-self-start\">\n          <IconButton alt={expandAlt} src={ExpandMore} iconAs={Icon} variant=\"dark\" />\n        </div>\n      </Collapsible.Visible>\n      <Collapsible.Visible whenOpen>\n        {onDelete && (\n          <div className=\"pr-4 border-right\">\n            <IconButton\n              onClick={(event) => {\n                event.stopPropagation();\n                onDelete();\n              }}\n              alt={deleteAlt}\n              src={Delete}\n              iconAs={Icon}\n              variant=\"dark\"\n            />\n          </div>\n        )}\n        <div className=\"pl-4 d-flex\">\n          <IconButton alt={collapseAlt} src={ExpandLess} iconAs={Icon} variant=\"dark\" />\n        </div>\n      </Collapsible.Visible>\n    </Collapsible.Trigger>\n    <Collapsible.Body className=\"collapsible-body rounded px-0\">{children}</Collapsible.Body>\n  </Collapsible.Advanced>\n);\n\nCollapsableEditor.propTypes = {\n  open: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  title: PropTypes.node.isRequired,\n  onToggle: PropTypes.func.isRequired,\n  onDelete: PropTypes.func,\n  children: PropTypes.node.isRequired,\n  expandAlt: PropTypes.string.isRequired,\n  deleteAlt: PropTypes.string.isRequired,\n  collapseAlt: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n};\n\nCollapsableEditor.defaultProps = {\n  onDelete: null,\n  defaultOpen: undefined,\n  open: undefined,\n  onClose: () => {\n  },\n};\n\nexport default React.memo(CollapsableEditor);\n","import React from 'react';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport messages from '../messages';\n\nconst ConnectionErrorAlert = ({ intl }) => (\n  <Alert variant=\"danger\" data-testid=\"connectionErrorAlert\">\n    <FormattedMessage\n      id=\"authoring.alert.error.connection\"\n      defaultMessage=\"We encountered a technical error when loading this page. This might be a temporary issue, so please try again in a few minutes. If the problem persists, please go to the {supportLink} for help.\"\n      values={{\n        supportLink: (\n          <Alert.Link href={getConfig().SUPPORT_URL}>\n            {intl.formatMessage(messages.supportText)}\n          </Alert.Link>\n        ),\n      }}\n    />\n  </Alert>\n);\n\nConnectionErrorAlert.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ConnectionErrorAlert);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, SwitchControl } from '@edx/paragon';\n\nimport './FormSwitchGroup.scss';\n\nconst FormSwitchGroup = ({\n  id,\n  name,\n  label,\n  helpText,\n  className,\n  onChange,\n  onBlur,\n  checked,\n  disabled,\n}) => {\n  const helpTextId = `${id}HelpText`;\n\n  // Note that we use controlId here _and_ set some IDs and aria-describedby attributes manually.\n  // controlId doesn't cover Form.Switch properly, so controlId is just helping to attach\n  // a 'for' attribute to the Label.\n  return (\n    <Form.Group\n      controlId={id}\n      className={className}\n    >\n      <div className=\"d-flex flex-column\">\n        <div className=\"d-flex flex-row justify-content-between align-items-center pb-2\">\n          <Form.Label className=\"h4 text-primary-500 m-0\">\n            {label}\n          </Form.Label>\n          <SwitchControl\n            id={id}\n            name={name}\n            aria-describedby={helpTextId}\n            onChange={onChange}\n            onBlur={onBlur}\n            checked={checked}\n            disabled={disabled}\n          />\n        </div>\n        <Form.Text\n          className=\"mt-0 text-gray-700 helper-text\"\n          id={helpTextId}\n        >\n          {helpText}\n        </Form.Text>\n      </div>\n    </Form.Group>\n  );\n};\nFormSwitchGroup.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.node.isRequired,\n  name: PropTypes.string,\n  helpText: PropTypes.node.isRequired,\n  className: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  checked: PropTypes.bool.isRequired,\n  disabled: PropTypes.bool,\n};\nFormSwitchGroup.defaultProps = {\n  className: null,\n  onBlur: null,\n  name: null,\n  disabled: false,\n};\n\nexport default FormSwitchGroup;\n","import { Form, TransitionReplace } from '@edx/paragon';\nimport { getIn, useFormikContext } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst FormikErrorFeedback = ({ name, children }) => {\n  const { touched, errors } = useFormikContext();\n  const fieldTouched = getIn(touched, name);\n  const fieldError = getIn(errors, name);\n\n  return (\n    <TransitionReplace>\n      {fieldTouched && fieldError\n        ? (\n          <Form.Control.Feedback type=\"invalid\" hasIcon={false} key={`${name}-error-feedback`}>\n            {fieldError}\n          </Form.Control.Feedback>\n        )\n        : (\n          <React.Fragment key={`${name}-no-error-feedback`}>\n            {children}\n          </React.Fragment>\n        )}\n    </TransitionReplace>\n  );\n};\n\nFormikErrorFeedback.propTypes = {\n  name: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\nFormikErrorFeedback.defaultProps = {\n  children: null,\n};\n\nexport default FormikErrorFeedback;\n","/* eslint-disable react/jsx-no-useless-fragment */\nimport { Form } from '@edx/paragon';\nimport { getIn, useFormikContext } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport FormikErrorFeedback from './FormikErrorFeedback';\n\nconst FormikControl = ({\n  name,\n  label,\n  help,\n  className,\n  ...params\n}) => {\n  const {\n    touched, errors, handleChange, handleBlur, setFieldError,\n  } = useFormikContext();\n  const fieldTouched = getIn(touched, name);\n  const fieldError = getIn(errors, name);\n  const handleFocus = (e) => setFieldError(e.target.name, undefined);\n\n  return (\n    <Form.Group className={className}>\n      {label}\n      <Form.Control\n        {...params}\n        name={name}\n        className=\"pb-2\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        onFocus={handleFocus}\n        isInvalid={fieldTouched && fieldError}\n      />\n      <FormikErrorFeedback name={name}>\n        <Form.Text>{help}</Form.Text>\n      </FormikErrorFeedback>\n    </Form.Group>\n  );\n};\n\nFormikControl.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.element,\n  help: PropTypes.element,\n  className: PropTypes.string,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n};\n\nFormikControl.defaultProps = {\n  help: <></>,\n  label: <></>,\n  className: '',\n};\n\nexport default FormikControl;\n","import React from 'react';\nimport { Spinner } from '@edx/paragon';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nconst Loading = () => (\n  <div\n    className=\"d-flex justify-content-center align-items-center flex-column\"\n    style={{\n      height: '100vh',\n    }}\n  >\n    <Spinner\n      animation=\"border\"\n      role=\"status\"\n      variant=\"primary\"\n      screenReaderText={(\n        <span className=\"sr-only\">\n          <FormattedMessage\n            id=\"authoring.loading\"\n            defaultMessage=\"Loading...\"\n            description=\"Screen-reader message for when a page is loading.\"\n          />\n        </span>\n      )}\n    />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert } from '@edx/paragon';\n\nconst PermissionDeniedAlert = () => (\n  <Alert variant=\"danger\" data-testid=\"permissionDeniedAlert\">\n    <FormattedMessage\n      id=\"authoring.alert.error.permission\"\n      defaultMessage=\"You are not authorized to view this page. If you feel you should have access, please reach out to your course team admin to be given access.\"\n    />\n  </Alert>\n);\n\nexport default PermissionDeniedAlert;\n","import { messages as footerMessages } from '@edx/frontend-component-footer';\nimport { messages as paragonMessages } from '@edx/paragon';\nimport arMessages from './messages/ar.json';\nimport frMessages from './messages/fr.json';\nimport es419Messages from './messages/es_419.json';\nimport zhcnMessages from './messages/zh_CN.json';\nimport ptMessages from './messages/pt.json';\nimport itMessages from './messages/it.json';\nimport ukMessages from './messages/uk.json';\nimport deMessages from './messages/de.json';\nimport ruMessages from './messages/ru.json';\nimport hiMessages from './messages/hi.json';\nimport frCAMessages from './messages/fr_CA.json';\nimport dedeMessages from './messages/de_DE.json';\nimport ititMessages from './messages/it_IT.json';\nimport ptptMessages from './messages/pt_PT.json';\n// no need to import en messages-- they are in the defaultMessage field\n\nconst appMessages = {\n  ar: arMessages,\n  'es-419': es419Messages,\n  fr: frMessages,\n  'zh-cn': zhcnMessages,\n  pt: ptMessages,\n  it: itMessages,\n  de: deMessages,\n  hi: hiMessages,\n  'fr-ca': frCAMessages,\n  ru: ruMessages,\n  uk: ukMessages,\n  'de-de': dedeMessages,\n  'it-it': ititMessages,\n  'pt-pt': ptptMessages,\n};\n\nexport default [\n  footerMessages,\n  paragonMessages,\n  appMessages,\n];\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const LOADED = 'LOADED';\n\nconst slice = createSlice({\n  name: 'courseDetail',\n  initialState: {\n    courseId: null,\n    status: null,\n    canChangeProvider: null,\n  },\n  reducers: {\n    updateStatus: (state, { payload }) => {\n      state.courseId = payload.courseId;\n      state.status = payload.status;\n    },\n    updateCanChangeProviders: (state, { payload }) => {\n      state.canChangeProviders = payload.canChangeProviders;\n    },\n  },\n});\n\nexport const {\n  updateStatus,\n  updateCanChangeProviders,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  settings: {\n    id: 'authoring.discussions.settings',\n    defaultMessage: 'Settings',\n    description: 'A label for the second step of the app configuration stepper.',\n  },\n  configure: {\n    id: 'authoring.discussions.configure',\n    defaultMessage: 'Configure discussions',\n  },\n  configureApp: {\n    id: 'authoring.discussions.configure.app',\n    defaultMessage: 'Configure {name}',\n  },\n  backButton: {\n    id: 'authoring.discussions.backButton',\n    defaultMessage: 'Back',\n    description: 'Button allowing the user to return to discussion app selection.',\n  },\n  applyButton: {\n    id: 'authoring.discussions.applyButton',\n    defaultMessage: 'Apply',\n    description: 'Button allowing the user to submit their discussion configuration.',\n  },\n  applyingButton: {\n    id: 'authoring.discussions.applyingButton',\n    defaultMessage: 'Applying',\n    description: 'Button label when the discussion configuration is being submitted.',\n  },\n  appliedButton: {\n    id: 'authoring.discussions.appliedButton',\n    defaultMessage: 'Applied',\n    description: 'Button label when the discussion configuration has been successfully submitted.',\n  },\n  noProviderSwitchAfterCourseStarted: {\n    id: 'authoring.discussions.noProviderSwitchAfterCourseStarted',\n    defaultMessage: \"Discussion provider can't be changed after course has started, please reach out to partner support.\",\n    description: \"Informs the user that the provider can't be changed after the course has started.\",\n  },\n  providerSelection: {\n    id: 'authoring.discussions.providerSelection',\n    defaultMessage: 'Provider selection',\n    description: 'A label for the first step of a wizard where the user chooses a discussion tool to configure.',\n  },\n  Incomplete: {\n    id: 'authoring.discussions.Incomplete',\n    defaultMessage: 'Incomplete',\n    description: 'A description for the second step of the app configuration stepper.',\n  },\n});\n\nexport default messages;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const DiscussionsContext = React.createContext({});\n\nconst DiscussionsProvider = ({ children, path }) => {\n  const contextValue = useMemo(() => ({ path }), []);\n  return (\n    <DiscussionsContext.Provider\n      value={contextValue}\n    >\n      {children}\n    </DiscussionsContext.Provider>\n  );\n};\n\nDiscussionsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  path: PropTypes.string.isRequired,\n};\n\nexport default DiscussionsProvider;\n","import { camelCaseObject, ensureConfig, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { v4 as uuid } from 'uuid';\nimport { DivisionSchemes } from '../../../data/constants';\n\nimport {\n  checkStatus,\n  endOfDayTime,\n  getTime,\n  mergeDateTime,\n  normalizeDate,\n  normalizeTime,\n  sortRestrictedDatesByStatus,\n  startOfDayTime,\n} from '../app-config-form/utils';\nimport { restrictedDatesStatus as constants } from './constants';\n\nensureConfig([\n  'STUDIO_BASE_URL',\n], 'Course Apps API service');\n\nfunction normalizeLtiConfig(data) {\n  if (!data || Object.keys(data).length < 1) {\n    return {};\n  }\n\n  return {\n    consumerKey: data.lti_1p1_client_key,\n    consumerSecret: data.lti_1p1_client_secret,\n    launchUrl: data.lti_1p1_launch_url,\n  };\n}\n\nexport function normalizeRestrictedDates(data) {\n  if (!data || Object.keys(data).length < 1) {\n    return [];\n  }\n\n  const normalizeData = data.map(([startDate, endDate]) => ({\n    id: uuid(),\n    startDate: normalizeDate(startDate),\n    startTime: getTime(startDate),\n    endDate: normalizeDate(endDate),\n    endTime: getTime(endDate),\n    status: checkStatus([startDate, endDate]),\n  }));\n\n  return [\n    ...sortRestrictedDatesByStatus(normalizeData, constants.ACTIVE, 'desc'),\n    ...sortRestrictedDatesByStatus(normalizeData, constants.UPCOMING, 'asc'),\n    ...sortRestrictedDatesByStatus(normalizeData, constants.COMPLETE, 'desc'),\n  ];\n}\n\nfunction normalizePluginConfig(data) {\n  if (!data || Object.keys(data).length < 1) {\n    return {};\n  }\n\n  const enableDivideByCohorts = data.always_divide_inline_discussions && data.division_scheme === 'cohort';\n  const enableDivideCourseTopicsByCohorts = enableDivideByCohorts && data.divided_course_wide_discussions.length > 0;\n  return {\n    allowAnonymousPosts: data.allow_anonymous,\n    allowAnonymousPostsPeers: data.allow_anonymous_to_peers,\n    reportedContentEmailNotifications: data.reported_content_email_notifications,\n    enableReportedContentEmailNotifications: data.reported_content_email_notifications_flag,\n    divisionScheme: data.division_scheme,\n    alwaysDivideInlineDiscussions: data.always_divide_inline_discussions,\n    restrictedDates: normalizeRestrictedDates(data.discussion_blackouts),\n    allowDivisionByUnit: false,\n    divideByCohorts: enableDivideByCohorts,\n    divideCourseTopicsByCohorts: enableDivideCourseTopicsByCohorts,\n    cohortsEnabled: data.available_division_schemes?.includes('cohort') || false,\n    groupAtSubsection: data.group_at_subsection,\n  };\n}\n\nfunction normalizePiiSharing(data) {\n  return {\n    piiSharing: data.pii_sharing_allowed,\n    piiShareUsername: data.pii_sharing_allowed,\n    piiShareEmail: data.pii_sharing_allowed,\n  };\n}\n\nfunction normalizeAppConfig(data) {\n  return {\n    id: data.provider_type,\n    ...normalizePluginConfig(data.plugin_configuration),\n    ...normalizeLtiConfig(data.lti_configuration),\n  };\n}\n\nfunction normalizeDiscussionTopic(data) {\n  return Object.entries(data).map(([key, value]) => ({\n    name: key,\n    id: value.id,\n  }));\n}\n\nfunction extractDiscussionTopicIds(data) {\n  return Object.entries(\n    data,\n    // eslint-disable-next-line no-unused-vars\n  ).map(([key, value]) => value.id);\n}\n\nfunction normalizeFeatures(data, apps) {\n  if (!data || data.length < 1) {\n    return [];\n  }\n\n  return camelCaseObject(\n    data.filter((feature) => apps.map((app) => app.featureIds.includes(feature.id)).some((supported) => supported)),\n  );\n}\n\nfunction normalizeProviders(data) {\n  const apps = Object.entries(data.available).map(([key, app]) => ({\n    id: key,\n    messages: app.messages,\n    featureIds: app.features,\n    externalLinks: {\n      learnMore: app.external_links.learn_more,\n      configuration: app.external_links.configuration,\n      general: app.external_links.general,\n      accessibility: app.external_links.accessibility,\n      contactEmail: app.external_links.contact_email,\n    },\n    hasFullSupport: app.has_full_support,\n    adminOnlyConfig: !!app.admin_only_config,\n  }));\n  return {\n    features: normalizeFeatures(data.features, apps),\n    activeAppId: data.active,\n    apps,\n  };\n}\n\nfunction normalizeSettings(data) {\n  return {\n    enabled: data.enabled,\n    enableInContext: data.enable_in_context,\n    enableGradedUnits: data.enable_graded_units,\n    unitLevelVisibility: data.unit_level_visibility,\n    postingRestrictions: data.posting_restrictions,\n    appConfig: normalizeAppConfig(data),\n    piiConfig: normalizePiiSharing(data.lti_configuration),\n    discussionTopicIds: data.plugin_configuration.discussion_topics\n      ? extractDiscussionTopicIds(data.plugin_configuration.discussion_topics)\n      : [],\n    discussionTopics: data.plugin_configuration.discussion_topics\n      ? normalizeDiscussionTopic(data.plugin_configuration.discussion_topics)\n      : [],\n    divideDiscussionIds: data.plugin_configuration.divided_course_wide_discussions,\n  };\n}\n\nexport function denormalizeRestrictedDate(restrictedPeriod) {\n  return [\n    mergeDateTime(\n      normalizeDate(restrictedPeriod.startDate),\n      normalizeTime(startOfDayTime(restrictedPeriod.startTime)),\n    ),\n    mergeDateTime(\n      normalizeDate(restrictedPeriod.endDate),\n      normalizeTime(endOfDayTime(restrictedPeriod.endTime)),\n    ),\n  ];\n}\n\nfunction denormalizeData(courseId, appId, data) {\n  const pluginConfiguration = {};\n\n  if ('allowAnonymousPosts' in data) {\n    pluginConfiguration.allow_anonymous = data.allowAnonymousPosts;\n  }\n  if ('allowAnonymousPostsPeers' in data) {\n    pluginConfiguration.allow_anonymous_to_peers = data.allowAnonymousPostsPeers;\n  }\n  if ('reportedContentEmailNotifications' in data) {\n    pluginConfiguration.reported_content_email_notifications = data.reportedContentEmailNotifications;\n  }\n  if ('divideByCohorts' in data) {\n    pluginConfiguration.division_scheme = data.divideByCohorts ? DivisionSchemes.COHORT : DivisionSchemes.NONE;\n    pluginConfiguration.always_divide_inline_discussions = data.divideByCohorts;\n  }\n  if ('groupAtSubsection' in data) {\n    pluginConfiguration.group_at_subsection = data.groupAtSubsection;\n  }\n  if (data.restrictedDates?.length) {\n    pluginConfiguration.discussion_blackouts = data.restrictedDates.map((restrictedDates) => (\n      denormalizeRestrictedDate(restrictedDates)\n    ));\n  } else if (data.restrictedDates?.length === 0) {\n    pluginConfiguration.discussion_blackouts = [];\n  }\n  if (data.discussionTopics?.length) {\n    pluginConfiguration.discussion_topics = data.discussionTopics.reduce((topics, currentTopic) => {\n      const newTopics = { ...topics };\n      newTopics[currentTopic.name] = { id: currentTopic.id };\n      return newTopics;\n    }, {});\n  }\n  if ('divideCourseTopicsByCohorts' in data) {\n    pluginConfiguration.divided_course_wide_discussions = data.divideCourseTopicsByCohorts\n      ? data.divideDiscussionIds : [];\n  }\n\n  const ltiConfiguration = {};\n\n  if (data.consumerKey) {\n    ltiConfiguration.lti_1p1_client_key = data.consumerKey;\n  }\n  if (data.consumerSecret) {\n    ltiConfiguration.lti_1p1_client_secret = data.consumerSecret;\n  }\n  if (data.launchUrl) {\n    ltiConfiguration.lti_1p1_launch_url = data.launchUrl;\n  }\n  if ('piiShareUsername' in data) {\n    ltiConfiguration.pii_share_username = data.piiShareUsername;\n  }\n  if ('piiShareEmail' in data) {\n    ltiConfiguration.pii_share_email = data.piiShareEmail;\n  }\n\n  if (Object.keys(ltiConfiguration).length > 0) {\n    // Only add this in if we're sending LTI fields.\n    // TODO: Eventually support LTI v1.3 here.\n    ltiConfiguration.version = 'lti_1p1';\n  }\n\n  const apiData = {\n    context_key: courseId,\n    enabled: data.enabled,\n    lti_configuration: ltiConfiguration,\n    plugin_configuration: pluginConfiguration,\n    provider_type: appId,\n  };\n  if ('enableInContext' in data) {\n    apiData.enable_in_context = data.enableInContext;\n  }\n  if ('enableGradedUnits' in data) {\n    apiData.enable_graded_units = data.enableGradedUnits;\n  }\n  if ('unitLevelVisibility' in data) {\n    apiData.unit_level_visibility = data.unitLevelVisibility;\n  }\n  if ('postingRestrictions' in data) {\n    apiData.posting_restrictions = data.postingRestrictions;\n  }\n  return apiData;\n}\n\nexport function getDiscussionsProvidersUrl(courseId) {\n  return `${getConfig().STUDIO_BASE_URL}/api/discussions/v0/course/${courseId}/providers`;\n}\n\nexport function getDiscussionsSettingsUrl(courseId) {\n  return `${getConfig().STUDIO_BASE_URL}/api/discussions/v0/course/${courseId}/settings`;\n}\n\nexport async function getDiscussionsProviders(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getDiscussionsProvidersUrl(courseId));\n\n  return normalizeProviders(data);\n}\n\nexport async function getDiscussionsSettings(courseId, providerId = null) {\n  const params = {};\n  if (providerId) {\n    params.params = { provider_id: providerId };\n  }\n  const url = getDiscussionsSettingsUrl(courseId);\n  const { data } = await getAuthenticatedHttpClient()\n    .get(url, params);\n  return normalizeSettings(data);\n}\n\nexport async function postDiscussionsSettings(courseId, appId, values) {\n  const { data } = await getAuthenticatedHttpClient().post(\n    getDiscussionsSettingsUrl(courseId),\n    denormalizeData(courseId, appId, values),\n  );\n\n  return normalizeSettings(data);\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nexport const LOADING = 'LOADING';\nexport const LOADED = 'LOADED';\nexport const FAILED = 'FAILED';\nexport const DENIED = 'DENIED';\nexport const SAVING = 'SAVING';\nexport const SAVED = 'SAVED';\n\nconst slice = createSlice({\n  name: 'discussions',\n  initialState: {\n    appIds: [],\n    featureIds: [],\n    // activeAppId is the ID of the app that has been configured for the course.\n    activeAppId: null,\n    // selectedAppId is the ID of the app that has been selected in the UI.  This happens when an\n    // activeAppId has been configured but the user is about to configure a different provider\n    // instead.\n    selectedAppId: null,\n    status: LOADING,\n    saveStatus: SAVED,\n    // ValidationError is the Flag that represents a form validation status.\n    hasValidationError: false,\n    discussionTopicIds: [],\n    divideDiscussionIds: [],\n    enableInContext: false,\n    enableGradedUnits: false,\n    unitLevelVisibility: false,\n    postingRestrictions: null,\n    enabled: true,\n  },\n  reducers: {\n    loadApps: (state, { payload }) => {\n      state.status = LOADED;\n      state.saveStatus = SAVED;\n      Object.assign(state, payload);\n    },\n    selectApp: (state, { payload }) => {\n      const { appId } = payload;\n      state.selectedAppId = appId;\n    },\n    updateStatus: (state, { payload }) => {\n      const { status } = payload;\n      state.status = status;\n    },\n    updateSaveStatus: (state, { payload }) => {\n      const { status } = payload;\n      state.saveStatus = status;\n    },\n    updateValidationStatus: (state, { payload }) => {\n      const { hasError } = payload;\n      state.hasValidationError = hasError;\n    },\n    updateDiscussionTopicIds: (state, { payload }) => {\n      const { updatedDiscussionTopicIds } = payload;\n      state.discussionTopicIds = updatedDiscussionTopicIds;\n    },\n    updateDividedDiscussionsIds: (state, { payload }) => {\n      const { divideDiscussionIds } = payload;\n      state.divideDiscussionIds = divideDiscussionIds;\n    },\n  },\n});\n\nexport const {\n  loadApps,\n  selectApp,\n  updateStatus,\n  updateSaveStatus,\n  updateValidationStatus,\n  updateDiscussionTopicIds,\n  updateDividedDiscussionsIds,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","import { history } from '@edx/frontend-platform';\nimport { addModel, addModels } from '../../../generic/model-store';\nimport { getDiscussionsProviders, getDiscussionsSettings, postDiscussionsSettings } from './api';\nimport {\n  DENIED, FAILED, loadApps, LOADING, SAVED, SAVING, updateSaveStatus, updateStatus,\n} from './slice';\n\nfunction updateDiscussionSettingsState({\n  appConfig,\n  discussionTopics,\n  ...discussionSettings\n}) {\n  return async (dispatch) => {\n    dispatch(addModel({ modelType: 'appConfigs', model: appConfig }));\n    dispatch(addModels({ modelType: 'discussionTopics', models: discussionTopics }));\n    dispatch(loadApps(discussionSettings));\n  };\n}\n\nfunction updateProviderState({\n  apps,\n  features,\n  activeAppId,\n}) {\n  return async (dispatch) => {\n    dispatch(addModels({ modelType: 'apps', models: apps }));\n    dispatch(addModels({ modelType: 'features', models: features }));\n\n    dispatch(\n      loadApps({\n        activeAppId,\n        appIds: apps.map((app) => app.id),\n        featureIds: features.map((feature) => feature.id),\n      }),\n    );\n  };\n}\n\nexport function fetchProviders(courseId) {\n  return async (dispatch) => {\n    dispatch(updateStatus({ status: LOADING }));\n    try {\n      const apps = await getDiscussionsProviders(courseId);\n      dispatch(updateProviderState(apps));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateStatus({ status: DENIED }));\n      } else {\n        dispatch(updateStatus({ status: FAILED }));\n      }\n    }\n  };\n}\n\nexport function fetchDiscussionSettings(courseId, providerId = null) {\n  return async (dispatch) => {\n    dispatch(updateStatus({ status: LOADING }));\n    try {\n      const apps = await getDiscussionsSettings(courseId, providerId);\n      dispatch(updateDiscussionSettingsState(apps));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateStatus({ status: DENIED }));\n      } else {\n        dispatch(updateStatus({ status: FAILED }));\n      }\n    }\n  };\n}\n\nexport function saveProviderConfig(courseId, appId, drafts, successPath) {\n  return async (dispatch) => {\n    dispatch(updateSaveStatus({ status: SAVING }));\n\n    try {\n      const apps = await postDiscussionsSettings(courseId, appId, drafts);\n      dispatch(updateDiscussionSettingsState(apps));\n\n      dispatch(updateSaveStatus({ status: SAVED }));\n      // Note that we redirect here to avoid having to work with the promise over in AppConfigForm.\n      history.push(successPath);\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateSaveStatus({ status: DENIED }));\n        // This second one will remove the interface as well and hide it from the user.\n        dispatch(updateStatus({ status: DENIED }));\n      } else {\n        dispatch(updateSaveStatus({ status: FAILED }));\n      }\n    }\n  };\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  heading: {\n    id: 'authoring.discussions.heading',\n    defaultMessage: 'Select a discussion tool for this course',\n  },\n  supportedFeatures: {\n    id: 'authoring.discussions.supportedFeatures',\n    defaultMessage: 'Supported features',\n  },\n  'supportedFeatureList-mobile-show': {\n    id: 'authoring.discussions.supportedFeatureList-mobile-show',\n    defaultMessage: 'Show supported features',\n    description: 'This is used in mobile view as supported feature list heading when close',\n  },\n  'supportedFeatureList-mobile-hide': {\n    id: 'authoring.discussions.supportedFeatureList-mobile-hide',\n    defaultMessage: 'Hide supported features',\n    description: 'This is used in mobile view as supported feature list heading when opened',\n  },\n  noApps: {\n    id: 'authoring.discussions.noApps',\n    defaultMessage: 'There are no discussions providers available for your course.',\n    description: 'A message shown when there are no discussions providers available to be displayed.',\n  },\n  nextButton: {\n    id: 'authoring.discussions.nextButton',\n    defaultMessage: 'Next',\n    description: 'Button allowing the user to advance to the second step of discussion configuration.',\n  },\n  appFullSupport: {\n    id: 'authoring.discussions.appFullSupport',\n    defaultMessage: 'Full support',\n    description: 'A label indicating that an app supports the full set of possible features for a discussions app.',\n  },\n  appBasicSupport: {\n    id: 'authoring.discussions.appBasicSupport',\n    defaultMessage: 'Basic support',\n    description: 'A label indicating that an app only supports a subset of the possible features of a discussions app.',\n  },\n  selectApp: {\n    id: 'authoring.discussions.selectApp',\n    defaultMessage: 'Select {appName}',\n    description: 'A label for the checkbox that allows a user to select the discussions app they want to configure.',\n  },\n\n  // Legacy\n  'appName-legacy': {\n    id: 'authoring.discussions.appList.appName-legacy',\n    defaultMessage: 'edX',\n    description: 'The name of the Legacy edX Discussions app.',\n  },\n  'appDescription-legacy': {\n    id: 'authoring.discussions.appList.appDescription-legacy',\n    defaultMessage: 'Start conversations with other learners, ask questions, and interact with other learners in the course.',\n    description: 'A description of the Legacy edX Discussions app.',\n  },\n  // New provider\n  'appName-openedx': {\n    id: 'authoring.discussions.appList.appName-openedx',\n    defaultMessage: 'edX',\n    description: 'The name of the new edX Discussions app.',\n  },\n  'appDescription-openedx': {\n    id: 'authoring.discussions.appList.appDescription-openedx',\n    defaultMessage: 'Enable participation in discussion topics alongside course content.',\n    description: 'A description of the new edX Discussions app.',\n  },\n  // Piazza\n  'appName-piazza': {\n    id: 'authoring.discussions.appList.appName-piazza',\n    defaultMessage: 'Piazza',\n    description: 'The name of the Piazza app.',\n  },\n  'appDescription-piazza': {\n    id: 'authoring.discussions.appList.appDescription-piazza',\n    defaultMessage: 'Piazza is designed to connect students, TAs, and professors so every student can get the help they need when they need it.',\n    description: 'A description of the Piazza app.',\n  },\n  'appDescription-yellowdig': {\n    id: 'authoring.discussions.appList.appDescription-yellowdig',\n    defaultMessage: 'Yellowdig offers educators a gameful learning digital solution to improve student engagement by building learning communities for any course modality.',\n    description: 'A description of the Yellowdig app.',\n  },\n  'appDescription-inscribe': {\n    id: 'authoring.discussions.appList.appDescription-inscribe',\n    defaultMessage: 'InScribe leverages the power of community + artificial intelligence to connect individuals to the answers, resources, and people they need to succeed.',\n    description: 'A description of the inscibe app.',\n  },\n  'appDescription-discourse': {\n    id: 'authoring.discussions.appList.appDescription-discourse',\n    defaultMessage: 'Discourse is modern forum software for your community. Use it as a mailing list, discussion forum, long-form chat room, and more!',\n    description: 'A description of the discourse app.',\n  },\n  'appDescription-ed-discuss': {\n    id: 'authoring.discussions.appList.appDescription-ed-discus',\n    defaultMessage: 'Ed Discussion helps scale class communication in a beautiful and intuitive interface. Questions reach and benefit the whole class. Less emails, more time saved.',\n    description: 'A description of the Ed discus app.',\n  },\n  // Features\n  'featureName-discussion-page': {\n    id: 'authoring.discussions.featureName-discussion-page',\n    defaultMessage: 'Discussion page',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-embedded-course-sections': {\n    id: 'authoring.discussions.featureName-embedded-course-sections',\n    defaultMessage: 'Embedded course sections',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-advanced-in-context-discussion': {\n    id: 'authoring.discussions.featureName-advanced-in-context-discussion',\n    defaultMessage: 'Advanced in context discussion',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-anonymous-posting': {\n    id: 'authoring.discussions.featureName-anonymous-posting',\n    defaultMessage: 'Anonymous posting',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-automatic-learner-enrollment': {\n    id: 'authoring.discussions.featureName-automatic-learner-enrollment',\n    defaultMessage: 'Automatic learner enrollment',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-blackout-discussion-dates': {\n    id: 'authoring.discussions.featureName-blackout-discussion-dates',\n    defaultMessage: 'Blackout discussion dates',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-community-ta-support': {\n    id: 'authoring.discussions.featureName-community-ta-support',\n    defaultMessage: 'Community TA support',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-course-cohort-support': {\n    id: 'authoring.discussions.featureName-course-cohort-support',\n    defaultMessage: 'Course cohort support',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-direct-messages-from-instructors': {\n    id: 'authoring.discussions.featureName-direct-messages-from-instructors',\n    defaultMessage: 'Direct messages from instructors',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-discussion-content-prompts': {\n    id: 'authoring.discussions.featureName-discussion-content-prompts',\n    defaultMessage: 'Discussion content prompts',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-email-notifications': {\n    id: 'authoring.discussions.featureName-email-notifications',\n    defaultMessage: 'Email notifications',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-graded-discussions': {\n    id: 'authoring.discussions.featureName-graded-discussions',\n    defaultMessage: 'Graded discussions',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-in-platform-notifications': {\n    id: 'authoring.discussions.featureName-in-platform-notifications',\n    defaultMessage: 'In-platform notifications',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-internationalization-support': {\n    id: 'authoring.discussions.featureName-internationalization-support',\n    defaultMessage: 'Internationalization support',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-lti-advanced-sharing-mode': {\n    id: 'authoring.discussions.featureName-lti-advanced-sharing-mode',\n    defaultMessage: 'LTI advanced sharing',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-basic-configuration': {\n    id: 'authoring.discussions.featureName-basic-configuration',\n    defaultMessage: 'Basic configuration',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-primary-discussion-app-experience': {\n    id: 'authoring.discussions.featureName-primary-discussion-app-experience',\n    defaultMessage: 'Primary discussion app experience',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-question-discussion-support': {\n    id: 'authoring.discussions.featureName-question-&-discussion-support',\n    defaultMessage: 'Question & discussion support',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-report/flag-content-to-moderators': {\n    id: 'authoring.discussions.featureName-report/flag-content-to-moderators',\n    defaultMessage: 'Report content to moderators',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-research-data-events': {\n    id: 'authoring.discussions.featureName-research-data-events',\n    defaultMessage: 'Research data events',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-simplified-in-context-discussion': {\n    id: 'authoring.discussions.featureName-simplified-in-context-discussion',\n    defaultMessage: 'Simplified in-context discussion',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-user-mentions': {\n    id: 'authoring.discussions.featureName-user-mentions',\n    defaultMessage: 'User mentions',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-wcag-2.1': {\n    id: 'authoring.discussions.featureName-wcag-2.1',\n    defaultMessage: 'WCAG 2.1 support',\n    description: 'The name of a discussions feature.',\n  },\n  'featureName-wcag-2.0-support': {\n    id: 'authoring.discussions.wcag-2.0-support',\n    defaultMessage: 'WCAG 2.0 support',\n    description: 'The name of a discussions feature.',\n  },\n  'featureType-basic': {\n    id: 'authoring.discussions.basic-support',\n    defaultMessage: 'Basic support',\n    description: 'The type of a discussions feature.',\n  },\n  'featureType-partial': {\n    id: 'authoring.discussions.partial-support',\n    defaultMessage: 'Partial support',\n    description: 'The type of a discussions feature.',\n  },\n  'featureType-full': {\n    id: 'authoring.discussions.full-support',\n    defaultMessage: 'Full support',\n    description: 'The type of a discussions feature.',\n  },\n  'featureType-common': {\n    id: 'authoring.discussions.common-support',\n    defaultMessage: 'Commonly requested',\n    description: 'The type of a discussions feature.',\n  },\n  hideDiscussionTab: {\n    id: 'authoring.discussions.hide-discussion-tab',\n    defaultMessage: 'Hide discussion tab',\n    description: 'Title message to hide discussion tab',\n  },\n  hideDiscussionTabTitle: {\n    id: 'authoring.discussions.hide-tab-title',\n    defaultMessage: 'Hide the discussion tab?',\n    description: 'Title message to hide discussion tab',\n  },\n  hideDiscussionTabMessage: {\n    id: 'authoring.discussions.hide-tab-message',\n    defaultMessage: 'The discussion tab will no longer be visible to learners in the LMS. Additionally, posting to the discussion forums will be disabled. Are you sure you want to proceed?',\n    description: 'Help message to hide discussion tab',\n  },\n  hideDiscussionOkButton: {\n    id: 'authoring.discussions.hide-ok-button',\n    defaultMessage: 'Ok',\n    description: 'Ok button title',\n  },\n  hideDiscussionCancelButton: {\n    id: 'authoring.discussions.hide-cancel-button',\n    defaultMessage: 'Cancel',\n    description: 'Cancel button title',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Check } from '@edx/paragon/icons';\n\nconst SupportedFeature = ({ name }) => (\n  <>\n    <span className=\"mr-3\">\n      <Check id=\"check-icon\" className=\"text-success-500\" />\n    </span>\n    {name}\n  </>\n);\n\nSupportedFeature.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n\nexport default SupportedFeature;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Collapsible } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport SupportedFeature from './SupportedFeature';\nimport messages from './messages';\n\nconst FeaturesList = ({ app, intl }) => (\n  <Collapsible\n    onClick={(event) => event.stopPropagation()}\n    title={(\n      <>\n        <Collapsible.Visible whenClosed>\n          {intl.formatMessage(messages['supportedFeatureList-mobile-show'])}\n        </Collapsible.Visible>\n        <Collapsible.Visible whenOpen>\n          {intl.formatMessage(messages['supportedFeatureList-mobile-hide'])}\n        </Collapsible.Visible>\n      </>\n    )}\n    styling=\"basic\"\n  >\n    {app.featureIds.map((id) => (\n      <div key={`collapsible-${app.id}&${id}`} className=\"d-flex mb-1\">\n        <SupportedFeature name={intl.formatMessage(messages[`featureName-${id}`])} />\n      </div>\n    ))}\n  </Collapsible>\n);\n\nexport default injectIntl(FeaturesList);\n\nFeaturesList.propTypes = {\n  app: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    featureIds: PropTypes.shape([]).isRequired,\n  }).isRequired,\n  intl: intlShape.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport Responsive from 'react-responsive';\nimport {\n  Card, CheckboxControl, breakpoints,\n} from '@edx/paragon';\nimport messages from './messages';\nimport appMessages from '../app-config-form/messages';\nimport FeaturesList from './FeaturesList';\n\nconst AppCard = ({\n  app, onClick, intl, selected, features,\n}) => {\n  const { canChangeProviders } = useSelector(state => state.courseDetail);\n  const supportText = app.hasFullSupport\n    ? intl.formatMessage(messages.appFullSupport)\n    : intl.formatMessage(messages.appBasicSupport);\n\n  return (\n    <Card\n      isClickable\n      onClick={() => canChangeProviders && onClick(app.id)}\n      onKeyPress={() => canChangeProviders && onClick(app.id)}\n      role=\"radio\"\n      aria-checked={selected}\n      className={classNames({\n        'border-primary': selected,\n      }, 'w-100')}\n    >\n      <Card.Header\n        title={<div data-testid=\"card-title\">{intl.formatMessage(appMessages[`appName-${app.id}`])}</div>}\n        subtitle={<div className=\"h6 text-muted\" data-testid=\"card-subtitle\">{supportText}</div>}\n        actions={(\n          <div className=\"mt-2.5\">\n            <CheckboxControl\n              checked={selected}\n              disabled={!canChangeProviders}\n              readOnly\n              aria-label={intl.formatMessage(messages.selectApp, {\n                appName: intl.formatMessage(appMessages[`appName-${app.id}`]),\n              })}\n            />\n          </div>\n        )}\n        size=\"sm\"\n      />\n      <Card.Body>\n        <div data-testid=\"card-text\">\n          <Card.Section className=\"pt-2\">\n            {intl.formatMessage(messages[`appDescription-${app.id}`])}\n            <Responsive maxWidth={breakpoints.extraSmall.maxWidth}>\n              <FeaturesList\n                features={features}\n                app={app}\n              />\n            </Responsive>\n          </Card.Section>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nAppCard.propTypes = {\n  app: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    featureIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    hasFullSupport: PropTypes.bool.isRequired,\n  }).isRequired,\n  onClick: PropTypes.func.isRequired,\n  selected: PropTypes.bool.isRequired,\n  intl: intlShape.isRequired,\n  features: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default injectIntl(AppCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Remove, Check } from '@edx/paragon/icons';\nimport { DataTable } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport _ from 'lodash';\n\nimport messages from './messages';\nimport appMessages from '../app-config-form/messages';\nimport { FEATURE_TYPES } from '../data/constants';\nimport './FeaturesTable.scss';\n\nconst FeaturesTable = ({ apps, features, intl }) => {\n  const {\n    basic, partial, full, common,\n  } = _.groupBy(features, (feature) => feature.featureSupportType);\n\n  const createRow = (feature) => {\n    const appCheckmarkCells = {};\n    // DataTable wants 'data' to be    an array of objects where each property of an object\n    // represents a cell in that row, identified by its key.\n    apps.forEach(app => {\n      // If our app's set of feature Ids includes this feature, return a checkmark.\n      // i.e, if this app has the current feature, check it!\n      if (FEATURE_TYPES.includes(feature)) {\n        appCheckmarkCells[app.id] = <div key={feature} data-testid={feature} />;\n      } else {\n        appCheckmarkCells[app.id] = (\n          <div\n            className=\"text-center\"\n            key={`${app.id}&${feature.id}`}\n            data-testid={`${app.id}-${feature.id.replaceAll('.', '-')}`}\n          >\n            {\n              app.featureIds.includes(feature.id)\n                ? <Check id=\"check-icon\" className=\"text-success-500\" />\n                : <Remove id=\"remove-icon\" className=\"text-light-700\" />\n            }\n          </div>\n        );\n      }\n    });\n\n    return {\n      feature: FEATURE_TYPES.includes(feature) ? (\n        <span className=\"font-weight-bold\">\n          {intl.formatMessage(messages[`featureType-${feature}`])}\n        </span>\n      )\n        : intl.formatMessage(messages[`featureName-${feature.id}`]),\n      // 'feature' is the identifier for cells in the first column.\n      // This is spreading the app IDs from appCheckmarkCells into the return array, creating\n      // one object with 'feature' and the app.id keys from above.  The values are the JSX\n      // above with the font awesome checkmarks in 'em\n      ...appCheckmarkCells,\n    };\n  };\n\n  return (\n    <DataTable\n      itemCount={features.length}\n      data={\n        [\n          { ...createRow('basic') },\n          ...basic.map((feature) => createRow(feature)),\n          { ...createRow('partial') },\n          ...partial.map((feature) => createRow(feature)),\n          { ...createRow('full') },\n          ...full.map((feature) => createRow(feature)),\n          { ...createRow('common') },\n          ...common.map((feature) => createRow(feature)),\n        ]\n      }\n      columns={[\n        {\n          Header: '',\n          accessor: 'feature',\n        },\n        // We're converting our apps array into a bunch of objects with \"Header\" and \"accessor\"\n        // keys, like DataTable expects.\n        ...apps.map(app => ({\n          Header: intl.formatMessage(appMessages[`appName-${app.id}`]),\n          accessor: app.id,\n        })),\n      ]}\n    >\n      <DataTable.Table />\n    </DataTable>\n  );\n};\n\nexport default injectIntl(FeaturesTable);\n\nFeaturesTable.propTypes = {\n  apps: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  features: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  intl: intlShape.isRequired,\n};\n","import React, { useCallback, useContext } from 'react';\nimport { history } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { useSelector } from 'react-redux';\n\nimport { DiscussionsContext } from '../DiscussionsProvider';\n\nimport messages from './messages';\n\nconst AppListNextButton = ({ intl }) => {\n  const { selectedAppId } = useSelector(state => state.discussions);\n  const { path: discussionsPath } = useContext(DiscussionsContext);\n\n  const handleStartConfig = useCallback(() => {\n    history.push(`${discussionsPath}/configure/${selectedAppId}`);\n  }, [discussionsPath, selectedAppId]);\n\n  return (\n    <Button\n      variant=\"primary\"\n      onClick={handleStartConfig}\n    >\n      {intl.formatMessage(messages.nextButton)}\n    </Button>\n  );\n};\n\nAppListNextButton.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(AppListNextButton);\n","import React, {\n  useCallback, useEffect, useMemo, useState, useContext,\n} from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  CardGrid, Container, breakpoints, Form, ActionRow, AlertModal, Button, StatefulButton,\n} from '@edx/paragon';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Responsive from 'react-responsive';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { useModels } from '../../../generic/model-store';\nimport {\n  selectApp, LOADED, LOADING, SAVING, updateValidationStatus,\n} from '../data/slice';\nimport AppCard from './AppCard';\nimport messages from './messages';\nimport FeaturesTable from './FeaturesTable';\nimport AppListNextButton from './AppListNextButton';\nimport Loading from '../../../generic/Loading';\nimport useIsOnSmallScreen from '../data/hook';\nimport { saveProviderConfig, fetchDiscussionSettings } from '../data/thunks';\nimport { PagesAndResourcesContext } from '../../PagesAndResourcesProvider';\nimport { discussionRestriction } from '../data/constants';\n\nconst AppList = ({ intl }) => {\n  const dispatch = useDispatch();\n  const { courseId } = useContext(PagesAndResourcesContext);\n  const {\n    appIds, featureIds, status, saveStatus, activeAppId, selectedAppId, enabled, postingRestrictions,\n  } = useSelector(state => state.discussions);\n  const [discussionTabToggle, setDiscussionTabToggle] = useState(enabled);\n  const apps = useModels('apps', appIds);\n  const features = useModels('features', featureIds);\n  const isGlobalStaff = getAuthenticatedUser().administrator;\n  const ltiProvider = !['openedx', 'legacy'].includes(activeAppId);\n  const isOnSmallcreen = useIsOnSmallScreen();\n\n  const showOneEdxProvider = useMemo(() => apps.filter(app => (\n    activeAppId === 'openedx' ? app.id !== 'legacy' : app.id !== 'openedx'\n  )), [activeAppId]);\n\n  // This could be a bit confusing.  activeAppId is the ID of the app that is currently configured\n  // according to the server.  selectedAppId is the ID of the app that we _want_ to configure here\n  // in the UI.  The two don't always agree, and a selectedAppId may not yet be set when the app is\n  // loaded.  This effect is responsible for setting a selected app based on the active app -\n  // effectively defaulting to it - if a selected app hasn't been set yet.\n  useEffect(() => {\n    // If selectedAppId is not set, use activeAppId\n    if (!selectedAppId) {\n      dispatch(selectApp({ appId: activeAppId }));\n    }\n    dispatch(updateValidationStatus({ hasError: false }));\n  }, [selectedAppId, activeAppId]);\n\n  useEffect(() => {\n    setDiscussionTabToggle(enabled);\n  }, [enabled]);\n\n  useEffect(() => {\n    if (!postingRestrictions) {\n      dispatch(fetchDiscussionSettings(courseId, selectedAppId));\n    }\n  }, [courseId]);\n\n  const handleSelectApp = useCallback((appId) => {\n    dispatch(selectApp({ appId }));\n  }, []);\n\n  const updateSettings = useCallback((enabledDiscussion) => {\n    dispatch(saveProviderConfig(\n      courseId,\n      selectedAppId,\n      {\n        enabled: enabledDiscussion,\n        postingRestrictions:\n        enabledDiscussion ? postingRestrictions : discussionRestriction.ENABLED,\n      },\n    ));\n  }, [courseId, selectedAppId, postingRestrictions]);\n\n  const handleClose = useCallback(() => {\n    setDiscussionTabToggle(enabled);\n  }, [enabled]);\n\n  const handleOk = useCallback(() => {\n    setDiscussionTabToggle(false);\n    updateSettings(false);\n  }, [updateSettings]);\n\n  const handleChange = useCallback((e) => {\n    const toggleVal = e.target.checked;\n    if (!toggleVal) {\n      updateSettings(!toggleVal);\n    } else {\n      setDiscussionTabToggle(!toggleVal);\n    }\n  }, [updateSettings]);\n\n  if (!selectedAppId || status === LOADING) {\n    return (\n      <Loading />\n    );\n  }\n\n  if (status === LOADED && apps.length === 0) {\n    return (\n      <Container className=\"mt-5\">\n        <p>{intl.formatMessage(messages.noApps)}</p>\n      </Container>\n    );\n  }\n\n  const showAppCard = (filteredApps) => filteredApps.map(app => (\n    <AppCard\n      key={app.id}\n      app={app}\n      selected={app.id === selectedAppId}\n      onClick={handleSelectApp}\n      features={features}\n    />\n  ));\n\n  return (\n    <div className=\"my-sm-4\" data-testid=\"appList\">\n      <div className={!isOnSmallcreen ? 'd-flex flex-row justify-content-between align-items-center' : 'mb-4'}>\n        <h3 className={isOnSmallcreen ? 'mb-3' : 'm-0'}>\n          {intl.formatMessage(messages.heading)}\n        </h3>\n        <Form.Switch\n          floatLabelLeft\n          className=\"text-primary-500 align-items-center\"\n          labelClassName=\"line-height-24\"\n          onChange={handleChange}\n          checked={!enabled}\n          data-testId=\"hide-discussion\"\n        >\n          {intl.formatMessage(messages.hideDiscussionTab)}\n        </Form.Switch>\n      </div>\n      <CardGrid\n        columnSizes={{\n          xs: 12,\n          sm: 6,\n          lg: 4,\n          xl: 4,\n        }}\n        className={!isOnSmallcreen && 'mt-5'}\n      >\n        {(isGlobalStaff || ltiProvider) ? showAppCard(apps) : showAppCard(showOneEdxProvider)}\n      </CardGrid>\n      <Responsive minWidth={breakpoints.small.minWidth}>\n        <h3 className=\"my-sm-5 my-4\">\n          {intl.formatMessage(messages.supportedFeatures)}\n        </h3>\n        <div className=\"app-list-data-table\">\n          <FeaturesTable\n            apps={apps}\n            features={features}\n          />\n        </div>\n      </Responsive>\n      <AlertModal\n        title={intl.formatMessage(messages.hideDiscussionTabTitle)}\n        isOpen={enabled && !discussionTabToggle}\n        onClose={handleClose}\n        isBlocking\n        className=\"hide-discussion-modal\"\n        footerNode={(\n          <ActionRow>\n            <Button variant=\"link\" className=\"text-decoration-none bg-black\" onClick={handleClose}>\n              {intl.formatMessage(messages.hideDiscussionCancelButton)}\n            </Button>\n            <StatefulButton\n              labels={{\n                default: intl.formatMessage(messages.hideDiscussionOkButton),\n              }}\n              state={saveStatus === SAVING ? 'pending' : 'default'}\n              className=\"ml-2\"\n              variant=\"primary\"\n              onClick={handleOk}\n            />\n          </ActionRow>\n        )}\n      >\n        <p className=\"bg-black\">\n          {intl.formatMessage(messages.hideDiscussionTabMessage)}\n        </p>\n      </AlertModal>\n    </div>\n  );\n};\n\nAppList.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nconst IntlAppList = injectIntl(AppList);\n\nIntlAppList.NextButton = AppListNextButton;\n\nexport default IntlAppList;\n","import { breakpoints, useWindowSize } from '@edx/paragon';\n\nexport default function useIsOnSmallScreen() {\n  const windowSize = useWindowSize();\n  return windowSize.width < breakpoints.medium.minWidth;\n}\n","import React from 'react';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport messages from '../messages';\n\nconst SaveFormConnectionErrorAlert = ({ intl }) => (\n  <Alert variant=\"danger\" data-testid=\"connectionErrorAlert\">\n    <FormattedMessage\n      id=\"authoring.alert.save.error.connection\"\n      defaultMessage=\"We encountered a technical error when applying changes. This might be a temporary issue, so please try again in a few minutes. If the problem persists, please go to the {supportLink} for help.\"\n      values={{\n        supportLink: (\n          <Alert.Link href={getConfig().SUPPORT_URL}>\n            {intl.formatMessage(messages.supportText)}\n          </Alert.Link>\n        ),\n      }}\n    />\n  </Alert>\n);\n\nSaveFormConnectionErrorAlert.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(SaveFormConnectionErrorAlert);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport FormSwitchGroup from '../../../../../generic/FormSwitchGroup';\nimport messages from '../../messages';\nimport AppConfigFormDivider from './AppConfigFormDivider';\n\nconst AnonymousPostingFields = ({\n  onBlur,\n  onChange,\n  intl,\n  values,\n}) => (\n  <>\n    <h5 className=\"mt-4 text-gray-500\">{intl.formatMessage(messages.anonymousPosting)}</h5>\n    <AppConfigFormDivider />\n    <FormSwitchGroup\n      onChange={onChange}\n      onBlur={onBlur}\n      id=\"allowAnonymousPostsPeers\"\n      checked={values.allowAnonymousPostsPeers}\n      label={intl.formatMessage(messages.allowAnonymousPostsPeersLabel)}\n      helpText={intl.formatMessage(messages.allowAnonymousPostsPeersHelp)}\n    />\n  </>\n);\n\nAnonymousPostingFields.propTypes = {\n  onBlur: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n  values: PropTypes.shape({\n    allowAnonymousPostsPeers: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default injectIntl(AnonymousPostingFields);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card } from '@edx/paragon';\n\nconst ConfirmationPopup = ({\n  label,\n  bodyText,\n  onConfirm,\n  confirmLabel,\n  onCancel,\n  cancelLabel,\n  confirmVariant,\n  confirmButtonClass,\n  cancelButtonClass,\n  sectionClasses,\n}) => (\n  <Card className=\"rounded px-1 mt-4\">\n    <Card.Header\n      className=\"text-primary-500\"\n      title={label}\n      size=\"sm\"\n    />\n    <Card.Body>\n      <Card.Section className={`text-justify text-muted pt-2 pb-3 ${sectionClasses}`}>{bodyText}</Card.Section>\n      <Card.Footer>\n        <Button variant=\"tertiary\" className={cancelButtonClass} onClick={onCancel}>\n          {cancelLabel}\n        </Button>\n        <Button variant={confirmVariant} className={`ml-2 ${confirmButtonClass}`} onClick={onConfirm}>\n          {confirmLabel}\n        </Button>\n      </Card.Footer>\n    </Card.Body>\n  </Card>\n);\n\nConfirmationPopup.propTypes = {\n  label: PropTypes.string.isRequired,\n  bodyText: PropTypes.string.isRequired,\n  onConfirm: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  confirmLabel: PropTypes.string.isRequired,\n  cancelLabel: PropTypes.string.isRequired,\n  confirmButtonClass: PropTypes.string,\n  cancelButtonClass: PropTypes.string,\n  confirmVariant: PropTypes.string,\n  sectionClasses: PropTypes.string,\n};\nConfirmationPopup.defaultProps = {\n  confirmVariant: 'outline-brand',\n  confirmButtonClass: '',\n  cancelButtonClass: '',\n  sectionClasses: '',\n};\n\nexport default React.memo(ConfirmationPopup);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, TransitionReplace } from '@edx/paragon';\n\nconst FieldFeedback = ({\n  feedbackClasses,\n  transitionClasses,\n  errorCondition,\n  feedbackCondition,\n  feedbackMessage,\n  errorMessage,\n}) => (\n  <>\n    <TransitionReplace className={transitionClasses}>\n      {feedbackCondition ? (\n        <React.Fragment key=\"open1\">\n          <Form.Control.Feedback type=\"default\" hasIcon={false} key={`${feedbackMessage}-feedback`}>\n            <div className={`small ${feedbackClasses}`}>{feedbackMessage}</div>\n          </Form.Control.Feedback>\n        </React.Fragment>\n      ) : <React.Fragment key=\"close1\" />}\n    </TransitionReplace>\n\n    <TransitionReplace>\n      {errorCondition ? (\n        <React.Fragment key=\"open\">\n          <Form.Control.Feedback type=\"invalid\" hasIcon={false} key={`${errorMessage}-feedback`}>\n            <div className={`small ${feedbackClasses}`}>{errorMessage}</div>\n          </Form.Control.Feedback>\n        </React.Fragment>\n      ) : <React.Fragment key=\"close\" />}\n    </TransitionReplace>\n  </>\n);\n\nFieldFeedback.propTypes = {\n  errorCondition: PropTypes.bool.isRequired,\n  errorMessage: PropTypes.string,\n  feedbackMessage: PropTypes.string,\n  feedbackCondition: PropTypes.bool,\n  feedbackClasses: PropTypes.string,\n  transitionClasses: PropTypes.string,\n};\n\nFieldFeedback.defaultProps = {\n  feedbackClasses: '',\n  transitionClasses: '',\n  feedbackMessage: '',\n  feedbackCondition: false,\n  errorMessage: '',\n};\n\nexport default React.memo(FieldFeedback);\n","import React, { useState, useCallback } from 'react';\nimport { Form } from '@edx/paragon';\nimport { useFormikContext, getIn } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport FieldFeedback from '../../../../../../generic/FieldFeedback';\n\nconst RestictDatesInput = ({\n  value,\n  type,\n  label,\n  fieldName,\n  helpText,\n  fieldClasses,\n  feedbackClasses,\n  formGroupClasses,\n  fieldNameCommonBase,\n  dataTestId,\n}) => {\n  const {\n    handleChange, handleBlur, errors, touched,\n  } = useFormikContext();\n\n  const [inFocus, setInFocus] = useState(false);\n  const fieldError = getIn(errors, `${fieldNameCommonBase}.${fieldName}`);\n  const fieldTouched = getIn(touched, `${fieldNameCommonBase}.${fieldName}`);\n  const isInvalidInput = Boolean(!inFocus && fieldError && fieldTouched);\n\n  const handleFocusOut = useCallback((event) => {\n    handleBlur(event);\n    setInFocus(false);\n  }, [handleBlur, setInFocus]);\n\n  const handleSetFocus = useCallback(() => {\n    setInFocus(true);\n  }, [setInFocus]);\n\n  return (\n    <Form.Group\n      controlId={`${fieldNameCommonBase}.${fieldName}`}\n      className={`col ${formGroupClasses}`}\n      isInvalid={isInvalidInput}\n    >\n      <Form.Control\n        name={`${fieldNameCommonBase}.${fieldName}`}\n        value={value}\n        type={type}\n        onChange={handleChange}\n        floatingLabel={label}\n        className={fieldClasses}\n        onBlur={handleFocusOut}\n        onFocus={handleSetFocus}\n        data-testId={dataTestId}\n      />\n      <FieldFeedback\n        feedbackCondition={inFocus}\n        errorCondition={isInvalidInput}\n        errorMessage={fieldError || ''}\n        feedbackMessage={helpText}\n        transitionClasses=\"mt-1\"\n        feedbackClasses={feedbackClasses}\n      />\n    </Form.Group>\n  );\n};\n\nRestictDatesInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  fieldName: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  helpText: PropTypes.string,\n  feedbackClasses: PropTypes.string,\n  fieldClasses: PropTypes.string,\n  formGroupClasses: PropTypes.string,\n  fieldNameCommonBase: PropTypes.string.isRequired,\n  dataTestId: PropTypes.string,\n};\n\nRestictDatesInput.defaultProps = {\n  fieldClasses: '',\n  helpText: '',\n  feedbackClasses: '',\n  formGroupClasses: '',\n  dataTestId: null,\n};\n\nexport default React.memo(RestictDatesInput);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Badge } from '@edx/paragon';\n\nconst CollapseCardHeading = ({\n  isOpen,\n  expandHeadingText,\n  collapseHeadingText,\n  badgeVariant,\n  badgeStatus,\n}) => {\n  if (isOpen) {\n    return <span className=\"h4 py-2 mr-auto\">{expandHeadingText}</span>;\n  }\n\n  return (\n    <div style={{ height: 72 }}>\n      {badgeStatus && <Badge variant={badgeVariant} style={{ padding: '2px 8px' }}>{badgeStatus}</Badge>}\n      <div className=\"mt-2 font-size-14\" style={{ lineHeight: '24px' }}>{collapseHeadingText}</div>\n    </div>\n  );\n};\n\nCollapseCardHeading.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  collapseHeadingText: PropTypes.string.isRequired,\n  expandHeadingText: PropTypes.string.isRequired,\n  badgeVariant: PropTypes.string,\n  badgeStatus: PropTypes.string,\n};\n\nCollapseCardHeading.defaultProps = {\n  badgeVariant: 'primary',\n  badgeStatus: '',\n};\n\nexport default React.memo(CollapseCardHeading);\n","import React, { useState, useCallback } from 'react';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Form } from '@edx/paragon';\nimport { useFormikContext } from 'formik';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport messages from '../../../messages';\nimport RestrictDatesInput from './RestrictDatesInput';\nimport { formatRestrictedDates } from '../../../utils';\nimport {\n  restrictedDatesStatus as constants,\n  deleteRestrictedDatesHelperText,\n  badgeVariant,\n} from '../../../../data/constants';\nimport CollapsableEditor from '../../../../../../generic/CollapsableEditor';\nimport ConfirmationPopup from '../../../../../../generic/ConfirmationPopup';\nimport CollapseCardHeading from './CollapseCardHeading';\n\nconst DiscussionRestrictionItem = ({\n  restrictedDate,\n  onDelete,\n  hasError,\n  onClose,\n  fieldNameCommonBase,\n}) => {\n  const restrictedDateError = !restrictedDate.startDate || !restrictedDate.endDate || hasError;\n  const [showDeletePopup, setShowDeletePopup] = useState(false);\n  const [collapseIsOpen, setCollapseOpen] = useState(restrictedDateError);\n  const { setFieldTouched } = useFormikContext();\n  const intl = useIntl();\n\n  const handleToggle = useCallback((isOpen) => {\n    if (!isOpen && hasError) {\n      return setCollapseOpen(true);\n    }\n    return setCollapseOpen(isOpen);\n  }, [hasError]);\n\n  const handleOnClose = useCallback(() => {\n    ['startDate', 'startTime', 'endDate', 'endTime'].forEach(field => (\n      setFieldTouched(`${fieldNameCommonBase}.${field}`, true)\n    ));\n    if (!hasError) {\n      onClose();\n    }\n  }, [hasError, onClose]);\n\n  const getHeading = useCallback((isOpen) => (\n    <CollapseCardHeading\n      isOpen={isOpen}\n      expandHeadingText={intl.formatMessage(messages.configureRestrictedDates)}\n      collapseHeadingText={formatRestrictedDates(restrictedDate)}\n      badgeVariant={badgeVariant[restrictedDate.status]}\n      badgeStatus={intl.formatMessage(messages.restrictedDatesStatus, {\n        status: _.startCase(_.toLower(restrictedDate.status)),\n      })}\n    />\n  ), [restrictedDate]);\n\n  const handleShowDeletePopup = useCallback(() => {\n    setShowDeletePopup(true);\n  }, []);\n\n  const handleCancelDeletePopup = useCallback(() => {\n    setShowDeletePopup(false);\n  }, []);\n\n  if (showDeletePopup) {\n    return (\n      <ConfirmationPopup\n        label={restrictedDate.status === constants.ACTIVE\n          ? intl.formatMessage(messages.activeRestrictedDatesDeletionLabel)\n          : intl.formatMessage(messages.restrictedDatesDeletionLabel)}\n        bodyText={intl.formatMessage(deleteRestrictedDatesHelperText[restrictedDate.status])}\n        onConfirm={onDelete}\n        confirmLabel={intl.formatMessage(messages.deleteButton)}\n        onCancel={handleCancelDeletePopup}\n        cancelLabel={intl.formatMessage(messages.cancelButton)}\n        confirmVariant=\"plain\"\n        confirmButtonClass=\"text-danger-500 border-gray-300 rounded-0\"\n      />\n    );\n  }\n\n  return (\n    <CollapsableEditor\n      open={collapseIsOpen}\n      onToggle={handleToggle}\n      title={getHeading(collapseIsOpen)}\n      onDelete={handleShowDeletePopup}\n      expandAlt={intl.formatMessage(messages.expandAltText)}\n      collapseAlt={intl.formatMessage(messages.collapseAltText)}\n      deleteAlt={intl.formatMessage(messages.deleteAltText)}\n      data-testid={restrictedDate.id}\n      onClose={handleOnClose}\n    >\n      <Form.Row className=\"mx-2 pt-3\">\n        <RestrictDatesInput\n          value={restrictedDate.startDate}\n          type=\"date\"\n          label={intl.formatMessage(messages.startDateLabel)}\n          helpText={intl.formatMessage(messages.restrictedStartDateHelp)}\n          fieldName=\"startDate\"\n          formGroupClasses=\"pl-md-0\"\n          fieldClasses=\"pr-md-2\"\n          dataTestId=\"startDate\"\n          fieldNameCommonBase={fieldNameCommonBase}\n        />\n        <RestrictDatesInput\n          value={restrictedDate.startTime}\n          type=\"time\"\n          label={intl.formatMessage(messages.startTimeLabel, { zone: 'UTC' })}\n          helpText={intl.formatMessage(messages.restrictedStartTimeHelp)}\n          fieldName=\"startTime\"\n          formGroupClasses=\"pr-md-0\"\n          fieldClasses=\"ml-md-2\"\n          feedbackClasses=\"ml-md-2\"\n          dataTestId=\"startTime\"\n          fieldNameCommonBase={fieldNameCommonBase}\n        />\n      </Form.Row>\n      <hr className=\"mx-2 my-2 border-light-400\" />\n      <Form.Row className=\"mx-2 pt-4\">\n        <RestrictDatesInput\n          value={restrictedDate.endDate}\n          type=\"date\"\n          label={intl.formatMessage(messages.endDateLabel)}\n          helpText={intl.formatMessage(messages.restrictedEndDateHelp)}\n          fieldName=\"endDate\"\n          formGroupClasses=\"pl-md-0\"\n          fieldClasses=\"pr-md-2\"\n          dataTestId=\"endDate\"\n          fieldNameCommonBase={fieldNameCommonBase}\n        />\n        <RestrictDatesInput\n          value={restrictedDate.endTime}\n          type=\"time\"\n          label={intl.formatMessage(messages.endTimeLabel, { zone: 'UTC' })}\n          helpText={intl.formatMessage(messages.restrictedEndTimeHelp)}\n          fieldName=\"endTime\"\n          formGroupClasses=\"pr-md-0\"\n          fieldClasses=\"ml-md-2\"\n          feedbackClasses=\"ml-md-2\"\n          dataTestId=\"endTime\"\n          fieldNameCommonBase={fieldNameCommonBase}\n        />\n      </Form.Row>\n    </CollapsableEditor>\n  );\n};\n\nDiscussionRestrictionItem.propTypes = {\n  onDelete: PropTypes.func.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  fieldNameCommonBase: PropTypes.string.isRequired,\n  restrictedDate: PropTypes.shape({\n    id: PropTypes.string,\n    startDate: PropTypes.string,\n    endDate: PropTypes.string,\n    startTime: PropTypes.string,\n    endTime: PropTypes.string,\n    status: PropTypes.string,\n  }).isRequired,\n};\n\nexport default React.memo(DiscussionRestrictionItem);\n","import React, { useCallback } from 'react';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { Add } from '@edx/paragon/icons';\n\nimport { FieldArray, useFormikContext } from 'formik';\nimport { v4 as uuid } from 'uuid';\n\nimport messages from '../../../messages';\nimport DiscussionRestrictionItem from './DiscussionRestrictionItem';\nimport { checkStatus } from '../../../utils';\nimport { denormalizeRestrictedDate } from '../../../../data/api';\nimport { restrictedDatesStatus as STATUS } from '../../../../data/constants';\n\nconst RestrictionSchedules = () => {\n  const intl = useIntl();\n  const {\n    values: appConfig,\n    setFieldValue,\n    errors,\n    validateForm,\n  } = useFormikContext();\n\n  const { restrictedDates } = appConfig;\n\n  const handleOnClose = useCallback((index) => {\n    const updatedRestrictedDates = [...restrictedDates];\n    updatedRestrictedDates[index] = {\n      ...updatedRestrictedDates[index],\n      status: checkStatus(denormalizeRestrictedDate(updatedRestrictedDates[index])),\n    };\n    setFieldValue('restrictedDates', updatedRestrictedDates);\n  }, [restrictedDates]);\n\n  const newRestrictedDateItem = {\n    id: uuid(),\n    startDate: '',\n    startTime: '',\n    endDate: '',\n    endTime: '',\n    status: STATUS.UPCOMING,\n  };\n\n  const onAddNewItem = useCallback(async (push) => {\n    await push(newRestrictedDateItem);\n    validateForm();\n  }, []);\n\n  return (\n    <div data-testId=\"restriction-schedules\">\n      <FieldArray\n        name=\"restrictedDates\"\n        render={({ push, remove }) => (\n          <div className=\"mt-4\">\n            {restrictedDates.map((restrictedDate, index) => (\n              <DiscussionRestrictionItem\n                fieldNameCommonBase={`restrictedDates.${index}`}\n                restrictedDate={restrictedDate}\n                key={`date-${restrictedDate.id}`}\n                id={restrictedDate.id}\n                onDelete={() => remove(index)}\n                onClose={() => handleOnClose(index)}\n                hasError={Boolean(errors?.restrictedDates?.[index])}\n              />\n            ))}\n            <div className=\"mb-4 mt-4 height-36\">\n              <Button\n                onClick={() => onAddNewItem(push)}\n                variant=\"link\"\n                iconBefore={Add}\n                className=\"text-primary-500 p-0\"\n                style={{ height: 28 }}\n              >\n                {intl.formatMessage(messages.addRestrictedDatesButton)}\n              </Button>\n            </div>\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n\nexport default React.memo(RestrictionSchedules);\n","import React, { useCallback, useState, useMemo } from 'react';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Button, ButtonGroup } from '@edx/paragon';\nimport classNames from 'classnames';\n\nimport { useFormikContext } from 'formik';\nimport ConfirmationPopup from '../../../../../generic/ConfirmationPopup';\n\nimport messages from '../../messages';\nimport { discussionRestrictionOptions, discussionRestriction } from '../../../data/constants';\nimport RestrictionSchedules from './discussion-restrictions/RestrictionSchedules';\n\nconst DiscussionRestriction = () => {\n  const intl = useIntl();\n  const {\n    values: appConfig,\n    setFieldValue,\n  } = useFormikContext();\n\n  const { postingRestrictions } = appConfig;\n  const [selectedRestrictionOption, setSelectedRestrictionOption] = useState(postingRestrictions);\n\n  const handleClick = useCallback((value) => {\n    setSelectedRestrictionOption(value);\n\n    if (value !== discussionRestriction.ENABLED) {\n      setFieldValue('postingRestrictions', value);\n    }\n  }, []);\n\n  const handleConfirmation = useCallback(() => {\n    setSelectedRestrictionOption(discussionRestriction.ENABLED);\n    setFieldValue('postingRestrictions', discussionRestriction.ENABLED);\n  }, []);\n\n  const handleCancel = useCallback(() => {\n    setSelectedRestrictionOption(postingRestrictions);\n  }, [postingRestrictions]);\n\n  const discussionRestrictionButtons = useMemo(() => discussionRestrictionOptions.map((restriction) => (\n    <Button\n      key={`restriction-${restriction.value}`}\n      data-testId={restriction.value}\n      variant=\"plain\"\n      className={classNames('w-100 font-size-14 font-weight-500 line-height-20 py-7px border-light-400 unselected-button', {\n        'text-white bg-primary-500 selected-button': selectedRestrictionOption === restriction.value,\n      })}\n      onClick={() => handleClick(restriction.value)}\n    >\n      {restriction.label}\n    </Button>\n  )), [selectedRestrictionOption]);\n\n  const selectedRestrictionMessage = useMemo(() => (\n    discussionRestrictionOptions.find(option => option.value === selectedRestrictionOption).message\n  ), [selectedRestrictionOption]);\n\n  return (\n    <div className=\"discussion-restriction\">\n      <h5 className=\"text-gray-500 mt-4 mb-3 line-height-20\">\n        {intl.formatMessage(messages.discussionRestrictionLabel)}\n      </h5>\n      <ButtonGroup className=\"mb-2 w-100\" toggle size=\"sm\">\n        {discussionRestrictionButtons}\n      </ButtonGroup>\n      <div className=\"small text-muted font-size-14 height-24\">\n        {intl.formatMessage(selectedRestrictionMessage)}\n      </div>\n      {(postingRestrictions !== discussionRestriction.ENABLED\n        && selectedRestrictionOption === discussionRestriction.ENABLED\n      ) && (\n        <ConfirmationPopup\n          label={intl.formatMessage(messages.enableRestrictedDatesConfirmationLabel)}\n          bodyText={intl.formatMessage(messages.enableRestrictedDatesConfirmationHelp)}\n          onCancel={handleCancel}\n          onConfirm={handleConfirmation}\n          confirmLabel={intl.formatMessage(messages.ok)}\n          cancelLabel={intl.formatMessage(messages.cancelButton)}\n          confirmVariant=\"plain\"\n          confirmButtonClass=\"bg-primary-500 text-white rounded-0 action-btn\"\n          cancelButtonClass=\"rounded-0 action-btn w-92\"\n          sectionClasses=\"card-body-section\"\n        />\n      )}\n      {selectedRestrictionOption === discussionRestriction.SCHEDULED && <RestrictionSchedules />}\n    </div>\n  );\n};\n\nexport default React.memo(DiscussionRestriction);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useFormikContext } from 'formik';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Button, Card, Form,\n} from '@edx/paragon';\n\nimport CollapsableEditor from '../../../../../../generic/CollapsableEditor';\nimport messages from '../../../messages';\nimport FieldFeedback from '../../../../../../generic/FieldFeedback';\n\nconst TopicItem = ({\n  intl,\n  index,\n  id,\n  name,\n  onDelete,\n  hasError,\n  onFocus,\n}) => {\n  const {\n    handleChange, handleBlur, errors,\n  } = useFormikContext();\n  const [inFocus, setInFocus] = useState(false);\n  const [showDeletePopup, setShowDeletePopup] = useState(false);\n  const [collapseIsOpen, setCollapseOpen] = useState(!name || hasError);\n  const isGeneralTopic = id === 'course';\n\n  useEffect(() => {\n    onFocus(hasError);\n  }, [inFocus, hasError]);\n\n  const getHeading = (isOpen) => {\n    if (isGeneralTopic && isOpen) {\n      return (\n        <div className=\"h4 py-2 mr-auto\">\n          {intl.formatMessage(messages.renameGeneralTopic)}\n          <div className=\"small text-muted mt-2\">\n            {intl.formatMessage(messages.generalTopicHelp)}\n          </div>\n        </div>\n      );\n    } if (isOpen) {\n      return (\n        <span className=\"h4 py-2 mr-auto\">\n          {intl.formatMessage(messages.configureAdditionalTopic)}\n        </span>\n      );\n    }\n    return <span className=\"py-2\">{name}</span>;\n  };\n\n  const handleToggle = (isOpen) => {\n    if (!isOpen && (!name.length || hasError)) {\n      return setCollapseOpen(true);\n    }\n    return setCollapseOpen(isOpen);\n  };\n\n  const deleteDiscussionTopic = () => {\n    setShowDeletePopup(true);\n  };\n\n  const handleFocusOut = (event) => {\n    handleBlur(event);\n    setInFocus(false);\n  };\n\n  const deleteTopicPopup = (\n    <Card className=\"rounded mb-3 px-1\">\n      <Card.Header\n        className=\"text-primary-500\"\n        title={intl.formatMessage(messages.discussionTopicDeletionLabel)}\n        size=\"sm\"\n      />\n      <Card.Body>\n        <Card.Section className=\"text-justify text-muted pt-2 pb-3\">\n          {intl.formatMessage(messages.discussionTopicDeletionHelp)}\n        </Card.Section>\n        <Card.Footer>\n          <Button variant=\"tertiary\" onClick={() => setShowDeletePopup(false)}>\n            {intl.formatMessage(messages.cancelButton)}\n          </Button>\n          <Button\n            variant=\"outline-brand\"\n            className=\"ml-2\"\n            onClick={onDelete}\n          >\n            {intl.formatMessage(messages.deleteButton)}\n          </Button>\n        </Card.Footer>\n      </Card.Body>\n    </Card>\n  );\n\n  return showDeletePopup\n    ? deleteTopicPopup\n    : (\n      <CollapsableEditor\n        open={collapseIsOpen}\n        onToggle={handleToggle}\n        title={getHeading(collapseIsOpen)}\n        onDelete={isGeneralTopic ? null : deleteDiscussionTopic}\n        expandAlt={intl.formatMessage(messages.expandAltText)}\n        collapseAlt={intl.formatMessage(messages.collapseAltText)}\n        deleteAlt={intl.formatMessage(messages.deleteAltText)}\n        data-testid={id}\n      >\n        <Form.Group\n          controlId={`discussionTopics.${index}.name`}\n          isInvalid={hasError && !inFocus}\n          className=\"m-2\"\n        >\n          <Form.Control\n            floatingLabel=\"Topic name\"\n            onChange={handleChange}\n            onBlur={(event) => handleFocusOut(event)}\n            value={name}\n            controlClassName=\"bg-white\"\n            onFocus={() => setInFocus(true)}\n          />\n          <FieldFeedback\n            errorCondition={hasError && !inFocus}\n            feedbackCondition={inFocus}\n            feedbackMessage={intl.formatMessage(messages.addTopicHelpText)}\n            errorMessage={errors?.discussionTopics?.[index]?.name || ''}\n            transitionClasses=\"mt-1\"\n          />\n        </Form.Group>\n      </CollapsableEditor>\n    );\n};\n\nTopicItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  onFocus: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(TopicItem);\n","import React, { createContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { updateValidationStatus } from '../../../data/slice';\n\nexport const OpenedXConfigFormContext = createContext({});\n\nconst OpenedXConfigFormProvider = ({ children, value }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(updateValidationStatus({ hasError: value.isFormInvalid }));\n  }, [value.isFormInvalid]);\n\n  return (\n    <OpenedXConfigFormContext.Provider value={value}>\n      {children}\n    </OpenedXConfigFormContext.Provider>\n  );\n};\n\nOpenedXConfigFormProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.shape({\n    discussionTopicErrors: PropTypes.arrayOf(PropTypes.bool),\n    validDiscussionTopics: PropTypes.arrayOf(PropTypes.shape({\n      validTopics: PropTypes.arrayOf(PropTypes.shape({\n        name: PropTypes.string,\n        id: PropTypes.string,\n      })),\n      setValidDiscussionTopics: PropTypes.func,\n    })),\n    isFormInvalid: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default OpenedXConfigFormProvider;\n","import React, { useContext, useCallback } from 'react';\nimport { Add } from '@edx/paragon/icons';\nimport { Button } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { FieldArray, useFormikContext } from 'formik';\nimport { v4 as uuid } from 'uuid';\nimport _ from 'lodash';\nimport messages from '../../../messages';\nimport TopicItem from './TopicItem';\nimport { OpenedXConfigFormContext } from '../../openedx/OpenedXConfigFormProvider';\nimport { filterItemFromObject } from '../../../utils';\n\nconst DiscussionTopics = ({ intl }) => {\n  const {\n    values: appConfig,\n    validateForm,\n    setFieldValue,\n  } = useFormikContext();\n  const { discussionTopics, divideDiscussionIds } = appConfig;\n  const {\n    discussionTopicErrors,\n    validDiscussionTopics,\n    setValidDiscussionTopics,\n  } = useContext(OpenedXConfigFormContext);\n\n  const handleTopicDelete = async (topicIndex, topicId, remove) => {\n    await remove(topicIndex);\n    validateForm();\n    setValidDiscussionTopics(filterItemFromObject(validDiscussionTopics, 'id', topicId));\n  };\n\n  const handleOnFocus = useCallback((id, hasError) => {\n    if (hasError) {\n      setValidDiscussionTopics(currentValidTopics => filterItemFromObject(currentValidTopics, 'id', id));\n      setFieldValue('divideDiscussionIds', filterItemFromObject(divideDiscussionIds, 'id', id));\n    } else {\n      setValidDiscussionTopics(currentValidTopics => {\n        const allDiscussionTopics = [...currentValidTopics, ...discussionTopics.filter(topic => topic.id === id)];\n        const allValidTopics = _.remove(allDiscussionTopics, topic => topic.name !== '');\n        return _.uniqBy(allValidTopics, 'id');\n      });\n      setFieldValue('divideDiscussionIds', _.uniq([...divideDiscussionIds, id]));\n    }\n  }, [divideDiscussionIds, discussionTopics]);\n\n  const addNewTopic = (push) => {\n    const payload = { name: '', id: uuid() };\n    push(payload);\n  };\n\n  return (\n    <>\n      <h5 className=\"text-gray-500 mt-4 mb-2\">\n        {intl.formatMessage(messages.discussionTopics)}\n      </h5>\n      <label className=\"text-primary-500 mb-1 h4\">\n        {intl.formatMessage(messages.discussionTopicsLabel)}\n      </label>\n      <div className=\"small mb-4 text-muted\">\n        {intl.formatMessage(messages.discussionTopicsHelp)}\n      </div>\n      <div>\n        <FieldArray\n          name=\"discussionTopics\"\n          render={({ push, remove }) => (\n            <div>\n              {discussionTopics.map((topic, index) => (\n                <TopicItem\n                  {...topic}\n                  key={`topic-${topic.id}`}\n                  index={index}\n                  onDelete={() => handleTopicDelete(index, topic.id, remove)}\n                  onFocus={(hasError) => handleOnFocus(topic.id, hasError)}\n                  hasError={discussionTopicErrors[index]}\n                />\n              ))}\n              <div className=\"mb-4\">\n                <Button\n                  onClick={() => addNewTopic(push)}\n                  variant=\"link\"\n                  iconBefore={Add}\n                  className=\"text-primary-500 p-0\"\n                >\n                  {intl.formatMessage(messages.addTopicButton)}\n                </Button>\n              </div>\n            </div>\n          )}\n        />\n      </div>\n    </>\n  );\n};\n\nDiscussionTopics.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(DiscussionTopics);\n","import React, { useEffect, useContext } from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Form, TransitionReplace, Hyperlink, Alert,\n} from '@edx/paragon';\nimport { AppContext } from '@edx/frontend-platform/react';\nimport { FieldArray, useFormikContext } from 'formik';\nimport _ from 'lodash';\nimport { useParams } from 'react-router-dom';\nimport FormSwitchGroup from '../../../../../generic/FormSwitchGroup';\nimport messages from '../../messages';\nimport AppConfigFormDivider from './AppConfigFormDivider';\nimport { OpenedXConfigFormContext } from '../openedx/OpenedXConfigFormProvider';\n\nconst DivisionByGroupFields = ({ intl }) => {\n  const { validDiscussionTopics } = useContext(OpenedXConfigFormContext);\n  const {\n    handleChange,\n    handleBlur,\n    values: appConfig,\n    setFieldValue,\n  } = useFormikContext();\n  const {\n    divideDiscussionIds,\n    discussionTopics,\n    divideByCohorts,\n    divideCourseTopicsByCohorts,\n    cohortsEnabled,\n  } = appConfig;\n\n  const { courseId } = useParams();\n  const { config } = useContext(AppContext);\n  const learningCourseURL = `${config.LMS_BASE_URL}/courses/${courseId}/instructor`;\n\n  useEffect(() => {\n    if (divideByCohorts) {\n      if (!divideCourseTopicsByCohorts && _.size(discussionTopics) !== _.size(divideDiscussionIds)) {\n        setFieldValue('divideDiscussionIds', discussionTopics.map(topic => topic.id));\n      }\n    } else {\n      setFieldValue('divideDiscussionIds', []);\n      setFieldValue('divideCourseTopicsByCohorts', false);\n    }\n  }, [\n    divideByCohorts,\n    divideCourseTopicsByCohorts,\n  ]);\n\n  const handleCheckBoxToggle = (event, push, remove) => {\n    const { checked, value } = event.target;\n    if (checked) {\n      push(value);\n    } else {\n      remove(divideDiscussionIds.indexOf(value));\n    }\n  };\n\n  const handleDivideCourseTopicsByCohortsToggle = (event) => {\n    const { checked } = event.target;\n    if (!checked) {\n      setFieldValue('divideDiscussionIds', []);\n    }\n    handleChange(event);\n  };\n\n  return (\n    <>\n      <h5 className=\"text-gray-500 mb-4 mt-4\">\n        {intl.formatMessage(messages.divisionByGroup)}\n      </h5>\n      {!cohortsEnabled\n      && (\n        <Alert className=\"bg-light-200 font-weight-normal h5\" id=\"alert\">\n          {intl.formatMessage(messages.cohortsEnabled)}\n          <Hyperlink destination={learningCourseURL} target=\"_blank\">\n            {intl.formatMessage(messages.instructorDashboard)}\n          </Hyperlink>\n        </Alert>\n      )}\n      <FormSwitchGroup\n        onChange={handleChange}\n        className=\"mt-2\"\n        onBlur={handleBlur}\n        id=\"divideByCohorts\"\n        checked={cohortsEnabled === false ? cohortsEnabled : divideByCohorts}\n        label={intl.formatMessage(messages.divideByCohortsLabel)}\n        helpText={intl.formatMessage(messages.divideByCohortsHelp)}\n        disabled={!cohortsEnabled}\n      />\n      <TransitionReplace>\n        {(divideByCohorts && cohortsEnabled) ? (\n          <React.Fragment key=\"open\">\n            <AppConfigFormDivider />\n            <FormSwitchGroup\n              onChange={(event) => handleDivideCourseTopicsByCohortsToggle(event)}\n              onBlur={handleBlur}\n              className=\"ml-4 mt-3\"\n              id=\"divideCourseTopicsByCohorts\"\n              checked={divideCourseTopicsByCohorts}\n              label={intl.formatMessage(messages.divideCourseTopicsByCohortsLabel)}\n              helpText={intl.formatMessage(messages.divideCourseTopicsByCohortsHelp)}\n            />\n            <TransitionReplace>\n              {divideCourseTopicsByCohorts ? (\n                <React.Fragment key=\"open\">\n                  <FieldArray\n                    name=\"divideDiscussionIds\"\n                    render={({ push, remove }) => (\n                      <Form.Group className=\"ml-4\">\n                        <Form.CheckboxSet\n                          name=\"dividedTopics\"\n                          onChange={(event) => handleCheckBoxToggle(event, push, remove)}\n                          onBlur={handleBlur}\n                          defaultValue={divideDiscussionIds}\n                        >\n                          {validDiscussionTopics.map((topic) => (\n                            topic.name ? (\n                              <Form.Checkbox\n                                key={`checkbox-${topic.id}`}\n                                id={`checkbox-${topic.id}`}\n                                value={topic.id}\n                              >\n                                {topic.name}\n                              </Form.Checkbox>\n                            ) : null\n                          ))}\n                        </Form.CheckboxSet>\n                      </Form.Group>\n                    )}\n                  />\n                </React.Fragment>\n              ) : (\n                <React.Fragment key=\"closed\" />\n              )}\n            </TransitionReplace>\n          </React.Fragment>\n        ) : (\n          <React.Fragment key=\"closed\" />\n        )}\n      </TransitionReplace>\n    </>\n  );\n};\n\nDivisionByGroupFields.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(DivisionByGroupFields);\n","import React from 'react';\nimport { useFormikContext } from 'formik';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport FormSwitchGroup from '../../../../../generic/FormSwitchGroup';\nimport AppConfigFormDivider from './AppConfigFormDivider';\nimport messages from '../../messages';\n\nconst ReportedContentEmailNotifications = ({ intl }) => {\n  const {\n    handleChange,\n    handleBlur,\n    values,\n  } = useFormikContext();\n\n  return (\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    <>\n      {values.enableReportedContentEmailNotifications && (\n        <div>\n          <h5 className=\"text-gray-500 mt-4 mb-2 \">{intl.formatMessage(messages.reportedContentEmailNotifications)}</h5>\n          <FormSwitchGroup\n            className=\"mb-4\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            id=\"reportedContentEmailNotifications\"\n            checked={values.reportedContentEmailNotifications}\n            label={intl.formatMessage(messages.reportedContentEmailNotificationsLabel)}\n            helpText={intl.formatMessage(messages.reportedContentEmailNotificationsHelp)}\n          />\n          <AppConfigFormDivider thick />\n        </div>\n      )}\n    </>\n  );\n};\n\nReportedContentEmailNotifications.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ReportedContentEmailNotifications);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { useFormikContext } from 'formik';\nimport FormSwitchGroup from '../../../../../generic/FormSwitchGroup';\nimport messages from '../../messages';\nimport AppConfigFormDivider from './AppConfigFormDivider';\nimport ConfirmationPopup from '../../../../../generic/ConfirmationPopup';\n\nconst InContextDiscussionFields = ({\n  onBlur,\n  onChange,\n  intl,\n  values,\n}) => {\n  const {\n    setFieldValue,\n  } = useFormikContext();\n\n  const [showPopup, setShowPopup] = useState(false);\n  const handleConfirmation = () => {\n    setFieldValue('enableGradedUnits', !values.enableGradedUnits);\n    setShowPopup(false);\n  };\n\n  return (\n    <>\n      <h5 className=\"text-gray-500 mt-4\">{intl.formatMessage(messages.visibilityInContext)}</h5>\n      {showPopup\n        ? (\n          <ConfirmationPopup\n            label={values.enableGradedUnits\n              ? intl.formatMessage(messages.cancelEnableDiscussionsLabel)\n              : intl.formatMessage(messages.confirmEnableDiscussionsLabel)}\n            bodyText={values.enableGradedUnits\n              ? intl.formatMessage(messages.cancelEnableDiscussions)\n              : intl.formatMessage(messages.confirmEnableDiscussions)}\n            onConfirm={handleConfirmation}\n            confirmLabel={intl.formatMessage(messages.confirm)}\n            onCancel={() => setShowPopup(false)}\n            cancelLabel={intl.formatMessage(messages.cancelButton)}\n          />\n        )\n        : (\n          <FormSwitchGroup\n            onChange={() => setShowPopup(true)}\n            onBlur={onBlur}\n            id=\"enableGradedUnits\"\n            checked={values.enableGradedUnits}\n            label={intl.formatMessage(messages.gradedUnitPagesLabel)}\n            helpText={intl.formatMessage(messages.gradedUnitPagesHelp)}\n          />\n        )}\n      <AppConfigFormDivider />\n      <FormSwitchGroup\n        onChange={onChange}\n        onBlur={onBlur}\n        id=\"groupAtSubsection\"\n        checked={values.groupAtSubsection}\n        label={intl.formatMessage(messages.groupInContextSubsectionLabel)}\n        helpText={intl.formatMessage(messages.groupInContextSubsectionHelp)}\n      />\n    </>\n  );\n};\n\nInContextDiscussionFields.propTypes = {\n  onBlur: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n  values: PropTypes.shape({\n    enableGradedUnits: PropTypes.bool,\n    groupAtSubsection: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default injectIntl(InContextDiscussionFields);\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Card, Form } from '@edx/paragon';\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\n\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport { useModel, useModels } from '../../../../../generic/model-store';\nimport { setupYupExtensions } from '../../../../../utils';\nimport messages from '../../messages';\nimport { checkFieldErrors } from '../../utils';\nimport AnonymousPostingFields from '../shared/AnonymousPostingFields';\nimport AppConfigFormDivider from '../shared/AppConfigFormDivider';\nimport DiscussionRestriction from '../shared/DiscussionRestriction';\nimport DiscussionTopics from '../shared/discussion-topics/DiscussionTopics';\nimport DivisionByGroupFields from '../shared/DivisionByGroupFields';\nimport ReportedContentEmailNotifications from '../shared/ReportedContentEmailNotifications';\nimport InContextDiscussionFields from '../shared/InContextDiscussionFields';\nimport OpenedXConfigFormProvider from './OpenedXConfigFormProvider';\n\nsetupYupExtensions();\n\nconst OpenedXConfigForm = ({\n  onSubmit, formRef, intl, legacy,\n}) => {\n  const {\n    selectedAppId, enableGradedUnits, discussionTopicIds, divideDiscussionIds, postingRestrictions,\n  } = useSelector(state => state.discussions);\n  const appConfigObj = useModel('appConfigs', selectedAppId);\n  const discussionTopicsModel = useModels('discussionTopics', discussionTopicIds);\n  const legacyAppConfig = {\n    ...(appConfigObj || {}),\n    divideDiscussionIds,\n    enableInContext: true,\n    enableGradedUnits,\n    postingRestrictions,\n    unitLevelVisibility: true,\n    allowAnonymousPostsPeers: appConfigObj?.allowAnonymousPostsPeers || false,\n    reportedContentEmailNotifications: appConfigObj?.reportedContentEmailNotifications || false,\n    enableReportedContentEmailNotifications: Boolean(appConfigObj?.enableReportedContentEmailNotifications) || false,\n    restrictedDates: appConfigObj?.restrictedDates || [],\n    discussionTopics: discussionTopicsModel || [],\n    divideByCohorts: appConfigObj?.divideByCohorts || false,\n    divideCourseTopicsByCohorts: appConfigObj?.divideCourseTopicsByCohorts || false,\n    groupAtSubsection: appConfigObj?.groupAtSubsection || false,\n  };\n\n  const [validDiscussionTopics, setValidDiscussionTopics] = useState(discussionTopicsModel);\n  // These fields are only used for the new provider and aren't supported for legacy.\n  const additionalFields = legacy ? {} : {\n    enabledGradedUnits: Yup.bool().default(false),\n    groupAtSubsection: Yup.bool().default(false),\n  };\n  const validationSchema = Yup.object().shape({\n    // eslint-disable-next-line react/forbid-prop-types\n    restrictedDates: Yup.array(\n      Yup.object().shape({\n        startDate: Yup.string()\n          .checkFormat(intl.formatMessage(messages.restrictedStartDateInValidFormat), 'date')\n          .required(intl.formatMessage(messages.restrictedStartDateRequired)),\n        endDate: Yup.string()\n          .checkFormat(intl.formatMessage(messages.restrictedEndDateInValidFormat), 'date')\n          .required(intl.formatMessage(messages.restrictedEndDateRequired))\n          .when('startDate', {\n            is: (startDate) => startDate,\n            then: Yup.string().compare(intl.formatMessage(messages.restrictedEndDateInPast), 'date'),\n          }),\n        startTime: Yup.string().checkFormat(\n          intl.formatMessage(messages.restrictedStartTimeInValidFormat),\n          'time',\n        ),\n        endTime: Yup.string()\n          .checkFormat(intl.formatMessage(messages.restrictedEndTimeInValidFormat), 'time')\n          .when('startTime', {\n            is: (startTime) => startTime,\n            then: Yup.string().compare(intl.formatMessage(messages.restrictedEndTimeInPast), 'time'),\n          }),\n      }),\n    ),\n    // eslint-disable-next-line react/forbid-prop-types\n    discussionTopics: Yup.array(\n      Yup.object({\n        name: Yup.string().required(intl.formatMessage(messages.discussionTopicRequired)),\n      }).uniqueObjectProperty('name', intl.formatMessage(messages.discussionTopicNameAlreadyExist)),\n    ),\n    ...additionalFields,\n  });\n\n  return (\n    <Formik\n      initialValues={legacyAppConfig}\n      validateOnChange={false}\n      validationSchema={validationSchema}\n      onSubmit={(values) => onSubmit(values)}\n    >\n      {({\n        handleSubmit, handleChange, handleBlur, values, errors, touched,\n      }) => {\n        const { discussionTopics, restrictedDates } = values;\n        const discussionTopicErrors = discussionTopics.map((value, index) => checkFieldErrors(touched, errors, `discussionTopics.${index}`, 'name'));\n        const restrictedDatesErrors = restrictedDates.map(\n          (value, index) => checkFieldErrors(touched, errors, `restrictedDates.${index}`, 'startDate')\n            || checkFieldErrors(touched, errors, `restrictedDates.${index}`, 'endDate')\n            || checkFieldErrors(touched, errors, `restrictedDates.${index}`, 'startTime')\n            || checkFieldErrors(touched, errors, `restrictedDates.${index}`, 'endTime'),\n        );\n\n        const contextValue = {\n          validDiscussionTopics,\n          setValidDiscussionTopics,\n          discussionTopicErrors,\n          postingRestrictions,\n          restrictedDatesErrors,\n          isFormInvalid:\n            discussionTopicErrors.some((error) => error)\n            || restrictedDatesErrors.some((error) => error),\n        };\n\n        return (\n          <OpenedXConfigFormProvider value={contextValue}>\n            <Card className=\"mb-5 px-4 px-sm-5 pb-4\" data-testid=\"legacyConfigForm\">\n              <Form ref={formRef} onSubmit={handleSubmit}>\n                <h3 className=\"text-primary-500 my-3\">{intl.formatMessage(messages[`appName-${selectedAppId}`])}</h3>\n                <AppConfigFormDivider thick />\n                {!legacy\n                  && (\n                    <>\n                      <InContextDiscussionFields onBlur={handleBlur} onChange={handleChange} values={values} />\n                      <AppConfigFormDivider thick />\n                    </>\n                  )}\n                <AnonymousPostingFields\n                  onBlur={handleBlur}\n                  onChange={handleChange}\n                  values={values}\n                />\n                <AppConfigFormDivider thick />\n                <DiscussionTopics />\n                <AppConfigFormDivider thick />\n                <DivisionByGroupFields />\n                <AppConfigFormDivider thick />\n                <ReportedContentEmailNotifications />\n                <DiscussionRestriction />\n              </Form>\n            </Card>\n          </OpenedXConfigFormProvider>\n        );\n      }}\n    </Formik>\n  );\n};\n\nOpenedXConfigForm.propTypes = {\n  legacy: PropTypes.bool.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  formRef: PropTypes.object.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(OpenedXConfigForm);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  documentationPage: {\n    id: 'authoring.discussions.documentationPage',\n    defaultMessage: 'Visit the {name} documentation page',\n  },\n  formInstructions: {\n    id: 'authoring.discussions.formInstructions',\n    defaultMessage: 'Complete the fields below to set up your discussion tool.',\n  },\n  consumerKey: {\n    id: 'authoring.discussions.consumerKey',\n    defaultMessage: 'Consumer Key',\n    description: 'Label for the Consumer Key field.',\n  },\n  consumerKeyRequired: {\n    id: 'authoring.discussions.consumerKey.required',\n    defaultMessage: 'Consumer key is a required field',\n    description: 'Tells the user that the Consumer Key field is required and must have a value.',\n  },\n  consumerSecret: {\n    id: 'authoring.discussions.consumerSecret',\n    defaultMessage: 'Consumer Secret',\n    description: 'Label for the Consumer Secret field.',\n  },\n  consumerSecretRequired: {\n    id: 'authoring.discussions.consumerSecret.required',\n    defaultMessage: 'Consumer secret is a required field',\n    description: 'Tells the user that the Consumer Secret field is required and must have a value.',\n  },\n  launchUrl: {\n    id: 'authoring.discussions.launchUrl',\n    defaultMessage: 'Launch URL',\n    description: 'Label for the Launch URL field.',\n  },\n  launchUrlRequired: {\n    id: 'authoring.discussions.launchUrl.required',\n    defaultMessage: 'Launch URL is a required field',\n    description: 'Tells the user that the Launch URL field is required and must have a value.',\n  },\n  staffOnlyConfigInfo: {\n    id: 'authoring.discussions.stuffOnlyConfigInfo',\n    defaultMessage: 'To enable {providerName} for your course, please contact their support team at {supportEmail} to learn more about pricing and usage.',\n  },\n  staffOnlyConfigGuide: {\n    id: 'authoring.discussions.stuffOnlyConfigGuide',\n    defaultMessage: 'To fully configure {providerName} will also require sharing usernames and emails for learners and course team. Please contact your edX project coordinator to enable PII sharing for this course.',\n  },\n  piiSharing: {\n    id: 'authoring.discussions.piiSharing',\n    defaultMessage: 'Optionally share a user\\'s username and/or email with the LTI provider:',\n  },\n  piiShareUsername: {\n    id: 'authoring.discussions.piiShareUsername',\n    defaultMessage: 'Share username',\n    description: 'Label for the Share Username field.',\n  },\n  piiShareEmail: {\n    id: 'authoring.discussions.piiShareEmail',\n    defaultMessage: 'Share email',\n    description: 'Label for the Share Email field.',\n  },\n  contact: {\n    id: 'authoring.discussions.appDocInstructions.contact',\n    defaultMessage: 'Contact: {link}',\n    description: 'Contact',\n  },\n  general: {\n    id: 'authoring.discussions.appDocInstructions.documentationLink',\n    defaultMessage: 'General documentation',\n    description: 'Application Document Instructions message for documentation link',\n  },\n  accessibility: {\n    id: 'authoring.discussions.appDocInstructions.accessibilityDocumentationLink',\n    defaultMessage: 'Accessibility documentation',\n    description: 'Application Document Instructions message for accessibility link',\n  },\n  configuration: {\n    id: 'authoring.discussions.appDocInstructions.configurationLink',\n    defaultMessage: 'Configuration documentation',\n    description: 'Application Document Instructions message for configurations link',\n  },\n  learnMore: {\n    id: 'authoring.discussions.appDocInstructions.learnMoreLink',\n    defaultMessage: 'Learn more about {providerName}',\n    description: 'Application Document Instructions message for learn more links',\n  },\n  linkTextHeading: {\n    id: 'authoring.discussions.appDocInstructions.linkTextHeading',\n    defaultMessage: 'External help and documentation',\n    description: 'External help and documentation heading',\n  },\n  linkText: {\n    id: 'authoring.discussions.appDocInstructions.linkText',\n    defaultMessage: '{link}',\n    description: 'link',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Hyperlink, MailtoLink,\n} from '@edx/paragon';\n\nimport AppConfigFormDivider from './AppConfigFormDivider';\n\nimport messages from '../lti/messages';\n\nconst AppExternalLinks = ({\n  externalLinks,\n  intl,\n  providerName,\n  showLaunchIcon,\n  customClasses,\n}) => {\n  const { contactEmail, ...links } = externalLinks;\n  const linkTypes = Object.keys(links).filter(key => links[key]);\n  return (\n    <div className=\"pt-4\">\n      {linkTypes.length\n        ? (\n          <>\n            <AppConfigFormDivider />\n            <h4 className=\"pt-4\">{intl.formatMessage(messages.linkTextHeading)}</h4>\n            {linkTypes.map((type) => (\n              <div key={type}>\n                <Hyperlink\n                  destination={externalLinks[type]}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  showLaunchIcon={showLaunchIcon}\n                  className={customClasses}\n                >\n                  { intl.formatMessage(messages[type], { providerName }) }\n                </Hyperlink>\n              </div>\n            ))}\n          </>\n        ) : null}\n      {contactEmail && (\n        <div className={customClasses}>\n          <hr />\n          <FormattedMessage\n            {...messages.contact}\n            values={{\n              link: (\n                <MailtoLink\n                  to={contactEmail}\n                  rel=\"noopener noreferrer\"\n                >\n                  <span className={customClasses}>{ contactEmail }</span>\n                </MailtoLink>\n              ),\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nAppExternalLinks.propTypes = {\n  externalLinks: PropTypes.shape({\n    learnMore: PropTypes.string,\n    configuration: PropTypes.string,\n    general: PropTypes.string,\n    accessibility: PropTypes.string,\n    contactEmail: PropTypes.string,\n  }).isRequired,\n  providerName: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n  showLaunchIcon: PropTypes.bool,\n  customClasses: PropTypes.string,\n};\n\nAppExternalLinks.defaultProps = {\n  showLaunchIcon: false,\n  customClasses: '',\n};\n\nexport default injectIntl(AppExternalLinks);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ensureConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Card, Form, MailtoLink } from '@edx/paragon';\n\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport { updateValidationStatus } from '../../../data/slice';\nimport AppExternalLinks from '../shared/AppExternalLinks';\nimport messages from './messages';\nimport appMessages from '../../messages';\nimport { useModel } from '../../../../../generic/model-store';\n\nensureConfig(['SITE_NAME', 'SUPPORT_EMAIL'], 'LTI Config Form');\n\nconst LtiConfigForm = ({ onSubmit, intl, formRef }) => {\n  const dispatch = useDispatch();\n\n  const { selectedAppId, piiConfig } = useSelector((state) => state.discussions);\n  const appConfig = useModel('appConfigs', selectedAppId);\n  const app = useModel('apps', selectedAppId);\n  const providerName = intl.formatMessage(appMessages[`appName-${app?.id}`]);\n  const ltiAppConfig = {\n    consumerKey: appConfig?.consumerKey || '',\n    consumerSecret: appConfig?.consumerSecret || '',\n    launchUrl: appConfig?.launchUrl || '',\n    piiShareUsername: piiConfig.piiSharing ? piiConfig.piiShareUsername : undefined,\n    piiShareEmail: piiConfig.piiSharing ? piiConfig.piiShareEmail : undefined,\n  };\n  const user = getAuthenticatedUser();\n  const { externalLinks } = app;\n  const {\n    handleSubmit, handleChange, handleBlur, values, touched, errors,\n  } = useFormik({\n    initialValues: ltiAppConfig,\n    validationSchema: Yup.object().shape({\n      consumerKey: Yup.string().required(intl.formatMessage(messages.consumerKeyRequired)),\n      consumerSecret: Yup.string().required(intl.formatMessage(messages.consumerSecretRequired)),\n      launchUrl: Yup.string().required(intl.formatMessage(messages.launchUrlRequired)),\n      piiShareUsername: Yup.bool(),\n      piiShareEmail: Yup.bool(),\n    }),\n    onSubmit,\n  });\n  const isInvalidConsumerKey = Boolean(touched.consumerKey && errors.consumerKey);\n  const isInvalidConsumerSecret = Boolean(touched.consumerSecret && errors.consumerSecret);\n  const isInvalidLaunchUrl = Boolean(touched.launchUrl && errors.launchUrl);\n  const showLTIConfig = user.administrator;\n  const enablePIISharing = false;\n  const supportEmails = {\n    Yellowdig: 'learnmore@yellowdig.com',\n    'Ed Discussion': 'team@edstem.org',\n    InScribe: 'hello@inscribeapp.com',\n    Piazza: 'team@piazza.com',\n  };\n\n  useEffect(() => {\n    dispatch(updateValidationStatus({ hasError: Object.keys(errors).length > 0 }));\n  }, [errors]);\n\n  return (\n    <Card className=\"mb-5 p-5\" data-testid=\"ltiConfigForm\">\n      <Form ref={formRef} onSubmit={handleSubmit}>\n        <h3 className=\"mb-3\">{providerName}</h3>\n        <p>\n          <FormattedMessage\n            {...messages.staffOnlyConfigInfo}\n            values={{\n              providerName,\n              supportEmail: supportEmails[providerName] ? (\n                <MailtoLink to={supportEmails[providerName]}>{supportEmails[providerName]}</MailtoLink>\n              ) : (\n                'support'\n              ),\n            }}\n          />\n        </p>\n        <p>\n          <FormattedMessage\n            {...messages.staffOnlyConfigGuide}\n            values={{\n              providerName,\n              supportEmail: supportEmails[providerName] ? (\n                <MailtoLink to={supportEmails[providerName]}>{supportEmails[providerName]}</MailtoLink>\n              ) : (\n                'support'\n              ),\n            }}\n          />\n        </p>\n        {(showLTIConfig && piiConfig.piiSharing) && (\n          <>\n            <p>{intl.formatMessage(messages.formInstructions)}</p>\n            <Form.Group\n              controlId=\"consumerKey\"\n              isInvalid={isInvalidConsumerKey}\n              className=\"mb-4\"\n              data-testid=\"ltiConfigFields\"\n            >\n              <Form.Control\n                floatingLabel={intl.formatMessage(messages.consumerKey)}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.consumerKey}\n              />\n              {isInvalidConsumerKey && (\n                <Form.Control.Feedback type=\"invalid\" hasIcon={false}>\n                  <span className=\"x-small\">{errors.consumerKey}</span>\n                </Form.Control.Feedback>\n              )}\n            </Form.Group>\n            <Form.Group\n              controlId=\"consumerSecret\"\n              isInvalid={isInvalidConsumerSecret}\n              className=\"mb-4\"\n            >\n              <Form.Control\n                floatingLabel={intl.formatMessage(messages.consumerSecret)}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.consumerSecret}\n              />\n              {isInvalidConsumerSecret && (\n                <Form.Control.Feedback type=\"invalid\" hasIcon={false}>\n                  <span className=\"x-small\">{errors.consumerSecret}</span>\n                </Form.Control.Feedback>\n              )}\n            </Form.Group>\n            <Form.Group controlId=\"launchUrl\" isInvalid={isInvalidLaunchUrl}>\n              <Form.Control\n                floatingLabel={intl.formatMessage(messages.launchUrl)}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                value={values.launchUrl}\n              />\n              {isInvalidLaunchUrl && (\n                <Form.Control.Feedback type=\"invalid\" hasIcon={false}>\n                  <span className=\"x-small\">{errors.launchUrl}</span>\n                </Form.Control.Feedback>\n              )}\n            </Form.Group>\n          </>\n        )}\n        {(enablePIISharing) && (\n          <div data-testid=\"piiSharingFields\">\n            <Form.Text className=\"my-2\">{intl.formatMessage(messages.piiSharing)}</Form.Text>\n            <Form.Group controlId=\"piiSharing\">\n              <Form.Check\n                type=\"checkbox\"\n                name=\"piiShareUsername\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                checked={values.piiShareUsername}\n                label={intl.formatMessage(messages.piiShareUsername)}\n              />\n              <Form.Check\n                type=\"checkbox\"\n                name=\"piiShareEmail\"\n                onChange={handleChange}\n                onBlur={handleBlur}\n                checked={values.piiShareEmail}\n                label={intl.formatMessage(messages.piiShareEmail)}\n              />\n            </Form.Group>\n          </div>\n        )}\n      </Form>\n      <AppExternalLinks\n        externalLinks={externalLinks}\n        providerName={providerName}\n        customClasses=\"small text-muted\"\n      />\n    </Card>\n  );\n};\n\nLtiConfigForm.propTypes = {\n  intl: intlShape.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  // eslint-disable-next-line react/forbid-prop-types\n  formRef: PropTypes.object.isRequired,\n};\n\nexport default injectIntl(LtiConfigForm);\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AppConfigFormContext = React.createContext({});\n\nconst AppConfigFormProvider = ({ children }) => {\n  const formRef = React.createRef();\n  const contextValue = useMemo(() => ({ formRef }), []);\n\n  return (\n    <AppConfigFormContext.Provider\n      value={contextValue}\n    >\n      {children}\n    </AppConfigFormContext.Provider>\n  );\n};\n\nAppConfigFormProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default AppConfigFormProvider;\n","import React, { useCallback, useContext } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { StatefulButton } from '@edx/paragon';\n\nimport messages from './messages';\nimport { SAVING } from '../data/slice';\nimport { AppConfigFormContext } from './AppConfigFormProvider';\nimport { useModel } from '../../../generic/model-store';\n\nconst AppConfigFormSaveButton = ({ intl, labelText }) => {\n  const saveStatus = useSelector(state => state.discussions.saveStatus);\n  const { selectedAppId } = useSelector((state) => state.discussions);\n\n  const app = useModel('apps', selectedAppId);\n  const canSubmit = getAuthenticatedUser().administrator || !app?.adminOnlyConfig;\n\n  const { formRef } = useContext(AppConfigFormContext);\n\n  const submitButtonState = saveStatus === SAVING ? 'pending' : 'default';\n\n  // This causes the form to be submitted from a button outside the form.\n  const handleSave = useCallback(() => {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Event/Event\n    // cancelable: (optional) a Boolean indicating whether the event can be canceled. The default is false.\n    // cancelable: true cancels the untrusted event and safari, chrome cancel the untrusted event by default\n    formRef.current.dispatchEvent(new Event('submit', {\n      cancelable: true,\n    }));\n  }, [formRef]);\n\n  return (\n    canSubmit && (\n      <StatefulButton\n        labels={{\n          default: labelText || intl.formatMessage(messages.saveButton),\n          pending: intl.formatMessage(messages.savingButton),\n          complete: intl.formatMessage(messages.savedButton),\n        }}\n        state={submitButtonState}\n        onClick={handleSave}\n        style={{ minWidth: '88px' }}\n      />\n    )\n  );\n};\n\nAppConfigFormSaveButton.propTypes = {\n  intl: intlShape.isRequired,\n  labelText: PropTypes.string,\n};\n\nAppConfigFormSaveButton.defaultProps = {\n  labelText: '',\n};\n\nexport default injectIntl(AppConfigFormSaveButton);\n","import React, {\n  useCallback, useContext, useEffect, useState,\n} from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useRouteMatch } from 'react-router';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  Container,\n  ModalDialog,\n} from '@edx/paragon';\n\nimport Loading from '../../../generic/Loading';\nimport PermissionDeniedAlert from '../../../generic/PermissionDeniedAlert';\nimport SaveFormConnectionErrorAlert from '../../../generic/SaveFormConnectionErrorAlert';\nimport { PagesAndResourcesContext } from '../../PagesAndResourcesProvider';\nimport {\n  DENIED,\n  FAILED, LOADED, LOADING, selectApp,\n} from '../data/slice';\nimport { fetchDiscussionSettings, saveProviderConfig } from '../data/thunks';\nimport OpenedXConfigForm from './apps/openedx';\nimport LtiConfigForm from './apps/lti';\nimport AppConfigFormProvider, { AppConfigFormContext } from './AppConfigFormProvider';\nimport AppConfigFormSaveButton from './AppConfigFormSaveButton';\nimport messages from './messages';\n\nconst AppConfigForm = ({\n  courseId, intl,\n}) => {\n  const dispatch = useDispatch();\n\n  const { formRef } = useContext(AppConfigFormContext);\n  const { path: pagesAndResourcesPath } = useContext(PagesAndResourcesContext);\n  const { params: { appId: routeAppId } } = useRouteMatch();\n  const [isLoading, setLoading] = useState(true);\n  const {\n    activeAppId, selectedAppId, status, saveStatus,\n  } = useSelector(state => state.discussions);\n\n  const [confirmationDialogVisible, setConfirmationDialogVisible] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      await dispatch(fetchDiscussionSettings(courseId, selectedAppId));\n      setLoading(false);\n    })();\n  }, [courseId, selectedAppId]);\n\n  useEffect(() => {\n    if (status === LOADED) {\n      if (routeAppId !== selectedAppId) {\n        dispatch(selectApp({ appId: routeAppId }));\n      }\n    }\n  }, [selectedAppId, routeAppId, status]);\n\n  // This is a callback that gets called after the form has been submitted successfully.\n  const handleSubmit = useCallback((values) => {\n    const needsConfirmation = (activeAppId !== selectedAppId);\n    if (needsConfirmation && !confirmationDialogVisible) {\n      setConfirmationDialogVisible(true);\n    } else {\n      setConfirmationDialogVisible(false);\n      // Note that when this action succeeds, we redirect to pagesAndResourcesPath in the thunk.\n      dispatch(saveProviderConfig(courseId, selectedAppId, values, pagesAndResourcesPath));\n    }\n  }, [activeAppId, confirmationDialogVisible, courseId, selectedAppId]);\n\n  if (!selectedAppId || status === LOADING || isLoading) {\n    return (\n      <Loading />\n    );\n  }\n\n  let alert = null;\n  if (saveStatus === FAILED) {\n    alert = (\n      <SaveFormConnectionErrorAlert />\n    );\n  }\n  if (saveStatus === DENIED) {\n    alert = <PermissionDeniedAlert />;\n  }\n\n  let form;\n  if (selectedAppId === 'legacy') {\n    form = (\n      <OpenedXConfigForm\n        formRef={formRef}\n        onSubmit={handleSubmit}\n        legacy\n      />\n    );\n  } else if (selectedAppId === 'openedx') {\n    form = (\n      <OpenedXConfigForm\n        formRef={formRef}\n        onSubmit={handleSubmit}\n        legacy={false}\n      />\n    );\n  } else {\n    form = (\n      <LtiConfigForm\n        formRef={formRef}\n        onSubmit={handleSubmit}\n      />\n    );\n  }\n\n  return (\n    <Container size=\"sm\" className=\"px-sm-0 py-sm-5 p-0\" data-testid=\"appConfigForm\">\n      {alert}\n      {form}\n      <ModalDialog\n        hasCloseButton={false}\n        isOpen={confirmationDialogVisible}\n        onClose={() => setConfirmationDialogVisible(false)}\n        title={intl.formatMessage(messages.ok)}\n      >\n        <ModalDialog.Header className=\"pt-4\">\n          <ModalDialog.Title className=\"h4 m-0\" style={{ fontSize: '1.125rem' }}>\n            {intl.formatMessage(messages.confirmConfigurationChange)}\n          </ModalDialog.Title>\n        </ModalDialog.Header>\n        <ModalDialog.Body className=\"overflow-hidden text-primary-700\">\n          {intl.formatMessage(messages.configurationChangeConsequence)}\n        </ModalDialog.Body>\n        <ModalDialog.Footer>\n          <ActionRow>\n            <ModalDialog.CloseButton variant=\"tertiary\">\n              {intl.formatMessage(messages.cancel)}\n            </ModalDialog.CloseButton>\n            <AppConfigFormSaveButton labelText={intl.formatMessage(messages.ok)} />\n          </ActionRow>\n        </ModalDialog.Footer>\n      </ModalDialog>\n    </Container>\n  );\n};\n\nAppConfigForm.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n};\n\nconst IntlAppConfigForm = injectIntl(AppConfigForm);\n\nIntlAppConfigForm.Provider = AppConfigFormProvider;\nIntlAppConfigForm.SaveButton = AppConfigFormSaveButton;\n\nexport default IntlAppConfigForm;\n","import React, {\n  useCallback, useContext, useEffect, useState,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  useRouteMatch,\n} from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { history } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Alert, Button, FullscreenModal, Stepper,\n} from '@edx/paragon';\n\nimport { PagesAndResourcesContext } from '../PagesAndResourcesProvider';\n\nimport messages from './messages';\nimport DiscussionsProvider from './DiscussionsProvider';\nimport { fetchProviders } from './data/thunks';\nimport AppList from './app-list';\nimport AppConfigForm from './app-config-form';\nimport { DENIED, FAILED } from './data/slice';\nimport ConnectionErrorAlert from '../../generic/ConnectionErrorAlert';\nimport { useModel } from '../../generic/model-store';\nimport PermissionDeniedAlert from '../../generic/PermissionDeniedAlert';\nimport Loading from '../../generic/Loading';\n\nconst SELECTION_STEP = 'selection';\nconst SETTINGS_STEP = 'settings';\n\nconst DiscussionsSettings = ({ courseId, intl }) => {\n  const dispatch = useDispatch();\n  const { path: pagesAndResourcesPath } = useContext(PagesAndResourcesContext);\n  const { status, hasValidationError } = useSelector(state => state.discussions);\n  const { canChangeProviders } = useSelector(state => state.courseDetail);\n  const courseDetail = useModel('courseDetails', courseId);\n\n  useEffect(() => {\n    dispatch(fetchProviders(courseId));\n  }, [courseId]);\n\n  const discussionsPath = `${pagesAndResourcesPath}/discussion`;\n  const { params: { appId } } = useRouteMatch();\n\n  const startStep = appId ? SETTINGS_STEP : SELECTION_STEP;\n  const [currentStep, setCurrentStep] = useState(startStep);\n\n  useEffect(() => {\n    setCurrentStep(appId ? SETTINGS_STEP : SELECTION_STEP);\n  }, [appId]);\n\n  const handleClose = useCallback(() => {\n    history.push(pagesAndResourcesPath);\n  }, [pagesAndResourcesPath]);\n\n  const handleBack = useCallback(() => {\n    history.push(discussionsPath);\n  }, [discussionsPath]);\n\n  if (!courseDetail) {\n    return <Loading />;\n  }\n\n  if (status === FAILED) {\n    return (\n      <FullscreenModal\n        className=\"bg-light-200\"\n        title={intl.formatMessage(messages.configure)}\n        onClose={handleClose}\n        isOpen\n      >\n        <ConnectionErrorAlert />\n      </FullscreenModal>\n    );\n  }\n\n  if (status === DENIED) {\n    return (\n      <FullscreenModal\n        className=\"bg-light-200\"\n        title={intl.formatMessage(messages.configure)}\n        onClose={handleClose}\n        isOpen\n      >\n        <PermissionDeniedAlert />\n      </FullscreenModal>\n    );\n  }\n\n  return (\n    <DiscussionsProvider path={discussionsPath}>\n      <AppConfigForm.Provider>\n        <Stepper activeKey={currentStep}>\n          <FullscreenModal\n            className=\"bg-light-200\"\n            modalBodyClassName=\"px-sm-4\"\n            title={intl.formatMessage(messages.configure)}\n            onClose={handleClose}\n            isOpen\n            beforeBodyNode={<Stepper.Header className=\"border-bottom border-light\" />}\n            footerNode={(\n              <>\n                <Stepper.ActionRow eventKey={SELECTION_STEP}>\n                  <AppList.NextButton />\n                </Stepper.ActionRow>\n                <Stepper.ActionRow eventKey={SETTINGS_STEP}>\n                  <div className=\"d-flex w-100 justify-content-between\">\n                    <Button\n                      variant=\"outline-primary\"\n                      onClick={handleBack}\n                    >\n                      {intl.formatMessage(messages.backButton)}\n                    </Button>\n                    <AppConfigForm.SaveButton />\n                  </div>\n                </Stepper.ActionRow>\n              </>\n            )}\n          >\n            <Stepper.Step\n              eventKey={SELECTION_STEP}\n              title={intl.formatMessage(messages.providerSelection)}\n            >\n              {\n                !canChangeProviders && (\n                  <Alert variant=\"warning\">\n                    {intl.formatMessage(messages.noProviderSwitchAfterCourseStarted)}\n                  </Alert>\n                )\n              }\n              <AppList />\n            </Stepper.Step>\n            <Stepper.Step\n              eventKey={SETTINGS_STEP}\n              title={intl.formatMessage(messages.settings)}\n              description={hasValidationError ? intl.formatMessage(messages.Incomplete) : ''}\n              hasError={hasValidationError}\n            >\n              <AppConfigForm\n                courseId={courseId}\n              />\n            </Stepper.Step>\n          </FullscreenModal>\n        </Stepper>\n      </AppConfigForm.Provider>\n    </DiscussionsProvider>\n  );\n};\n\nDiscussionsSettings.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(DiscussionsSettings);\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'customPages',\n  initialState: {\n    customPagesIds: [],\n    loadingStatus: RequestStatus.IN_PROGRESS,\n    savingStatus: '',\n    addingStatus: 'default',\n    deletingStatus: '',\n  },\n  reducers: {\n    setPageIds: (state, { payload }) => {\n      state.customPagesIds = payload.customPagesIds;\n    },\n    updateLoadingStatus: (state, { payload }) => {\n      state.loadingStatus = payload.status;\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload.status;\n    },\n    updateAddingStatus: (state, { payload }) => {\n      state.addingStatus = payload.status;\n    },\n    updateDeletingStatus: (state, { payload }) => {\n      state.deletingStatus = payload.status;\n    },\n    deleteCustomPageSuccess: (state, { payload }) => {\n      state.customPagesIds = state.customPagesIds.filter(id => id !== payload.customPageId);\n    },\n    addCustomPageSuccess: (state, { payload }) => {\n      state.customPagesIds = [...state.customPagesIds, payload.customPageId];\n    },\n  },\n});\n\nexport const {\n  setPageIds,\n  updateLoadingStatus,\n  updateSavingStatus,\n  updateCustomPagesApiStatus,\n  deleteCustomPageSuccess,\n  updateDeletingStatus,\n  addCustomPageSuccess,\n  updateAddingStatus,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'advancedSettings',\n  initialState: {\n    loadingStatus: RequestStatus.IN_PROGRESS,\n    savingStatus: '',\n    courseAppSettings: {},\n    proctoringErrors: {},\n    sendRequestErrors: {},\n  },\n  reducers: {\n    updateLoadingStatus: (state, { payload }) => {\n      state.loadingStatus = payload.status;\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload.status;\n    },\n    fetchCourseAppsSettingsSuccess: (state, { payload }) => {\n      Object.assign(state.courseAppSettings, payload);\n    },\n    updateCourseAppsSettingsSuccess: (state, { payload }) => {\n      Object.assign(state.courseAppSettings, payload);\n    },\n    getDataSendErrors: (state, { payload }) => {\n      Object.assign(state.sendRequestErrors, payload);\n    },\n    fetchProctoringExamErrorsSuccess: (state, { payload }) => {\n      Object.assign(state.proctoringErrors, payload);\n    },\n  },\n});\n\nexport const {\n  updateLoadingStatus,\n  updateSavingStatus,\n  getDataSendErrors,\n  fetchCourseAppsSettingsSuccess,\n  updateCourseAppsSettingsSuccess,\n  fetchProctoringExamErrorsSuccess,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'gradingSettings',\n  initialState: {\n    loadingStatus: RequestStatus.IN_PROGRESS,\n    savingStatus: '',\n    gradingSettings: {},\n    courseSettings: {},\n  },\n  reducers: {\n    updateLoadingStatus: (state, { payload }) => {\n      state.loadingStatus = payload.status;\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload.status;\n    },\n    fetchGradingSettingsSuccess: (state, { payload }) => {\n      Object.assign(state.gradingSettings, payload);\n    },\n    sendGradingSettingsSuccess: (state, { payload }) => {\n      Object.assign(state.gradingSettings, payload);\n    },\n    fetchCourseSettingsSuccess: (state, { payload }) => {\n      Object.assign(state.courseSettings, payload);\n    },\n  },\n});\n\nexport const {\n  updateLoadingStatus,\n  updateSavingStatus,\n  fetchGradingSettingsSuccess,\n  sendGradingSettingsSuccess,\n  fetchCourseSettingsSuccess,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'studioHome',\n  initialState: {\n    loadingStatuses: {\n      studioHomeLoadingStatus: RequestStatus.IN_PROGRESS,\n      courseNotificationLoadingStatus: RequestStatus.IN_PROGRESS,\n    },\n    savingStatuses: {\n      courseCreatorSavingStatus: '',\n      deleteNotificationSavingStatus: '',\n    },\n    studioHomeData: {},\n  },\n  reducers: {\n    updateLoadingStatuses: (state, { payload }) => {\n      state.loadingStatuses = { ...state.loadingStatuses, ...payload };\n    },\n    updateSavingStatuses: (state, { payload }) => {\n      state.savingStatuses = { ...state.savingStatuses, ...payload };\n    },\n    fetchStudioHomeDataSuccess: (state, { payload }) => {\n      Object.assign(state.studioHomeData, payload);\n    },\n  },\n});\n\nexport const {\n  updateSavingStatuses,\n  updateLoadingStatuses,\n  fetchStudioHomeDataSuccess,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'scheduleAndDetails',\n  initialState: {\n    loadingDetailsStatus: RequestStatus.IN_PROGRESS,\n    loadingSettingsStatus: RequestStatus.IN_PROGRESS,\n    savingStatus: '',\n    courseDetails: {},\n    courseSettings: {},\n  },\n  reducers: {\n    updateLoadingDetailsStatus: (state, { payload }) => {\n      state.loadingDetailsStatus = payload.status;\n    },\n    updateLoadingSettingsStatus: (state, { payload }) => {\n      state.loadingSettingsStatus = payload.status;\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload.status;\n    },\n    updateCourseDetailsSuccess: (state, { payload }) => {\n      Object.assign(state.courseDetails, payload);\n    },\n    fetchCourseDetailsSuccess: (state, { payload }) => {\n      Object.assign(state.courseDetails, payload);\n    },\n    fetchCourseSettingsSuccess: (state, { payload }) => {\n      Object.assign(state.courseSettings, payload);\n    },\n  },\n});\n\nexport const {\n  updateSavingStatus,\n  updateLoadingDetailsStatus,\n  updateLoadingSettingsStatus,\n  updateCourseDetailsSuccess,\n  fetchCourseDetailsSuccess,\n  fetchCourseSettingsSuccess,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'assets',\n  initialState: {\n    assetIds: [],\n    loadingStatus: RequestStatus.IN_PROGRESS,\n    updatingStatus: '',\n    addingStatus: '',\n    deletingStatus: '',\n    usageStatus: '',\n    errors: {\n      add: [],\n      delete: [],\n      lock: [],\n      download: [],\n      usageMetrics: [],\n    },\n    totalCount: 0,\n  },\n  reducers: {\n    setAssetIds: (state, { payload }) => {\n      state.assetIds = payload.assetIds;\n    },\n    setTotalCount: (state, { payload }) => {\n      state.totalCount = payload.totalCount;\n    },\n    updateLoadingStatus: (state, { payload }) => {\n      state.loadingStatus = payload.status;\n    },\n    updateEditStatus: (state, { payload }) => {\n      const { editType, status } = payload;\n      switch (editType) {\n      case 'delete':\n        state.deletingStatus = status;\n        break;\n      case 'add':\n        state.addingStatus = status;\n        break;\n      case 'lock':\n        state.updatingStatus = status;\n        break;\n      case 'download':\n        state.updatingStatus = status;\n        break;\n      case 'usageMetrics':\n        state.usageStatus = status;\n        break;\n      default:\n        break;\n      }\n    },\n    deleteAssetSuccess: (state, { payload }) => {\n      state.assetIds = state.assetIds.filter(id => id !== payload.assetId);\n    },\n    addAssetSuccess: (state, { payload }) => {\n      state.assetIds = [payload.assetId, ...state.assetIds];\n    },\n    updateErrors: (state, { payload }) => {\n      const { error, message } = payload;\n      const currentErrorState = state.errors[error];\n      state.errors[error] = [...currentErrorState, message];\n    },\n    clearErrors: (state, { payload }) => {\n      const { error } = payload;\n      state.errors[error] = [];\n    },\n  },\n});\n\nexport const {\n  setAssetIds,\n  setTotalCount,\n  updateLoadingStatus,\n  deleteAssetSuccess,\n  addAssetSuccess,\n  updateErrors,\n  clearErrors,\n  updateEditStatus,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'courseTeam',\n  initialState: {\n    loadingCourseTeamStatus: RequestStatus.IN_PROGRESS,\n    savingStatus: '',\n    users: [],\n    showTransferOwnershipHint: false,\n    allowActions: false,\n    errorMessage: '',\n  },\n  reducers: {\n    fetchCourseTeamSuccess: (state, { payload }) => {\n      state.users = payload.users;\n      state.showTransferOwnershipHint = payload.showTransferOwnershipHint;\n      state.allowActions = payload.allowActions;\n    },\n    updateLoadingCourseTeamStatus: (state, { payload }) => {\n      state.loadingCourseTeamStatus = payload.status;\n    },\n    deleteCourseTeamUser: (state, { payload }) => {\n      state.users = state.users.filter((user) => user.email !== payload);\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload.status;\n    },\n    setErrorMessage: (state, { payload }) => {\n      state.errorMessage = payload;\n    },\n  },\n});\n\nexport const {\n  fetchCourseTeamSuccess,\n  updateLoadingCourseTeamStatus,\n  deleteCourseTeamUser,\n  updateSavingStatus,\n  setErrorMessage,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { sortBy } from 'lodash';\n\nconst initialState = {\n  courseUpdates: [],\n  courseHandouts: {},\n  savingStatuses: {\n    createCourseUpdateQuery: '',\n    editCourseUpdateQuery: '',\n    deleteCourseUpdateQuery: '',\n    editCourseHandoutsQuery: '',\n  },\n  loadingStatuses: {\n    fetchCourseUpdatesQuery: '',\n    fetchCourseHandoutsQuery: '',\n  },\n};\n\nconst slice = createSlice({\n  name: 'courseUpdates',\n  initialState,\n  reducers: {\n    fetchCourseUpdatesSuccess: (state, { payload }) => {\n      state.courseUpdates = payload;\n    },\n    createCourseUpdate: (state, { payload }) => {\n      state.courseUpdates = [payload, ...state.courseUpdates];\n    },\n    editCourseUpdate: (state, { payload }) => {\n      state.courseUpdates = state.courseUpdates.map((courseUpdate) => {\n        if (courseUpdate.id === payload.id) {\n          return payload;\n        }\n        return courseUpdate;\n      });\n    },\n    deleteCourseUpdate: (state, { payload }) => {\n      state.courseUpdates = sortBy(payload, 'id').reverse();\n    },\n    fetchCourseHandoutsSuccess: (state, { payload }) => {\n      state.courseHandouts = payload;\n    },\n    editCourseHandouts: (state, { payload }) => {\n      state.courseHandouts = {\n        ...state.courseHandouts,\n        ...payload,\n      };\n    },\n    updateSavingStatuses: (state, { payload }) => {\n      state.savingStatuses = { ...state.savingStatuses, ...payload };\n    },\n    updateLoadingStatuses: (state, { payload }) => {\n      state.loadingStatuses = { ...state.loadingStatuses, ...payload };\n    },\n  },\n});\n\nexport const {\n  fetchCourseUpdatesSuccess,\n  createCourseUpdate,\n  editCourseUpdate,\n  deleteCourseUpdate,\n  fetchCourseHandoutsSuccess,\n  editCourseHandouts,\n  updateSavingStatuses,\n  updateLoadingStatuses,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  isShow: false,\n  title: '',\n};\n\nconst slice = createSlice({\n  name: 'processingNotification',\n  initialState,\n  reducers: {\n    showProcessingNotification: (state, { payload }) => {\n      state.isShow = true;\n      state.title = payload;\n    },\n    hideProcessingNotification: () => initialState,\n  },\n});\n\nexport const {\n  showProcessingNotification,\n  hideProcessingNotification,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  loadingHelpUrlsStatus: '',\n  pages: {},\n};\n\nconst slice = createSlice({\n  name: 'helpUrls',\n  initialState,\n  reducers: {\n    updatePages: (state, { payload }) => {\n      state.pages = payload;\n    },\n    updateLoadingHelpUrlsStatus: (state, { payload }) => {\n      state.loadingHelpUrlsStatus = payload.status;\n    },\n  },\n});\n\nexport const {\n  updatePages,\n  updateLoadingHelpUrlsStatus,\n} = slice.actions;\n\nexport const { reducer } = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  exportTriggered: false,\n  currentStage: 0,\n  error: { msg: null, unitUrl: null },\n  downloadPath: null,\n  successDate: null,\n  isErrorModalOpen: false,\n  loadingStatus: '',\n  savingStatus: '',\n};\n\nconst slice = createSlice({\n  name: 'exportPage',\n  initialState,\n  reducers: {\n    updateExportTriggered: (state, { payload }) => {\n      state.exportTriggered = payload;\n    },\n    updateCurrentStage: (state, { payload }) => {\n      if (payload >= state.currentStage) {\n        state.currentStage = payload;\n      }\n    },\n    updateDownloadPath: (state, { payload }) => {\n      state.downloadPath = payload;\n    },\n    updateSuccessDate: (state, { payload }) => {\n      state.successDate = payload;\n    },\n    updateError: (state, { payload }) => {\n      state.error = payload;\n    },\n    updateIsErrorModalOpen: (state, { payload }) => {\n      state.isErrorModalOpen = payload;\n    },\n    reset: () => initialState,\n    updateLoadingStatus: (state, { payload }) => {\n      state.loadingStatus = payload.status;\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload.status;\n    },\n  },\n});\n\nexport const {\n  updateExportTriggered,\n  updateCurrentStage,\n  updateDownloadPath,\n  updateSuccessDate,\n  updateError,\n  updateIsErrorModalOpen,\n  reset,\n  updateLoadingStatus,\n  updateSavingStatus,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nimport { RequestStatus } from '../../data/constants';\n\nconst slice = createSlice({\n  name: 'generic',\n  initialState: {\n    loadingStatuses: {\n      organizationLoadingStatus: RequestStatus.IN_PROGRESS,\n      courseRerunLoadingStatus: RequestStatus.IN_PROGRESS,\n    },\n    savingStatus: '',\n    organizations: [],\n    createOrRerunCourse: {\n      courseData: {},\n      courseRerunData: {},\n      redirectUrlObj: {},\n      postErrors: {},\n    },\n  },\n  reducers: {\n    fetchOrganizations: (state, { payload }) => {\n      state.organizations = payload;\n    },\n    updateLoadingStatuses: (state, { payload }) => {\n      state.loadingStatuses = { ...state.loadingStatuses, ...payload };\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload.status;\n    },\n    updateCourseData: (state, { payload }) => {\n      state.createOrRerunCourse.courseData = payload;\n    },\n    updateCourseRerunData: (state, { payload }) => {\n      state.createOrRerunCourse.courseRerunData = payload;\n    },\n    updateRedirectUrlObj: (state, { payload }) => {\n      state.createOrRerunCourse.redirectUrlObj = payload;\n    },\n    updatePostErrors: (state, { payload }) => {\n      state.createOrRerunCourse.postErrors = payload;\n    },\n  },\n});\n\nexport const {\n  fetchOrganizations,\n  updatePostErrors,\n  updateCourseRerunData,\n  updateLoadingStatuses,\n  updateSavingStatus,\n  updateCourseData,\n  updateRedirectUrlObj,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  currentStage: 0,\n  error: { hasError: false, message: '' },\n  progress: 0,\n  importTriggered: false,\n  fileName: null,\n  loadingStatus: '',\n  savingStatus: '',\n  successDate: null,\n};\n\nconst slice = createSlice({\n  name: 'importPage',\n  initialState,\n  reducers: {\n    updateCurrentStage: (state, { payload }) => {\n      if (payload >= state.currentStage) {\n        state.currentStage = payload;\n      }\n    },\n    updateError: (state, { payload }) => {\n      state.error = { ...state.error, ...payload };\n    },\n    updateProgress: (state, { payload }) => {\n      state.progress = payload;\n    },\n    updateImportTriggered: (state, { payload }) => {\n      state.importTriggered = payload;\n    },\n    updateFileName: (state, { payload }) => {\n      state.fileName = payload;\n    },\n    reset: () => initialState,\n    updateLoadingStatus: (state, { payload }) => {\n      state.loadingStatus = payload;\n    },\n    updateSavingStatus: (state, { payload }) => {\n      state.savingStatus = payload;\n    },\n    updateSuccessDate: (state, { payload }) => {\n      state.successDate = payload;\n    },\n  },\n});\n\nexport const {\n  updateCurrentStage,\n  updateError,\n  updateProgress,\n  updateImportTriggered,\n  updateFileName,\n  reset,\n  updateLoadingStatus,\n  updateSavingStatus,\n  updateSuccessDate,\n} = slice.actions;\n\nexport const {\n  reducer,\n} = slice;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport { reducer as modelsReducer } from './generic/model-store';\nimport { reducer as courseDetailReducer } from './data/slice';\nimport { reducer as discussionsReducer } from './pages-and-resources/discussions';\nimport { reducer as pagesAndResourcesReducer } from './pages-and-resources/data/slice';\nimport { reducer as customPagesReducer } from './custom-pages/data/slice';\nimport { reducer as advancedSettingsReducer } from './advanced-settings/data/slice';\nimport { reducer as gradingSettingsReducer } from './grading-settings/data/slice';\nimport { reducer as studioHomeReducer } from './studio-home/data/slice';\nimport { reducer as scheduleAndDetailsReducer } from './schedule-and-details/data/slice';\nimport { reducer as liveReducer } from './pages-and-resources/live/data/slice';\nimport { reducer as filesReducer } from './files-and-uploads/data/slice';\nimport { reducer as courseTeamReducer } from './course-team/data/slice';\nimport { reducer as CourseUpdatesReducer } from './course-updates/data/slice';\nimport { reducer as processingNotificationReducer } from './generic/processing-notification/data/slice';\nimport { reducer as helpUrlsReducer } from './help-urls/data/slice';\nimport { reducer as courseExportReducer } from './export-page/data/slice';\nimport { reducer as genericReducer } from './generic/data/slice';\nimport { reducer as courseImportReducer } from './import-page/data/slice';\n\nexport default function initializeStore(preloadedState = undefined) {\n  return configureStore({\n    reducer: {\n      courseDetail: courseDetailReducer,\n      customPages: customPagesReducer,\n      discussions: discussionsReducer,\n      assets: filesReducer,\n      pagesAndResources: pagesAndResourcesReducer,\n      scheduleAndDetails: scheduleAndDetailsReducer,\n      advancedSettings: advancedSettingsReducer,\n      gradingSettings: gradingSettingsReducer,\n      studioHome: studioHomeReducer,\n      models: modelsReducer,\n      live: liveReducer,\n      courseTeam: courseTeamReducer,\n      courseUpdates: CourseUpdatesReducer,\n      processingNotification: processingNotificationReducer,\n      helpUrls: helpUrlsReducer,\n      courseExport: courseExportReducer,\n      generic: genericReducer,\n      courseImport: courseImportReducer,\n    },\n    preloadedState,\n  });\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'header.links.content': {\n    id: 'header.links.content',\n    defaultMessage: 'Content',\n    description: 'Label for Content menu trigger',\n  },\n  'header.links.settings': {\n    id: 'header.links.settings',\n    defaultMessage: 'Settings',\n    description: 'Label for Settings menu trigger',\n  },\n  'header.links.tools': {\n    id: 'header.links.content.tools',\n    defaultMessage: 'Tools',\n    description: 'Label for Tools menu trigger',\n  },\n  'header.links.outline': {\n    id: 'header.links.outline',\n    defaultMessage: 'Outline',\n    description: 'Link to Studio Outline page',\n  },\n  'header.links.updates': {\n    id: 'header.links.updates',\n    defaultMessage: 'Updates',\n    description: 'Link to Studio Updates page',\n  },\n  'header.links.pages': {\n    id: 'header.links.pages',\n    defaultMessage: 'Pages & Resources',\n    description: 'Link to Studio Pages page',\n  },\n  'header.links.filesAndUploads': {\n    id: 'header.links.filesAndUploads',\n    defaultMessage: 'Files & Uploads',\n    description: 'Link to Studio Files & Uploads page',\n  },\n  'header.links.textbooks': {\n    id: 'header.links.textbooks',\n    defaultMessage: 'Textbooks',\n    description: 'Link to Studio Textbooks page',\n  },\n  'header.links.videoUploads': {\n    id: 'header.links.videoUploads',\n    defaultMessage: 'Video Uploads',\n    description: 'Link to Studio Video Uploads page',\n  },\n  'header.links.scheduleAndDetails': {\n    id: 'header.links.scheduleAndDetails',\n    defaultMessage: 'Schedule & Details',\n    description: 'Link to Studio Schedule & Details page',\n  },\n  'header.links.grading': {\n    id: 'header.links.grading',\n    defaultMessage: 'Grading',\n    description: 'Link to Studio Grading page',\n  },\n  'header.links.courseTeam': {\n    id: 'header.links.courseTeam',\n    defaultMessage: 'Course Team',\n    description: 'Link to Studio Course Team page',\n  },\n  'header.links.groupConfigurations': {\n    id: 'header.links.groupConfigurations',\n    defaultMessage: 'Group Configurations',\n    description: 'Link to Studio Group Configurations page',\n  },\n  'header.links.proctoredExamSettings': {\n    id: 'header.links.proctoredExamSettings',\n    defaultMessage: 'Proctored Exam Settings',\n    description: 'Link to Studio Proctored Exam Settings page',\n  },\n  'header.links.advancedSettings': {\n    id: 'header.links.advancedSettings',\n    defaultMessage: 'Advanced Settings',\n    description: 'Link to Studio Advanced Settings page',\n  },\n  'header.links.certificates': {\n    id: 'header.links.certificates',\n    defaultMessage: 'Certificates',\n    description: 'Link to Studio Certificates page',\n  },\n  'header.links.publisher': {\n    id: 'header.links.publisher',\n    defaultMessage: 'Publisher',\n    description: 'Link to Publisher',\n  },\n  'header.links.import': {\n    id: 'header.links.import',\n    defaultMessage: 'Import',\n    description: 'Link to Studio Import page',\n  },\n  'header.links.export': {\n    id: 'header.links.export',\n    defaultMessage: 'Export',\n    description: 'Link to Studio Export page',\n  },\n  'header.links.checklists': {\n    id: 'header.links.checklists',\n    defaultMessage: 'Checklists',\n    description: 'Link to Studio Checklists page',\n  },\n  'header.user.menu.studio': {\n    id: 'header.user.menu.studio',\n    defaultMessage: 'Studio Home',\n    description: 'Link to Studio Home',\n  },\n  'header.user.menu.maintenance': {\n    id: 'header.user.menu.maintenance',\n    defaultMessage: 'Maintenance',\n    description: 'Link to the Studio maintenance page',\n  },\n  'header.user.menu.logout': {\n    id: 'header.user.menu.logout',\n    defaultMessage: 'Logout',\n    description: 'Logout link',\n  },\n  'header.label.account.menu': {\n    id: 'header.label.account.menu',\n    defaultMessage: 'Account Menu',\n    description: 'The aria label for the account menu trigger',\n  },\n  'header.label.account.menu.for': {\n    id: 'header.label.account.menu.for',\n    defaultMessage: 'Account menu for {username}',\n    description: 'The aria label for the account menu trigger when the username is displayed in it',\n  },\n  'header.label.main.nav': {\n    id: 'header.label.main.nav',\n    defaultMessage: 'Main',\n    description: 'The aria label for the main menu nav',\n  },\n  'header.label.main.menu': {\n    id: 'header.label.main.menu',\n    defaultMessage: 'Main Menu',\n    description: 'The aria label for the main menu trigger',\n  },\n  'header.label.main.header': {\n    id: 'header.label.main.header',\n    defaultMessage: 'Main',\n    description: 'The aria label for the main header',\n  },\n  'header.label.secondary.nav': {\n    id: 'header.label.secondary.nav',\n    defaultMessage: 'Secondary',\n    description: 'The aria label for the seconary nav',\n  },\n  'header.label.courseOutline': {\n    id: 'header.label.courseOutline',\n    defaultMessage: 'Back to course outline in Studio',\n    description: 'The aria label for the link back to the Studio Course Outline',\n  },\n});\n\nexport default messages;\n","import { getPagePath } from '../utils';\nimport messages from './messages';\n\nexport const getContentMenuItems = ({ studioBaseUrl, courseId, intl }) => {\n  const items = [\n    {\n      href: `${studioBaseUrl}/course/${courseId}`,\n      title: intl.formatMessage(messages['header.links.outline']),\n    },\n    {\n      href: `${studioBaseUrl}/course_info/${courseId}`,\n      title: intl.formatMessage(messages['header.links.updates']),\n    },\n    {\n      href: getPagePath(courseId, 'true', 'tabs'),\n      title: intl.formatMessage(messages['header.links.pages']),\n    },\n    {\n      href: `${studioBaseUrl}/assets/${courseId}`,\n      title: intl.formatMessage(messages['header.links.filesAndUploads']),\n    },\n  ];\n  if (process.env.ENABLE_VIDEO_UPLOAD_PAGE_LINK_IN_CONTENT_DROPDOWN === 'true') {\n    items.push({\n      href: `${studioBaseUrl}/videos/${courseId}`,\n      title: intl.formatMessage(messages['header.links.videoUploads']),\n    });\n  }\n\n  return items;\n};\n\nexport const getSettingMenuItems = ({ studioBaseUrl, courseId, intl }) => ([\n  {\n    href: `${studioBaseUrl}/settings/details/${courseId}`,\n    title: intl.formatMessage(messages['header.links.scheduleAndDetails']),\n  },\n  {\n    href: `${studioBaseUrl}/settings/grading/${courseId}`,\n    title: intl.formatMessage(messages['header.links.grading']),\n  },\n  {\n    href: `${studioBaseUrl}/course_team/${courseId}`,\n    title: intl.formatMessage(messages['header.links.courseTeam']),\n  },\n  {\n    href: `${studioBaseUrl}/group_configurations/${courseId}`,\n    title: intl.formatMessage(messages['header.links.groupConfigurations']),\n  },\n  {\n    href: `${studioBaseUrl}/settings/advanced/${courseId}`,\n    title: intl.formatMessage(messages['header.links.advancedSettings']),\n  },\n  {\n    href: `${studioBaseUrl}/certificates/${courseId}`,\n    title: intl.formatMessage(messages['header.links.certificates']),\n  },\n]);\n\nexport const getToolsMenuItems = ({ studioBaseUrl, courseId, intl }) => ([\n  {\n    href: `${studioBaseUrl}/import/${courseId}`,\n    title: intl.formatMessage(messages['header.links.import']),\n  },\n  {\n    href: `${studioBaseUrl}/export/${courseId}`,\n    title: intl.formatMessage(messages['header.links.export']),\n  }, {\n    href: `${studioBaseUrl}/checklists/${courseId}`,\n    title: intl.formatMessage(messages['header.links.checklists']),\n  },\n]);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { StudioHeader } from '@edx/frontend-component-header';\nimport { getContentMenuItems, getSettingMenuItems, getToolsMenuItems } from './utils';\nimport messages from './messages';\n\nconst Header = ({\n  courseId,\n  courseOrg,\n  courseNumber,\n  courseTitle,\n  isHiddenMainMenu,\n  // injected\n  intl,\n}) => {\n  const studioBaseUrl = getConfig().STUDIO_BASE_URL;\n  const mainMenuDropdowns = [\n    {\n      id: `${intl.formatMessage(messages['header.links.content'])}-dropdown-menu`,\n      buttonTitle: intl.formatMessage(messages['header.links.content']),\n      items: getContentMenuItems({ studioBaseUrl, courseId, intl }),\n    },\n    {\n      id: `${intl.formatMessage(messages['header.links.settings'])}-dropdown-menu`,\n      buttonTitle: intl.formatMessage(messages['header.links.settings']),\n      items: getSettingMenuItems({ studioBaseUrl, courseId, intl }),\n    },\n    {\n      id: `${intl.formatMessage(messages['header.links.tools'])}-dropdown-menu`,\n      buttonTitle: intl.formatMessage(messages['header.links.tools']),\n      items: getToolsMenuItems({ studioBaseUrl, courseId, intl }),\n    },\n  ];\n  const outlineLink = `${studioBaseUrl}/course/${courseId}`;\n  return (\n    <div className=\"site-header-desktop\">\n      <StudioHeader\n        {...{\n          org: courseOrg,\n          number: courseNumber,\n          title: courseTitle,\n          isHiddenMainMenu,\n          mainMenuDropdowns,\n          outlineLink,\n        }}\n      />\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  courseId: PropTypes.string,\n  courseNumber: PropTypes.string,\n  courseOrg: PropTypes.string,\n  courseTitle: PropTypes.string,\n  isHiddenMainMenu: PropTypes.bool,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nHeader.defaultProps = {\n  courseId: '',\n  courseNumber: '',\n  courseOrg: '',\n  courseTitle: '',\n  isHiddenMainMenu: false,\n};\n\nexport default injectIntl(Header);\n","import { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { addModel } from '../generic/model-store';\nimport { getCourseDetail } from './api';\nimport {\n  updateStatus,\n  updateCanChangeProviders,\n} from './slice';\nimport { RequestStatus } from './constants';\n\n/* eslint-disable import/prefer-default-export */\nexport function fetchCourseDetail(courseId) {\n  return async (dispatch) => {\n    dispatch(updateStatus({ courseId, status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const courseDetail = await getCourseDetail(courseId, getAuthenticatedUser().username);\n      dispatch(updateStatus({ courseId, status: RequestStatus.SUCCESSFUL }));\n\n      dispatch(addModel({ modelType: 'courseDetails', model: courseDetail }));\n      dispatch(updateCanChangeProviders({\n        canChangeProviders: getAuthenticatedUser().administrator || new Date(courseDetail.start) > new Date(),\n      }));\n    } catch (error) {\n      dispatch(updateStatus({ courseId, status: RequestStatus.FAILED }));\n    }\n  };\n}\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nfunction normalizeCourseDetail(data) {\n  return {\n    id: data.course_id,\n    ...camelCaseObject(data),\n  };\n}\n\nexport async function getCourseDetail(courseId, username) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getConfig().LMS_BASE_URL}/api/courses/v1/courses/${courseId}?username=${username}`);\n\n  return normalizeCourseDetail(data);\n}\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport {\n  useLocation,\n} from 'react-router-dom';\nimport { StudioFooter } from '@edx/frontend-component-footer';\nimport Header from './header';\nimport { fetchCourseDetail } from './data/thunks';\nimport { useModel } from './generic/model-store';\nimport PermissionDeniedAlert from './generic/PermissionDeniedAlert';\nimport { getCourseAppsApiStatus } from './pages-and-resources/data/selectors';\nimport { RequestStatus } from './data/constants';\nimport Loading from './generic/Loading';\n\nconst AppHeader = ({\n  courseNumber, courseOrg, courseTitle, courseId,\n}) => (\n  <Header\n    courseNumber={courseNumber}\n    courseOrg={courseOrg}\n    courseTitle={courseTitle}\n    courseId={courseId}\n  />\n);\n\nAppHeader.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  courseNumber: PropTypes.string,\n  courseOrg: PropTypes.string,\n  courseTitle: PropTypes.string.isRequired,\n};\n\nAppHeader.defaultProps = {\n  courseNumber: null,\n  courseOrg: null,\n};\n\nconst CourseAuthoringPage = ({ courseId, children }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCourseDetail(courseId));\n  }, [courseId]);\n\n  const courseDetail = useModel('courseDetails', courseId);\n\n  const courseNumber = courseDetail ? courseDetail.number : null;\n  const courseOrg = courseDetail ? courseDetail.org : null;\n  const courseTitle = courseDetail ? courseDetail.name : courseId;\n  const courseAppsApiStatus = useSelector(getCourseAppsApiStatus);\n  const inProgress = useSelector(state => state.courseDetail.status) === RequestStatus.IN_PROGRESS;\n  const { pathname } = useLocation();\n  const showHeader = !pathname.includes('/editor');\n\n  if (courseAppsApiStatus === RequestStatus.DENIED) {\n    return (\n      <PermissionDeniedAlert />\n    );\n  }\n  return (\n    <div className={pathname.includes('/editor/') ? '' : 'bg-light-200'}>\n      {/* While V2 Editors are temporarily served from their own pages\n      using url pattern containing /editor/,\n      we shouldn't have the header and footer on these pages.\n      This functionality will be removed in TNL-9591 */}\n      {inProgress ? showHeader && <Loading />\n        : (showHeader && (\n          <AppHeader\n            courseNumber={courseNumber}\n            courseOrg={courseOrg}\n            courseTitle={courseTitle}\n            courseId={courseId}\n          />\n        )\n        )}\n      {children}\n      {!inProgress && showHeader && <StudioFooter />}\n    </div>\n  );\n};\n\nCourseAuthoringPage.propTypes = {\n  children: PropTypes.node,\n  courseId: PropTypes.string.isRequired,\n};\n\nCourseAuthoringPage.defaultProps = {\n  children: null,\n};\n\nexport default CourseAuthoringPage;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  heading: {\n    id: 'course-authoring.pages-resources.heading',\n    defaultMessage: 'Pages & Resources',\n  },\n  settings: {\n    id: 'course-authoring.pages-resources.resources.settings.button',\n    defaultMessage: 'settings',\n  },\n  viewLiveButton: {\n    id: 'course-authoring.pages-resources.viewLive.button',\n    defaultMessage: 'View live',\n  },\n  enabled: {\n    id: 'course-authoring.badge.enabled',\n    defaultMessage: 'Enabled',\n  },\n  contentPermissions: {\n    id: 'course-authoring.pages-resources.content-permissions.heading',\n    defaultMessage: 'Content permissions',\n  },\n});\n\nexport default messages;\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nexport function getXpertSettingsUrl(courseId) {\n  return `${getConfig().STUDIO_BASE_URL}/ai_aside/v1/${courseId}`;\n}\n\nexport function getXpertConfigurationStatusUrl(courseId) {\n  return `${getConfig().STUDIO_BASE_URL}/ai_aside/v1/${courseId}/configurable`;\n}\n\nexport async function getXpertSettings(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getXpertSettingsUrl(courseId));\n\n  return data;\n}\n\nexport async function postXpertSettings(courseId, state) {\n  const { data } = await getAuthenticatedHttpClient()\n    .post(getXpertSettingsUrl(courseId), {\n      enabled: state.enabled,\n      reset: state.reset,\n    });\n\n  return data;\n}\n\nexport async function getXpertPluginConfigurable(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getXpertConfigurationStatusUrl(courseId));\n\n  return data;\n}\n\nexport async function deleteXpertSettings(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .delete(getXpertSettingsUrl(courseId));\n\n  return data;\n}\n","import {\n  getXpertSettings, postXpertSettings, getXpertPluginConfigurable, deleteXpertSettings,\n} from './api';\n\nimport { updateSavingStatus, updateLoadingStatus, updateResetStatus } from '../../data/slice';\nimport { RequestStatus } from '../../../data/constants';\n\nimport { addModel, updateModel } from '../../../generic/model-store';\n\nexport function updateXpertSettings(courseId, state) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n    try {\n      const { response } = await postXpertSettings(courseId, state);\n      const { success } = response;\n      if (success) {\n        dispatch(updateModel({ modelType: 'XpertSettings', model: { id: 'xpert-unit-summary', enabled: state.enabled } }));\n        dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n        return true;\n      }\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function fetchXpertPluginConfigurable(courseId) {\n  return async (dispatch) => {\n    let enabled;\n    dispatch(updateLoadingStatus({ status: RequestStatus.PENDING }));\n    try {\n      const { response } = await getXpertPluginConfigurable(courseId);\n      enabled = response?.enabled;\n    } catch (e) {\n      enabled = undefined;\n    }\n\n    dispatch(addModel({\n      modelType: 'XpertSettings.enabled',\n      model: {\n        id: 'xpert-unit-summary',\n        enabled,\n      },\n    }));\n  };\n}\n\nexport function fetchXpertSettings(courseId) {\n  return async (dispatch) => {\n    let enabled;\n    dispatch(updateLoadingStatus({ status: RequestStatus.PENDING }));\n\n    try {\n      const { response } = await getXpertSettings(courseId);\n      enabled = response?.enabled;\n    } catch (e) {\n      enabled = undefined;\n    }\n\n    dispatch(addModel({\n      modelType: 'XpertSettings',\n      model: {\n        id: 'xpert-unit-summary',\n        enabled,\n      },\n    }));\n\n    dispatch(updateLoadingStatus({ status: RequestStatus.SUCCESSFUL }));\n  };\n}\n\nexport function removeXpertSettings(courseId) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.PENDING }));\n\n    try {\n      const { response } = await deleteXpertSettings(courseId);\n      const { success } = response;\n      if (success) {\n        const model = { id: 'xpert-unit-summary', enabled: undefined };\n        dispatch(updateModel({ modelType: 'XpertSettings', model }));\n        dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n        return true;\n      }\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function resetXpertSettings(courseId, state) {\n  return async (dispatch) => {\n    dispatch(updateResetStatus({ status: RequestStatus.PENDING }));\n    try {\n      const { response } = await postXpertSettings(courseId, state);\n      const { success } = response;\n      if (success) {\n        dispatch(updateResetStatus({ status: RequestStatus.SUCCESSFUL }));\n        return true;\n      }\n      dispatch(updateResetStatus({ status: RequestStatus.FAILED }));\n      return false;\n    } catch (error) {\n      dispatch(updateResetStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  cancel: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n  save: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.save',\n    defaultMessage: 'Save',\n  },\n  saving: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.saving',\n    defaultMessage: 'Saving',\n  },\n  saved: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.saved',\n    defaultMessage: 'Saved',\n  },\n  retry: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.retry',\n    defaultMessage: 'Retry',\n  },\n  enabled: {\n    id: 'course-authoring.pages-resources.app-settings-modal.badge.enabled',\n    defaultMessage: 'Enabled',\n  },\n  disabled: {\n    id: 'course-authoring.pages-resources.app-settings-modal.badge.disabled',\n    defaultMessage: 'Disabled',\n  },\n  resetAllUnits: {\n    id: 'course-authoring.pages-resources.app-settings-modal.reset-all-units',\n    defaultMessage: 'Reset all units',\n  },\n  resetAllUnitsTooltipChecked: {\n    id: 'course-authoring.pages-resources.app-settings-modal.reset-all-units-tooltip.checked',\n    defaultMessage: 'Immediately reset any unit-level changes and checked \"Enable summaries\" on all units.',\n  },\n  resetAllUnitsTooltipUnchecked: {\n    id: 'course-authoring.pages-resources.app-settings-modal.reset-all-units-tooltip.unchecked',\n    defaultMessage: 'Immediately reset any unit-level changes and unchecked \"Enable summaries\" on all units.',\n  },\n  reset: {\n    id: 'course-authoring.pages-resources.app-settings-modal.reset',\n    defaultMessage: 'Reset',\n  },\n  errorSavingTitle: {\n    id: 'course-authoring.pages-resources.app-settings-modal.save-error.title',\n    defaultMessage: 'We couldn\\'t apply your changes.',\n  },\n  errorSavingMessage: {\n    id: 'course-authoring.pages-resources.app-settings-modal.save-error.message',\n    defaultMessage: 'Please check your entries and try again.',\n  },\n});\n\nexport default messages;\n","export default {\n  id: 'xpert-unit-summary',\n  enabled: false,\n  name: 'Xpert unit summaries',\n  description: 'Use generative AI to summarize course content and reinforce learning.',\n  allowedOperations: {\n    enable: true,\n    configure: true,\n  },\n  documentationLinks: {\n    learnMoreConfiguration: 'https://openai.com/',\n  },\n};\n","const ResetIcon = (props) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    role=\"img\"\n    focusable=\"false\"\n    aria-hidden=\"true\"\n    transform=\"scale(-1,1)\"\n    {...props}\n  >\n    <path\n      d=\"M17.65 6.35A7.958 7.958 0 0 0 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08A5.99 5.99 0 0 1 12 18c-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\n      fill=\"currentColor\"\n    />\n  </svg>\n);\n\nexport default ResetIcon;\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  Alert,\n  Badge,\n  Form,\n  Icon,\n  ModalDialog,\n  OverlayTrigger,\n  StatefulButton,\n  Tooltip,\n  TransitionReplace,\n  Hyperlink,\n} from '@edx/paragon';\nimport {\n  Info, CheckCircleOutline, SpinnerSimple,\n} from '@edx/paragon/icons';\n\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport React, {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport { RequestStatus } from '../../../data/constants';\nimport ConnectionErrorAlert from '../../../generic/ConnectionErrorAlert';\nimport FormSwitchGroup from '../../../generic/FormSwitchGroup';\nimport Loading from '../../../generic/Loading';\nimport { useModel } from '../../../generic/model-store';\nimport PermissionDeniedAlert from '../../../generic/PermissionDeniedAlert';\nimport { useIsMobile } from '../../../utils';\nimport { getLoadingStatus, getSavingStatus, getResetStatus } from '../../data/selectors';\nimport { updateSavingStatus, updateResetStatus } from '../../data/slice';\nimport { updateXpertSettings, resetXpertSettings, removeXpertSettings } from '../data/thunks';\nimport AppConfigFormDivider from '../../discussions/app-config-form/apps/shared/AppConfigFormDivider';\nimport { PagesAndResourcesContext } from '../../PagesAndResourcesProvider';\nimport messages from './messages';\nimport appInfo from '../appInfo';\nimport ResetIcon from './ResetIcon';\n\nconst AppSettingsForm = ({\n  formikProps, children, showForm,\n}) => children && (\n  <TransitionReplace>\n    {showForm ? (\n      <React.Fragment key=\"app-enabled\">\n        {children(formikProps)}\n      </React.Fragment>\n    ) : (\n      <React.Fragment key=\"app-disabled\" />\n    )}\n  </TransitionReplace>\n);\n\nAppSettingsForm.propTypes = {\n  // Ignore the warning here since we're just passing along the props as-is and the child component should validate\n  // eslint-disable-next-line react/forbid-prop-types\n  formikProps: PropTypes.object.isRequired,\n  showForm: PropTypes.bool.isRequired,\n  children: PropTypes.func,\n};\n\nAppSettingsForm.defaultProps = {\n  children: null,\n};\n\nconst SettingsModalBase = ({\n  intl, title, onClose, variant, isMobile, children, footer,\n}) => (\n  <ModalDialog\n    title={title}\n    isOpen\n    onClose={onClose}\n    size=\"lg\"\n    variant={variant}\n    hasCloseButton={isMobile}\n    isFullscreenOnMobile\n  >\n    <ModalDialog.Header>\n      <ModalDialog.Title data-testid=\"modal-title\">\n        {title}\n      </ModalDialog.Title>\n    </ModalDialog.Header>\n    <ModalDialog.Body>\n      {children}\n    </ModalDialog.Body>\n    <ModalDialog.Footer className=\"p-4\">\n      <ActionRow>\n        <ModalDialog.CloseButton variant=\"tertiary\">\n          {intl.formatMessage(messages.cancel)}\n        </ModalDialog.CloseButton>\n        {footer}\n      </ActionRow>\n    </ModalDialog.Footer>\n  </ModalDialog>\n);\n\nSettingsModalBase.propTypes = {\n  intl: intlShape.isRequired,\n  title: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.oneOf(['default', 'dark']).isRequired,\n  isMobile: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  footer: PropTypes.node,\n};\n\nSettingsModalBase.defaultProps = {\n  footer: null,\n};\n\nconst ResetUnitsButton = ({\n  intl,\n  courseId,\n  checked,\n  visible,\n}) => {\n  const resetStatusRequestStatus = useSelector(getResetStatus);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (resetStatusRequestStatus === RequestStatus.SUCCESSFUL) {\n      setTimeout(() => {\n        dispatch(updateResetStatus({ status: '' }));\n      }, 2000);\n    }\n  }, [resetStatusRequestStatus]);\n\n  const handleResetUnits = () => {\n    dispatch(resetXpertSettings(courseId, { enabled: checked === 'true', reset: true }));\n  };\n\n  const getResetButtonState = () => {\n    switch (resetStatusRequestStatus) {\n    case RequestStatus.PENDING:\n      return 'pending';\n    case RequestStatus.SUCCESSFUL:\n      return 'finish';\n    default:\n      return 'default';\n    }\n  };\n\n  if (!visible) { return null; }\n\n  const messageKey = checked === 'true' ? 'resetAllUnitsTooltipChecked' : 'resetAllUnitsTooltipUnchecked';\n\n  return (\n    <OverlayTrigger\n      placement=\"right\"\n      overlay={(\n        <Tooltip\n          id={`tooltip-reset-${checked}`}\n          className=\"reset-tooltip\"\n        >\n          {intl.formatMessage(messages[messageKey])}\n        </Tooltip>\n      )}\n    >\n      <StatefulButton\n        className=\"reset-units-button\"\n        labels={{\n          default: intl.formatMessage(messages.resetAllUnits),\n          pending: '',\n          finish: intl.formatMessage(messages.reset),\n        }}\n        icons={{\n          default: <Icon src={ResetIcon} />,\n          pending: <Icon src={SpinnerSimple} className=\"icon-spin\" />,\n          finish: <Icon src={CheckCircleOutline} />,\n        }}\n        state={getResetButtonState()}\n        onClick={handleResetUnits}\n        disabledStates={['pending', 'finish']}\n        variant=\"outline\"\n        data-testid=\"reset-units\"\n      />\n    </OverlayTrigger>\n  );\n};\n\nResetUnitsButton.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n  checked: PropTypes.oneOf(['true', 'false']).isRequired,\n  visible: PropTypes.bool,\n};\n\nResetUnitsButton.defaultProps = {\n  visible: false,\n};\n\nconst SettingsModal = ({\n  intl,\n  appId,\n  title,\n  children,\n  configureBeforeEnable,\n  initialValues,\n  validationSchema,\n  onClose,\n  onSettingsSave,\n  enableAppLabel,\n  enableAppHelp,\n  learnMoreText,\n  helpPrivacyText,\n  enableReinitialize,\n  allUnitsEnabledText,\n  noUnitsEnabledText,\n}) => {\n  const { courseId } = useContext(PagesAndResourcesContext);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const updateSettingsRequestStatus = useSelector(getSavingStatus);\n  const alertRef = useRef(null);\n  const [saveError, setSaveError] = useState(false);\n  const dispatch = useDispatch();\n  const submitButtonState = updateSettingsRequestStatus === RequestStatus.IN_PROGRESS ? 'pending' : 'default';\n  const isMobile = useIsMobile();\n  const modalVariant = isMobile ? 'dark' : 'default';\n\n  const xpertSettings = useModel('XpertSettings', appId);\n\n  useEffect(() => {\n    if (updateSettingsRequestStatus === RequestStatus.SUCCESSFUL) {\n      dispatch(updateSavingStatus({ status: '' }));\n      onClose();\n    }\n  }, [updateSettingsRequestStatus]);\n\n  const handleFormSubmit = async ({ enabled, checked, ...rest }) => {\n    let success;\n    const values = { ...rest, enabled: enabled ? checked === 'true' : undefined };\n\n    if (enabled) {\n      success = await dispatch(updateXpertSettings(courseId, values));\n    } else {\n      success = await dispatch(removeXpertSettings(courseId));\n    }\n\n    if (onSettingsSave) {\n      success = success && await onSettingsSave(values);\n    }\n    setSaveError(!success);\n    !success && alertRef?.current.scrollIntoView(); // eslint-disable-line no-unused-expressions\n  };\n\n  const handleFormikSubmit = ({ handleSubmit, errors }) => async (event) => {\n    // If submitting the form with errors, show the alert and scroll to it.\n    await handleSubmit(event);\n    if (Object.keys(errors).length > 0) {\n      setSaveError(true);\n      alertRef?.current.scrollIntoView?.(); // eslint-disable-line no-unused-expressions\n    }\n  };\n\n  const learnMoreLink = appInfo.documentationLinks?.learnMoreConfiguration && (\n    <div className=\"py-1\">\n      <Hyperlink\n        className=\"text-primary-500\"\n        destination={appInfo.documentationLinks.learnMoreConfiguration}\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        {learnMoreText}\n      </Hyperlink>\n    </div>\n  );\n\n  const helpPrivacyLink = (\n    <div className=\"py-1\">\n      <Hyperlink\n        className=\"text-primary-500\"\n        destination=\"https://openai.com/api-data-privacy\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        {helpPrivacyText}\n      </Hyperlink>\n    </div>\n  );\n\n  if (loadingStatus === RequestStatus.SUCCESSFUL) {\n    return (\n      <Formik\n        initialValues={{\n          enabled: xpertSettings?.enabled !== undefined,\n          checked: xpertSettings?.enabled?.toString() || 'true',\n          ...initialValues,\n        }}\n        validationSchema={\n          Yup.object()\n            .shape({\n              enabled: Yup.boolean(),\n              checked: Yup.string().oneOf(['true', 'false']),\n              ...validationSchema,\n            })\n        }\n        onSubmit={handleFormSubmit}\n        enableReinitialize={enableReinitialize}\n      >\n        {(formikProps) => (\n          <Form onSubmit={handleFormikSubmit(formikProps)}>\n            <SettingsModalBase\n              title={title}\n              isOpen\n              onClose={onClose}\n              variant={modalVariant}\n              isMobile={isMobile}\n              isFullscreenOnMobile\n              intl={intl}\n              footer={(\n                <StatefulButton\n                  labels={{\n                    default: intl.formatMessage(messages.save),\n                    pending: intl.formatMessage(messages.saving),\n                    complete: intl.formatMessage(messages.saved),\n                  }}\n                  state={submitButtonState}\n                  onClick={handleFormikSubmit(formikProps)}\n                  disabled={!formikProps.dirty}\n                />\n              )}\n            >\n              {saveError && (\n                <Alert variant=\"danger\" icon={Info} ref={alertRef}>\n                  <Alert.Heading>\n                    {formikProps.errors.enabled?.title || intl.formatMessage(messages.errorSavingTitle)}\n                  </Alert.Heading>\n                  {formikProps.errors.enabled?.message || intl.formatMessage(messages.errorSavingMessage)}\n                </Alert>\n              )}\n              <FormSwitchGroup\n                id={`enable-${appId}-toggle`}\n                name=\"enabled\"\n                onChange={formikProps.handleChange}\n                onBlur={formikProps.handleBlur}\n                checked={formikProps.values.enabled}\n                label={(\n                  <div className=\"d-flex align-items-center\">\n                    {enableAppLabel}\n                    {formikProps.values.enabled && (\n                      <Badge className=\"ml-2\" variant=\"success\" data-testid=\"enable-badge\">\n                        {intl.formatMessage(messages.enabled)}\n                      </Badge>\n                    )}\n                  </div>\n                )}\n                helpText={(\n                  <div>\n                    <p>{enableAppHelp}</p>\n                    {helpPrivacyLink}\n                    {learnMoreLink}\n                  </div>\n                )}\n              />\n              {(formikProps.values.enabled || configureBeforeEnable) && (\n                <Form.RadioSet\n                  name=\"checked\"\n                  onChange={formikProps.handleChange}\n                  onBlur={formikProps.handleBlur}\n                  value={formikProps.values.checked}\n                >\n                  <Form.Radio\n                    className=\"summary-radio m-2 px-3\"\n                    data-testid=\"enable-radio\"\n                    value=\"true\"\n                  >\n                    {allUnitsEnabledText}\n                    <ResetUnitsButton\n                      intl={intl}\n                      courseId={courseId}\n                      checked={formikProps.values.checked}\n                      visible={formikProps.values.checked === 'true'}\n                    />\n                  </Form.Radio>\n                  <Form.Radio\n                    className=\"summary-radio m-2 px-3\"\n                    data-testid=\"disable-radio\"\n                    value=\"false\"\n                  >\n                    {noUnitsEnabledText}\n                    <ResetUnitsButton\n                      intl={intl}\n                      courseId={courseId}\n                      checked={formikProps.values.checked}\n                      visible={formikProps.values.checked === 'false'}\n                    />\n                  </Form.Radio>\n                </Form.RadioSet>\n              )}\n              {(formikProps.values.enabled || configureBeforeEnable) && children\n                && <AppConfigFormDivider marginAdj={{ default: 0, sm: 0 }} />}\n              <AppSettingsForm formikProps={formikProps} showForm={formikProps.values.enabled || configureBeforeEnable}>\n                {children}\n              </AppSettingsForm>\n            </SettingsModalBase>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n  return (\n    <SettingsModalBase\n      intl={intl}\n      title={title}\n      isOpen\n      onClose={onClose}\n      size=\"sm\"\n      variant={modalVariant}\n      isMobile={isMobile}\n      isFullscreenOnMobile\n    >\n      {loadingStatus === RequestStatus.IN_PROGRESS && <Loading />}\n      {loadingStatus === RequestStatus.FAILED && <ConnectionErrorAlert />}\n      {loadingStatus === RequestStatus.DENIED && <PermissionDeniedAlert />}\n    </SettingsModalBase>\n  );\n};\n\nSettingsModal.propTypes = {\n  intl: intlShape.isRequired,\n  title: PropTypes.string.isRequired,\n  appId: PropTypes.string.isRequired,\n  children: PropTypes.func,\n  onSettingsSave: PropTypes.func,\n  initialValues: PropTypes.shape({}),\n  validationSchema: PropTypes.shape({}),\n  onClose: PropTypes.func.isRequired,\n  enableAppLabel: PropTypes.string.isRequired,\n  enableAppHelp: PropTypes.string.isRequired,\n  learnMoreText: PropTypes.string.isRequired,\n  helpPrivacyText: PropTypes.string.isRequired,\n  allUnitsEnabledText: PropTypes.string.isRequired,\n  noUnitsEnabledText: PropTypes.string.isRequired,\n  configureBeforeEnable: PropTypes.bool,\n  enableReinitialize: PropTypes.bool,\n};\n\nSettingsModal.defaultProps = {\n  children: null,\n  onSettingsSave: null,\n  initialValues: {},\n  validationSchema: {},\n  configureBeforeEnable: false,\n  enableReinitialize: false,\n};\n\nexport default injectIntl(SettingsModal);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  heading: {\n    id: 'course-authoring.pages-resources.xpert-unit-summary.heading',\n    defaultMessage: 'Configure Xpert unit summaries',\n  },\n  enableXpertUnitSummaryLabel: {\n    id: 'course-authoring.pages-resources.xpert-unit-summary.enable-xpert-unit-summary.label',\n    defaultMessage: 'Xpert unit summaries',\n  },\n  enableXpertUnitSummaryHelp: {\n    id: 'course-authoring.pages-resources.xpert-unit-summary.enable-xpert-unit-summary.help',\n    defaultMessage: 'Reinforce learning concepts by sharing text-based course content with OpenAI (via API) to display unit summaries on-demand for learners. Learners can leave feedback about the quality of the AI-generated summaries for use by edX to improve the performance of the tool.',\n  },\n  enableXpertUnitSummaryHelpPrivacyLink: {\n    id: 'course-authoring.pages-resources.xpert-unit-summary.enable-xpert-unit-summary.help.privacylink',\n    defaultMessage: 'Learn more about OpenAI API data privacy.',\n  },\n  enableXpertUnitSummaryLink: {\n    id: 'course-authoring.pages-resources.xpert-unit-summary.enable-xpert-unit-summary.link',\n    defaultMessage: 'Learn more about how OpenAI handles data',\n  },\n  allUnitsEnabledByDefault: {\n    id: 'course-authoring.pages-resources.xpert-unit-summary.all-units-enabled-by-default',\n    defaultMessage: 'All units enabled by default',\n  },\n  noUnitsEnabledByDefault: {\n    id: 'course-authoring.pages-resources.xpert-unit-summary.no-units-enabled-by-default',\n    defaultMessage: 'No units enabled by default',\n  },\n});\n\nexport default messages;\n","import React, { useCallback, useContext, useEffect } from 'react';\nimport { history } from '@edx/frontend-platform';\nimport { useDispatch } from 'react-redux';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { PagesAndResourcesContext } from '../PagesAndResourcesProvider';\n\nimport SettingsModal from './settings-modal/SettingsModal';\nimport messages from './messages';\n\nimport { fetchXpertSettings } from './data/thunks';\n\nconst XpertUnitSummarySettings = ({ intl }) => {\n  const { path: pagesAndResourcesPath, courseId } = useContext(PagesAndResourcesContext);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchXpertSettings(courseId));\n  }, [courseId]);\n\n  const handleClose = useCallback(() => {\n    history.push(pagesAndResourcesPath);\n  }, [pagesAndResourcesPath]);\n\n  return (\n    <SettingsModal\n      appId=\"xpert-unit-summary\"\n      title={intl.formatMessage(messages.heading)}\n      enableAppHelp={intl.formatMessage(messages.enableXpertUnitSummaryHelp)}\n      helpPrivacyText={intl.formatMessage(messages.enableXpertUnitSummaryHelpPrivacyLink)}\n      enableAppLabel={intl.formatMessage(messages.enableXpertUnitSummaryLabel)}\n      learnMoreText={intl.formatMessage(messages.enableXpertUnitSummaryLink)}\n      allUnitsEnabledText={intl.formatMessage(messages.allUnitsEnabledByDefault)}\n      noUnitsEnabledText={intl.formatMessage(messages.noUnitsEnabledByDefault)}\n      onClose={handleClose}\n    />\n  );\n};\n\nXpertUnitSummarySettings.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(XpertUnitSummarySettings);\n","import { history } from '@edx/frontend-platform';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Badge, Card, Icon, IconButton, Hyperlink,\n} from '@edx/paragon';\nimport { ArrowForward, Settings } from '@edx/paragon/icons';\nimport PropTypes from 'prop-types';\nimport React, { useContext } from 'react';\nimport messages from '../messages';\nimport { PagesAndResourcesContext } from '../PagesAndResourcesProvider';\nimport { useIsDesktop } from '../../utils';\nimport './PageCard.scss';\n\nconst CoursePageShape = PropTypes.shape({\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  legacyLink: PropTypes.string,\n  allowedOperations: PropTypes.shape({\n    enable: PropTypes.bool.isRequired,\n    configure: PropTypes.bool.isRequired,\n  }).isRequired,\n});\n\nexport { CoursePageShape };\n\nconst PageCard = ({\n  intl,\n  page,\n}) => {\n  const { path: pagesAndResourcesPath } = useContext(PagesAndResourcesContext);\n  const isDesktop = useIsDesktop();\n  // eslint-disable-next-line react/no-unstable-nested-components\n  const SettingsButton = () => {\n    if (page.legacyLink) {\n      return (\n        <Hyperlink destination={page.legacyLink}>\n          <IconButton\n            src={ArrowForward}\n            iconAs={Icon}\n            size=\"inline\"\n            alt={intl.formatMessage(messages.settings)}\n          />\n        </Hyperlink>\n      );\n    }\n    return (page.allowedOperations.configure || page.allowedOperations.enable) && (\n      <IconButton\n        src={Settings}\n        iconAs={Icon}\n        size=\"inline\"\n        alt={intl.formatMessage(messages.settings)}\n        onClick={() => history.push(`${pagesAndResourcesPath}/${page.id}/settings`)}\n      />\n    );\n  };\n\n  return (\n    <Card\n      className={classNames('shadow justify-content-between', {\n        'desktop-card': isDesktop,\n        'mobile-card': !isDesktop,\n      })}\n    >\n      <Card.Header\n        title={page.name}\n        subtitle={page.enabled && (\n          <Badge variant=\"success\" className=\"mt-1\">\n            {intl.formatMessage(messages.enabled)}\n          </Badge>\n        )}\n        actions={<div className=\"mt-1\"><SettingsButton /></div>}\n        size=\"sm\"\n      />\n      <Card.Body>\n        <Card.Section>\n          {page.description}\n        </Card.Section>\n      </Card.Body>\n    </Card>\n  );\n};\n\nPageCard.propTypes = {\n  intl: intlShape.isRequired,\n  page: CoursePageShape.isRequired,\n};\n\nexport default injectIntl(PageCard);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { injectIntl } from '@edx/frontend-platform/i18n';\nimport { CardGrid } from '@edx/paragon';\nimport PageCard, { CoursePageShape } from './PageCard';\n\nconst PageGrid = ({ pages }) => (\n  <CardGrid columnSizes={{\n    xs: 12,\n    sm: 6,\n    lg: 4,\n    xl: 4,\n  }}\n  >\n    {pages.map((page) => (\n      <PageCard page={page} key={page.id} />\n    ))}\n  </CardGrid>\n);\n\nPageGrid.propTypes = {\n  pages: PropTypes.arrayOf(CoursePageShape.isRequired).isRequired,\n};\n\nexport default injectIntl(PageGrid);\n","import { isEmpty } from 'lodash';\n\nconst getPageHeadTitle = (courseName, pageName) => {\n  if (isEmpty(courseName)) {\n    return `${pageName} | ${process.env.SITE_NAME}`;\n  }\n  return `${pageName} | ${courseName} | ${process.env.SITE_NAME}`;\n};\n\nexport default getPageHeadTitle;\n","import React, { useContext, useEffect, Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { PageRoute, AppContext } from '@edx/frontend-platform/react';\n\nimport { Switch, useRouteMatch } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Button, Hyperlink } from '@edx/paragon';\nimport messages from './messages';\nimport DiscussionsSettings from './discussions';\nimport {\n  XpertUnitSummarySettings,\n  fetchXpertPluginConfigurable,\n  fetchXpertSettings,\n  appInfo as XpertAppInfo,\n} from './xpert-unit-summary';\n\nimport PageGrid from './pages/PageGrid';\nimport { fetchCourseApps } from './data/thunks';\nimport { useModels, useModel } from '../generic/model-store';\nimport { getCourseAppsApiStatus, getLoadingStatus } from './data/selectors';\nimport PagesAndResourcesProvider from './PagesAndResourcesProvider';\nimport { RequestStatus } from '../data/constants';\nimport PermissionDeniedAlert from '../generic/PermissionDeniedAlert';\nimport getPageHeadTitle from '../generic/utils';\n\nconst PagesAndResources = ({ courseId, intl }) => {\n  const { path, url } = useRouteMatch();\n\n  const courseDetails = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(courseDetails?.name, intl.formatMessage(messages.heading));\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchCourseApps(courseId));\n    dispatch(fetchXpertPluginConfigurable(courseId));\n    dispatch(fetchXpertSettings(courseId));\n  }, [courseId]);\n\n  const courseAppIds = useSelector(state => state.pagesAndResources.courseAppIds);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const courseAppsApiStatus = useSelector(getCourseAppsApiStatus);\n\n  const { config } = useContext(AppContext);\n  const learningCourseURL = `${config.LEARNING_BASE_URL}/course/${courseId}`;\n\n  // Each page here is driven by a course app\n  const pages = useModels('courseApps', courseAppIds);\n  const xpertPluginConfigurable = useModel('XpertSettings.enabled', 'xpert-unit-summary');\n  const xpertSettings = useModel('XpertSettings', 'xpert-unit-summary');\n  const permissonPages = [{\n    ...XpertAppInfo,\n    enabled: xpertSettings?.enabled !== undefined,\n  }];\n\n  if (loadingStatus === RequestStatus.IN_PROGRESS) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n  }\n\n  if (courseAppsApiStatus === RequestStatus.DENIED) {\n    return (\n      <PermissionDeniedAlert />\n    );\n  }\n\n  return (\n    <PagesAndResourcesProvider courseId={courseId}>\n      <main className=\"container container-mw-md px-3\">\n        <div className=\"d-flex justify-content-between my-4 my-md-5 align-items-center\">\n          <h3 className=\"m-0\">{intl.formatMessage(messages.heading)}</h3>\n          <Hyperlink\n            destination={learningCourseURL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            showLaunchIcon={false}\n          >\n            <Button variant=\"outline-primary\" className=\"p-2\"> {intl.formatMessage(messages.viewLiveButton)}</Button>\n          </Hyperlink>\n        </div>\n\n        <PageGrid pages={pages} />\n\n        {\n          xpertPluginConfigurable?.enabled ? (\n            <>\n              <div className=\"d-flex justify-content-between my-4 my-md-5 align-items-center\">\n                <h3 className=\"m-0\">{intl.formatMessage(messages.contentPermissions)}</h3>\n              </div>\n              <PageGrid pages={permissonPages} />\n            </>\n          ) : ''\n        }\n\n        <Switch>\n          <PageRoute\n            path={[\n              `${path}/discussion/configure/:appId`,\n              `${path}/discussion`,\n            ]}\n          >\n            <DiscussionsSettings courseId={courseId} />\n          </PageRoute>\n\n          <PageRoute\n            path={[\n              `${path}/xpert-unit-summary/settings`,\n            ]}\n          >\n            <XpertUnitSummarySettings courseId={courseId} />\n          </PageRoute>\n\n          <PageRoute path={`${path}/:appId/settings`}>\n            {\n              ({ match, history }) => {\n                const SettingsComponent = React.lazy(async () => {\n                  try {\n                    // There seems to be a bug in babel-eslint that causes the checker to crash with the following error\n                    // if we use a template string here:\n                    //     TypeError: Cannot read property 'range' of null with using template strings here.\n                    // Ref: https://github.com/babel/babel-eslint/issues/530\n                    return await import('./' + match.params.appId + '/Settings.jsx'); // eslint-disable-line\n                  } catch (error) {\n                    console.trace(error); // eslint-disable-line no-console\n                    return null;\n                  }\n                });\n                return (\n                  <Suspense fallback=\"...\">\n                    <SettingsComponent onClose={() => history.push(url)} />\n                  </Suspense>\n                );\n              }\n            }\n          </PageRoute>\n        </Switch>\n      </main>\n    </PagesAndResourcesProvider>\n  );\n};\n\nPagesAndResources.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(PagesAndResources);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'authoring.examsettings.allowoptout.no': {\n    id: 'authoring.examsettings.allowoptout.no',\n    defaultMessage: 'No',\n    description: '\"No\" option for yes/no radio button set',\n  },\n  'authoring.examsettings.allowoptout.yes': {\n    id: 'authoring.examsettings.allowoptout.yes',\n    defaultMessage: 'Yes',\n    description: '\"Yes\" option for yes/no radio button set',\n  },\n  'authoring.examsettings.createzendesk.no': {\n    id: 'authoring.examsettings.createzendesk.no',\n    defaultMessage: 'No',\n    description: '\"No\" option for yes/no radio button set.',\n  },\n  'authoring.examsettings.createzendesk.yes': {\n    id: 'authoring.examsettings.createzendesk.yes',\n    defaultMessage: 'Yes',\n    description: '\"Yes\" option for yes/no radio button set.',\n  },\n  'authoring.examsettings.support.text': {\n    id: 'authoring.examsettings.support.text',\n    defaultMessage: 'Support Page',\n    description: 'Text linking to the support page.',\n  },\n  'authoring.examsettings.enableproctoredexams.label': {\n    id: 'authoring.examsettings.escalationemail.enableproctoredexams.label',\n    defaultMessage: 'Enable Proctored Exams',\n    description: 'Label for checkbox to enable proctored exams.',\n  },\n  'authoring.examsettings.escalationemail.error.blank': {\n    id: 'authoring.examsettings.escalationemail.error.blank',\n    defaultMessage: 'The Proctortrack Escalation Email field cannot be empty if proctortrack is the selected provider.',\n    description: 'Error message for missing required email field.',\n  },\n  'authoring.examsettings.escalationemail.error.invalid': {\n    id: 'authoring.examsettings.escalationemail.error.invalid',\n    defaultMessage: 'The Proctortrack Escalation Email field is in the wrong format and is not valid.',\n    description: 'Error message for a invalid email format.',\n  },\n  'authoring.examsettings.error.single': {\n    id: 'authoring.examsettings.error.single',\n    defaultMessage: 'There is 1 error in this form.',\n    description: 'Error alert for one and only one error in the form.',\n  },\n  'authoring.examsettings.error.multiple': {\n    id: 'authoring.examsettings.escalationemail.error.multiple',\n    defaultMessage: 'There are {numOfErrors} errors in this form.',\n    description: 'Error alert for multiple errors in the form.',\n  },\n  'authoring.examsettings.provider.label': {\n    id: 'authoring.examsettings.provider.label',\n    defaultMessage: 'Proctoring Provider',\n    description: 'Label for provider dropdown selection.',\n  },\n  'authoring.examsettings.provider.help': {\n    id: 'authoring.examsettings.provider.help',\n    defaultMessage: 'Select the proctoring provider you want to use for this course run.',\n    description: 'Help text for selecting a proctoring provider.',\n  },\n  'authoring.examsettings.provider.help.aftercoursestart': {\n    id: 'authoring.examsettings.provider.help.aftercoursestart',\n    defaultMessage: 'Proctoring provider cannot be modified after course start date.',\n    description: 'Help text notifying the user that the provider cannot be changed for a course that has already begun.',\n  },\n});\n\nexport default messages;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport EmailValidator from 'email-validator';\nimport moment from 'moment';\nimport {\n  Alert, Button, Form, Spinner,\n} from '@edx/paragon';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport {\n  injectIntl,\n  intlShape,\n  FormattedMessage,\n} from '@edx/frontend-platform/i18n';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { useModel } from '../generic/model-store';\nimport messages from './ProctoredExamSettings.messages';\nimport ExamsApiService from '../data/services/ExamsApiService';\nimport StudioApiService from '../data/services/StudioApiService';\nimport Loading from '../generic/Loading';\nimport ConnectionErrorAlert from '../generic/ConnectionErrorAlert';\nimport PermissionDeniedAlert from '../generic/PermissionDeniedAlert';\nimport {\n  fetchExamSettingsFailure,\n  fetchExamSettingsPending,\n  fetchExamSettingsSuccess,\n} from './data/thunks';\nimport getPageHeadTitle from '../generic/utils';\n\nconst ProctoredExamSettings = ({ courseId, intl }) => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n  const [loaded, setLoaded] = useState(false);\n  const [loadingConnectionError, setLoadingConnectionError] = useState(false);\n  const [loadingPermissionError, setLoadingPermissionError] = useState(false);\n  const [enableProctoredExams, setEnableProctoredExams] = useState(true);\n  const [allowOptingOut, setAllowOptingOut] = useState(false);\n  const [allowLtiProviders, setAllowLtiProviders] = useState(false);\n  const [proctoringProvider, setProctoringProvider] = useState('');\n  const [availableProctoringProviders, setAvailableProctoringProviders] = useState([]);\n  const [ltiProctoringProviders, setLtiProctoringProviders] = useState([]);\n  const [proctortrackEscalationEmail, setProctortrackEscalationEmail] = useState('');\n  const [createZendeskTickets, setCreateZendeskTickets] = useState(false);\n  const [courseStartDate, setCourseStartDate] = useState('');\n  const [saveSuccess, setSaveSuccess] = useState(false);\n  const [saveError, setSaveError] = useState(false);\n  const [submissionInProgress, setSubmissionInProgress] = useState(false);\n  const [showProctortrackEscalationEmail, setShowProctortrackEscalationEmail] = useState(false);\n  const isEdxStaff = getAuthenticatedUser().administrator;\n  const [formStatus, setFormStatus] = useState({\n    isValid: true,\n    errors: {},\n  });\n\n  const courseDetails = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(courseDetails?.name, 'Proctored Exam Settings');\n\n  const alertRef = React.createRef();\n  const saveStatusAlertRef = React.createRef();\n  const proctoringEscalationEmailInputRef = useRef(null);\n\n  const onEnableProctoredExamsChange = (event) => {\n    setEnableProctoredExams(event.target.checked);\n  };\n\n  function onAllowOptingOutChange(value) {\n    setAllowOptingOut(value);\n  }\n\n  function onCreateZendeskTicketsChange(value) {\n    setCreateZendeskTickets(value);\n  }\n\n  const onProctoringProviderChange = (event) => {\n    const provider = event.target.value;\n    setProctoringProvider(provider);\n\n    if (provider === 'proctortrack') {\n      setCreateZendeskTickets(false);\n      setShowProctortrackEscalationEmail(true);\n    } else {\n      if (provider === 'software_secure') {\n        setCreateZendeskTickets(true);\n      }\n      setShowProctortrackEscalationEmail(false);\n    }\n  };\n\n  const onProctortrackEscalationEmailChange = (event) => {\n    setProctortrackEscalationEmail(event.target.value);\n  };\n\n  const setFocusToProctortrackEscalationEmailInput = () => {\n    if (proctoringEscalationEmailInputRef && proctoringEscalationEmailInputRef.current) {\n      proctoringEscalationEmailInputRef.current.focus();\n    }\n  };\n\n  function isLtiProvider(provider) {\n    return ltiProctoringProviders.some(p => p.name === provider);\n  }\n\n  function postSettingsBackToServer() {\n    const providerIsLti = isLtiProvider(proctoringProvider);\n    const studioDataToPostBack = {\n      proctored_exam_settings: {\n        enable_proctored_exams: enableProctoredExams,\n        // lti providers are managed outside edx-platform, lti_external indicates this\n        proctoring_provider: providerIsLti ? 'lti_external' : proctoringProvider,\n        create_zendesk_tickets: createZendeskTickets,\n      },\n    };\n    if (isEdxStaff) {\n      studioDataToPostBack.proctored_exam_settings.allow_proctoring_opt_out = allowOptingOut;\n    }\n\n    if (proctoringProvider === 'proctortrack') {\n      studioDataToPostBack.proctored_exam_settings.proctoring_escalation_email = proctortrackEscalationEmail === '' ? null : proctortrackEscalationEmail;\n    }\n\n    setSubmissionInProgress(true);\n\n    // only save back to exam service if necessary\n    const saveOperations = [StudioApiService.saveProctoredExamSettingsData(courseId, studioDataToPostBack)];\n    if (allowLtiProviders && ExamsApiService.isAvailable()) {\n      saveOperations.push(\n        ExamsApiService.saveCourseExamConfiguration(courseId, { provider: providerIsLti ? proctoringProvider : null }),\n      );\n    }\n    Promise.all(saveOperations)\n      .then(() => {\n        setSaveSuccess(true);\n        setSaveError(false);\n        setSubmissionInProgress(false);\n      }).catch(() => {\n        setSaveSuccess(false);\n        setSaveError(true);\n        setSubmissionInProgress(false);\n      });\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (proctoringProvider === 'proctortrack' && !EmailValidator.validate(proctortrackEscalationEmail) && !(proctortrackEscalationEmail === '' && !enableProctoredExams)) {\n      if (proctortrackEscalationEmail === '') {\n        const errorMessage = intl.formatMessage(messages['authoring.examsettings.escalationemail.error.blank']);\n\n        setFormStatus({\n          isValid: false,\n          errors: {\n            formProctortrackEscalationEmail: {\n              dialogErrorMessage: (<Alert.Link onClick={setFocusToProctortrackEscalationEmailInput} href=\"#formProctortrackEscalationEmail\" data-testid=\"proctorTrackEscalationEmailErrorLink\">{errorMessage}</Alert.Link>),\n              inputErrorMessage: errorMessage,\n            },\n          },\n        });\n      } else {\n        const errorMessage = intl.formatMessage(messages['authoring.examsettings.escalationemail.error.invalid']);\n\n        setFormStatus({\n          isValid: false,\n          errors: {\n            formProctortrackEscalationEmail: {\n              dialogErrorMessage: (<Alert.Link onClick={setFocusToProctortrackEscalationEmailInput} href=\"#formProctortrackEscalationEmail\" data-testid=\"proctorTrackEscalationEmailErrorLink\">{errorMessage}</Alert.Link>),\n              inputErrorMessage: errorMessage,\n            },\n          },\n        });\n      }\n    } else {\n      postSettingsBackToServer();\n      const errors = { ...formStatus.errors };\n      delete errors.formProctortrackEscalationEmail;\n      setFormStatus({\n        isValid: true,\n        errors,\n      });\n    }\n  };\n\n  function cannotEditProctoringProvider() {\n    const currentDate = moment(moment()).format('YYYY-MM-DD[T]hh:mm:ss[Z]');\n    const isAfterCourseStart = currentDate > courseStartDate;\n\n    // if the user is not edX staff and it is after the course start date, user cannot edit proctoring provider\n    return !isEdxStaff && isAfterCourseStart;\n  }\n\n  function isDisabledOption(provider) {\n    let markDisabled = false;\n    if (cannotEditProctoringProvider()) {\n      markDisabled = provider !== proctoringProvider;\n    }\n    return markDisabled;\n  }\n\n  function getProviderDisplayLabel(provider) {\n    // if a display label exists for this provider return it\n    return ltiProctoringProviders.find(p => p.name === provider)?.verbose_name || provider;\n  }\n\n  function getProctoringProviderOptions(providers) {\n    return providers.map(provider => (\n      <option\n        key={provider}\n        value={provider}\n        disabled={isDisabledOption(provider)}\n        data-testid={provider}\n      >\n        {getProviderDisplayLabel(provider)}\n      </option>\n    ));\n  }\n\n  function getFormErrorMessage() {\n    const numOfErrors = Object.keys(formStatus.errors).length;\n    const errors = Object.entries(formStatus.errors).map(([id, error]) => <li key={id}>{error.dialogErrorMessage}</li>);\n    const messageId = numOfErrors > 1 ? 'authoring.examsettings.error.multiple' : 'authoring.examsettings.error.single';\n\n    return (\n      <>\n        <div>{intl.formatMessage(messages[messageId], { numOfErrors })}</div>\n        <ul>\n          {errors}\n        </ul>\n      </>\n    );\n  }\n\n  function renderContent() {\n    return (\n      <Form onSubmit={handleSubmit} data-testid=\"proctoringForm\">\n        {!formStatus.isValid && formStatus.errors.formProctortrackEscalationEmail\n          && (\n            // tabIndex=\"-1\" to make non-focusable element focusable\n            <Alert\n              id=\"proctortrackEscalationEmailError\"\n              variant=\"danger\"\n              tabIndex=\"-1\"\n              data-testid=\"proctortrackEscalationEmailError\"\n              ref={alertRef}\n            >\n              {getFormErrorMessage()}\n            </Alert>\n          )}\n        {/* ENABLE PROCTORED EXAMS */}\n        <Form.Group controlId=\"formEnableProctoredExam\">\n          <Form.Check\n            type=\"checkbox\"\n            id=\"enableProctoredExams\"\n            label={intl.formatMessage(messages['authoring.examsettings.enableproctoredexams.label'])}\n            aria-describedby=\"enableProctoredExamsHelpText\"\n            onChange={onEnableProctoredExamsChange}\n            checked={enableProctoredExams}\n            inline\n          />\n          <Form.Text id=\"enableProctoredExamsHelpText\">\n            <FormattedMessage\n              id=\"authoring.examsettings.enableproctoredexams.help\"\n              defaultMessage=\"If checked, proctored exams are enabled in your course.\"\n              description=\"Help text for checkbox to enable proctored exams.\"\n            />\n          </Form.Text>\n        </Form.Group>\n\n        {/* ALLOW OPTING OUT OF PROCTORED EXAMS */}\n        { isEdxStaff && enableProctoredExams && (\n          <fieldset aria-describedby=\"allowOptingOutHelpText\">\n            <Form.Group controlId=\"formAllowingOptingOut\">\n              <Form.Label as=\"legend\">\n                <FormattedMessage\n                  id=\"authoring.examsettings.allowoptout.label\"\n                  defaultMessage=\"Allow Opting Out of Proctored Exams\"\n                  description=\"Label for radio selection allowing proctored exam opt out\"\n                />\n              </Form.Label>\n              <Form.Check\n                type=\"radio\"\n                id=\"allowOptingOutYes\"\n                name=\"allowOptingOut\"\n                label={intl.formatMessage(messages['authoring.examsettings.allowoptout.yes'])}\n                inline\n                checked={allowOptingOut}\n                onChange={() => onAllowOptingOutChange(true)}\n                data-testid=\"allowOptingOutYes\"\n              />\n              <Form.Check\n                type=\"radio\"\n                id=\"allowOptingOutNo\"\n                name=\"allowOptingOut\"\n                label={intl.formatMessage(messages['authoring.examsettings.allowoptout.no'])}\n                inline\n                checked={!allowOptingOut}\n                onChange={() => onAllowOptingOutChange(false)}\n                data-testid=\"allowOptingOutNo\"\n              />\n              <Form.Text id=\"allowOptingOutHelpText\">\n                <FormattedMessage\n                  id=\"authoring.examsettings.allowoptout.help\"\n                  defaultMessage={`\n                    If this value is \"Yes\", learners can choose to take proctored exams without proctoring.\n                    If this value is \"No\", all learners must take the exam with proctoring.\n                  `}\n                  description=\"Help text for proctored exam opt out radio selection\"\n                />\n              </Form.Text>\n            </Form.Group>\n          </fieldset>\n        )}\n\n        {/* PROCTORING PROVIDER */}\n        { enableProctoredExams && (\n          <Form.Group controlId=\"formProctoringProvider\">\n            <Form.Label as=\"legend\">\n              <FormattedMessage\n                id=\"authoring.examsettings.provider.label\"\n                defaultMessage=\"Proctoring Provider\"\n                description=\"Label for proctoring provider dropdown selection\"\n              />\n            </Form.Label>\n            <Form.Control\n              as=\"select\"\n              value={proctoringProvider}\n              onChange={onProctoringProviderChange}\n              aria-describedby=\"proctoringProviderHelpText\"\n            >\n              {getProctoringProviderOptions(availableProctoringProviders)}\n            </Form.Control>\n            <Form.Text id=\"proctoringProviderHelpText\">\n              {cannotEditProctoringProvider() ? intl.formatMessage(messages['authoring.examsettings.provider.help.aftercoursestart']) : intl.formatMessage(messages['authoring.examsettings.provider.help'])}\n            </Form.Text>\n          </Form.Group>\n        )}\n\n        {/* PROCTORTRACK ESCALATION EMAIL */}\n        {showProctortrackEscalationEmail && enableProctoredExams && (\n          <Form.Group controlId=\"formProctortrackEscalationEmail\">\n            <Form.Label>\n              <FormattedMessage\n                id=\"authoring.examsettings.escalationemail.label\"\n                defaultMessage=\"Proctortrack Escalation Email\"\n                description=\"Label for escalation email text field\"\n              />\n            </Form.Label>\n            <Form.Control\n              ref={proctoringEscalationEmailInputRef}\n              type=\"email\"\n              data-testid=\"escalationEmail\"\n              onChange={onProctortrackEscalationEmailChange}\n              value={proctortrackEscalationEmail}\n              isInvalid={Object.prototype.hasOwnProperty.call(formStatus.errors, 'formProctortrackEscalationEmail')}\n              aria-describedby=\"proctortrackEscalationEmailHelpText\"\n            />\n            <Form.Control.Feedback type=\"invalid\">{formStatus.errors.formProctortrackEscalationEmail && formStatus.errors.formProctortrackEscalationEmail.inputErrorMessage} </Form.Control.Feedback>\n            <Form.Text id=\"proctortrackEscalationEmailHelpText\">\n              <FormattedMessage\n                id=\"authoring.examsettings.escalationemail.help\"\n                defaultMessage={`\n                  Required if \"proctortrack\" is selected as your proctoring provider. Enter an email address to be\n                  contacted by the support team whenever there are escalations (e.g. appeals, delayed reviews, etc.).\n                `}\n                description=\"Help text explaining escalation email field.\"\n              />\n            </Form.Text>\n          </Form.Group>\n        )}\n        {/* CREATE ZENDESK TICKETS */}\n        { isEdxStaff && enableProctoredExams && !isLtiProvider(proctoringProvider) && (\n          <fieldset aria-describedby=\"createZendeskTicketsText\">\n            <Form.Group controlId=\"formCreateZendeskTickets\">\n              <Form.Label as=\"legend\">\n                <FormattedMessage\n                  id=\"authoring.examsettings.createzendesk.label\"\n                  defaultMessage=\"Create Zendesk Tickets for Suspicious Proctored Exam Attempts\"\n                  description=\"Label for Zendesk ticket creation radio select.\"\n                />\n              </Form.Label>\n              <Form.Check\n                type=\"radio\"\n                id=\"createZendeskTicketsYes\"\n                label={intl.formatMessage(messages['authoring.examsettings.createzendesk.yes'])}\n                inline\n                name=\"createZendeskTickets\"\n                checked={createZendeskTickets}\n                onChange={() => onCreateZendeskTicketsChange(true)}\n                data-testid=\"createZendeskTicketsYes\"\n              />\n              <Form.Check\n                type=\"radio\"\n                id=\"createZendeskTicketsNo\"\n                label={intl.formatMessage(messages['authoring.examsettings.createzendesk.no'])}\n                inline\n                name=\"createZendeskTickets\"\n                checked={!createZendeskTickets}\n                onChange={() => onCreateZendeskTicketsChange(false)}\n                data-testid=\"createZendeskTicketsNo\"\n              />\n              <Form.Text id=\"createZendeskTicketsText\">\n                <FormattedMessage\n                  id=\"authoring.examsettings.createzendesk.help\"\n                  defaultMessage=\"If this value is &quot;Yes&quot;, a Zendesk ticket will be created for suspicious proctored exam attempts.\"\n                  description=\"Help text for Zendesk ticket creation radio select\"\n                />\n              </Form.Text>\n            </Form.Group>\n          </fieldset>\n        )}\n        <Button\n          variant=\"primary\"\n          className=\"mb-3\"\n          data-testid=\"submissionButton\"\n          type=\"submit\"\n          disabled={submissionInProgress}\n        >\n          <FormattedMessage\n            id=\"authoring.examsettings.submit\"\n            defaultMessage=\"Submit\"\n            description=\"Form submit button\"\n          />\n        </Button> {' '}\n        {submissionInProgress && <Spinner animation=\"border\" variant=\"primary\" data-testid=\"saveInProgress\" aria-label=\"Save in progress\" />}\n      </Form>\n    );\n  }\n\n  function renderLoading() {\n    return (\n      <Loading />\n    );\n  }\n\n  function renderConnectionError() {\n    return (\n      <ConnectionErrorAlert />\n    );\n  }\n\n  function renderPermissionError() {\n    return (\n      <PermissionDeniedAlert />\n    );\n  }\n\n  function renderSaveSuccess() {\n    const studioCourseRunURL = StudioApiService.getStudioCourseRunUrl(courseId);\n    return (\n      <Alert\n        variant=\"success\"\n        dismissible\n        data-testid=\"saveSuccess\"\n        tabIndex=\"-1\"\n        ref={saveStatusAlertRef}\n        onClose={() => setSaveSuccess(false)}\n      >\n        <FormattedMessage\n          id=\"authoring.examsettings.alert.success\"\n          defaultMessage={`\n            Proctored exam settings saved successfully.\n            You can go back to your course in Studio {studioCourseRunURL}.\n          `}\n          values={{ studioCourseRunURL: <Alert.Link href={studioCourseRunURL}>here</Alert.Link> }}\n        />\n      </Alert>\n    );\n  }\n\n  function renderSaveError() {\n    return (\n      <Alert\n        variant=\"danger\"\n        dismissible\n        data-testid=\"saveError\"\n        tabIndex=\"-1\"\n        ref={saveStatusAlertRef}\n        onClose={() => setSaveError(false)}\n      >\n        <FormattedMessage\n          id=\"authoring.examsettings.alert.error\"\n          defaultMessage={`\n            We encountered a technical error while trying to save proctored exam settings.\n            This might be a temporary issue, so please try again in a few minutes.\n            If the problem persists,\n            please go to the {support_link} for help.\n          `}\n          values={{\n            support_link: (\n              <Alert.Link href={getConfig().SUPPORT_URL}>\n                {intl.formatMessage(messages['authoring.examsettings.support.text'])}\n              </Alert.Link>\n            ),\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  useEffect(() => {\n    dispatch(fetchExamSettingsPending(courseId));\n\n    Promise.all([\n      StudioApiService.getProctoredExamSettingsData(courseId),\n      ExamsApiService.isAvailable() ? ExamsApiService.getCourseExamConfiguration(courseId) : Promise.resolve(),\n      ExamsApiService.isAvailable() ? ExamsApiService.getAvailableProviders() : Promise.resolve(),\n    ])\n      .then(\n        ([settingsResponse, examConfigResponse, ltiProvidersResponse]) => {\n          const proctoredExamSettings = settingsResponse.data.proctored_exam_settings;\n          setLoaded(true);\n          setLoading(false);\n          setSubmissionInProgress(false);\n          setCourseStartDate(settingsResponse.data.course_start_date);\n          setEnableProctoredExams(proctoredExamSettings.enable_proctored_exams);\n          setAllowOptingOut(proctoredExamSettings.allow_proctoring_opt_out);\n          const isProctortrack = proctoredExamSettings.proctoring_provider === 'proctortrack';\n          setShowProctortrackEscalationEmail(isProctortrack);\n\n          // The list of providers returned by studio settings are the default behavior. If lti_external\n          // is available as an option display the list of LTI providers returned by the exam service.\n          // Setting 'lti_external' in studio indicates an LTI provider configured outside of edx-platform.\n          // This option is not directly selectable.\n          const proctoringProvidersStudio = settingsResponse.data.available_proctoring_providers;\n          const proctoringProvidersLti = ltiProvidersResponse?.data || [];\n          const enableLtiProviders = proctoringProvidersStudio.includes('lti_external');\n          setAllowLtiProviders(enableLtiProviders);\n          setLtiProctoringProviders(proctoringProvidersLti);\n          // flatten provider objects and coalesce values to just the provider key\n          let availableProviders = proctoringProvidersStudio.filter(value => value !== 'lti_external');\n          if (enableLtiProviders) {\n            availableProviders = proctoringProvidersLti.reduce(\n              (result, provider) => [...result, provider.name],\n              availableProviders,\n            );\n          }\n          setAvailableProctoringProviders(availableProviders);\n\n          if (proctoredExamSettings.proctoring_provider === 'lti_external') {\n            setProctoringProvider(examConfigResponse.data.provider);\n          } else {\n            setProctoringProvider(proctoredExamSettings.proctoring_provider);\n          }\n\n          // The backend API may return null for the proctoringEscalationEmail value, which is the default.\n          // In order to keep our email input component controlled, we use the empty string as the default\n          // and perform this conversion during GETs and POSTs.\n          const proctoringEscalationEmail = proctoredExamSettings.proctoring_escalation_email;\n          setProctortrackEscalationEmail(proctoringEscalationEmail === null ? '' : proctoringEscalationEmail);\n\n          setCreateZendeskTickets(proctoredExamSettings.create_zendesk_tickets);\n          dispatch(fetchExamSettingsSuccess(courseId));\n        },\n      )\n      .catch(\n        error => {\n          if (error.response?.status === 403) {\n            setLoadingPermissionError(true);\n          } else {\n            setLoadingConnectionError(true);\n          }\n          setLoading(false);\n          setLoaded(false);\n          setSubmissionInProgress(false);\n          dispatch(fetchExamSettingsFailure(courseId));\n        },\n      );\n  }, []);\n\n  useEffect(() => {\n    if ((saveSuccess || saveError) && !!saveStatusAlertRef.current) {\n      saveStatusAlertRef.current.focus();\n    }\n    if (!formStatus.isValid && !!alertRef.current) {\n      alertRef.current.focus();\n    }\n  }, [formStatus, saveSuccess, saveError]);\n\n  return (\n    <div className=\"container\">\n      <h2 className=\"mt-3 mb-2\">\n        Proctored Exam Settings\n      </h2>\n      <div>\n        {loading ? renderLoading() : null}\n        {saveSuccess ? renderSaveSuccess() : null}\n        {saveError ? renderSaveError() : null}\n        {loaded ? renderContent() : null}\n        {loadingConnectionError ? renderConnectionError() : null}\n        {loadingPermissionError ? renderPermissionError() : null}\n      </div>\n    </div>\n  );\n};\n\nProctoredExamSettings.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  intl: intlShape.isRequired,\n};\n\nProctoredExamSettings.defaultProps = {};\n\nexport default injectIntl(ProctoredExamSettings);\n","import { RequestStatus } from '../../data/constants';\nimport { updateLoadingStatus } from '../../pages-and-resources/data/slice';\n\n/* eslint-disable import/prefer-default-export */\nexport function fetchExamSettingsPending(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ courseId, status: RequestStatus.IN_PROGRESS }));\n  };\n}\n\nexport function fetchExamSettingsSuccess(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ courseId, status: RequestStatus.SUCCESSFUL }));\n  };\n}\n\nexport function fetchExamSettingsFailure(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ courseId, status: RequestStatus.FAILED }));\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router';\nimport { EditorPage } from '@edx/frontend-lib-content-components';\nimport { getConfig } from '@edx/frontend-platform';\n\nconst EditorContainer = ({\n  courseId,\n}) => {\n  const { blockType, blockId } = useParams();\n  return (\n    <div className=\"editor-page\">\n      <EditorPage\n        courseId={courseId}\n        blockType={blockType}\n        blockId={blockId}\n        studioEndpointUrl={getConfig().STUDIO_BASE_URL}\n        lmsEndpointUrl={getConfig().LMS_BASE_URL}\n      />\n    </div>\n  );\n};\nEditorContainer.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default EditorContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router';\nimport { VideoSelectorPage } from '@edx/frontend-lib-content-components';\nimport { getConfig } from '@edx/frontend-platform';\n\nconst VideoSelectorContainer = ({\n  courseId,\n}) => {\n  const { blockId } = useParams();\n  return (\n    <div className=\"selector-page\">\n      <VideoSelectorPage\n        blockId={blockId}\n        courseId={courseId}\n        studioEndpointUrl={getConfig().STUDIO_BASE_URL}\n        lmsEndpointUrl={getConfig().LMS_BASE_URL}\n      />\n    </div>\n  );\n};\n\nVideoSelectorContainer.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default VideoSelectorContainer;\n","/* eslint-disable import/prefer-default-export */\n\nexport const getLoadingStatus = (state) => state.customPages.loadingStatus;\nexport const getSavingStatus = (state) => state.customPages.savingStatus;\nexport const getCustomPagesApiStatus = (state) => state.customPages.customPagesApiStatus;\n// export const getCourseAppSettingValue = (setting) => (state) => (\n//   state.pagesAndResources.courseAppSettings[setting]?.value\n// );\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, ensureConfig, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nensureConfig([\n  'STUDIO_BASE_URL',\n], 'Course Apps API service');\n\nexport const getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getTabHandlerUrl = (courseId) => `${getApiBaseUrl()}/api/contentstore/v0/tabs/${courseId}`;\n\n/**\n * Fetches the course custom pages for provided course\n * @param {string} courseId\n * @returns {Promise<[{}]>}\n */\nexport async function getCustomPages(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getTabHandlerUrl(courseId)}`);\n  return camelCaseObject(data);\n}\n\n/**\n * Delete custom page for provided block.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function deleteCustomPage(blockId) {\n  await getAuthenticatedHttpClient()\n    .delete(`${getApiBaseUrl()}/xblock/${blockId}`);\n}\n\n/**\n * Add custom page for provided block.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function addCustomPage(courseId) {\n  const v1CourseId = courseId.substring(7);\n  const courseBlockId = `block-${v1CourseId}+type@course+block@course`;\n  const { data } = await getAuthenticatedHttpClient()\n    .put(`${getApiBaseUrl()}/xblock/`, {\n      category: 'static_tab',\n      parent_locator: courseBlockId,\n    });\n  return camelCaseObject(data);\n}\n\n/**\n * Update custom page html for provided block.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function updateCustomPage({ blockId, htmlString, metadata }) {\n  const { data } = await getAuthenticatedHttpClient()\n    .put(`${getApiBaseUrl()}/xblock/${blockId}`, {\n      id: blockId,\n      data: htmlString,\n      metadata,\n    });\n  return camelCaseObject(data);\n}\n\n/**\n * Update order of custom pages.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function updateCustomPageOrder(courseId, tabs) {\n  await getAuthenticatedHttpClient()\n    .post(`${getTabHandlerUrl(courseId)}/reorder`, tabs);\n}\n","import { RequestStatus } from '../../data/constants';\nimport {\n  addModel,\n  addModels,\n  removeModel,\n  updateModel,\n  updateModels,\n} from '../../generic/model-store';\nimport {\n  getCustomPages,\n  deleteCustomPage,\n  addCustomPage,\n  updateCustomPage,\n  updateCustomPageOrder,\n} from './api';\nimport {\n  setPageIds,\n  updateCustomPagesApiStatus,\n  updateLoadingStatus,\n  updateSavingStatus,\n  updateAddingStatus,\n  updateDeletingStatus,\n  deleteCustomPageSuccess,\n  addCustomPageSuccess,\n} from './slice';\n\nexport function fetchCustomPages(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ courseId, status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const customPages = await getCustomPages(courseId);\n\n      dispatch(addModels({ modelType: 'customPages', models: customPages }));\n      dispatch(setPageIds({\n        customPagesIds: customPages.map(page => page.id),\n      }));\n      dispatch(updateLoadingStatus({ courseId, status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateLoadingStatus({ courseId, status: RequestStatus.DENIED }));\n      } else {\n        dispatch(updateLoadingStatus({ courseId, status: RequestStatus.FAILED }));\n      }\n    }\n  };\n}\n\nexport function deleteSingleCustomPage({ blockId, closeConfirmation }) {\n  return async (dispatch) => {\n    dispatch(updateDeletingStatus({ status: RequestStatus.PENDING }));\n\n    try {\n      await deleteCustomPage(blockId);\n      dispatch(removeModel({ modelType: 'customPages', model: blockId }));\n      dispatch(deleteCustomPageSuccess({\n        customPageId: blockId,\n      }));\n      dispatch(updateDeletingStatus({ status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateDeletingStatus({ status: RequestStatus.DENIED }));\n      }\n      dispatch(updateDeletingStatus({ status: RequestStatus.FAILED }));\n    }\n    closeConfirmation();\n  };\n}\n\nexport function addSingleCustomPage(courseId) {\n  return async (dispatch) => {\n    dispatch(updateAddingStatus({ status: RequestStatus.PENDING }));\n\n    try {\n      const pageData = await addCustomPage(courseId);\n      dispatch(addModel({\n        modelType: 'customPages',\n        model: {\n          id: pageData.locator,\n          courseStaffOnly: false,\n          ...pageData,\n        },\n      }));\n      dispatch(addCustomPageSuccess({\n        customPageId: pageData.locator,\n      }));\n      dispatch(updateAddingStatus({ courseId, status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateAddingStatus({ status: RequestStatus.DENIED }));\n      }\n      dispatch(updateAddingStatus({ status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function updatePageOrder(courseId, pages) {\n  const tabs = [];\n  pages.forEach(page => {\n    const currentTab = {};\n    currentTab.tab_locator = page.id;\n    tabs.push(currentTab);\n  });\n  return async (dispatch) => {\n    try {\n      await updateCustomPageOrder(courseId, tabs);\n      dispatch(updateModels({ modelType: 'customPages', models: pages }));\n      dispatch(setPageIds({\n        customPagesIds: pages.map(page => page.id),\n      }));\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateCustomPagesApiStatus({ status: RequestStatus.DENIED }));\n      }\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function updateCustomPageVisibility({ blockId, metadata }) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const pageData = await updateCustomPage({ blockId, metadata });\n      dispatch(updateModel({\n        modelType: 'customPages',\n        model: {\n          id: blockId,\n          courseStaffOnly: pageData.metadata.courseStaffOnly,\n        },\n      }));\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport const updateSingleCustomPage = ({\n  blockId,\n  metadata,\n  setCurrentPage,\n}) => (dispatch) => {\n  dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n  try {\n    dispatch(updateModel({\n      modelType: 'customPages',\n      model: {\n        id: blockId,\n        name: metadata.displayName,\n      },\n    }));\n    setCurrentPage(null);\n    dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n  } catch (error) {\n    dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n  }\n};\n","export default __webpack_public_path__ + \"fce053f854c92005feaa93744ba079de.png\";","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  heading: {\n    id: 'course-authoring.custom-pages.heading',\n    defaultMessage: 'Custom Pages',\n  },\n  errorAlertMessage: {\n    id: 'course-authoring.custom-pages.errorAlert.message',\n    defaultMessage: 'Unable to {actionName} page. Please try again.',\n  },\n  note: {\n    id: 'course-authoring.custom-pages.note',\n    defaultMessage: `Note: Pages are publicly visible. If users know the URL\n      of a page, they can view the page even if they are not registered for\n      or logged in to your course.`,\n  },\n  addPageHeaderLabel: {\n    id: 'course-authoring.custom-pages.header.addPage.label',\n    defaultMessage: 'New page',\n  },\n  viewLiveLabel: {\n    id: 'course-authoring.custom-pages.header.viewLive.label',\n    defaultMessage: 'View live',\n  },\n  pageExplanationHeader: {\n    id: 'course-authoring.custom-pages.pageExplanation.header',\n    defaultMessage: 'What are pages?',\n  },\n  pageExplanationBody: {\n    id: 'course-authoring.custom-pages.pageExplanation.body',\n    defaultMessage: `Pages are listed horizontally at the top of your course. Default pages (Home, Course, Discussion, Wiki, and Progress)\n      are followed by textbooks and custom pages that you create.`,\n  },\n  customPagesExplanationHeader: {\n    id: 'course-authoring.custom-pages.customPagesExplanation.header',\n    defaultMessage: 'Custom pages',\n  },\n  customPagesExplanationBody: {\n    id: 'course-authoring.custom-pages.customPagesExplanation.body',\n    defaultMessage: `You can create and edit custom pages to probide students with additional course content. For example, you can create\n      pages for the grading policy, course slide, and a course calendar.`,\n  },\n  studentViewExplanationHeader: {\n    id: 'course-authoring.custom-pages.studentViewExplanation.header',\n    defaultMessage: 'How do pages look to students in my course?',\n  },\n  studentViewExplanationBody: {\n    id: 'course-authoring.custom-pages.studentViewExplanation.body',\n    defaultMessage: 'Students see the default and custom pages at the top of your course and use the links to navigate.',\n  },\n  studentViewExampleButton: {\n    id: 'course-authoring.custom-pages.studentViewExampleButton.label',\n    defaultMessage: 'See an example',\n  },\n  studentViewModalTitle: {\n    id: 'course-authoring.custom-pages.studentViewModal.title',\n    defaultMessage: 'Pages in Your Course',\n  },\n  studentViewModalBody: {\n    id: 'course-authoring.custom-pages.studentViewModal.Body',\n    defaultMessage: \"Pages appear in your course's top navigation bar. The default pages (Home, Course, Discussion, Wiki, and Progress) are followed by textbooks and custom pages.\",\n  },\n  newPageTitle: {\n    id: 'course-authoring.custom-pages.page.newPage.title',\n    defaultMessage: 'Empty',\n  },\n  editTooltipContent: {\n    id: 'course-authoring.custom-pages.editTooltip.content',\n    defaultMessage: 'Edit',\n  },\n  deleteTooltipContent: {\n    id: 'course-authoring.custom-pages.deleteTooltip.content',\n    defaultMessage: 'Delete',\n  },\n  visibilityTooltipContent: {\n    id: 'course-authoring.custom-pages.visibilityTooltip.content',\n    defaultMessage: 'Hide/show page from learners',\n  },\n  addPageBodyLabel: {\n    id: 'course-authoring.custom-pages.body.addPage.label',\n    defaultMessage: 'Add a new page',\n  },\n  addingPageBodyLabel: {\n    id: 'course-authoring.custom-pages.body.addingPage.label',\n    defaultMessage: 'Adding a new page',\n  },\n  deleteConfirmationTitle: {\n    id: 'course-authoring.custom-pages..deleteConfirmation.title',\n    defaultMessage: 'Delete Page Confirmation',\n  },\n  deleteConfirmationMessage: {\n    id: 'course-authoring.custom-pages..deleteConfirmation.message',\n    defaultMessage: 'Are you sure you want to delete this page? This action cannot be undone.',\n  },\n  deletePageLabel: {\n    id: 'course-authoring.custom-pages.deleteConfirmation.deletePage.label',\n    defaultMessage: 'Delete',\n  },\n  deletingPageBodyLabel: {\n    id: 'course-authoring.custom-pages.deleteConfirmation.deletingPage.label',\n    defaultMessage: 'Deleting',\n  },\n  cancelButtonLabel: {\n    id: 'course-authoring.custom-pages.deleteConfirmation.cancelButton.label',\n    defaultMessage: 'Cancel',\n  },\n});\n\nexport default messages;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CustomPagesContext = React.createContext({});\n\nconst CustomPagesProvider = ({ courseId, children }) => {\n  const contextValue = useMemo(() => ({\n    courseId,\n    path: `/course/${courseId}/custom-pages`,\n  }), []);\n  return (\n    <CustomPagesContext.Provider\n      value={contextValue}\n    >\n      {children}\n    </CustomPagesContext.Provider>\n  );\n};\n\nCustomPagesProvider.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default CustomPagesProvider;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { history } from '@edx/frontend-platform';\nimport { intlShape, injectIntl } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  IconButtonWithTooltip,\n  Icon,\n  AlertModal,\n  Button,\n  StatefulButton,\n  useToggle,\n} from '@edx/paragon';\nimport {\n  DeleteOutline,\n  EditOutline,\n  SpinnerSimple,\n  Visibility,\n  VisibilityOff,\n} from '@edx/paragon/icons';\nimport { deleteSingleCustomPage, updateCustomPageVisibility } from './data/thunks';\nimport messages from './messages';\nimport { CustomPagesContext } from './CustomPagesProvider';\n\nconst CustomPageCard = ({\n  page,\n  dispatch,\n  deletePageStatus,\n  setCurrentPage,\n  // injected\n  intl,\n}) => {\n  const [isDeleteConfirmationOpen, openDeleteConfirmation, closeDeleteConfirmation] = useToggle(false);\n  const { path: customPagesPath } = useContext(CustomPagesContext);\n  const handleDelete = () => {\n    dispatch(deleteSingleCustomPage({\n      blockId: page.id,\n      closeConfirmation: closeDeleteConfirmation,\n    }));\n  };\n\n  const toggleVisibilty = () => {\n    dispatch(updateCustomPageVisibility({\n      blockId: page.id,\n      metadata: { course_staff_only: !page.courseStaffOnly },\n    }));\n  };\n  const handleEditOpen = () => {\n    setCurrentPage(page.id);\n    history.push(`${customPagesPath}/editor`);\n  };\n\n  const deletePageStateProps = {\n    labels: {\n      default: intl.formatMessage(messages.deletePageLabel),\n      pending: intl.formatMessage(messages.deletingPageBodyLabel),\n    },\n    icons: {\n      pending: <Icon src={SpinnerSimple} className=\"icon-spin\" />,\n    },\n    disabledStates: ['pending'],\n  };\n\n  return (\n    <>\n      <ActionRow>\n        <div className=\"h4\" data-testid=\"card-title\">\n          {page?.name || intl.formatMessage(messages.newPageTitle)}\n        </div>\n        <ActionRow.Spacer />\n        <IconButtonWithTooltip\n          key={intl.formatMessage(messages.editTooltipContent)}\n          tooltipPlacement=\"top\"\n          tooltipContent={intl.formatMessage(messages.editTooltipContent)}\n          src={EditOutline}\n          iconAs={Icon}\n          alt={intl.formatMessage(messages.editTooltipContent)}\n          onClick={handleEditOpen}\n          data-testid=\"edit-modal-icon\"\n        />\n        <IconButtonWithTooltip\n          key={intl.formatMessage(messages.visibilityTooltipContent)}\n          tooltipPlacement=\"top\"\n          tooltipContent={intl.formatMessage(messages.visibilityTooltipContent)}\n          src={page.courseStaffOnly ? VisibilityOff : Visibility}\n          iconAs={Icon}\n          alt={intl.formatMessage(messages.visibilityTooltipContent)}\n          onClick={toggleVisibilty}\n          data-testid=\"visibility-toggle-icon\"\n        />\n        <IconButtonWithTooltip\n          key={intl.formatMessage(messages.deleteTooltipContent)}\n          tooltipPlacement=\"top\"\n          tooltipContent={intl.formatMessage(messages.deleteTooltipContent)}\n          src={DeleteOutline}\n          iconAs={Icon}\n          alt={intl.formatMessage(messages.deleteTooltipContent)}\n          onClick={openDeleteConfirmation}\n          data-testid=\"delete-modal-icon\"\n        />\n      </ActionRow>\n      <AlertModal\n        title={intl.formatMessage(messages.deleteConfirmationTitle)}\n        isOpen={isDeleteConfirmationOpen}\n        onClose={closeDeleteConfirmation}\n        footerNode={(\n          <ActionRow>\n            <Button variant=\"tertiary\" onClick={closeDeleteConfirmation}>\n              {intl.formatMessage(messages.cancelButtonLabel)}\n            </Button>\n            <StatefulButton onClick={handleDelete} state={deletePageStatus} {...deletePageStateProps} />\n          </ActionRow>\n        )}\n      >\n        {intl.formatMessage(messages.deleteConfirmationMessage)}\n      </AlertModal>\n    </>\n  );\n};\n\nCustomPageCard.propTypes = {\n  page: PropTypes.shape({\n    name: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    courseStaffOnly: PropTypes.bool.isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  deletePageStatus: PropTypes.string.isRequired,\n  setCurrentPage: PropTypes.func.isRequired,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CustomPageCard);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { EditorPage } from '@edx/frontend-lib-content-components';\n\nconst EditModal = ({\n  pageId,\n  courseId,\n  onClose,\n}) => (\n  <div\n    style={{\n      position: 'fixed',\n      width: '100%',\n      height: '100%',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      'overflow-y': 'scroll',\n      'background-color': 'white',\n      'z-index': 100,\n    }}\n  >\n    <EditorPage\n      courseId={courseId}\n      blockType=\"html\"\n      blockId={pageId}\n      studioEndpointUrl={getConfig().STUDIO_BASE_URL}\n      lmsEndpointUrl={getConfig().LMS_BASE_URL}\n      returnFunction={onClose}\n    />\n  </div>\n);\n\nEditModal.propTypes = {\n  pageId: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default EditModal;\n","import React, { useEffect, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Switch, useRouteMatch } from 'react-router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { history } from '@edx/frontend-platform';\nimport { AppContext, PageRoute } from '@edx/frontend-platform/react';\nimport { injectIntl, FormattedMessage, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  Breadcrumb,\n  Button,\n  Layout,\n  Hyperlink,\n  StatefulButton,\n  Icon,\n  useToggle,\n  Image,\n  ModalDialog,\n  Container,\n} from '@edx/paragon';\nimport { Add, SpinnerSimple } from '@edx/paragon/icons';\nimport Placeholder, {\n  DraggableList,\n  SortableItem,\n  ErrorAlert,\n} from '@edx/frontend-lib-content-components';\n\nimport { RequestStatus } from '../data/constants';\nimport { useModels, useModel } from '../generic/model-store';\nimport { getLoadingStatus, getSavingStatus } from './data/selectors';\nimport {\n  addSingleCustomPage,\n  fetchCustomPages,\n  updatePageOrder,\n  updateSingleCustomPage,\n} from './data/thunks';\n\nimport previewLmsStaticPages from './data/images/previewLmsStaticPages.png';\nimport CustomPageCard from './CustomPageCard';\nimport messages from './messages';\nimport CustomPagesProvider from './CustomPagesProvider';\nimport EditModal from './EditModal';\nimport getPageHeadTitle from '../generic/utils';\nimport { getPagePath } from '../utils';\n\nconst CustomPages = ({\n  courseId,\n  // injected\n  intl,\n}) => {\n  const dispatch = useDispatch();\n  const [orderedPages, setOrderedPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState();\n  const [isOpen, open, close] = useToggle(false);\n  const [isEditModalOpen, openEditModal, closeEditModal] = useToggle(false);\n\n  const courseDetails = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(courseDetails?.name, intl.formatMessage(messages.heading));\n\n  const { config } = useContext(AppContext);\n  const { path, url } = useRouteMatch();\n  const learningCourseURL = `${config.LEARNING_BASE_URL}/course/${courseId}`;\n\n  useEffect(() => {\n    dispatch(fetchCustomPages(courseId));\n  }, [courseId]);\n\n  const customPagesIds = useSelector(state => state.customPages.customPagesIds);\n  const addPageStatus = useSelector(state => state.customPages.addingStatus);\n  const deletePageStatus = useSelector(state => state.customPages.deletingStatus);\n  const savingStatus = useSelector(getSavingStatus);\n  const loadingStatus = useSelector(getLoadingStatus);\n\n  const pages = useModels('customPages', customPagesIds);\n\n  const handleAddPage = () => { dispatch(addSingleCustomPage(courseId)); };\n  const handleReorder = () => (newPageOrder) => {\n    dispatch(updatePageOrder(courseId, newPageOrder));\n  };\n  const handleEditClose = () => (content) => {\n    history.push(url);\n    if (!content?.metadata) {\n      closeEditModal();\n      return;\n    }\n    dispatch(updateSingleCustomPage({\n      blockId: currentPage,\n      metadata: { displayName: content.metadata.display_name },\n      onClose: closeEditModal,\n      setCurrentPage,\n    }));\n  };\n\n  const addPageStateProps = {\n    labels: {\n      default: intl.formatMessage(messages.addPageBodyLabel),\n      pending: intl.formatMessage(messages.addingPageBodyLabel),\n    },\n    icons: {\n      default: <Icon src={Add} />,\n      pending: <Icon src={SpinnerSimple} className=\"icon-spin\" />,\n    },\n    disabledStates: ['pending'],\n  };\n  useEffect(() => { setOrderedPages(pages); }, [customPagesIds, savingStatus]);\n  if (loadingStatus === RequestStatus.IN_PROGRESS) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return (<></>);\n  }\n  if (loadingStatus === RequestStatus.DENIED) {\n    return (\n      <div data-testid=\"under-construction-placeholder\" className=\"row justify-contnt-center m-6\">\n        <Placeholder />\n      </div>\n    );\n  }\n  return (\n    <CustomPagesProvider courseId={courseId}>\n      <Container size=\"xl\" className=\"p-4 pt-5\">\n        <div className=\"small gray-700\">\n          <Breadcrumb\n            ariaLabel=\"Custom Page breadcrumbs\"\n            links={[\n              { label: 'Content', href: `${config.STUDIO_BASE_URL}/course/${courseId}` },\n              { label: 'Pages and Resources', href: getPagePath(courseId, 'true', 'tabs') },\n            ]}\n          />\n        </div>\n        <ActionRow>\n          <div className=\"h2\">\n            <FormattedMessage {...messages.heading} />\n          </div>\n          <ActionRow.Spacer />\n          <Button\n            iconBefore={Add}\n            onClick={handleAddPage}\n            data-testid=\"header-add-button\"\n          >\n            <FormattedMessage {...messages.addPageHeaderLabel} />\n          </Button>\n          <Hyperlink\n            destination={learningCourseURL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            showLaunchIcon={false}\n            data-testid=\"header-view-live-button\"\n          >\n            <Button>\n              <FormattedMessage {...messages.viewLiveLabel} />\n            </Button>\n          </Hyperlink>\n        </ActionRow>\n        <hr />\n        <Layout\n          lg={[{ span: 9, offset: 0 }, { span: 3, offset: 0 }]}\n          md={[{ span: 9, offset: 0 }, { span: 3, offset: 0 }]}\n          sm={[{ span: 9, offset: 0 }, { span: 3, offset: 0 }]}\n          xs={[{ span: 9, offset: 0 }, { span: 3, offset: 0 }]}\n          xl={[{ span: 9, offset: 0 }, { span: 3, offset: 0 }]}\n        >\n          <Layout.Element>\n            <ErrorAlert hideHeading isError={deletePageStatus === RequestStatus.FAILED}>\n              {intl.formatMessage(messages.errorAlertMessage, { actionName: 'delete' })}\n            </ErrorAlert>\n            <ErrorAlert hideHeading isError={addPageStatus === RequestStatus.FAILED}>\n              {intl.formatMessage(messages.errorAlertMessage, { actionName: 'add' })}\n            </ErrorAlert>\n            <ErrorAlert hideHeading isError={savingStatus === RequestStatus.FAILED}>\n              {intl.formatMessage(messages.errorAlertMessage, { actionName: 'save' })}\n            </ErrorAlert>\n            <div className=\"small gray-700 mb-4\">\n              <FormattedMessage {...messages.note} />\n            </div>\n            <DraggableList itemList={orderedPages} setState={setOrderedPages} updateOrder={handleReorder}>\n              {orderedPages.map((page) => (\n                <SortableItem\n                  id={page.id}\n                  key={page.id}\n                  componentStyle={{\n                    background: 'white',\n                    borderRadius: '6px',\n                    padding: '24px',\n                    marginBottom: '16px',\n                    boxShadow: '0px 1px 5px #ADADAD',\n                  }}\n                >\n                  <CustomPageCard\n                    {...{\n                      page,\n                      dispatch,\n                      deletePageStatus,\n                      courseId,\n                      setCurrentPage,\n                      openEditModal,\n                    }}\n                  />\n                </SortableItem>\n              ))}\n            </DraggableList>\n            <StatefulButton\n              data-testid=\"body-add-button\"\n              onClick={handleAddPage}\n              state={addPageStatus}\n              {...addPageStateProps}\n            />\n          </Layout.Element>\n          <Layout.Element>\n            <div className=\"h4\">\n              <FormattedMessage {...messages.pageExplanationHeader} />\n            </div>\n            <div className=\"small gray-700\">\n              <FormattedMessage {...messages.pageExplanationBody} />\n            </div>\n            <hr />\n            <div className=\"h4\">\n              <FormattedMessage {...messages.customPagesExplanationHeader} />\n            </div>\n            <div className=\"small gray-700\">\n              <FormattedMessage {...messages.customPagesExplanationBody} />\n            </div>\n            <hr />\n            <div className=\"h4\">\n              <FormattedMessage {...messages.studentViewExplanationHeader} />\n            </div>\n            <div className=\"small gray-700\">\n              <FormattedMessage {...messages.studentViewExplanationBody} />\n            </div>\n            <Button\n              data-testid=\"student-view-example-button\"\n              variant=\"link\"\n              size=\"sm\"\n              onClick={open}\n              className=\"pl-0\"\n            >\n              <FormattedMessage {...messages.studentViewExampleButton} />\n            </Button>\n          </Layout.Element>\n        </Layout>\n        <ModalDialog\n          isOpen={isOpen}\n          onClose={close}\n          size=\"lg\"\n          title={intl.formatMessage(messages.studentViewModalTitle)}\n        >\n          <ModalDialog.Header>\n            <ModalDialog.Title>\n              <FormattedMessage {...messages.studentViewModalTitle} />\n            </ModalDialog.Title>\n          </ModalDialog.Header>\n          <ModalDialog.Body>\n            <Image src={previewLmsStaticPages} fluid className=\"mb-3\" />\n            <div className=\"small\">\n              <FormattedMessage {...messages.studentViewModalBody} />\n            </div>\n          </ModalDialog.Body>\n        </ModalDialog>\n        <Switch>\n          <PageRoute path={`${path}/editor`}>\n            {currentPage && (\n              <EditModal courseId={courseId} isOpen={isEditModalOpen} pageId={currentPage} onClose={handleEditClose} />\n            )}\n          </PageRoute>\n        </Switch>\n      </Container>\n    </CustomPagesProvider>\n  );\n};\n\nCustomPages.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(CustomPages);\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, ensureConfig, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport JSZip from 'jszip';\nimport saveAs from 'file-saver';\n\nensureConfig([\n  'STUDIO_BASE_URL',\n], 'Course Apps API service');\n\nexport const getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getAssetsUrl = (courseId) => `${getApiBaseUrl()}/assets/${courseId}/`;\n\n/**\n * Fetches the course custom pages for provided course\n * @param {string} courseId\n * @returns {Promise<[{}]>}\n */\nexport async function getAssets(courseId, totalCount) {\n  const pageCount = totalCount || 50;\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getAssetsUrl(courseId)}?page_size=${pageCount}`);\n  return camelCaseObject(data);\n}\n\n/**\n * Fetch asset file.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function getDownload(selectedRows, courseId) {\n  const downloadErrors = [];\n  if (selectedRows?.length > 1) {\n    const zip = new JSZip();\n    const date = new Date().toString();\n    const folder = zip.folder(`${courseId}-assets-${date}`);\n    const assetNames = [];\n    const assetFetcher = await Promise.allSettled(\n      selectedRows.map(async (row) => {\n        const asset = row?.original;\n        try {\n          assetNames.push(asset.displayName);\n          const res = await fetch(`${getApiBaseUrl()}/${asset.id}`);\n          if (!res.ok) {\n            throw new Error();\n          }\n          return res.blob();\n        } catch (error) {\n          downloadErrors.push(`Failed to download ${asset?.displayName}.`);\n          return null;\n        }\n      }),\n    );\n    const definedAssets = assetFetcher.filter(asset => asset.value !== null);\n    if (definedAssets.length > 0) {\n      definedAssets.forEach((assetBlob, index) => {\n        folder.file(assetNames[index], assetBlob.value, { blob: true });\n      });\n      zip.generateAsync({ type: 'blob' }).then(content => {\n        saveAs(content, `${courseId}-assets-${date}.zip`);\n      });\n    }\n  } else if (selectedRows?.length === 1) {\n    const asset = selectedRows[0].original;\n    try {\n      saveAs(`${getApiBaseUrl()}/${asset.id}`, asset.displayName);\n    } catch (error) {\n      downloadErrors.push(`Failed to download ${asset?.displayName}.`);\n    }\n  } else {\n    downloadErrors.push('No files were selected to download');\n  }\n  return downloadErrors;\n}\n\n/**\n * Fetch where asset is used in a course.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function getAssetUsagePaths({ courseId, assetId }) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getAssetsUrl(courseId)}${assetId}/usage`);\n  return camelCaseObject(data);\n}\n\n/**\n * Delete asset to course.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function deleteAsset(courseId, assetId) {\n  await getAuthenticatedHttpClient()\n    .delete(`${getAssetsUrl(courseId)}${assetId}`);\n}\n\n/**\n * Add asset to course.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function addAsset(courseId, file) {\n  const formData = new FormData();\n  formData.append('file', file);\n  const { data } = await getAuthenticatedHttpClient()\n    .post(getAssetsUrl(courseId), formData);\n  return camelCaseObject(data);\n}\n\n/**\n * Update locked attribute for provided asset.\n * @param {blockId} courseId Course ID for the course to operate on\n\n */\nexport async function updateLockStatus({ assetId, courseId, locked }) {\n  const { data } = await getAuthenticatedHttpClient()\n    .put(`${getAssetsUrl(courseId)}${assetId}`, {\n      locked,\n    });\n  return camelCaseObject(data);\n}\n","const FILES_AND_UPLOAD_TYPE_FILTERS = {\n  images: ['image/png', 'image/jpeg', 'image/jpg', 'image/gif', 'image/tiff', 'image/tif', 'image/x-icon',\n    'image/svg+xml', 'image/bmp', 'image/x-ms-bmp', 'image/vnd.microsoft.icon'],\n  documents: [\n    'application/pdf',\n    'text/plain',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.template',\n    'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    'application/vnd.openxmlformats-officedocument.presentationml.slideshow',\n    'application/vnd.openxmlformats-officedocument.presentationml.template',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.template',\n    'application/msword',\n    'application/vnd.ms-excel',\n    'application/vnd.ms-powerpoint',\n    'application/csv',\n    'application/vnd.ms-excel.sheet.macroEnabled.12',\n    'text/x-tex',\n    'application/x-pdf',\n    'application/vnd.ms-excel.sheet.macroenabled.12',\n    'file/pdf',\n    'image/pdf',\n    'text/csv',\n    'text/pdf',\n    'text/x-sh',\n    'application/pdf',\n  ],\n  audio: ['audio/mpeg', 'audio/mp3', 'audio/x-wav', 'audio/ogg', 'audio/wav', 'audio/aac', 'audio/x-m4a',\n    'audio/mp4', 'audio/x-ms-wma'],\n  code: ['application/json', 'text/html', 'text/javascript', 'application/javascript', 'text/css', 'text/x-python',\n    'application/x-java-jnlp-file', 'application/xml', 'application/postscript', 'application/x-javascript',\n    'application/java-vm', 'text/x-c++src', 'text/xml', 'text/x-scss', 'application/x-python-code',\n    'application/java-archive', 'text/x-python-script', 'application/x-ruby', 'application/mathematica',\n    'text/coffeescript', 'text/x-matlab', 'application/sql', 'text/php'],\n};\n\nexport default FILES_AND_UPLOAD_TYPE_FILTERS;\n","import { InsertDriveFile, Terminal, AudioFile } from '@edx/paragon/icons';\nimport { ensureConfig, getConfig } from '@edx/frontend-platform';\nimport FILES_AND_UPLOAD_TYPE_FILTERS from './constant';\n\nensureConfig([\n  'STUDIO_BASE_URL',\n], 'Course Apps API service');\n\nexport const updateFileValues = (files) => {\n  const updatedFiles = [];\n  files.forEach(file => {\n    let wrapperType = 'other';\n    if (FILES_AND_UPLOAD_TYPE_FILTERS.images.includes(file.contentType)) {\n      wrapperType = 'image';\n    } else if (FILES_AND_UPLOAD_TYPE_FILTERS.documents.includes(file.contentType)) {\n      wrapperType = 'document';\n    } else if (FILES_AND_UPLOAD_TYPE_FILTERS.code.includes(file.contentType)) {\n      wrapperType = 'code';\n    } else if (FILES_AND_UPLOAD_TYPE_FILTERS.audio.includes(file.contentType)) {\n      wrapperType = 'audio';\n    }\n\n    const { dateAdded } = file;\n    const utcDateString = dateAdded.replace(/\\bat\\b/g, '');\n    const utcDateTime = new Date(utcDateString).toString();\n\n    updatedFiles.push({\n      ...file,\n      wrapperType,\n      dateAdded: utcDateTime,\n      usageLocations: [],\n    });\n  });\n\n  return updatedFiles;\n};\n\nexport const getSrc = ({ thumbnail, wrapperType, externalUrl }) => {\n  if (thumbnail) {\n    return externalUrl || `${getConfig().STUDIO_BASE_URL}${thumbnail}`;\n  }\n  switch (wrapperType) {\n  case 'document':\n    return InsertDriveFile;\n  case 'code':\n    return Terminal;\n  case 'audio':\n    return AudioFile;\n  default:\n    return InsertDriveFile;\n  }\n};\n\nexport const getFileSizeToClosestByte = (fileSize, numberOfDivides = 0) => {\n  if (fileSize > 1000) {\n    const updatedSize = fileSize / 1000;\n    const incrementNumberOfDivides = numberOfDivides + 1;\n    return getFileSizeToClosestByte(updatedSize, incrementNumberOfDivides);\n  }\n  const fileSizeFixedDecimal = Number.parseFloat(fileSize).toFixed(2);\n  switch (numberOfDivides) {\n  case 1:\n    return `${fileSizeFixedDecimal} KB`;\n  case 2:\n    return `${fileSizeFixedDecimal} MB`;\n  default:\n    return `${fileSizeFixedDecimal} B`;\n  }\n};\n\nexport const sortFiles = (files, sortType) => {\n  const [sort, direction] = sortType.split(',');\n  let sortedFiles;\n  if (sort === 'displayName') {\n    sortedFiles = files.sort((f1, f2) => {\n      const lowerCaseF1 = f1[sort].toLowerCase();\n      const lowerCaseF2 = f2[sort].toLowerCase();\n      if (lowerCaseF1 < lowerCaseF2) {\n        return 1;\n      }\n      if (lowerCaseF1 > lowerCaseF2) {\n        return -1;\n      }\n      return 0;\n    });\n  } else {\n    sortedFiles = files.sort((f1, f2) => {\n      if (f1[sort] < f2[sort]) {\n        return 1;\n      }\n      if (f1[sort] > f2[sort]) {\n        return -1;\n      }\n      return 0;\n    });\n  }\n  const sortedIds = sortedFiles.map(file => file.id);\n  if (direction === 'asc') {\n    return sortedIds.reverse();\n  }\n  return sortedIds;\n};\n","import { isEmpty } from 'lodash';\nimport { RequestStatus } from '../../data/constants';\nimport {\n  addModel,\n  addModels,\n  removeModel,\n  updateModel,\n} from '../../generic/model-store';\nimport {\n  getAssets,\n  getAssetUsagePaths,\n  addAsset,\n  deleteAsset,\n  updateLockStatus,\n  getDownload,\n} from './api';\nimport {\n  setAssetIds,\n  setTotalCount,\n  updateLoadingStatus,\n  deleteAssetSuccess,\n  addAssetSuccess,\n  updateErrors,\n  clearErrors,\n  updateEditStatus,\n} from './slice';\n\nimport { updateFileValues } from './utils';\n\nexport function fetchAssets(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ courseId, status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const { totalCount } = await getAssets(courseId);\n      const { assets } = await getAssets(courseId, totalCount);\n      const parsedAssests = updateFileValues(assets);\n      dispatch(addModels({ modelType: 'assets', models: parsedAssests }));\n      dispatch(setAssetIds({\n        assetIds: assets.map(asset => asset.id),\n      }));\n      dispatch(setTotalCount({ totalCount }));\n      dispatch(updateLoadingStatus({ courseId, status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateLoadingStatus({ status: RequestStatus.DENIED }));\n      } else {\n        dispatch(updateLoadingStatus({ courseId, status: RequestStatus.FAILED }));\n      }\n    }\n  };\n}\n\nexport function updateAssetOrder(courseId, assetIds) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ courseId, status: RequestStatus.IN_PROGRESS }));\n    dispatch(setAssetIds({ assetIds }));\n    dispatch(updateLoadingStatus({ courseId, status: RequestStatus.SUCCESSFUL }));\n  };\n}\n\nexport function deleteAssetFile(courseId, id, totalCount) {\n  return async (dispatch) => {\n    dispatch(updateEditStatus({ editType: 'delete', status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      await deleteAsset(courseId, id);\n      dispatch(deleteAssetSuccess({ assetId: id }));\n      dispatch(removeModel({ modelType: 'assets', id }));\n      dispatch(setTotalCount({ totalCount: totalCount - 1 }));\n      dispatch(updateEditStatus({ editType: 'delete', status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateErrors({ error: 'delete', message: `Failed to delete file id ${id}.` }));\n      dispatch(updateEditStatus({ editType: 'delete', status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function addAssetFile(courseId, file, totalCount) {\n  return async (dispatch) => {\n    dispatch(updateEditStatus({ editType: 'add', status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const { asset } = await addAsset(courseId, file);\n      const [parsedAssest] = updateFileValues([asset]);\n      dispatch(addModel({\n        modelType: 'assets',\n        model: { ...parsedAssest },\n      }));\n      dispatch(addAssetSuccess({\n        assetId: asset.id,\n      }));\n      dispatch(setTotalCount({ totalCount: totalCount + 1 }));\n      dispatch(updateEditStatus({ editType: 'add', status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 413) {\n        const message = error.response.data.error;\n        dispatch(updateErrors({ error: 'add', message }));\n      } else {\n        dispatch(updateErrors({ error: 'add', message: `Failed to add ${file.name}.` }));\n      }\n      dispatch(updateEditStatus({ editType: 'add', status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function updateAssetLock({ assetId, courseId, locked }) {\n  return async (dispatch) => {\n    dispatch(updateEditStatus({ editType: 'lock', status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      await updateLockStatus({ assetId, courseId, locked });\n      dispatch(updateModel({\n        modelType: 'assets',\n        model: {\n          id: assetId,\n          locked,\n        },\n      }));\n      dispatch(updateEditStatus({ editType: 'lock', status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      const lockStatus = locked ? 'lock' : 'unlock';\n      dispatch(updateErrors({ error: 'lock', message: `Failed to ${lockStatus} file id ${assetId}.` }));\n      dispatch(updateEditStatus({ editType: 'lock', status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function resetErrors({ errorType }) {\n  return (dispatch) => { dispatch(clearErrors({ error: errorType })); };\n}\n\nexport function getUsagePaths({ asset, courseId, setSelectedRows }) {\n  return async (dispatch) => {\n    dispatch(updateEditStatus({ editType: 'usageMetrics', status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const { usageLocations } = await getAssetUsagePaths({ assetId: asset.id, courseId });\n      setSelectedRows([{ original: { ...asset, usageLocations } }]);\n      dispatch(updateEditStatus({ editType: 'usageMetrics', status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateErrors({ error: 'usageMetrics', message: `Failed to get usage metrics for ${asset.displayName}.` }));\n      dispatch(updateEditStatus({ editType: 'usageMetrics', status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function fetchAssetDownload({ selectedRows, courseId }) {\n  return async (dispatch) => {\n    dispatch(updateEditStatus({ editType: 'download', status: RequestStatus.IN_PROGRESS }));\n    const errors = await getDownload(selectedRows, courseId);\n    if (isEmpty(errors)) {\n      dispatch(updateEditStatus({ editType: 'download', status: RequestStatus.SUCCESSFUL }));\n    } else {\n      errors.forEach(error => {\n        dispatch(updateErrors({ error: 'download', message: error }));\n      });\n      dispatch(updateEditStatus({ editType: 'download', status: RequestStatus.FAILED }));\n    }\n  };\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  heading: {\n    id: 'course-authoring.files-and-uploads.heading',\n    defaultMessage: 'Files and uploads',\n  },\n  subheading: {\n    id: 'course-authoring.files-and-uploads.subheading',\n    defaultMessage: 'Content',\n  },\n  apiStatusToastMessage: {\n    id: 'course-authoring.files-and-upload.apiStatus.message',\n    defaultMessage: '{actionType} {selectedRowCount} file(s)',\n  },\n  apiStatusAddingAction: {\n    id: 'course-authoring.files-and-upload.apiStatus.addingAction.message',\n    defaultMessage: 'Adding',\n  },\n  apiStatusDeletingAction: {\n    id: 'course-authoring.files-and-upload.apiStatus.deletingAction.message',\n    defaultMessage: 'Deleting',\n  },\n  fileSizeError: {\n    id: 'course-authoring.files-and-upload.addFiles.error.fileSize',\n    defaultMessage: 'Uploaded file(s) must be 20 MB or less. Please resize file(s) and try again.',\n  },\n  noResultsFoundMessage: {\n    id: 'course-authoring.files-and-upload.table.noResultsFound.message',\n    defaultMessage: 'No results found',\n  },\n  addFilesButtonLabel: {\n    id: 'course-authoring.files-and-upload.addFiles.button.label',\n    defaultMessage: 'Add files',\n  },\n  actionsButtonLabel: {\n    id: 'course-authoring.files-and-upload.action.button.label',\n    defaultMessage: 'Actions',\n  },\n  errorAlertMessage: {\n    id: 'course-authoring.files-and-upload.errorAlert.message',\n    defaultMessage: '{message}',\n  },\n  dateAddedTitle: {\n    id: 'course-authoring.files-and-uploads.file-info.dateAdded.title',\n    defaultMessage: 'Date added',\n  },\n  fileSizeTitle: {\n    id: 'course-authoring.files-and-uploads.file-info.fileSize.title',\n    defaultMessage: 'File size',\n  },\n  studioUrlTitle: {\n    id: 'course-authoring.files-and-uploads.file-info.studioUrl.title',\n    defaultMessage: 'Studio URL',\n  },\n  webUrlTitle: {\n    id: 'course-authoring.files-and-uploads.file-info.webUrl.title',\n    defaultMessage: 'Web URL',\n  },\n  lockFileTitle: {\n    id: 'course-authoring.files-and-uploads.file-info.lockFile.title',\n    defaultMessage: 'Lock file',\n  },\n  lockFileTooltipContent: {\n    id: 'course-authoring.files-and-uploads.file-info.lockFile.tooltip.content',\n    defaultMessage: `By default, anyone can access a file you upload if\n      they know the web URL, even if they are not enrolled in your course.\n      You can prevent outside access to a file by locking the file. When\n      you lock a file, the web URL only allows learners who are enrolled\n      in your course and signed in to access the file.`,\n  },\n  usageTitle: {\n    id: 'course-authoring.files-and-uploads.file-info.usage.title',\n    defaultMessage: 'Usage',\n  },\n  usageLoadingMessage: {\n    id: 'course-authoring.files-and-uploads.file-info.usage.loading.message',\n    defaultMessage: 'Loading',\n  },\n  usageNotInUseMessage: {\n    id: 'course-authoring.files-and-uploads.file-info.usage.notInUse.message',\n    defaultMessage: 'Currently not in use',\n  },\n  copyStudioUrlTitle: {\n    id: 'course-authoring.files-and-uploads.cardMenu.copyStudioUrlTitle',\n    defaultMessage: 'Copy Studio Url',\n  },\n  copyWebUrlTitle: {\n    id: 'course-authoring.files-and-uploads.cardMenu.copyWebUrlTitle',\n    defaultMessage: 'Copy Web Url',\n  },\n  downloadTitle: {\n    id: 'course-authoring.files-and-uploads.cardMenu.downloadTitle',\n    defaultMessage: 'Download',\n  },\n  lockMenuTitle: {\n    id: 'course-authoring.files-and-uploads.cardMenu.lockTitle',\n    defaultMessage: 'Lock',\n  },\n  unlockMenuTitle: {\n    id: 'course-authoring.files-and-uploads.cardMenu.unlockTitle',\n    defaultMessage: 'Unlock',\n  },\n  infoTitle: {\n    id: 'course-authoring.files-and-uploads.cardMenu.infoTitle',\n    defaultMessage: 'Info',\n  },\n  deleteTitle: {\n    id: 'course-authoring.files-and-uploads.cardMenu.deleteTitle',\n    defaultMessage: 'Delete',\n  },\n  deleteConfirmationTitle: {\n    id: 'course-authoring.files-and-uploads..deleteConfirmation.title',\n    defaultMessage: 'Delete File(s) Confirmation',\n  },\n  deleteConfirmationMessage: {\n    id: 'course-authoring.files-and-uploads..deleteConfirmation.message',\n    defaultMessage: 'Are you sure you want to delete {fileNumber} file(s)? This action cannot be undone.',\n  },\n  deleteFileButtonLabel: {\n    id: 'course-authoring.files-and-uploads.deleteConfirmation.deleteFile.label',\n    defaultMessage: 'Delete',\n  },\n  cancelButtonLabel: {\n    id: 'course-authoring.files-and-uploads.cancelButton.label',\n    defaultMessage: 'Cancel',\n  },\n  sortButtonLabel: {\n    id: 'course-authoring.files-and-uploads.sortButton.label',\n    defaultMessage: 'Sort',\n  },\n  sortModalTitleLabel: {\n    id: 'course-authoring.files-and-uploads.sortModal.title',\n    defaultMessage: 'Sort by',\n  },\n  sortByNameAscending: {\n    id: 'course-authoring.files-and-uploads.sortByNameAscendingButton.label',\n    defaultMessage: 'Name (A-Z)',\n  },\n  sortByNewest: {\n    id: 'course-authoring.files-and-uploads.sortByNewestButton.label',\n    defaultMessage: 'Newest',\n  },\n  sortBySizeDescending: {\n    id: 'course-authoring.files-and-uploads.sortBySizeDescendingButton.label',\n    defaultMessage: 'File size (High to low)',\n  },\n  sortByNameDescending: {\n    id: 'course-authoring.files-and-uploads.sortByNameDescendingButton.label',\n    defaultMessage: 'Name (Z-A)',\n  },\n  sortByOldest: {\n    id: 'course-authoring.files-and-uploads.sortByOldestButton.label',\n    defaultMessage: 'Oldest',\n  },\n  sortBySizeAscending: {\n    id: 'course-authoring.files-and-uploads.sortBySizeAscendingButton.label',\n    defaultMessage: 'File size(Low to high)',\n  },\n  applySortButton: {\n    id: 'course-authoring.files-and-uploads.applyySortButton.label',\n    defaultMessage: 'Apply',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Icon,\n  Image,\n} from '@edx/paragon';\nimport { getSrc } from './data/utils';\n\nconst AssetThumbnail = ({\n  thumbnail,\n  wrapperType,\n  externalUrl,\n  displayName,\n}) => {\n  const src = getSrc({\n    thumbnail,\n    externalUrl,\n    wrapperType,\n  });\n\n  return (\n    <div className=\"row justify-content-center align-itmes-center\">\n      {thumbnail ? (\n        <Image\n          style={{ width: '503px', height: '281px' }}\n          className=\"border rounded p-1\"\n          src={src}\n          alt={`Thumbnail of ${displayName}`}\n        />\n      ) : (\n        <div\n          className=\"row border justify-content-center align-items-center rounded m-0\"\n          style={{ width: '503px', height: '281px' }}\n        >\n          <Icon src={src} style={{ height: '48px', width: '48px' }} />\n        </div>\n      )}\n    </div>\n  );\n};\nAssetThumbnail.defaultProps = {\n  thumbnail: null,\n};\nAssetThumbnail.propTypes = {\n  thumbnail: PropTypes.string,\n  wrapperType: PropTypes.string.isRequired,\n  externalUrl: PropTypes.string.isRequired,\n  displayName: PropTypes.string.isRequired,\n};\n\nexport default AssetThumbnail;\n","import { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { Icon, Row, Spinner } from '@edx/paragon';\nimport { ErrorOutline } from '@edx/paragon/icons';\nimport isEmpty from 'lodash/isEmpty';\nimport { RequestStatus } from '../data/constants';\nimport messages from './messages';\n\nconst UsageMetricsMessage = ({\n  usagePathStatus,\n  usageLocations,\n  error,\n  // injected\n  intl,\n}) => {\n  let usageMessage;\n  if (usagePathStatus === RequestStatus.SUCCESSFUL) {\n    usageMessage = isEmpty(usageLocations) ? (\n      <FormattedMessage {...messages.usageNotInUseMessage} />\n    ) : (\n      <ul className=\"p-0\">\n        {usageLocations.map(location => (\n          <li key={`usage-location-${location}`} style={{ listStyle: 'none' }}>\n            {location}\n          </li>\n        ))}\n      </ul>\n    );\n  } else if (usagePathStatus === RequestStatus.FAILED) {\n    usageMessage = (\n      <Row className=\"m-0 pt-1\">\n        <Icon\n          className=\"mr-1 text-danger-500\"\n          size=\"sm\"\n          src={ErrorOutline}\n        />\n        {intl.formatMessage(messages.errorAlertMessage, { message: error })}\n      </Row>\n    );\n  } else {\n    usageMessage = (\n      <>\n        <Spinner\n          animation=\"border\"\n          size=\"sm\"\n          className=\"mie-3\"\n          screenReaderText={intl.formatMessage(messages.usageLoadingMessage)}\n        />\n        <FormattedMessage {...messages.usageLoadingMessage} />\n      </>\n    );\n  }\n  return usageMessage;\n};\n\nUsageMetricsMessage.propTypes = {\n  usagePathStatus: PropTypes.string.isRequired,\n  usageLocations: PropTypes.arrayOf(PropTypes.string).isRequired,\n  error: PropTypes.arrayOf(PropTypes.string).isRequired,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(UsageMetricsMessage);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  injectIntl,\n  FormattedMessage,\n  FormattedDate,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport {\n  ModalDialog,\n  Stack,\n  IconButton,\n  ActionRow,\n  Icon,\n  Truncate,\n  IconButtonWithTooltip,\n  CheckboxControl,\n} from '@edx/paragon';\nimport { ContentCopy, InfoOutline } from '@edx/paragon/icons';\n\nimport { getFileSizeToClosestByte } from './data/utils';\nimport AssetThumbnail from './FileThumbnail';\nimport messages from './messages';\nimport UsageMetricsMessages from './UsageMetricsMessage';\n\nconst FileInfo = ({\n  asset,\n  isOpen,\n  onClose,\n  handleLockedAsset,\n  usagePathStatus,\n  error,\n  // injected\n  intl,\n}) => {\n  const [lockedState, setLockedState] = useState(asset?.locked);\n  const handleLock = (e) => {\n    const locked = e.target.checked;\n    setLockedState(locked);\n    handleLockedAsset(asset?.id, locked);\n  };\n  const fileSize = getFileSizeToClosestByte(asset?.fileSize);\n\n  return (\n    <ModalDialog\n      title={asset?.displayName}\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"lg\"\n      hasCloseButton\n      data-testid=\"file-info-modal\"\n    >\n      <ModalDialog.Header>\n        <ModalDialog.Title>\n          <div style={{ wordBreak: 'break-word' }}>\n            <Truncate lines={2} className=\"font-weight-bold small mt-3\">\n              {asset?.displayName}\n            </Truncate>\n          </div>\n        </ModalDialog.Title>\n      </ModalDialog.Header>\n      <ModalDialog.Body className=\"pt-0 x-small\">\n        <hr />\n        <div className=\"row flex-nowrap m-0 mt-4\">\n          <div className=\"col-8 mr-3\">\n            <AssetThumbnail\n              thumbnail={asset?.thumbnail}\n              externalUrl={asset?.externalUrl}\n              displayName={asset?.displayName}\n              wrapperType={asset?.wrapperType}\n            />\n          </div>\n          <Stack>\n            <div className=\"font-weight-bold\">\n              <FormattedMessage {...messages.dateAddedTitle} />\n            </div>\n            <FormattedDate\n              value={asset?.dateAdded}\n              year=\"numeric\"\n              month=\"short\"\n              day=\"2-digit\"\n              hour=\"numeric\"\n              minute=\"numeric\"\n            />\n            <div className=\"font-weight-bold mt-3\">\n              <FormattedMessage {...messages.fileSizeTitle} />\n            </div>\n            {fileSize}\n            <div className=\"font-weight-bold border-top mt-3 pt-3\">\n              <FormattedMessage {...messages.studioUrlTitle} />\n            </div>\n            <ActionRow>\n              <div style={{ wordBreak: 'break-word' }}>\n                <Truncate lines={1}>\n                  {asset?.portableUrl}\n                </Truncate>\n              </div>\n              <ActionRow.Spacer />\n              <IconButton\n                src={ContentCopy}\n                iconAs={Icon}\n                alt={messages.copyStudioUrlTitle.defaultMessage}\n                onClick={() => navigator.clipboard.writeText(asset?.portableUrl)}\n              />\n            </ActionRow>\n            <div className=\"font-weight-bold mt-3\">\n              <FormattedMessage {...messages.webUrlTitle} />\n            </div>\n            <ActionRow>\n              <div style={{ wordBreak: 'break-word' }}>\n                <Truncate lines={1}>\n                  {asset?.externalUrl}\n                </Truncate>\n              </div>\n              <ActionRow.Spacer />\n              <IconButton\n                src={ContentCopy}\n                iconAs={Icon}\n                alt={messages.copyWebUrlTitle.defaultMessage}\n                onClick={() => navigator.clipboard.writeText(asset?.externalUrl)}\n              />\n            </ActionRow>\n            <ActionRow className=\" border-top mt-3 pt-3\">\n              <div className=\"font-weight-bold\">\n                <FormattedMessage {...messages.lockFileTitle} />\n              </div>\n              <IconButtonWithTooltip\n                key=\"lock-file-info\"\n                tooltipPlacement=\"top\"\n                tooltipContent={intl.formatMessage(messages.lockFileTooltipContent)}\n                src={InfoOutline}\n                iconAs={Icon}\n                alt=\"Info\"\n                size=\"inline\"\n              />\n              <ActionRow.Spacer />\n              <CheckboxControl\n                checked={lockedState}\n                onChange={handleLock}\n                aria-label=\"Checkbox\"\n              />\n            </ActionRow>\n          </Stack>\n        </div>\n        <div className=\"row m-0 pt-3 font-weight-bold\">\n          <FormattedMessage {...messages.usageTitle} />\n        </div>\n        <UsageMetricsMessages {...{ usageLocations: asset?.usageLocations, usagePathStatus, error }} />\n      </ModalDialog.Body>\n    </ModalDialog>\n  );\n};\nFileInfo.propTypes = {\n  asset: PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    wrapperType: PropTypes.string.isRequired,\n    locked: PropTypes.bool.isRequired,\n    externalUrl: PropTypes.string.isRequired,\n    thumbnail: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    portableUrl: PropTypes.string.isRequired,\n    dateAdded: PropTypes.string.isRequired,\n    fileSize: PropTypes.number.isRequired,\n    usageLocations: PropTypes.arrayOf(PropTypes.string),\n  }).isRequired,\n  onClose: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  handleLockedAsset: PropTypes.func.isRequired,\n  usagePathStatus: PropTypes.string.isRequired,\n  error: PropTypes.arrayOf(PropTypes.string).isRequired,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(FileInfo);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const useFileInput = ({\n  onAddFile,\n  setSelectedRows,\n  setAddOpen,\n}) => {\n  const ref = React.useRef();\n  const click = () => ref.current.click();\n  const addFile = (e) => {\n    const { files } = e.target;\n    setSelectedRows(files);\n    Object.values(files).forEach(file => {\n      onAddFile(file);\n      setAddOpen();\n    });\n  };\n  return {\n    click,\n    addFile,\n    ref,\n  };\n};\n\nconst FileInput = ({ fileInput: hook }) => (\n  <input\n    aria-label=\"file-input\"\n    className=\"upload d-none\"\n    onChange={hook.addFile}\n    ref={hook.ref}\n    type=\"file\"\n    multiple\n  />\n);\n\nFileInput.propTypes = {\n  fileInput: PropTypes.shape({\n    addFile: PropTypes.func,\n    ref: PropTypes.oneOfType([\n      // Either a function\n      PropTypes.func,\n      // Or the instance of a DOM native element (see the note about SSR)\n      PropTypes.shape({ current: PropTypes.instanceOf(Element) }),\n    ]),\n  }).isRequired,\n};\n\nexport default FileInput;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const FilesAndUploadsContext = React.createContext({});\n\nconst FilesAndUploadsProvider = ({ courseId, children }) => {\n  const contextValue = useMemo(() => ({\n    courseId,\n    path: `/course/${courseId}/assets`,\n  }), []);\n  return (\n    <FilesAndUploadsContext.Provider\n      value={contextValue}\n    >\n      {children}\n    </FilesAndUploadsContext.Provider>\n  );\n};\n\nFilesAndUploadsProvider.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default FilesAndUploadsProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Dropdown,\n  IconButton,\n  Icon,\n} from '@edx/paragon';\nimport messages from './messages';\n\nconst FileMenu = ({\n  externalUrl,\n  handleLock,\n  locked,\n  onDownload,\n  openAssetInfo,\n  openDeleteConfirmation,\n  portableUrl,\n  iconSrc,\n  id,\n  // injected\n  intl,\n}) => (\n  <Dropdown data-testid={`file-menu-dropdown-${id}`}>\n    <Dropdown.Toggle\n      id={`file-menu-dropdown-${id}`}\n      as={IconButton}\n      src={iconSrc}\n      iconAs={Icon}\n      variant=\"primary\"\n      alt=\"asset-menu-toggle\"\n    />\n    <Dropdown.Menu>\n      <Dropdown.Item\n        onClick={() => navigator.clipboard.writeText(portableUrl)}\n      >\n        {intl.formatMessage(messages.copyStudioUrlTitle)}\n      </Dropdown.Item>\n      <Dropdown.Item\n        onClick={() => navigator.clipboard.writeText(externalUrl)}\n      >\n        {intl.formatMessage(messages.copyWebUrlTitle)}\n      </Dropdown.Item>\n      <Dropdown.Item onClick={onDownload}>\n        {intl.formatMessage(messages.downloadTitle)}\n      </Dropdown.Item>\n      <Dropdown.Item onClick={handleLock}>\n        {locked ? intl.formatMessage(messages.unlockMenuTitle) : intl.formatMessage(messages.lockMenuTitle)}\n      </Dropdown.Item>\n      <Dropdown.Item onClick={openAssetInfo}>\n        {intl.formatMessage(messages.infoTitle)}\n      </Dropdown.Item>\n      <Dropdown.Divider />\n      <Dropdown.Item\n        data-testid=\"open-delete-confirmation-button\"\n        onClick={openDeleteConfirmation}\n      >\n        {intl.formatMessage(messages.deleteTitle)}\n      </Dropdown.Item>\n    </Dropdown.Menu>\n  </Dropdown>\n);\n\nFileMenu.propTypes = {\n  externalUrl: PropTypes.string.isRequired,\n  handleLock: PropTypes.func.isRequired,\n  locked: PropTypes.bool.isRequired,\n  onDownload: PropTypes.func.isRequired,\n  openAssetInfo: PropTypes.func.isRequired,\n  openDeleteConfirmation: PropTypes.func.isRequired,\n  portableUrl: PropTypes.string.isRequired,\n  iconSrc: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(FileMenu);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ActionRow,\n  Icon,\n  Card,\n  Chip,\n  Truncate,\n  Image,\n} from '@edx/paragon';\nimport {\n  MoreVert,\n} from '@edx/paragon/icons';\nimport FileMenu from '../FileMenu';\nimport { getSrc } from '../data/utils';\n\nconst GalleryCard = ({\n  className,\n  original,\n  handleBulkDownload,\n  handleLockedAsset,\n  handleOpenDeleteConfirmation,\n  handleOpenAssetInfo,\n}) => {\n  const lockAsset = () => {\n    const { locked } = original;\n    handleLockedAsset(original.id, !locked);\n  };\n  const src = getSrc({\n    thumbnail: original.thumbnail,\n    wrapperType: original.wrapperType,\n  });\n\n  return (\n    <Card className={className} data-testid={`grid-card-${original.id}`}>\n      <Card.Header\n        actions={(\n          <ActionRow>\n            <FileMenu\n              externalUrl={original.externalUrl}\n              handleLock={lockAsset}\n              locked={original.locked}\n              openAssetInfo={() => handleOpenAssetInfo(original)}\n              portableUrl={original.portableUrl}\n              iconSrc={MoreVert}\n              id={original.id}\n              onDownload={() => handleBulkDownload(\n                [{ original: { id: original.id, displayName: original.displayName } }],\n              )}\n              openDeleteConfirmation={() => handleOpenDeleteConfirmation([{ original }])}\n            />\n          </ActionRow>\n        )}\n      />\n      <Card.Section>\n        <div className=\"row align-items-center justify-content-center m-0\">\n          {original.thumbnail ? (\n            <Image src={src} style={{ height: '76px', width: '135.71px' }} className=\"border rounded p-1\" />\n          ) : (\n            <div className=\"row border justify-content-center align-items-center rounded m-0\" style={{ height: '76px', width: '135.71px' }}>\n              <Icon src={src} style={{ height: '48px', width: '48px' }} />\n            </div>\n          )}\n        </div>\n        <div style={{ wordBreak: 'break-word' }}>\n          <Truncate lines={1} className=\"font-weight-bold small mt-3\">\n            {original.displayName}\n          </Truncate>\n        </div>\n      </Card.Section>\n      <Card.Footer>\n        <Chip>\n          {original.wrapperType}\n        </Chip>\n      </Card.Footer>\n    </Card>\n  );\n};\n\nGalleryCard.defaultProps = {\n  className: null,\n};\nGalleryCard.propTypes = {\n  className: PropTypes.string,\n  original: PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    wrapperType: PropTypes.string.isRequired,\n    locked: PropTypes.bool.isRequired,\n    externalUrl: PropTypes.string.isRequired,\n    thumbnail: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    portableUrl: PropTypes.string.isRequired,\n  }).isRequired,\n  handleBulkDownload: PropTypes.func.isRequired,\n  handleLockedAsset: PropTypes.func.isRequired,\n  handleOpenDeleteConfirmation: PropTypes.func.isRequired,\n  handleOpenAssetInfo: PropTypes.func.isRequired,\n};\n\nexport default GalleryCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ActionRow,\n  Icon,\n  Card,\n  Chip,\n  Truncate,\n  Image,\n} from '@edx/paragon';\nimport {\n  MoreVert,\n} from '@edx/paragon/icons';\nimport FileMenu from '../FileMenu';\nimport { getSrc } from '../data/utils';\n\nconst ListCard = ({\n  className,\n  original,\n  handleBulkDownload,\n  handleLockedAsset,\n  handleOpenDeleteConfirmation,\n  handleOpenAssetInfo,\n}) => {\n  const lockAsset = () => {\n    const { locked } = original;\n    handleLockedAsset(original.id, !locked);\n  };\n  const src = getSrc({\n    thumbnail: original.thumbnail,\n    wrapperType: original.wrapperType,\n  });\n\n  return (\n    <Card\n      className={className}\n      orientation=\"horizontal\"\n      data-testid={`list-card-${original.id}`}\n    >\n      <div className=\"row align-items-center justify-content-center m-0 p-3\">\n        {original.thumbnail ? (\n          <Image src={src} style={{ height: '76px', width: '135.71px' }} className=\"border rounded p-1\" />\n        ) : (\n          <div className=\"row border justify-content-center align-items-center rounded m-0\" style={{ height: '76px', width: '135.71px' }}>\n            <Icon src={src} style={{ height: '48px', width: '48px' }} />\n          </div>\n        )}\n      </div>\n      <Card.Body>\n        <Card.Section>\n          <div style={{ wordBreak: 'break-word' }}>\n            <Truncate lines={1} className=\"font-weight-bold small mt-3\">\n              {original.displayName}\n            </Truncate>\n          </div>\n          <Chip className=\"mt-3\">\n            {original.wrapperType}\n          </Chip>\n        </Card.Section>\n      </Card.Body>\n      <Card.Footer>\n        <ActionRow>\n          <FileMenu\n            externalUrl={original.externalUrl}\n            handleLock={lockAsset}\n            locked={original.locked}\n            openAssetInfo={() => handleOpenAssetInfo(original)}\n            portableUrl={original.portableUrl}\n            iconSrc={MoreVert}\n            id={original.id}\n            onDownload={() => handleBulkDownload(\n              [{ original: { id: original.id, displayName: original.displayName } }],\n            )}\n            openDeleteConfirmation={() => handleOpenDeleteConfirmation([{ original }])}\n          />\n        </ActionRow>\n      </Card.Footer>\n    </Card>\n  );\n};\n\nListCard.defaultProps = {\n  className: null,\n};\nListCard.propTypes = {\n  className: PropTypes.string,\n  original: PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    wrapperType: PropTypes.string.isRequired,\n    locked: PropTypes.bool.isRequired,\n    externalUrl: PropTypes.string.isRequired,\n    thumbnail: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    portableUrl: PropTypes.string.isRequired,\n  }).isRequired,\n  handleBulkDownload: PropTypes.func.isRequired,\n  handleLockedAsset: PropTypes.func.isRequired,\n  handleOpenDeleteConfirmation: PropTypes.func.isRequired,\n  handleOpenAssetInfo: PropTypes.func.isRequired,\n};\n\nexport default ListCard;\n","import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { PropTypes } from 'prop-types';\nimport { injectIntl, FormattedMessage, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  Button,\n  Dropdown,\n  ModalDialog,\n  SelectableBox,\n  useToggle,\n} from '@edx/paragon';\nimport { Add } from '@edx/paragon/icons';\nimport messages from '../messages';\n\nconst TableActions = ({\n  selectedFlatRows,\n  fileInputControl,\n  handleSort,\n  handleBulkDownload,\n  handleOpenDeleteConfirmation,\n  // injected\n  intl,\n}) => {\n  const [isSortOpen, openSort, closeSort] = useToggle(false);\n  const [sortBy, setSortBy] = useState('dateAdded,desc');\n  const handleChange = (e) => {\n    setSortBy(e.target.value);\n  };\n  return (\n    <>\n      <Button variant=\"outline-primary\" onClick={openSort}>\n        <FormattedMessage {...messages.sortButtonLabel} />\n      </Button>\n      <Dropdown className=\"mx-2\">\n        <Dropdown.Toggle\n          id=\"actions-menu-toggle\"\n          alt=\"actions-menu-toggle\"\n          variant=\"outline-primary\"\n        >\n          <FormattedMessage {...messages.actionsButtonLabel} />\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item\n            onClick={() => handleBulkDownload(selectedFlatRows)}\n            disabled={_.isEmpty(selectedFlatRows)}\n          >\n            <FormattedMessage {...messages.downloadTitle} />\n          </Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item\n            data-testid=\"open-delete-confirmation-button\"\n            onClick={() => handleOpenDeleteConfirmation(selectedFlatRows)}\n            disabled={_.isEmpty(selectedFlatRows)}\n          >\n            <FormattedMessage {...messages.deleteTitle} />\n          </Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n      <Button iconBefore={Add} onClick={fileInputControl.click}>\n        <FormattedMessage {...messages.addFilesButtonLabel} />\n      </Button>\n      <ModalDialog\n        title={intl.formatMessage(messages.sortModalTitleLabel)}\n        isOpen={isSortOpen}\n        onClose={closeSort}\n        size=\"lg\"\n        hasCloseButton\n      >\n        <ModalDialog.Header>\n          <ModalDialog.Title>\n            <FormattedMessage {...messages.sortModalTitleLabel} />\n          </ModalDialog.Title>\n        </ModalDialog.Header>\n        <ModalDialog.Body>\n          <SelectableBox.Set\n            type=\"radio\"\n            value={sortBy}\n            onChange={handleChange}\n            name=\"sort options\"\n            columns={3}\n            ariaLabel=\"sort by selection\"\n          >\n            <SelectableBox\n              className=\"text-center\"\n              value=\"displayName,asc\"\n              type=\"radio\"\n              aria-label=\"name descending radio\"\n            >\n              <FormattedMessage {...messages.sortByNameAscending} />\n            </SelectableBox>\n            <SelectableBox\n              className=\"text-center\"\n              value=\"dateAdded,desc\"\n              type=\"radio\"\n              aria-label=\"date added descending radio\"\n            >\n              <FormattedMessage {...messages.sortByNewest} />\n            </SelectableBox>\n            <SelectableBox\n              className=\"text-center\"\n              value=\"fileSize,desc\"\n              type=\"radio\"\n              aria-label=\"date added descending radio\"\n            >\n              <FormattedMessage {...messages.sortBySizeDescending} />\n            </SelectableBox>\n            <SelectableBox\n              className=\"text-center\"\n              value=\"displayName,desc\"\n              type=\"radio\"\n              aria-label=\"name ascending radio\"\n            >\n              <FormattedMessage {...messages.sortByNameDescending} />\n            </SelectableBox>\n            <SelectableBox\n              className=\"text-center\"\n              value=\"dateAdded,asc\"\n              type=\"radio\"\n              aria-label=\"date added ascending radio\"\n            >\n              <FormattedMessage {...messages.sortByOldest} />\n            </SelectableBox>\n            <SelectableBox\n              className=\"text-center\"\n              value=\"fileSize,asc\"\n              type=\"radio\"\n              aria-label=\"date added ascending radio\"\n            >\n              <FormattedMessage {...messages.sortBySizeAscending} />\n            </SelectableBox>\n          </SelectableBox.Set>\n        </ModalDialog.Body>\n        <ModalDialog.Footer>\n          <ActionRow>\n            <ModalDialog.CloseButton variant=\"tertiary\">\n              <FormattedMessage {...messages.cancelButtonLabel} />\n            </ModalDialog.CloseButton>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                closeSort();\n                handleSort(sortBy);\n              }}\n            >\n              <FormattedMessage {...messages.applySortButton} />\n            </Button>\n          </ActionRow>\n        </ModalDialog.Footer>\n      </ModalDialog>\n    </>\n  );\n};\n\nTableActions.defaultProps = {\n  selectedFlatRows: null,\n};\nTableActions.propTypes = {\n  selectedFlatRows: PropTypes.arrayOf(\n    PropTypes.shape({\n      original: PropTypes.shape({\n        displayName: PropTypes.string.isRequired,\n        wrapperType: PropTypes.string.isRequired,\n        locked: PropTypes.bool.isRequired,\n        externalUrl: PropTypes.string.isRequired,\n        thumbnail: PropTypes.string,\n        id: PropTypes.string.isRequired,\n        portableUrl: PropTypes.string.isRequired,\n      }).isRequired,\n    }),\n  ),\n  fileInputControl: PropTypes.shape({\n    click: PropTypes.func.isRequired,\n  }).isRequired,\n  handleOpenDeleteConfirmation: PropTypes.func.isRequired,\n  handleBulkDownload: PropTypes.func.isRequired,\n  handleSort: PropTypes.func.isRequired,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(TableActions);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Toast } from '@edx/paragon';\nimport messages from './messages';\n\nconst ApiStatusToast = ({\n  actionType,\n  selectedRowCount,\n  isOpen,\n  setClose,\n  setSelectedRows,\n  // injected\n  intl,\n}) => {\n  const handleClose = () => {\n    setSelectedRows([]);\n    setClose();\n  };\n\n  return (\n    <Toast\n      show={isOpen}\n      onClose={handleClose}\n    >\n      {intl.formatMessage(messages.apiStatusToastMessage, { actionType, selectedRowCount })}\n    </Toast>\n  );\n};\n\nApiStatusToast.propTypes = {\n  actionType: PropTypes.string.isRequired,\n  selectedRowCount: PropTypes.number.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  setClose: PropTypes.func.isRequired,\n  setSelectedRows: PropTypes.func.isRequired,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ApiStatusToast);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport isEmpty from 'lodash/isEmpty';\nimport { injectIntl, FormattedMessage, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  DataTable,\n  TextFilter,\n  CheckboxFilter,\n  Dropzone,\n  CardView,\n  useToggle,\n  AlertModal,\n  ActionRow,\n  Button,\n} from '@edx/paragon';\nimport Placeholder, { ErrorAlert } from '@edx/frontend-lib-content-components';\n\nimport { RequestStatus } from '../data/constants';\nimport { useModels, useModel } from '../generic/model-store';\nimport {\n  addAssetFile,\n  deleteAssetFile,\n  fetchAssets,\n  resetErrors,\n  getUsagePaths,\n  updateAssetLock,\n  updateAssetOrder,\n  fetchAssetDownload,\n} from './data/thunks';\nimport { sortFiles } from './data/utils';\nimport messages from './messages';\n\nimport FileInfo from './FileInfo';\nimport FileInput, { useFileInput } from './FileInput';\nimport FilesAndUploadsProvider from './FilesAndUploadsProvider';\nimport {\n  GalleryCard,\n  ListCard,\n  TableActions,\n} from './table-components';\nimport ApiStatusToast from './ApiStatusToast';\nimport { clearErrors } from './data/slice';\nimport getPageHeadTitle from '../generic/utils';\n\nconst FilesAndUploads = ({\n  courseId,\n  // injected\n  intl,\n}) => {\n  const dispatch = useDispatch();\n  const defaultVal = 'card';\n  const columnSizes = {\n    xs: 12,\n    sm: 6,\n    md: 4,\n    lg: 2,\n  };\n  const [currentView, setCurrentView] = useState(defaultVal);\n  const [isDeleteOpen, setDeleteOpen, setDeleteClose] = useToggle(false);\n  const [isAssetInfoOpen, openAssetInfo, closeAssetinfo] = useToggle(false);\n  const [isAddOpen, setAddOpen, setAddClose] = useToggle(false);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [isDeleteConfirmationOpen, openDeleteConfirmation, closeDeleteConfirmation] = useToggle(false);\n\n  const courseDetails = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(courseDetails?.name, intl.formatMessage(messages.heading));\n\n  useEffect(() => {\n    dispatch(fetchAssets(courseId));\n  }, [courseId]);\n  const {\n    totalCount,\n    assetIds,\n    loadingStatus,\n    addingStatus: addAssetStatus,\n    deletingStatus: deleteAssetStatus,\n    updatingStatus: updateAssetStatus,\n    usageStatus: usagePathStatus,\n    errors: errorMessages,\n  } = useSelector(state => state.assets);\n  const fileInputControl = useFileInput({\n    onAddFile: (file) => dispatch(addAssetFile(courseId, file, totalCount)),\n    setSelectedRows,\n    setAddOpen,\n  });\n  const assets = useModels('assets', assetIds);\n  const handleDropzoneAsset = ({ fileData, handleError }) => {\n    try {\n      const file = fileData.get('file');\n      dispatch(addAssetFile(courseId, file, totalCount));\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const handleSort = (sortType) => {\n    const newAssetIdOrder = sortFiles(assets, sortType);\n    dispatch(updateAssetOrder(courseId, newAssetIdOrder, sortType));\n  };\n\n  const handleBulkDelete = () => {\n    closeDeleteConfirmation();\n    setDeleteOpen();\n    dispatch(resetErrors({ errorType: 'delete' }));\n    const assetIdsToDelete = selectedRows.map(row => row.original.id);\n    assetIdsToDelete.forEach(id => dispatch(deleteAssetFile(courseId, id, totalCount)));\n  };\n\n  const handleBulkDownload = useCallback(async (selectedFlatRows) => {\n    dispatch(resetErrors({ errorType: 'download' }));\n    dispatch(fetchAssetDownload({ selectedRows: selectedFlatRows, courseId }));\n  }, []);\n\n  const handleLockedAsset = (assetId, locked) => {\n    dispatch(clearErrors({ errorType: 'lock' }));\n    dispatch(updateAssetLock({ courseId, assetId, locked }));\n  };\n\n  const handleOpenDeleteConfirmation = (selectedFlatRows) => {\n    setSelectedRows(selectedFlatRows);\n    openDeleteConfirmation();\n  };\n\n  const handleOpenAssetInfo = (original) => {\n    dispatch(resetErrors({ errorType: 'usageMetrics' }));\n    setSelectedRows([{ original }]);\n    dispatch(getUsagePaths({ asset: original, courseId, setSelectedRows }));\n    openAssetInfo();\n  };\n\n  const headerActions = ({ selectedFlatRows }) => (\n    <TableActions\n      {...{\n        selectedFlatRows,\n        fileInputControl,\n        handleSort,\n        handleBulkDownload,\n        handleOpenDeleteConfirmation,\n      }}\n    />\n  );\n\n  const fileCard = ({ className, original }) => {\n    if (currentView === defaultVal) {\n      return (\n        <GalleryCard\n          {...{\n            handleLockedAsset,\n            handleBulkDownload,\n            handleOpenDeleteConfirmation,\n            handleOpenAssetInfo,\n            className,\n            original,\n          }}\n        />\n      );\n    }\n    return (\n      <ListCard\n        {...{\n          handleLockedAsset,\n          handleBulkDownload,\n          handleOpenDeleteConfirmation,\n          handleOpenAssetInfo,\n          className,\n          original,\n        }}\n      />\n    );\n  };\n\n  if (loadingStatus === RequestStatus.DENIED) {\n    return (\n      <div data-testid=\"under-construction-placeholder\" className=\"row justify-contnt-center m-6\">\n        <Placeholder />\n      </div>\n    );\n  }\n  return (\n    <FilesAndUploadsProvider courseId={courseId}>\n      <main className=\"containerpt-5\">\n        <div className=\"p-4\">\n          <ErrorAlert\n            hideHeading={false}\n            isError={addAssetStatus === RequestStatus.FAILED}\n          >\n            <ul className=\"p-0\">\n              {errorMessages.add.map(message => (\n                <li key={`add-error-${message}`} style={{ listStyle: 'none' }}>\n                  {intl.formatMessage(messages.errorAlertMessage, { message })}\n                </li>\n              ))}\n            </ul>\n          </ErrorAlert>\n          <ErrorAlert\n            hideHeading={false}\n            isError={deleteAssetStatus === RequestStatus.FAILED}\n          >\n            <ul className=\"p-0\">\n              {errorMessages.delete.map(message => (\n                <li key={`delete-error-${message}`} style={{ listStyle: 'none' }}>\n                  {intl.formatMessage(messages.errorAlertMessage, { message })}\n                </li>\n              ))}\n            </ul>\n          </ErrorAlert>\n          <ErrorAlert\n            hideHeading={false}\n            isError={updateAssetStatus === RequestStatus.FAILED}\n          >\n            <ul className=\"p-0\">\n              {errorMessages.lock.map(message => (\n                <li key={`lock-error-${message}`} style={{ listStyle: 'none' }}>\n                  {intl.formatMessage(messages.errorAlertMessage, { message })}\n                </li>\n              ))}\n              {errorMessages.download.map(message => (\n                <li key={`download-error-${message}`} style={{ listStyle: 'none' }}>\n                  {intl.formatMessage(messages.errorAlertMessage, { message })}\n                </li>\n              ))}\n            </ul>\n          </ErrorAlert>\n          <div className=\"h2\">\n            <FormattedMessage {...messages.heading} />\n          </div>\n        </div>\n        <DataTable\n          isFilterable\n          isLoading={loadingStatus === RequestStatus.IN_PROGRESS}\n          isSortable\n          isSelectable\n          isPaginated\n          defaultColumnValues={{ Filter: TextFilter }}\n          dataViewToggleOptions={{\n            isDataViewToggleEnabled: true,\n            onDataViewToggle: val => setCurrentView(val),\n            defaultActiveStateValue: defaultVal,\n            togglePlacement: 'left',\n          }}\n          initialState={{\n            pageSize: 50,\n          }}\n          tableActions={headerActions}\n          bulkActions={headerActions}\n          columns={[\n            {\n              Header: 'Name',\n              accessor: 'displayName',\n            },\n            {\n              Header: 'Type',\n              accessor: 'wrapperType',\n              Filter: CheckboxFilter,\n              filter: 'includesValue',\n              filterChoices: [\n                {\n                  name: 'Code',\n                  value: 'code',\n                },\n                {\n                  name: 'Images',\n                  value: 'image',\n                },\n                {\n                  name: 'Documents',\n                  value: 'document',\n                },\n                {\n                  name: 'Audio',\n                  value: 'audio',\n                },\n              ],\n            },\n          ]}\n          itemCount={totalCount}\n          pageCount={Math.ceil(totalCount / 50)}\n          data={assets}\n        >\n          {isEmpty(assets) && loadingStatus !== RequestStatus.IN_PROGRESS ? (\n            <Dropzone\n              data-testid=\"files-dropzone\"\n              onProcessUpload={handleDropzoneAsset}\n              maxSize={20 * 1048576}\n              errorMessages={{\n                invalidSize: intl.formatMessage(messages.fileSizeError),\n                multipleDragged: 'Dropzone can only upload a single file.',\n              }}\n            />\n          ) : (\n            <div data-testid=\"files-data-table\" className=\"mr-4 ml-3\">\n              <DataTable.TableControlBar />\n              { currentView === 'card' && <CardView CardComponent={fileCard} columnSizes={columnSizes} selectionPlacement=\"left\" skeletonCardCount={6} /> }\n              { currentView === 'list' && <CardView CardComponent={fileCard} columnSizes={{ xs: 12 }} selectionPlacement=\"left\" skeletonCardCount={4} /> }\n              <DataTable.EmptyTable content={intl.formatMessage(messages.noResultsFoundMessage)} />\n              <DataTable.TableFooter />\n              <ApiStatusToast\n                actionType={intl.formatMessage(messages.apiStatusDeletingAction)}\n                selectedRowCount={selectedRows.length}\n                isOpen={isDeleteOpen}\n                setClose={setDeleteClose}\n                setSelectedRows={setSelectedRows}\n              />\n              <ApiStatusToast\n                actionType={intl.formatMessage(messages.apiStatusAddingAction)}\n                selectedRowCount={selectedRows.length}\n                isOpen={isAddOpen}\n                setClose={setAddClose}\n                setSelectedRows={setSelectedRows}\n              />\n            </div>\n          )}\n        </DataTable>\n        <FileInput fileInput={fileInputControl} />\n        {!isEmpty(selectedRows) && (\n          <FileInfo\n            asset={selectedRows[0].original}\n            onClose={closeAssetinfo}\n            isOpen={isAssetInfoOpen}\n            handleLockedAsset={handleLockedAsset}\n            usagePathStatus={usagePathStatus}\n            error={errorMessages.usageMetrics}\n          />\n        )}\n        <AlertModal\n          title={intl.formatMessage(messages.deleteConfirmationTitle)}\n          isOpen={isDeleteConfirmationOpen}\n          onClose={closeDeleteConfirmation}\n          footerNode={(\n            <ActionRow>\n              <Button variant=\"tertiary\" onClick={closeDeleteConfirmation}>\n                {intl.formatMessage(messages.cancelButtonLabel)}\n              </Button>\n              <Button onClick={handleBulkDelete}>\n                {intl.formatMessage(messages.deleteFileButtonLabel)}\n              </Button>\n            </ActionRow>\n          )}\n        >\n          {intl.formatMessage(messages.deleteConfirmationMessage, { fileNumber: selectedRows.length })}\n        </AlertModal>\n      </main>\n    </FilesAndUploadsProvider>\n  );\n};\n\nFilesAndUploads.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  // injected\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(FilesAndUploads);\n","import { Alert } from '@edx/paragon';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AlertProctoringError = ({ proctoringErrorsData, ...props }) => (\n  <ul className=\"alert-proctoring-error p-0\">\n    <Alert {...props}>\n      {proctoringErrorsData.map(({ key, model, message }) => (\n        <li key={key}>\n          <Alert.Heading>{model.displayName}</Alert.Heading>\n          <p>{message}</p>\n        </li>\n      ))}\n    </Alert>\n  </ul>\n);\n\nAlertProctoringError.propTypes = {\n  variant: PropTypes.string,\n  proctoringErrorsData: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string,\n    message: PropTypes.string,\n    model: PropTypes.shape({\n      deprecated: PropTypes.bool,\n      displayName: PropTypes.string,\n      help: PropTypes.string,\n      hideOnEnabledPublisher: PropTypes.bool,\n    }),\n    value: PropTypes.string,\n  })).isRequired,\n};\n\nAlertProctoringError.defaultProps = {\n  variant: 'danger',\n};\n\nexport default AlertProctoringError;\n","import React from 'react';\nimport { Alert } from '@edx/paragon';\nimport PropTypes from 'prop-types';\n\nconst AlertMessage = ({ title, description, ...props }) => (\n  <Alert {...props}>\n    <Alert.Heading>{title}</Alert.Heading>\n    <span>{description}</span>\n  </Alert>\n);\n\nAlertMessage.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  description: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n};\n\nAlertMessage.defaultProps = {\n  title: undefined,\n  description: undefined,\n};\n\nexport default AlertMessage;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  offlineWarningTitle: {\n    id: 'course-authoring.generic.alert.warning.offline.title',\n    defaultMessage: 'Studio\\'s having trouble saving your work',\n  },\n  offlineWarningDescription: {\n    id: 'course-authoring.generic.alert.warning.offline.description',\n    defaultMessage: 'This may be happening because of an error with our server or your internet connection. Try refreshing the page or making sure you are online.',\n  },\n  offlineWarningTitleAriaLabelledBy: {\n    id: 'course-authoring.generic.alert.warning.offline.title.aria.labelled-by',\n    defaultMessage: 'alert-internet-error-title',\n  },\n  offlineWarningDescriptionAriaDescribedBy: {\n    id: 'course-authoring.generic.alert.warning.offline.subtitle.aria.described-by',\n    defaultMessage: 'alert-internet-error-description',\n  },\n});\n\nexport default messages;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Warning as WarningIcon } from '@edx/paragon/icons';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport AlertMessage from '../alert-message';\nimport messages from './messages';\n\nconst InternetConnectionAlert = ({\n  isFailed, isQueryPending, onQueryProcessing, onInternetConnectionFailed,\n}) => {\n  const intl = useIntl();\n  const [showAlert, setShowAlert] = useState(false);\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    const handleOnlineStatus = () => setIsOnline(window.navigator.onLine);\n    const events = ['online', 'offline'];\n\n    events.forEach(event => {\n      window.addEventListener(event, handleOnlineStatus);\n    });\n\n    return () => {\n      events.forEach(event => {\n        window.removeEventListener(event, handleOnlineStatus);\n      });\n    };\n  }, [isOnline]);\n\n  useEffect(() => {\n    if (isQueryPending) {\n      if (onQueryProcessing) {\n        onQueryProcessing();\n      }\n\n      setShowAlert(!isOnline);\n\n      if (!isOnline) {\n        onInternetConnectionFailed();\n      }\n    } else if (isFailed) {\n      setShowAlert(!isOnline);\n    } else if (isOnline) {\n      setShowAlert(false);\n    }\n  }, [isOnline, isQueryPending, isFailed]);\n\n  return (\n    <AlertMessage\n      show={showAlert}\n      variant=\"danger\"\n      icon={WarningIcon}\n      title={intl.formatMessage(messages.offlineWarningTitle)}\n      description={intl.formatMessage(messages.offlineWarningDescription)}\n      aria-hidden=\"true\"\n      aria-labelledby={intl.formatMessage(\n        messages.offlineWarningTitleAriaLabelledBy,\n      )}\n      aria-describedby={intl.formatMessage(\n        messages.offlineWarningDescriptionAriaDescribedBy,\n      )}\n    />\n  );\n};\n\nInternetConnectionAlert.defaultProps = {\n  isQueryPending: false,\n  onQueryProcessing: () => ({}),\n  onInternetConnectionFailed: () => ({}),\n};\n\nInternetConnectionAlert.propTypes = {\n  isFailed: PropTypes.bool.isRequired,\n  isQueryPending: PropTypes.bool,\n  onQueryProcessing: PropTypes.func,\n  onInternetConnectionFailed: PropTypes.func,\n};\n\nexport default InternetConnectionAlert;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ActionRow } from '@edx/paragon';\n\nconst SubHeader = ({\n  title, subtitle, contentTitle, description, instruction, headerActions,\n}) => (\n  <div className=\"border-bottom border-light-400 mb-3\">\n    <header className=\"sub-header\">\n      <h2 className=\"sub-header-title\">\n        <small className=\"sub-header-title-subtitle\">{subtitle}</small>\n        {title}\n      </h2>\n      {headerActions && (\n        <ActionRow className=\"ml-auto sub-header-actions\">\n          {headerActions}\n        </ActionRow>\n      )}\n    </header>\n    {contentTitle && (\n      <header className=\"sub-header-content\">\n        <h2 className=\"sub-header-content-title\">{contentTitle}</h2>\n        <span className=\"small text-gray-700\">{description}</span>\n      </header>\n    )}\n    {instruction && (\n      <p className=\"sub-header-instructions mb-4\">{instruction}</p>\n    )}\n  </div>\n);\nSubHeader.defaultProps = {\n  instruction: '',\n  description: '',\n  subtitle: '',\n  contentTitle: '',\n  headerActions: null,\n};\nSubHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string,\n  contentTitle: PropTypes.string,\n  description: PropTypes.string,\n  instruction: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n  ]),\n  headerActions: PropTypes.node,\n};\nexport default SubHeader;\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { convertObjectToSnakeCase } from '../../utils';\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getCourseAdvancedSettingsApiUrl = (courseId) => `${getApiBaseUrl()}/api/contentstore/v0/advanced_settings/${courseId}`;\nconst getProctoringErrorsApiUrl = () => `${getApiBaseUrl()}/api/contentstore/v1/proctoring_errors/`;\n\n/**\n * Get's advanced setting for a course.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getCourseAdvancedSettings(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getCourseAdvancedSettingsApiUrl(courseId)}?fetch_all=0`);\n  return camelCaseObject(data);\n}\n\n/**\n * Updates advanced setting for a course.\n * @param {string} courseId\n * @param {object} settings\n * @returns {Promise<Object>}\n */\nexport async function updateCourseAdvancedSettings(courseId, settings) {\n  const { data } = await getAuthenticatedHttpClient()\n    .patch(`${getCourseAdvancedSettingsApiUrl(courseId)}`, convertObjectToSnakeCase(settings));\n  return camelCaseObject(data);\n}\n\n/**\n * Gets proctoring exam errors.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getProctoringExamErrors(courseId) {\n  const { data } = await getAuthenticatedHttpClient().get(`${getProctoringErrorsApiUrl()}${courseId}`);\n  return camelCaseObject(data);\n}\n","import { RequestStatus } from '../../data/constants';\nimport {\n  getCourseAdvancedSettings,\n  updateCourseAdvancedSettings,\n  getProctoringExamErrors,\n} from './api';\nimport {\n  fetchCourseAppsSettingsSuccess,\n  updateCourseAppsSettingsSuccess,\n  updateLoadingStatus,\n  updateSavingStatus,\n  fetchProctoringExamErrorsSuccess,\n  getDataSendErrors,\n} from './slice';\n\nexport function fetchCourseAppSettings(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const settingValues = await getCourseAdvancedSettings(courseId);\n      const sortedDisplayName = [];\n      Object.values(settingValues).forEach(value => {\n        const { displayName } = value;\n        sortedDisplayName.push(displayName);\n      });\n      const sortedSettingValues = {};\n      sortedDisplayName.sort().forEach((displayName => {\n        Object.entries(settingValues).forEach(([key, value]) => {\n          if (value.displayName === displayName) {\n            sortedSettingValues[key] = value;\n          }\n        });\n      }));\n      dispatch(fetchCourseAppsSettingsSuccess(sortedSettingValues));\n      dispatch(updateLoadingStatus({ status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateLoadingStatus({ courseId, status: RequestStatus.DENIED }));\n      } else {\n        dispatch(updateLoadingStatus({ courseId, status: RequestStatus.FAILED }));\n      }\n    }\n  };\n}\n\nexport function updateCourseAppSetting(courseId, settings) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const settingValues = await updateCourseAdvancedSettings(courseId, settings);\n      dispatch(updateCourseAppsSettingsSuccess(settingValues));\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      let errorData;\n      try {\n        const { customAttributes: { httpErrorResponseData } } = error;\n        errorData = JSON.parse(httpErrorResponseData);\n      } catch (err) {\n        errorData = {};\n      }\n\n      dispatch(getDataSendErrors(errorData));\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function fetchProctoringExamErrors(courseId) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const settingValues = await getProctoringExamErrors(courseId);\n      dispatch(fetchProctoringExamErrorsSuccess(settingValues));\n      return true;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n","export const getLoadingStatus = (state) => state.advancedSettings.loadingStatus;\nexport const getCourseAppSettings = state => state.advancedSettings.courseAppSettings;\nexport const getSavingStatus = (state) => state.advancedSettings.savingStatus;\nexport const getProctoringExamErrors = (state) => state.advancedSettings.proctoringErrors;\nexport const getSendRequestErrors = (state) => state.advancedSettings.sendRequestErrors.developer_message;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  deprecated: {\n    id: 'course-authoring.advanced-settings.button.deprecated',\n    defaultMessage: 'Deprecated',\n  },\n  helpButtonText: {\n    id: 'course-authoring.advanced-settings.button.help',\n    defaultMessage: 'Show help text',\n  },\n});\n\nexport default messages;\n","import React, { useState } from 'react';\nimport {\n  ActionRow,\n  Card,\n  Form,\n  Icon,\n  IconButton,\n  ModalPopup,\n  useToggle,\n} from '@edx/paragon';\nimport { InfoOutline, Warning } from '@edx/paragon/icons';\nimport PropTypes from 'prop-types';\nimport { capitalize } from 'lodash';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport messages from './messages';\n\nconst SettingCard = ({\n  name,\n  settingData,\n  handleBlur,\n  setEdited,\n  showSaveSettingsPrompt,\n  saveSettingsPrompt,\n  isEditableState,\n  setIsEditableState,\n  // injected\n  intl,\n}) => {\n  const { deprecated, help, displayName } = settingData;\n  const initialValue = JSON.stringify(settingData.value, null, 4);\n  const [isOpen, open, close] = useToggle(false);\n  const [target, setTarget] = useState(null);\n  const [newValue, setNewValue] = useState(initialValue);\n\n  const handleSettingChange = (e) => {\n    const { value } = e.target;\n    setNewValue(e.target.value);\n    if (value !== initialValue) {\n      if (!saveSettingsPrompt) {\n        showSaveSettingsPrompt(true);\n      }\n      if (!isEditableState) {\n        setIsEditableState(true);\n      }\n    }\n  };\n\n  const handleCardBlur = () => {\n    setEdited((prevEditedSettings) => ({\n      ...prevEditedSettings,\n      [name]: newValue,\n    }));\n    handleBlur();\n  };\n\n  return (\n    <li className=\"field-group course-advanced-policy-list-item\">\n      <Card className=\"flex-column setting-card\">\n        <Card.Body className=\"d-flex row m-0 align-items-center\">\n          <Card.Header\n            className=\"col-6\"\n            title={(\n              <ActionRow>\n                {capitalize(displayName)}\n                <IconButton\n                  ref={setTarget}\n                  onClick={open}\n                  src={InfoOutline}\n                  iconAs={Icon}\n                  alt={intl.formatMessage(messages.helpButtonText)}\n                  variant=\"primary\"\n                  className=\" ml-1 mr-2\"\n                />\n                <ModalPopup\n                  hasArrow\n                  placement=\"right\"\n                  positionRef={target}\n                  isOpen={isOpen}\n                  onClose={close}\n                  className=\"pgn__modal-popup__arrow\"\n                >\n                  <div\n                    className=\"p-2 x-small rounded modal-popup-content\"\n                    // eslint-disable-next-line react/no-danger\n                    dangerouslySetInnerHTML={{ __html: help }}\n                  />\n                </ModalPopup>\n                <ActionRow.Spacer />\n              </ActionRow>\n            )}\n          />\n          <Card.Section className=\"col-6 flex-grow-1\">\n            <Form.Group className=\"m-0\">\n              <Form.Control\n                as={TextareaAutosize}\n                value={isEditableState ? newValue : initialValue}\n                name={name}\n                onChange={handleSettingChange}\n                aria-label={displayName}\n                onBlur={handleCardBlur}\n              />\n            </Form.Group>\n          </Card.Section>\n        </Card.Body>\n        {deprecated && (\n          <Card.Status icon={Warning} variant=\"danger\">\n            {intl.formatMessage(messages.deprecated)}\n          </Card.Status>\n        )}\n      </Card>\n    </li>\n  );\n};\n\nSettingCard.propTypes = {\n  intl: intlShape.isRequired,\n  settingData: PropTypes.shape({\n    deprecated: PropTypes.bool,\n    help: PropTypes.string,\n    displayName: PropTypes.string,\n    value: PropTypes.PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.number,\n      PropTypes.object,\n      PropTypes.array,\n    ]),\n  }).isRequired,\n  setEdited: PropTypes.func.isRequired,\n  showSaveSettingsPrompt: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  handleBlur: PropTypes.func.isRequired,\n  saveSettingsPrompt: PropTypes.bool.isRequired,\n  isEditableState: PropTypes.bool.isRequired,\n  setIsEditableState: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(SettingCard);\n","// eslint-disable-next-line import/prefer-default-export\nexport const otherLinkURLParams = {\n  scheduleAndDetails: 'settings/details',\n  grading: 'settings/grading',\n  courseTeam: 'course_team',\n  advancedSettings: 'settings/advanced',\n  groupConfigurations: 'group_configurations',\n  proctoredExamSettings: 'proctored-exam-settings',\n  studioHome: 'home',\n};\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  sidebarTitleOther: {\n    id: 'course-authoring.help-sidebar.other.title',\n    defaultMessage: 'Other course settings',\n  },\n  sidebarLinkToScheduleAndDetails: {\n    id: 'course-authoring.help-sidebar.links.schedule-and-details',\n    defaultMessage: 'Schedule & details',\n    description: 'Link to Studio Schedule & Details page',\n  },\n  sidebarLinkToGrading: {\n    id: 'course-authoring.help-sidebar.links.grading',\n    defaultMessage: 'Grading',\n    description: 'Link to Studio Grading page',\n  },\n  sidebarLinkToCourseTeam: {\n    id: 'course-authoring.help-sidebar.links.course-team',\n    defaultMessage: 'Course team',\n    description: 'Link to Studio Course Team page',\n  },\n  sidebarLinkToGroupConfigurations: {\n    id: 'course-authoring.help-sidebar.links.group-configurations',\n    defaultMessage: 'Group configurations',\n    description: 'Link to Studio Group Configurations page',\n  },\n  sidebarLinkToProctoredExamSettings: {\n    id: 'course-authoring.help-sidebar.links.proctored-exam-settings',\n    defaultMessage: 'Proctored exam settings',\n    description: 'Link to Proctored exam settings page',\n  },\n  sidebarLinkToAdvancedSettings: {\n    id: 'course-authoring.help-sidebar.links.advanced-settings',\n    defaultMessage: 'Advanced settings',\n    description: 'Link to Advanced Settings',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '@edx/paragon';\n\nconst HelpSidebarLink = ({ as, pathToPage, title }) => {\n  const TagElement = as;\n  return (\n    <TagElement className=\"sidebar-link\">\n      <Hyperlink\n        destination={pathToPage}\n        target=\"_blank\"\n        showLaunchIcon={false}\n      >\n        {title}\n      </Hyperlink>\n    </TagElement>\n  );\n};\n\nHelpSidebarLink.propTypes = {\n  pathToPage: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  as: PropTypes.string,\n};\n\nHelpSidebarLink.defaultProps = {\n  as: 'li',\n};\n\nexport default HelpSidebarLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { otherLinkURLParams } from './constants';\nimport messages from './messages';\nimport HelpSidebarLink from './HelpSidebarLink';\n\nconst HelpSidebar = ({\n  intl,\n  courseId,\n  showOtherSettings,\n  proctoredExamSettingsUrl,\n  children,\n  className,\n}) => {\n  const { pathname } = useLocation();\n  const {\n    grading,\n    courseTeam,\n    advancedSettings,\n    scheduleAndDetails,\n    groupConfigurations,\n  } = otherLinkURLParams;\n\n  const showOtherLink = (params) => !pathname.includes(params);\n  const generateLegacyURL = (urlParameter) => {\n    const referObj = new URL(`${urlParameter}/${courseId}`, getConfig().STUDIO_BASE_URL);\n    return referObj.href;\n  };\n\n  const scheduleAndDetailsDestination = generateLegacyURL(scheduleAndDetails);\n  const gradingDestination = generateLegacyURL(grading);\n  const courseTeamDestination = generateLegacyURL(courseTeam);\n  const advancedSettingsDestination = generateLegacyURL(advancedSettings);\n  const groupConfigurationsDestination = generateLegacyURL(groupConfigurations);\n\n  return (\n    <aside className={classNames('help-sidebar', className)}>\n      <div className=\"help-sidebar-about\">{children}</div>\n      {showOtherSettings && (\n        <>\n          <hr />\n          <div className=\"help-sidebar-other\">\n            <h4 className=\"help-sidebar-other-title\">\n              {intl.formatMessage(messages.sidebarTitleOther)}\n            </h4>\n            <nav\n              className=\"help-sidebar-other-links\"\n              aria-label={intl.formatMessage(messages.sidebarTitleOther)}\n            >\n              <ul className=\"p-0 mb-0\">\n                {showOtherLink(scheduleAndDetails) && (\n                  <HelpSidebarLink\n                    pathToPage={scheduleAndDetailsDestination}\n                    title={intl.formatMessage(\n                      messages.sidebarLinkToScheduleAndDetails,\n                    )}\n                  />\n                )}\n                {showOtherLink(grading) && (\n                  <HelpSidebarLink\n                    pathToPage={gradingDestination}\n                    title={intl.formatMessage(messages.sidebarLinkToGrading)}\n                  />\n                )}\n                {showOtherLink(courseTeam) && (\n                  <HelpSidebarLink\n                    pathToPage={courseTeamDestination}\n                    title={intl.formatMessage(messages.sidebarLinkToCourseTeam)}\n                  />\n                )}\n                {showOtherLink(groupConfigurations) && (\n                  <HelpSidebarLink\n                    pathToPage={groupConfigurationsDestination}\n                    title={intl.formatMessage(\n                      messages.sidebarLinkToGroupConfigurations,\n                    )}\n                  />\n                )}\n                {showOtherLink(advancedSettings) && (\n                  <HelpSidebarLink\n                    pathToPage={advancedSettingsDestination}\n                    title={intl.formatMessage(messages.sidebarLinkToAdvancedSettings)}\n                  />\n                )}\n                {proctoredExamSettingsUrl && (\n                  <HelpSidebarLink\n                    pathToPage={proctoredExamSettingsUrl}\n                    title={intl.formatMessage(\n                      messages.sidebarLinkToProctoredExamSettings,\n                    )}\n                  />\n                )}\n              </ul>\n            </nav>\n          </div>\n        </>\n      )}\n    </aside>\n  );\n};\n\nHelpSidebar.defaultProps = {\n  proctoredExamSettingsUrl: '',\n  className: undefined,\n  courseId: undefined,\n  showOtherSettings: false,\n};\n\nHelpSidebar.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string,\n  showOtherSettings: PropTypes.bool,\n  proctoredExamSettingsUrl: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  className: PropTypes.string,\n};\n\nexport default injectIntl(HelpSidebar);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  about: {\n    id: 'course-authoring.advanced-settings.sidebar.about.title',\n    defaultMessage: 'What do advanced settings do?',\n  },\n  aboutDescription1: {\n    id: 'course-authoring.advanced-settings.sidebar.about.description-1',\n    defaultMessage: 'Advanced settings control specific course functionality. On this page, you can edit manual policies, which are JSON-based key and value pairs that control specific course settings.',\n  },\n  aboutDescription2: {\n    id: 'course-authoring.advanced-settings.sidebar.about.description-2',\n    defaultMessage: 'Any policies you modify here override all other information you’ve defined elsewhere in Studio. Do not edit policies unless you are familiar with both their purpose and syntax.',\n  },\n  other: {\n    id: 'course-authoring.advanced-settings.sidebar.other.title',\n    defaultMessage: 'Other course settings',\n  },\n  otherCourseSettingsLinkToScheduleAndDetails: {\n    id: 'course-authoring.advanced-settings.sidebar.links.schedule-and-details',\n    defaultMessage: 'Details & schedule',\n    description: 'Link to Studio Details & schedule page',\n  },\n  otherCourseSettingsLinkToGrading: {\n    id: 'course-authoring.advanced-settings.sidebar.links.grading',\n    defaultMessage: 'Grading',\n    description: 'Link to Studio Grading page',\n  },\n  otherCourseSettingsLinkToCourseTeam: {\n    id: 'course-authoring.advanced-settings.sidebar.links.course-team',\n    defaultMessage: 'Course team',\n    description: 'Link to Studio Course team page',\n  },\n  otherCourseSettingsLinkToGroupConfigurations: {\n    id: 'course-authoring.advanced-settings.sidebar.links.group-configurations',\n    defaultMessage: 'Group configurations',\n    description: 'Link to Studio Group configurations page',\n  },\n  otherCourseSettingsLinkToProctoredExamSettings: {\n    id: 'course-authoring.advanced-settings.sidebar.links.proctored-exam-settings',\n    defaultMessage: 'Proctored exam settings',\n    description: 'Link to Proctored exam settings page',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport {\n  FormattedMessage,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\n\nimport { HelpSidebar } from '../../generic/help-sidebar';\nimport messages from './messages';\n\nconst SettingsSidebar = ({ intl, courseId, proctoredExamSettingsUrl }) => (\n  <HelpSidebar\n    courseId={courseId}\n    proctoredExamSettingsUrl={proctoredExamSettingsUrl}\n    showOtherSettings\n  >\n    <h4 className=\"help-sidebar-about-title\">\n      {intl.formatMessage(messages.about)}\n    </h4>\n    <p className=\"help-sidebar-about-descriptions\">\n      {intl.formatMessage(messages.aboutDescription1)}\n    </p>\n    <p className=\"help-sidebar-about-descriptions\">\n      {intl.formatMessage(messages.aboutDescription2)}\n    </p>\n    <p className=\"help-sidebar-about-descriptions\">\n      <FormattedMessage\n        id=\"course-authoring.advanced-settings.about.description-3\"\n        defaultMessage=\"{notice} When you enter strings as policy values, ensure that you use double quotation marks (“) around the string. Do not use single quotation marks (‘).\"\n        values={{ notice: <strong>Note:</strong> }}\n      />\n    </p>\n  </HelpSidebar>\n);\n\nSettingsSidebar.defaultProps = {\n  proctoredExamSettingsUrl: '',\n};\n\nSettingsSidebar.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n  proctoredExamSettingsUrl: PropTypes.string,\n};\n\nexport default injectIntl(SettingsSidebar);\n","/**\n * Validates advanced settings data by checking if the provided settings are correctly formatted JSON.\n * It performs validation on a given object of settings, detects incorrectly formatted settings,\n * and sets error fields accordingly using the setErrorFields function.\n *\n * @param {object} settingObj - The object containing the settings to validate.\n * @param {function} setErrorFields - The function to set error fields.\n * @returns {boolean} - `true` if the data is valid, otherwise `false`.\n */\nexport default function validateAdvancedSettingsData(settingObj, setErrorFields, setEditedSettings) {\n  const fieldsWithErrors = [];\n\n  const pushDataToErrorArray = (settingName) => {\n    fieldsWithErrors.push({ key: settingName, message: 'Incorrectly formatted JSON' });\n  };\n\n  Object.entries(settingObj).forEach(([settingName, settingValue]) => {\n    try {\n      JSON.parse(settingValue);\n    } catch (e) {\n      let targetSettingValue = settingValue;\n      const firstNonWhite = settingValue.substring(0, 1);\n      const isValid = !['{', '[', \"'\"].includes(firstNonWhite);\n\n      if (isValid) {\n        try {\n          targetSettingValue = `\"${ targetSettingValue.trim() }\"`;\n          JSON.parse(targetSettingValue);\n          setEditedSettings((prevEditedSettings) => ({\n            ...prevEditedSettings,\n            [settingName]: targetSettingValue,\n          }));\n        } catch (quotedE) { /* empty */ }\n      }\n\n      pushDataToErrorArray(settingName);\n    }\n  });\n\n  setErrorFields((prevState) => {\n    if (JSON.stringify(prevState) !== JSON.stringify(fieldsWithErrors)) {\n      return fieldsWithErrors;\n    }\n    return prevState;\n  });\n\n  return fieldsWithErrors.length === 0;\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headingTitle: {\n    id: 'course-authoring.advanced-settings.heading.title',\n    defaultMessage: 'Advanced settings',\n  },\n  headingSubtitle: {\n    id: 'course-authoring.advanced-settings.heading.subtitle',\n    defaultMessage: 'Settings',\n  },\n  policy: {\n    id: 'course-authoring.advanced-settings.policies.title',\n    defaultMessage: 'Manual policy definition',\n  },\n  alertWarning: {\n    id: 'course-authoring.advanced-settings.alert.warning',\n    defaultMessage: \"You've made some changes\",\n  },\n  alertWarningDescriptions: {\n    id: 'course-authoring.advanced-settings.alert.warning.descriptions',\n    defaultMessage: 'Your changes will not take effect until you save your progress. Take care with key and value formatting, as validation is not implemented.',\n  },\n  alertSuccess: {\n    id: 'course-authoring.advanced-settings.alert.success',\n    defaultMessage: 'Your policy changes have been saved.',\n  },\n  alertSuccessDescriptions: {\n    id: 'course-authoring.advanced-settings.alert.success.descriptions',\n    defaultMessage: 'No validation is performed on policy keys or value pairs. If you are having difficulties, check your formatting.',\n  },\n  alertProctoringError: {\n    id: 'course-authoring.advanced-settings.alert.proctoring.error',\n    defaultMessage: 'This course has protected exam setting that are incomplete or invalid.',\n  },\n  alertProctoringErrorDescriptions: {\n    id: 'course-authoring.advanced-settings.alert.proctoring.error.descriptions',\n    defaultMessage: 'You will be unable to make changes until the following setting are updated on the page below.',\n  },\n  buttonSaveText: {\n    id: 'course-authoring.advanced-settings.alert.button.save',\n    defaultMessage: 'Save changes',\n  },\n  buttonSavingText: {\n    id: 'course-authoring.advanced-settings.alert.button.saving',\n    defaultMessage: 'Saving',\n  },\n  buttonCancelText: {\n    id: 'course-authoring.advanced-settings.alert.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n  deprecatedButtonShowText: {\n    id: 'course-authoring.advanced-settings.deprecated.button.show',\n    defaultMessage: 'Show',\n  },\n  deprecatedButtonHideText: {\n    id: 'course-authoring.advanced-settings.deprecated.button.hide',\n    defaultMessage: 'Hide',\n  },\n  alertWarningAriaLabelledby: {\n    id: 'course-authoring.advanced-settings.alert.warning.aria.labelledby',\n    defaultMessage: 'notification-warning-title',\n  },\n  alertWarningAriaDescribedby: {\n    id: 'course-authoring.advanced-settings.alert.warning.aria.describedby',\n    defaultMessage: 'notification-warning-description',\n  },\n  alertSuccessAriaLabelledby: {\n    id: 'course-authoring.advanced-settings.alert.success.aria.labelledby',\n    defaultMessage: 'alert-confirmation-title',\n  },\n  alertSuccessAriaDescribedby: {\n    id: 'course-authoring.advanced-settings.alert.success.aria.describedby',\n    defaultMessage: 'alert-confirmation-description',\n  },\n  alertProctoringAriaLabelledby: {\n    id: 'course-authoring.advanced-settings.alert.proctoring.error.aria.labelledby',\n    defaultMessage: 'alert-danger-title',\n  },\n  alertProctoringDescribedby: {\n    id: 'course-authoring.advanced-settings.alert.proctoring.error.aria.describedby',\n    defaultMessage: 'alert-danger-description',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Icon } from '@edx/paragon';\nimport { Error } from '@edx/paragon/icons';\nimport { capitalize } from 'lodash';\n\nimport { transformKeysToCamelCase } from '../../utils';\n\nconst ModalErrorListItem = ({ settingName, settingsData }) => {\n  const { displayName } = settingsData[transformKeysToCamelCase(settingName)];\n  return (\n    <li className=\"modal-error-item\">\n      <Alert variant=\"danger\">\n        <h4 className=\"modal-error-item-title\">\n          <Icon src={Error} />{capitalize(displayName)}:\n        </h4>\n        <p className=\"m-0\">{settingName.message}</p>\n      </Alert>\n    </li>\n  );\n};\n\nModalErrorListItem.propTypes = {\n  settingName: PropTypes.shape({\n    key: PropTypes.string,\n    message: PropTypes.string,\n  }).isRequired,\n  settingsData: PropTypes.shape({}).isRequired,\n};\n\nexport default ModalErrorListItem;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  modalErrorTitle: {\n    id: 'course-authoring.advanced-settings.modal.error.title',\n    defaultMessage: 'Validation error while saving',\n  },\n  modalErrorButtonChangeManually: {\n    id: 'course-authoring.advanced-settings.modal.error.btn.change-manually',\n    defaultMessage: 'Change manually',\n  },\n  modalErrorButtonUndoChanges: {\n    id: 'course-authoring.advanced-settings.modal.error.btn.undo-changes',\n    defaultMessage: 'Undo changes',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ActionRow, AlertModal, Button } from '@edx/paragon';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport ModalErrorListItem from './ModalErrorListItem';\nimport messages from './messages';\n\nconst ModalError = ({\n  intl, isError, handleUndoChanges, showErrorModal, errorList, settingsData,\n}) => (\n  <AlertModal\n    title={intl.formatMessage(messages.modalErrorTitle)}\n    isOpen={isError}\n    variant=\"danger\"\n    footerNode={(\n      <ActionRow>\n        <Button\n          variant=\"tertiary\"\n          onClick={() => showErrorModal(!isError)}\n        >\n          {intl.formatMessage(messages.modalErrorButtonChangeManually)}\n        </Button>\n        <Button onClick={handleUndoChanges}>\n          {intl.formatMessage(messages.modalErrorButtonUndoChanges)}\n        </Button>\n      </ActionRow>\n    )}\n  >\n    <p>\n      <FormattedMessage\n        id=\"course-authoring.advanced-settings.modal.error.description\"\n        defaultMessage=\"There was {errorCounter} while trying to save the course settings in the database.\n            Please check the following validation feedbacks and reflect them in your course settings:\"\n        values={{ errorCounter: <strong>{errorList.length} validation error </strong> }}\n      />\n    </p>\n    <hr />\n    <ul className=\"p-0\">\n      {errorList.map((settingName) => (\n        <ModalErrorListItem\n          key={settingName.key}\n          settingName={settingName}\n          settingsData={settingsData}\n        />\n      ))}\n    </ul>\n  </AlertModal>\n);\n\nModalError.propTypes = {\n  intl: intlShape.isRequired,\n  isError: PropTypes.bool.isRequired,\n  handleUndoChanges: PropTypes.func.isRequired,\n  showErrorModal: PropTypes.func.isRequired,\n  errorList: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string,\n    message: PropTypes.string,\n  })).isRequired,\n  settingsData: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(ModalError);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Container, Button, Layout, StatefulButton, TransitionReplace,\n} from '@edx/paragon';\nimport { CheckCircle, Info, Warning } from '@edx/paragon/icons';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport Placeholder from '@edx/frontend-lib-content-components';\n\nimport AlertProctoringError from '../generic/AlertProctoringError';\nimport { useModel } from '../generic/model-store';\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport { parseArrayOrObjectValues } from '../utils';\nimport { RequestStatus } from '../data/constants';\nimport SubHeader from '../generic/sub-header/SubHeader';\nimport AlertMessage from '../generic/alert-message';\nimport { fetchCourseAppSettings, updateCourseAppSetting, fetchProctoringExamErrors } from './data/thunks';\nimport {\n  getCourseAppSettings, getSavingStatus, getProctoringExamErrors, getSendRequestErrors, getLoadingStatus,\n} from './data/selectors';\nimport SettingCard from './setting-card/SettingCard';\nimport SettingsSidebar from './settings-sidebar/SettingsSidebar';\nimport validateAdvancedSettingsData from './utils';\nimport messages from './messages';\nimport ModalError from './modal-error/ModalError';\nimport getPageHeadTitle from '../generic/utils';\n\nconst AdvancedSettings = ({ intl, courseId }) => {\n  const dispatch = useDispatch();\n  const [saveSettingsPrompt, showSaveSettingsPrompt] = useState(false);\n  const [showDeprecated, setShowDeprecated] = useState(false);\n  const [errorModal, showErrorModal] = useState(false);\n  const [editedSettings, setEditedSettings] = useState({});\n  const [errorFields, setErrorFields] = useState([]);\n  const [showSuccessAlert, setShowSuccessAlert] = useState(false);\n  const [isQueryPending, setIsQueryPending] = useState(false);\n  const [isEditableState, setIsEditableState] = useState(false);\n  const [hasInternetConnectionError, setInternetConnectionError] = useState(false);\n\n  const courseDetails = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(courseDetails?.name, intl.formatMessage(messages.headingTitle));\n\n  useEffect(() => {\n    dispatch(fetchCourseAppSettings(courseId));\n    dispatch(fetchProctoringExamErrors(courseId));\n  }, [courseId]);\n\n  const advancedSettingsData = useSelector(getCourseAppSettings);\n  const savingStatus = useSelector(getSavingStatus);\n  const proctoringExamErrors = useSelector(getProctoringExamErrors);\n  const settingsWithSendErrors = useSelector(getSendRequestErrors) || {};\n  const loadingSettingsStatus = useSelector(getLoadingStatus);\n\n  const isLoading = loadingSettingsStatus === RequestStatus.IN_PROGRESS;\n  const updateSettingsButtonState = {\n    labels: {\n      default: intl.formatMessage(messages.buttonSaveText),\n      pending: intl.formatMessage(messages.buttonSavingText),\n    },\n    disabledStates: ['pending'],\n  };\n  const {\n    proctoringErrors,\n    mfeProctoredExamSettingsUrl,\n  } = proctoringExamErrors;\n\n  useEffect(() => {\n    if (savingStatus === RequestStatus.SUCCESSFUL) {\n      setIsQueryPending(false);\n      setShowSuccessAlert(true);\n      setIsEditableState(false);\n      setTimeout(() => setShowSuccessAlert(false), 15000);\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n      showSaveSettingsPrompt(false);\n    } else if (savingStatus === RequestStatus.FAILED && !hasInternetConnectionError) {\n      setErrorFields(settingsWithSendErrors);\n      showErrorModal(true);\n    }\n  }, [savingStatus]);\n\n  if (isLoading) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n  }\n  if (loadingSettingsStatus === RequestStatus.DENIED) {\n    return (\n      <div className=\"row justify-contnt-center m-6\">\n        <Placeholder />\n      </div>\n    );\n  }\n\n  const handleResetSettingsValues = () => {\n    setIsEditableState(false);\n    showErrorModal(false);\n    setEditedSettings({});\n    showSaveSettingsPrompt(false);\n  };\n\n  const handleSettingBlur = () => {\n    validateAdvancedSettingsData(editedSettings, setErrorFields, setEditedSettings);\n  };\n\n  const handleUpdateAdvancedSettingsData = () => {\n    const isValid = validateAdvancedSettingsData(editedSettings, setErrorFields, setEditedSettings);\n    if (isValid) {\n      setIsQueryPending(true);\n    } else {\n      showSaveSettingsPrompt(false);\n      showErrorModal(!errorModal);\n    }\n  };\n\n  const handleInternetConnectionFailed = () => {\n    setInternetConnectionError(true);\n    showSaveSettingsPrompt(false);\n    setShowSuccessAlert(false);\n  };\n\n  const handleQueryProcessing = () => {\n    setShowSuccessAlert(false);\n    dispatch(updateCourseAppSetting(courseId, parseArrayOrObjectValues(editedSettings)));\n  };\n\n  const handleManuallyChangeClick = (setToState) => {\n    showErrorModal(setToState);\n    showSaveSettingsPrompt(true);\n  };\n\n  return (\n    <>\n      <Container size=\"xl\" className=\"px-4\">\n        <div className=\"setting-header mt-5\">\n          {(proctoringErrors?.length > 0) && (\n            <AlertProctoringError\n              icon={Info}\n              proctoringErrorsData={proctoringErrors}\n              aria-hidden=\"true\"\n              aria-labelledby={intl.formatMessage(messages.alertProctoringAriaLabelledby)}\n              aria-describedby={intl.formatMessage(messages.alertProctoringDescribedby)}\n            />\n          )}\n          <TransitionReplace>\n            {showSuccessAlert ? (\n              <AlertMessage\n                key={intl.formatMessage(messages.alertSuccessAriaLabelledby)}\n                show={showSuccessAlert}\n                variant=\"success\"\n                icon={CheckCircle}\n                title={intl.formatMessage(messages.alertSuccess)}\n                description={intl.formatMessage(messages.alertSuccessDescriptions)}\n                aria-hidden=\"true\"\n                aria-labelledby={intl.formatMessage(messages.alertSuccessAriaLabelledby)}\n                aria-describedby={intl.formatMessage(messages.alertSuccessAriaDescribedby)}\n              />\n            ) : null}\n          </TransitionReplace>\n        </div>\n        <SubHeader\n          subtitle={intl.formatMessage(messages.headingSubtitle)}\n          title={intl.formatMessage(messages.headingTitle)}\n          contentTitle={intl.formatMessage(messages.policy)}\n        />\n        <section className=\"setting-items mb-4\">\n          <Layout\n            lg={[{ span: 9 }, { span: 3 }]}\n            md={[{ span: 9 }, { span: 3 }]}\n            sm={[{ span: 9 }, { span: 3 }]}\n            xs={[{ span: 9 }, { span: 3 }]}\n            xl={[{ span: 9 }, { span: 3 }]}\n          >\n            <Layout.Element>\n              <article>\n                <div>\n                  <section className=\"setting-items-policies\">\n                    <div className=\"small\">\n                      <FormattedMessage\n                        id=\"course-authoring.advanced-settings.policies.description\"\n                        defaultMessage=\"{notice} Do not modify these policies unless you are familiar with their purpose.\"\n                        values={{ notice: <strong>Warning:  </strong> }}\n                      />\n                    </div>\n                    <div className=\"setting-items-deprecated-setting\">\n                      <Button\n                        variant={showDeprecated ? 'outline-brand' : 'tertiary'}\n                        onClick={() => setShowDeprecated(!showDeprecated)}\n                        size=\"sm\"\n                      >\n                        <FormattedMessage\n                          id=\"course-authoring.advanced-settings.deprecated.button.text\"\n                          defaultMessage=\"{visibility} deprecated settings\"\n                          values={{\n                            visibility:\n                                    showDeprecated ? intl.formatMessage(messages.deprecatedButtonHideText)\n                                      : intl.formatMessage(messages.deprecatedButtonShowText),\n                          }}\n                        />\n                      </Button>\n                    </div>\n                    <ul className=\"setting-items-list p-0\">\n                      {Object.keys(advancedSettingsData).map((settingName) => {\n                        const settingData = advancedSettingsData[settingName];\n                        if (settingData.deprecated && !showDeprecated) {\n                          return null;\n                        }\n                        return (\n                          <SettingCard\n                            key={settingName}\n                            settingData={settingData}\n                            name={settingName}\n                            showSaveSettingsPrompt={showSaveSettingsPrompt}\n                            saveSettingsPrompt={saveSettingsPrompt}\n                            setEdited={setEditedSettings}\n                            handleBlur={handleSettingBlur}\n                            isEditableState={isEditableState}\n                            setIsEditableState={setIsEditableState}\n                          />\n                        );\n                      })}\n                    </ul>\n                  </section>\n                </div>\n              </article>\n            </Layout.Element>\n            <Layout.Element>\n              <SettingsSidebar\n                courseId={courseId}\n                proctoredExamSettingsUrl={mfeProctoredExamSettingsUrl}\n              />\n            </Layout.Element>\n          </Layout>\n        </section>\n      </Container>\n      <div className=\"alert-toast\">\n        {isQueryPending && (\n          <InternetConnectionAlert\n            isFailed={savingStatus === RequestStatus.FAILED}\n            isQueryPending={isQueryPending}\n            onQueryProcessing={handleQueryProcessing}\n            onInternetConnectionFailed={handleInternetConnectionFailed}\n          />\n        )}\n        <AlertMessage\n          show={saveSettingsPrompt}\n          aria-hidden={saveSettingsPrompt}\n          aria-labelledby={intl.formatMessage(messages.alertWarningAriaLabelledby)}\n          aria-describedby={intl.formatMessage(messages.alertWarningAriaDescribedby)}\n          role=\"dialog\"\n          actions={[\n            !isQueryPending && (\n              <Button variant=\"tertiary\" onClick={handleResetSettingsValues}>\n                {intl.formatMessage(messages.buttonCancelText)}\n              </Button>\n            ),\n            <StatefulButton\n              key=\"statefulBtn\"\n              onClick={handleUpdateAdvancedSettingsData}\n              state={isQueryPending ? RequestStatus.PENDING : 'default'}\n              {...updateSettingsButtonState}\n            />,\n          ].filter(Boolean)}\n          variant=\"warning\"\n          icon={Warning}\n          title={intl.formatMessage(messages.alertWarning)}\n          description={intl.formatMessage(messages.alertWarningDescriptions)}\n        />\n      </div>\n      <ModalError\n        isError={errorModal}\n        showErrorModal={(setToState) => handleManuallyChangeClick(setToState)}\n        handleUndoChanges={handleResetSettingsValues}\n        settingsData={advancedSettingsData}\n        errorList={errorFields.length > 0 ? errorFields : []}\n      />\n    </>\n  );\n};\n\nAdvancedSettings.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(AdvancedSettings);\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { convertObjectToSnakeCase } from '../../utils';\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getCourseDetailsApiUrl = (courseId) => `${getApiBaseUrl()}/api/contentstore/v1/course_details/${courseId}`;\nexport const getCourseSettingsApiUrl = (courseId) => `${getApiBaseUrl()}/api/contentstore/v1/course_settings/${courseId}`;\nexport const getUploadAssetsUrl = (courseId) => `${getApiBaseUrl()}/assets/${courseId}/`;\n\n/**\n * Get course details.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getCourseDetails(courseId) {\n  const { data } = await getAuthenticatedHttpClient().get(\n    `${getCourseDetailsApiUrl(courseId)}`,\n  );\n  return camelCaseObject(data);\n}\n\n/**\n * Update course details.\n * @param {string} courseId\n * @param {object} details\n * @returns {Promise<Object>}\n */\nexport async function updateCourseDetails(courseId, details) {\n  const { data } = await getAuthenticatedHttpClient().put(\n    `${getCourseDetailsApiUrl(courseId)}`,\n    convertObjectToSnakeCase(details, true),\n  );\n  return camelCaseObject(data);\n}\n\n/**\n * Get course settings.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getCourseSettings(courseId) {\n  const { data } = await getAuthenticatedHttpClient().get(\n    `${getCourseSettingsApiUrl(courseId)}`,\n  );\n  return camelCaseObject(data);\n}\n","import { RequestStatus } from '../../data/constants';\nimport {\n  getCourseDetails,\n  updateCourseDetails,\n  getCourseSettings,\n} from './api';\nimport {\n  updateSavingStatus,\n  updateLoadingDetailsStatus,\n  updateLoadingSettingsStatus,\n  fetchCourseDetailsSuccess,\n  updateCourseDetailsSuccess,\n  fetchCourseSettingsSuccess,\n} from './slice';\n\nexport function fetchCourseDetailsQuery(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingDetailsStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const detailsValues = await getCourseDetails(courseId);\n      dispatch(fetchCourseDetailsSuccess(detailsValues));\n      dispatch(updateLoadingDetailsStatus({ status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateLoadingDetailsStatus({ courseId, status: RequestStatus.DENIED }));\n      } else {\n        dispatch(updateLoadingDetailsStatus({ status: RequestStatus.FAILED }));\n      }\n    }\n  };\n}\n\nexport function updateCourseDetailsQuery(courseId, details) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const detailsValues = await updateCourseDetails(courseId, details);\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      dispatch(updateCourseDetailsSuccess(detailsValues));\n      return true;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function fetchCourseSettingsQuery(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingSettingsStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const settingsValues = await getCourseSettings(courseId);\n      dispatch(fetchCourseSettingsSuccess(settingsValues));\n      dispatch(updateLoadingSettingsStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      if (error.response && error.response.status === 403) {\n        dispatch(updateLoadingSettingsStatus({ courseId, status: RequestStatus.DENIED }));\n      } else {\n        dispatch(updateLoadingSettingsStatus({ status: RequestStatus.FAILED }));\n      }\n      return false;\n    }\n  };\n}\n","export const getLoadingDetailsStatus = (state) => state.scheduleAndDetails.loadingDetailsStatus;\nexport const getLoadingSettingsStatus = (state) => state.scheduleAndDetails.loadingSettingsStatus;\nexport const getSavingStatus = (state) => state.scheduleAndDetails.savingStatus;\nexport const getCourseDetails = state => state.scheduleAndDetails.courseDetails;\nexport const getCourseSettings = (state) => state.scheduleAndDetails.courseSettings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SectionSubHeader = ({ title, description }) => (\n  <header className=\"section-sub-header\">\n    <h2 className=\"lead\">{title}</h2>\n    <span className=\"small text-gray-700\">{description}</span>\n  </header>\n);\n\nSectionSubHeader.defaultProps = {\n  description: '',\n};\n\nSectionSubHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n};\n\nexport default SectionSubHeader;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  basicTitle: {\n    id: 'course-authoring.schedule.basic.title',\n    defaultMessage: 'Basic information',\n  },\n  basicDescription: {\n    id: 'course-authoring.schedule.basic.description',\n    defaultMessage: 'The nuts and bolts of this course',\n  },\n  basicEmailIcon: {\n    id: 'course-authoring.schedule.basic.email-icon',\n    defaultMessage: 'Invite your students email icon',\n  },\n  courseOrganization: {\n    id: 'course-authoring.schedule.basic.organization',\n    defaultMessage: 'Organization',\n  },\n  courseNumber: {\n    id: 'course-authoring.schedule.basic.course-number',\n    defaultMessage: 'Course number',\n  },\n  courseRun: {\n    id: 'course-authoring.schedule.basic.course-run',\n    defaultMessage: 'Course run',\n  },\n  basicBannerTitle: {\n    id: 'course-authoring.schedule.basic.banner.title',\n    defaultMessage: 'Promoting your course with edX',\n  },\n  basicBannerText: {\n    id: 'course-authoring.schedule.basic.banner.text',\n    defaultMessage: 'Your course summary page will not be viewable until your course has been announced. To provide content for the page and preview it, follow the instructions provided by your Program Manager. Please note that changes here may take up to a business day to appear on your course summary page.',\n  },\n  basicPromotionButton: {\n    id: 'course-authoring.schedule.basic.promotion.button',\n    defaultMessage: 'Invite your students',\n  },\n});\n\nexport default messages;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport {\n  PageBanner, Button, Card, MailtoLink, Hyperlink,\n} from '@edx/paragon';\nimport { Email as EmailIcon } from '@edx/paragon/icons';\n\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport { INVITE_STUDENTS_LINK_ID } from './constants';\nimport messages from './messages';\n\nconst BasicSection = ({\n  org,\n  courseNumber,\n  run,\n  lmsLinkForAboutPage,\n  marketingEnabled,\n  courseDisplayName,\n  platformName,\n}) => {\n  const intl = useIntl();\n  const [showPageBanner, setShowPageBanner] = useState(true);\n  const emailSubject = intl.formatMessage(\n    {\n      id: 'course-authoring.schedule.basic.email.subject',\n      defaultMessage: 'Enroll in {courseDisplayName}.',\n    },\n    { courseDisplayName },\n  );\n\n  const emailBody = intl.formatMessage(\n    {\n      id: 'course-authoring.schedule.basic.email.body',\n      defaultMessage:\n        'The course {courseDisplayName}, provided by {platformName}, is open for enrollment. Please navigate to this course at {lmsLinkForAboutPage} to enroll.',\n    },\n    {\n      courseDisplayName,\n      platformName,\n      lmsLinkForAboutPage,\n    },\n  );\n\n  const promotionTitle = (\n    <FormattedMessage\n      id=\"course-authoring.schedule.basic.promotion.title\"\n      defaultMessage=\"Course summary page {smallText}\"\n      values={{\n        smallText: <small>(for student enrollment and access)</small>,\n      }}\n    />\n  );\n\n  const courseBasicInfo = [\n    {\n      label: `${intl.formatMessage(messages.courseOrganization)}`,\n      prefix: 'basic-organization',\n      value: org,\n    },\n    {\n      label: `${intl.formatMessage(messages.courseNumber)}`,\n      prefix: 'basic-course-number',\n      value: courseNumber,\n    },\n    {\n      label: `${intl.formatMessage(messages.courseRun)}`,\n      prefix: 'basic-course-run',\n      value: run,\n    },\n  ];\n\n  const renderBasicInfo = (info) => (\n    <li key={info.prefix}>\n      <h4 className=\"mb-0 text-black\">{info.label}</h4>\n      <span className=\"small text-black\">{info.value}</span>\n    </li>\n  );\n\n  const renderPageBanner = () => (\n    <PageBanner\n      show={showPageBanner}\n      dismissible\n      onDismiss={() => setShowPageBanner(false)}\n      className=\"align-items-start\"\n    >\n      <h4 className=\"text-black\">{intl.formatMessage(messages.basicBannerTitle)}</h4>\n      <span className=\"text text-gray-700 text-left\">\n        {intl.formatMessage(messages.basicBannerText)}\n      </span>\n    </PageBanner>\n  );\n\n  const renderCoursePromotion = () => (\n    <Card>\n      <Card.Header\n        className=\"h4 px-3 text-gray-500\"\n        title={promotionTitle}\n        size=\"sm\"\n      />\n      <Card.Section className=\"px-3 py-1\">\n        <Hyperlink\n          destination={lmsLinkForAboutPage}\n          className=\"lead info-500 small text-decoration-none\"\n          target=\"_blank\"\n          showLaunchIcon={false}\n        >\n          {lmsLinkForAboutPage}\n        </Hyperlink>\n      </Card.Section>\n      <Card.Divider />\n      <Card.Footer className=\"p-3 justify-content-start\">\n        <MailtoLink\n          to={process.env.INVITE_STUDENTS_EMAIL_TO}\n          subject={emailSubject}\n          body={emailBody}\n          data-testid={INVITE_STUDENTS_LINK_ID}\n        >\n          <Button variant=\"outline-primary\" iconBefore={EmailIcon} size=\"sm\">\n            {intl.formatMessage(messages.basicPromotionButton)}\n          </Button>\n        </MailtoLink>\n      </Card.Footer>\n    </Card>\n  );\n\n  return (\n    <section className=\"section-container basic-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.basicTitle)}\n        description={intl.formatMessage(messages.basicDescription)}\n      />\n      <ul className=\"basic-info-list\">\n        {courseBasicInfo.map(renderBasicInfo)}\n      </ul>\n      {marketingEnabled ? renderPageBanner() : renderCoursePromotion()}\n    </section>\n  );\n};\n\nBasicSection.propTypes = {\n  org: PropTypes.string.isRequired,\n  courseNumber: PropTypes.string.isRequired,\n  run: PropTypes.string.isRequired,\n  lmsLinkForAboutPage: PropTypes.string.isRequired,\n  marketingEnabled: PropTypes.bool.isRequired,\n  courseDisplayName: PropTypes.string.isRequired,\n  platformName: PropTypes.string.isRequired,\n};\n\nexport default BasicSection;\n","/* eslint-disable-next-line import/prefer-default-export */\nexport const INVITE_STUDENTS_LINK_ID = 'invite-students-link';\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  creditTitle: {\n    id: 'course-authoring.schedule.credit.title',\n    defaultMessage: 'Course credit requirements',\n  },\n  creditDescription: {\n    id: 'course-authoring.schedule.credit.description',\n    defaultMessage: 'Steps required to earn course credit',\n  },\n  creditHelp: {\n    id: 'course-authoring.schedule.credit.help',\n    defaultMessage:\n      'A requirement appears in this list when you publish the unit that contains the requirement.',\n  },\n  creditMinimumGrade: {\n    id: 'course-authoring.schedule.credit.minimum-grade',\n    defaultMessage: 'Minimum grade',\n  },\n  creditProctoredExam: {\n    id: 'course-authoring.schedule.credit.proctored-exam',\n    defaultMessage: 'Successful proctored exam',\n  },\n  creditVerification: {\n    id: 'course-authoring.schedule.credit.verification',\n    defaultMessage: 'ID Verification',\n  },\n  creditNotFound: {\n    id: 'course-authoring.schedule.credit.not-found',\n    defaultMessage: 'No credit requirements found.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport messages from './messages';\n\nconst CreditSection = ({ creditRequirements }) => {\n  const intl = useIntl();\n\n  const CREDIT_REQUIREMENTS_TYPES = {\n    grade: intl.formatMessage(messages.creditMinimumGrade),\n    proctoredExam: intl.formatMessage(messages.creditProctoredExam),\n    reverification: intl.formatMessage(messages.creditVerification),\n  };\n\n  const renderRequirementValue = (requirementValue, key) => {\n    const displayValue = key === 'grade'\n      ? `${(parseFloat(requirementValue.criteria.minGrade) || 0) * 100}%`\n      : requirementValue.displayName;\n    return (\n      <span className=\"small text-black\" key={requirementValue.name}>\n        {displayValue}\n      </span>\n    );\n  };\n\n  const renderCreditRequirements = (requirements) => {\n    const creditRequirementsKeys = Object.keys(requirements);\n\n    if (creditRequirementsKeys.length) {\n      return (\n        <ul className=\"credit-info-list\">\n          {creditRequirementsKeys.map((key) => (\n            <li key={key}>\n              <h4 className=\"mb-0 text-black\">\n                {CREDIT_REQUIREMENTS_TYPES[key]}\n              </h4>\n              <div className=\"d-flex flex-column\">\n                {creditRequirements[key].map((value) => renderRequirementValue(value, key))}\n              </div>\n            </li>\n          ))}\n        </ul>\n      );\n    }\n    return <p>{intl.formatMessage(messages.creditNotFound)}</p>;\n  };\n\n  return (\n    <section className=\"section-container credit-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.creditTitle)}\n        description={intl.formatMessage(messages.creditDescription)}\n      />\n      <p className=\"credit-help-text\">{intl.formatMessage(messages.creditHelp)}</p>\n      {renderCreditRequirements(creditRequirements)}\n    </section>\n  );\n};\n\nconst creditRequirementsNamespace = PropTypes.shape({\n  name: PropTypes.string,\n  display_name: PropTypes.string,\n  criteria: PropTypes.shape({\n    min_grade: PropTypes.number,\n  }),\n});\n\nconst creditRequirementsPropTypes = PropTypes.shape({\n  proctoredExam: PropTypes.arrayOf(creditRequirementsNamespace),\n  grade: PropTypes.arrayOf(creditRequirementsNamespace),\n  reverification: PropTypes.arrayOf(creditRequirementsNamespace),\n});\n\nCreditSection.defaultProps = {\n  creditRequirements: undefined,\n};\n\nCreditSection.propTypes = {\n  creditRequirements: creditRequirementsPropTypes,\n};\n\nexport default CreditSection;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  detailsTitle: {\n    id: 'course-authoring.schedule-section.details.title',\n    defaultMessage: 'Course details',\n  },\n  detailsDescription: {\n    id: 'course-authoring.schedule-section.details.description',\n    defaultMessage: 'Provide useful information about your course',\n  },\n  dropdownLabel: {\n    id: 'course-authoring.schedule-section.details.dropdown.label',\n    defaultMessage: 'Course language',\n  },\n  dropdownHelpText: {\n    id: 'course-authoring.schedule-section.details.dropdown.help-text',\n    defaultMessage: 'Identify the course language here. This is used to assist users find courses that are taught in a specific language. It is also used to localize the \\'From:\\' field in bulk emails.',\n  },\n  dropdownEmpty: {\n    id: 'course-authoring.schedule-section.details.dropdown.empty',\n    defaultMessage: 'Select language',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Form, Dropdown } from '@edx/paragon';\n\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport messages from './messages';\n\nconst DetailsSection = ({\n  language, languageOptions, onChange,\n}) => {\n  const intl = useIntl();\n  const formattedLanguage = () => {\n    const result = languageOptions.find((arr) => arr[0] === language);\n    return result ? result[1] : intl.formatMessage(messages.dropdownEmpty);\n  };\n\n  return (\n    <section className=\"section-container details-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.detailsTitle)}\n        description={intl.formatMessage(messages.detailsDescription)}\n      />\n      <Form.Group className=\"form-group-custom dropdown-language\">\n        <Form.Label>{intl.formatMessage(messages.dropdownLabel)}</Form.Label>\n        <Dropdown className=\"bg-white\">\n          <Dropdown.Toggle variant=\"outline-primary\" id=\"languageDropdown\">\n            {formattedLanguage()}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            {languageOptions.map((option) => (\n              <Dropdown.Item\n                key={option[0]}\n                onClick={() => onChange(option[0], 'language')}\n              >\n                {option[1]}\n              </Dropdown.Item>\n            ))}\n          </Dropdown.Menu>\n        </Dropdown>\n        <Form.Control.Feedback>\n          {intl.formatMessage(messages.dropdownHelpText)}\n        </Form.Control.Feedback>\n      </Form.Group>\n    </section>\n  );\n};\n\nDetailsSection.defaultProps = {\n  language: '',\n};\n\nDetailsSection.propTypes = {\n  language: PropTypes.string,\n  languageOptions: PropTypes.arrayOf(\n    PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  ).isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default DetailsSection;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  uploadImageHelpText: {\n    id: 'course-authoring.schedule-section.introducing.upload-image.help-text',\n    defaultMessage: 'Please provide a valid path and name to your {identifierFieldText} (Note: only JPEG or PNG format supported)',\n  },\n  uploadImageFilesAndUploads: {\n    id: 'course-authoring.schedule-section.introducing.upload-image.file-and-uploads',\n    defaultMessage: 'files and uploads',\n  },\n  uploadImageDropzoneText: {\n    id: 'course-authoring.schedule-section.introducing.upload-image.dropzone-text',\n    defaultMessage: 'Drag and drop your {identifierFieldText} here or click to upload.',\n  },\n  uploadImageDropzoneAlt: {\n    id: 'course-authoring.schedule-section.introducing.upload-image.dropzone-alt',\n    defaultMessage: 'Uploaded image for course',\n  },\n  uploadImageEmpty: {\n    id: 'course-authoring.schedule-section.introducing.upload-image.empty',\n    defaultMessage: 'Your course currently does not have an image. Please upload one (JPEG or PNG format, and minimum suggested dimensions are 375px wide by 200px tall)',\n  },\n  uploadImageIconAlt: {\n    id: 'course-authoring.schedule-section.introducing.upload-image.icon-alt',\n    defaultMessage: 'File upload icon',\n  },\n  uploadImageBodyFilled: {\n    id: 'course-authoring.schedule-section.introducing.upload-image.manage',\n    defaultMessage: 'You can manage this image along with all of your other {hyperlink}',\n  },\n  uploadImageInputPlaceholder: {\n    id: 'course-authoring.schedule-section.introducing.upload-image.input.placeholder',\n    defaultMessage: 'Your {identifierFieldText} URL',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { useParams } from 'react-router-dom';\nimport { FormattedMessage, useIntl } from '@edx/frontend-platform/i18n';\nimport { FileUpload as FileUploadIcon } from '@edx/paragon/icons';\nimport { getConfig } from '@edx/frontend-platform';\nimport {\n  Form,\n  Dropzone,\n  Image,\n  Hyperlink,\n  Card,\n  Icon,\n  IconButton,\n} from '@edx/paragon';\n\nimport { uploadAssets } from './data/api';\nimport messages from './messages';\n\nconst CourseUploadImage = ({\n  label,\n  customHelpText,\n  assetImagePath,\n  imageNameField,\n  assetImageField,\n  identifierFieldText,\n  showImageBodyText,\n  customInputPlaceholder,\n  onChange,\n}) => {\n  const { courseId } = useParams();\n  const intl = useIntl();\n  const imageAbsolutePath = new URL(assetImagePath, getConfig().LMS_BASE_URL);\n  const assetsUrl = new URL(`/assets/${courseId}`, getConfig().STUDIO_BASE_URL);\n\n  const handleChangeImageAsset = (path) => {\n    const assetPath = _.last(path.split('/'));\n    // If image path is entered directly, we need to strip the asset prefix\n    const imageName = _.last(assetPath.split('block@'));\n    onChange(path, assetImageField);\n    if (imageNameField) {\n      onChange(imageName, imageNameField);\n    }\n  };\n\n  const handleProcessUpload = async ({ fileData, handleError }) => {\n    try {\n      const response = await uploadAssets(courseId, fileData);\n      const url = response?.asset?.url;\n      if (url) {\n        handleChangeImageAsset(url);\n      }\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const inputComponent = assetImagePath ? (\n    <div className=\"image-preview\">\n      <Image\n        src={imageAbsolutePath.href}\n        alt={intl.formatMessage(messages.uploadImageDropzoneAlt)}\n        fluid\n      />\n    </div>\n  ) : (\n    <>\n      <IconButton\n        isActive\n        src={FileUploadIcon}\n        iconAs={Icon}\n        variant=\"secondary\"\n        alt={intl.formatMessage(messages.uploadImageDropzoneAlt)}\n      />\n      <p>\n        {intl.formatMessage(messages.uploadImageDropzoneText, {\n          identifierFieldText,\n        })}\n      </p>\n    </>\n  );\n\n  const cardImageTextBody = assetImagePath ? (\n    <span className=\"x-small text-gray-700\">\n      <FormattedMessage\n        {...messages.uploadImageBodyFilled}\n        values={{\n          hyperlink: (\n            <Hyperlink\n              destination={assetsUrl.href}\n              target=\"_blank\"\n              showLaunchIcon={false}\n            >\n              {intl.formatMessage(messages.uploadImageFilesAndUploads)}\n            </Hyperlink>\n          ),\n        }}\n      />\n    </span>\n  ) : (\n    <span className=\"x-small text-gray-700\">\n      {intl.formatMessage(messages.uploadImageEmpty)}\n    </span>\n  );\n\n  return (\n    <Form.Group className=\"form-group-custom w-100\">\n      <Form.Label>{label}</Form.Label>\n      <Card>\n        <Card.Body className=\"image-body\">\n          <Dropzone\n            onProcessUpload={handleProcessUpload}\n            inputComponent={inputComponent}\n            accept={{\n              'image/*': ['.png', '.jpeg'],\n            }}\n          />\n          {showImageBodyText && cardImageTextBody}\n        </Card.Body>\n        <Card.Divider />\n        <Card.Footer className=\"p-2.5\">\n          <Form.Control\n            value={assetImagePath}\n            onChange={(e) => handleChangeImageAsset(e.target.value)}\n            placeholder={\n              customInputPlaceholder\n              || intl.formatMessage(messages.uploadImageInputPlaceholder, {\n                identifierFieldText,\n              })\n            }\n          />\n        </Card.Footer>\n      </Card>\n      <Form.Control.Feedback>\n        {customHelpText\n          || intl.formatMessage(messages.uploadImageHelpText, {\n            identifierFieldText,\n          })}\n      </Form.Control.Feedback>\n    </Form.Group>\n  );\n};\n\nCourseUploadImage.defaultProps = {\n  assetImagePath: '',\n  customHelpText: '',\n  imageNameField: '',\n  assetImageField: '',\n  showImageBodyText: false,\n  identifierFieldText: '',\n  customInputPlaceholder: '',\n};\n\nCourseUploadImage.propTypes = {\n  label: PropTypes.string.isRequired,\n  assetImagePath: PropTypes.string,\n  customHelpText: PropTypes.string,\n  imageNameField: PropTypes.string,\n  assetImageField: PropTypes.string,\n  showImageBodyText: PropTypes.bool,\n  identifierFieldText: PropTypes.string,\n  customInputPlaceholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default CourseUploadImage;\n","import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nexport const getUploadAssetsUrl = (courseId) => new URL(\n  `/assets/${courseId}/`,\n  getConfig().STUDIO_BASE_URL,\n);\n\n/**\n * Upload assets.\n * @param {string} courseId\n * @param {binary} formData\n * @returns {Promise<Object>}\n */\nexport async function uploadAssets(courseId, fileData) {\n  const { data } = await getAuthenticatedHttpClient().post(\n    `${getUploadAssetsUrl(courseId).href}`,\n    fileData,\n  );\n  return camelCaseObject(data);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { getConfig } from '@edx/frontend-platform';\nimport {\n  prepareEditorRef,\n  TinyMceWidget,\n} from '@edx/frontend-lib-content-components';\n\nimport { DEFAULT_EMPTY_WYSIWYG_VALUE } from '../constants';\n\nconst store = createStore(() => ({}));\n\nexport const SUPPORTED_TEXT_EDITORS = {\n  text: 'text',\n  expandable: 'expandable',\n};\n\nconst mapStateToProps = () => ({\n  assets: {},\n  lmsEndpointUrl: getConfig().LMS_BASE_URL,\n  studioEndpointUrl: getConfig().STUDIO_BASE_URL,\n  isLibrary: true,\n  onEditorChange: () => ({}),\n});\n\nconst Editor = connect(mapStateToProps)(TinyMceWidget);\n\nexport const WysiwygEditor = ({\n  initialValue, editorType, onChange, minHeight,\n}) => {\n  const { editorRef, refReady, setEditorRef } = prepareEditorRef();\n\n  const isEquivalentCodeExtraSpaces = (first, second) => {\n    // Utils allows to compare code extra spaces\n    const removeWhitespace = (str) => str.replace(/\\s/g, '');\n    return removeWhitespace(first) === removeWhitespace(second);\n  };\n\n  const isEquivalentCodeQuotes = (first, second) => {\n    // Utils allows to compare code with single quotes and double quotes\n    const normalizeQuotes = (section) => section.replace(/'/g, '\"');\n    return normalizeQuotes(first) === normalizeQuotes(second);\n  };\n\n  // default initial string returned onEditorChange if empty input\n  const needToChange = (value) => !isEquivalentCodeQuotes(initialValue, value)\n    && !isEquivalentCodeExtraSpaces(initialValue, value)\n    && (initialValue !== DEFAULT_EMPTY_WYSIWYG_VALUE || value !== '');\n\n  const handleUpdate = (value, editor) => {\n    // With bookmarks keep the current cursor position at the end of the line\n    // and it inserts new content only at the end of the line.\n    const bm = editor.selection.getBookmark();\n    const existingContent = editor.getContent({ format: 'raw' });\n    if (needToChange(value)) { onChange(value); }\n    editor.setContent(existingContent);\n    editor.selection.moveToBookmark(bm);\n  };\n\n  if (!refReady) {\n    return null;\n  }\n\n  return (\n    <Provider store={store}>\n      <Editor\n        textValue={initialValue}\n        editorRef={editorRef}\n        editorType={editorType}\n        initialValue={initialValue}\n        minHeight={minHeight}\n        editorContentHtml={initialValue}\n        setEditorRef={setEditorRef}\n        onChange={handleUpdate}\n        initializeEditor={() => ({})}\n      />\n    </Provider>\n  );\n};\n\nWysiwygEditor.defaultProps = {\n  initialValue: '',\n  editorType: SUPPORTED_TEXT_EDITORS.text,\n  minHeight: 200,\n};\n\nWysiwygEditor.propTypes = {\n  initialValue: PropTypes.string,\n  editorType: PropTypes.oneOf(Object.values(SUPPORTED_TEXT_EDITORS)),\n  onChange: PropTypes.func.isRequired,\n  minHeight: PropTypes.number,\n};\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  courseIntroductionVideoLabel: {\n    id: 'course-authoring.schedule-section.introducing.introduction-video.label',\n    defaultMessage: 'Course introduction video',\n  },\n  courseIntroductionVideoDelete: {\n    id: 'course-authoring.schedule-section.introducing.introduction-video.delete',\n    defaultMessage: 'Delete current video',\n  },\n  courseIntroductionVideoHelpText: {\n    id: 'course-authoring.schedule-section.introducing.introduction-video.help-text',\n    defaultMessage: 'Enter your YouTube video\\'s ID (along with any restriction parameters)',\n  },\n  courseIntroductionVideoPlaceholder: {\n    id: 'course-authoring.schedule-section.introducing.introduction-video.placeholder',\n    defaultMessage: 'YouTube video ID',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Card } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\n\nconst IntroductionVideo = ({ intl, introVideo, onChange }) => {\n  const embedVideoUrl = introVideo\n    ? `//www.youtube.com/embed/${introVideo}`\n    : '';\n\n  return (\n    <Form.Group className=\"form-group-custom\">\n      <Form.Label>\n        {intl.formatMessage(messages.courseIntroductionVideoLabel)}\n      </Form.Label>\n      <Card>\n        <Card.Body className=\"embed-video-container\">\n          <div className=\"introduction-video\">\n            <iframe\n              title={intl.formatMessage(messages.courseIntroductionVideoLabel)}\n              width=\"618\"\n              height=\"350\"\n              src={embedVideoUrl}\n              frameBorder=\"0\"\n              allowFullScreen\n            />\n          </div>\n        </Card.Body>\n        <Card.Divider />\n        <Card.Footer className=\"p-2.5\">\n          <Form.Control\n            value={introVideo || ''}\n            placeholder={intl.formatMessage(messages.courseIntroductionVideoPlaceholder)}\n            onChange={(e) => onChange(e.target.value, 'introVideo')}\n          />\n          <Button\n            variant=\"outline-primary\"\n            onClick={() => onChange('', 'introVideo')}\n            disabled={!introVideo}\n          >\n            {intl.formatMessage(messages.courseIntroductionVideoDelete)}\n          </Button>\n        </Card.Footer>\n      </Card>\n      <Form.Control.Feedback>\n        {intl.formatMessage(messages.courseIntroductionVideoHelpText)}\n      </Form.Control.Feedback>\n    </Form.Group>\n  );\n};\n\nIntroductionVideo.defaultProps = {\n  introVideo: '',\n};\n\nIntroductionVideo.propTypes = {\n  intl: intlShape.isRequired,\n  introVideo: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(IntroductionVideo);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  extendedTitleLabel: {\n    id: 'course-authoring.schedule-section.introducing.title.label',\n    defaultMessage: 'Course title',\n  },\n  extendedTitleHelpText: {\n    id: 'course-authoring.schedule-section.introducing.title.help-text',\n    defaultMessage: 'Displayed as title on the course details page. Limit to 50 characters.',\n  },\n  extendedTitleAriaLabel: {\n    id: 'course-authoring.schedule-section.introducing.title.aria-label',\n    defaultMessage: 'Show course title',\n  },\n  extendedSubtitleLabel: {\n    id: 'course-authoring.schedule-section.introducing.subtitle.label',\n    defaultMessage: 'Course subtitle',\n  },\n  extendedSubtitleHelpText: {\n    id: 'course-authoring.schedule-section.introducing.subtitle.help-text',\n    defaultMessage: 'Displayed as subtitle on the course details page. Limit to 150 characters.',\n  },\n  extendedSubtitleAriaLabel: {\n    id: 'course-authoring.schedule-section.introducing.subtitle.aria-label',\n    defaultMessage: 'Show course subtitle',\n  },\n  extendedDurationLabel: {\n    id: 'course-authoring.schedule-section.introducing.duration.label',\n    defaultMessage: 'Course duration',\n  },\n  extendedDurationHelpText: {\n    id: 'course-authoring.schedule-section.introducing.duration.help-text',\n    defaultMessage: 'Displayed on the course details page. Limit to 50 characters.',\n  },\n  extendedDurationAriaLabel: {\n    id: 'course-authoring.schedule-section.introducing.duration.aria-label',\n    defaultMessage: 'Show course duration',\n  },\n  extendedDescriptionLabel: {\n    id: 'course-authoring.schedule-section.introducing.description.label',\n    defaultMessage: 'Course description',\n  },\n  extendedDescriptionHelpText: {\n    id: 'course-authoring.schedule-section.introducing.description.help-text',\n    defaultMessage: 'Displayed on the course details page. Limit to 1000 characters.',\n  },\n  extendedDescriptionAriaLabel: {\n    id: 'course-authoring.schedule-section.introducing.description.aria-label',\n    defaultMessage: 'Show course description',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Form } from '@edx/paragon';\n\nimport messages from './messages';\n\nconst ExtendedCourseDetails = ({\n  title,\n  subtitle,\n  duration,\n  description,\n  onChange,\n}) => {\n  const intl = useIntl();\n  const paramsForExtendedFields = [\n    {\n      value: title,\n      label: intl.formatMessage(messages.extendedTitleLabel),\n      helpText: intl.formatMessage(messages.extendedTitleHelpText),\n      ariaLabel: intl.formatMessage(messages.extendedTitleAriaLabel),\n      controlName: 'title',\n      maxLength: 50,\n    },\n    {\n      value: subtitle,\n      label: intl.formatMessage(messages.extendedSubtitleLabel),\n      helpText: intl.formatMessage(messages.extendedSubtitleHelpText),\n      ariaLabel: intl.formatMessage(messages.extendedSubtitleAriaLabel),\n      controlName: 'subtitle',\n      maxLength: 150,\n    },\n    {\n      value: duration,\n      label: intl.formatMessage(messages.extendedDurationLabel),\n      helpText: intl.formatMessage(messages.extendedDurationHelpText),\n      ariaLabel: intl.formatMessage(messages.extendedDurationAriaLabel),\n      controlName: 'duration',\n      maxLength: 50,\n    },\n    {\n      value: description,\n      label: intl.formatMessage(messages.extendedDescriptionLabel),\n      helpText: intl.formatMessage(messages.extendedDescriptionHelpText),\n      ariaLabel: intl.formatMessage(messages.extendedDescriptionAriaLabel),\n      controlName: 'description',\n      maxLength: 1000,\n      asTextarea: true,\n    },\n  ];\n  return (\n    <>\n      {paramsForExtendedFields.map((param) => (\n        <Form.Group className=\"form-group-custom\" key={param.label}>\n          <Form.Label>{param.label}</Form.Label>\n          <Form.Control\n            as={param.asTextarea ? TextareaAutosize : 'input'}\n            value={param.value}\n            name={param.controlName}\n            maxLength={param.maxLength}\n            onChange={(e) => onChange(e.target.value, param.controlName)}\n            aria-label={param.ariaLabel}\n          />\n          <Form.Control.Feedback>{param.helpText}</Form.Control.Feedback>\n        </Form.Group>\n      ))}\n    </>\n  );\n};\n\nExtendedCourseDetails.defaultProps = {\n  title: '',\n  subtitle: '',\n  duration: '',\n  description: '',\n};\n\nExtendedCourseDetails.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  duration: PropTypes.string,\n  description: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ExtendedCourseDetails;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  introducingTitle: {\n    id: 'course-authoring.schedule-section.introducing.title',\n    defaultMessage: 'Introducing your course',\n  },\n  introducingDescription: {\n    id: 'course-authoring.schedule-section.introducing.description',\n    defaultMessage: 'Information for prospective students',\n  },\n  courseShortDescriptionLabel: {\n    id: 'course-authoring.schedule-section.introducing.course-short-description.label',\n    defaultMessage: 'Course short description',\n  },\n  courseShortDescriptionAriaLabel: {\n    id: 'course-authoring.schedule-section.introducing.course-short-description.aria-label',\n    defaultMessage: 'Show course short description',\n  },\n  courseShortDescriptionHelpText: {\n    id: 'course-authoring.schedule-section.introducing.course-short-description.help-text',\n    defaultMessage: 'Appears on the course catalog page when students roll over the course name. Limit to ~150 characters',\n  },\n  courseOverviewLabel: {\n    id: 'course-authoring.schedule-section.introducing.course-overview.label',\n    defaultMessage: 'Course overview',\n  },\n  courseOverviewHelpText: {\n    id: 'course-authoring.schedule-section.introducing.course-overview.help-text',\n    defaultMessage: 'Introductions, prerequisites, FAQs that are used on {hyperlink} (formatted in HTML)',\n  },\n  courseAboutHyperlink: {\n    id: 'course-authoring.schedule-section.introducing.course-about.hyperlink',\n    defaultMessage: 'your course summary page',\n  },\n  courseAboutSidebarLabel: {\n    id: 'course-authoring.schedule-section.introducing.course-about-sidebar.label',\n    defaultMessage: 'Course about sidebar HTML',\n  },\n  courseAboutSidebarHelpText: {\n    id: 'course-authoring.schedule-section.introducing.course-about-sidebar.help-text',\n    defaultMessage: 'Custom sidebar content for {hyperlink} (formatted in HTML)',\n  },\n  courseCardImageLabel: {\n    id: 'course-authoring.schedule-section.introducing.course-card-image.label',\n    defaultMessage: 'Course card image',\n  },\n  courseCardImageIdentifierText: {\n    id: 'course-authoring.schedule-section.introducing.course-card-image.identifier-text',\n    defaultMessage: 'course image',\n  },\n  courseBannerImageLabel: {\n    id: 'course-authoring.schedule-section.introducing.course-banner-image.label',\n    defaultMessage: 'Course banner image',\n  },\n  courseBannerImageInsertText: {\n    id: 'course-authoring.schedule-section.introducing.course-banner-image.insert-banner',\n    defaultMessage: 'banner image',\n  },\n  courseVideoThumbnailLabel: {\n    id: 'course-authoring.schedule-section.introducing.video-thumbnail-image.label',\n    defaultMessage: 'Course video thumbnail image',\n  },\n  courseVideoThumbnailInsertText: {\n    id: 'course-authoring.schedule-section.introducing.video-thumbnail-image.insert-card',\n    defaultMessage: 'video thumbnail image',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  injectIntl,\n  intlShape,\n  FormattedMessage,\n} from '@edx/frontend-platform/i18n';\nimport { Form, Hyperlink } from '@edx/paragon';\n\nimport CourseUploadImage from '../../generic/course-upload-image';\nimport { WysiwygEditor } from '../../generic/WysiwygEditor';\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport IntroductionVideo from './introduction-video';\nimport ExtendedCourseDetails from './extended-course-details';\nimport messages from './messages';\n\nconst IntroducingSection = ({\n  intl,\n  title,\n  subtitle,\n  duration,\n  overview,\n  introVideo,\n  description,\n  aboutSidebarHtml,\n  shortDescription,\n  aboutPageEditable,\n  sidebarHtmlEnabled,\n  lmsLinkForAboutPage,\n  courseImageAssetPath,\n  bannerImageAssetPath,\n  shortDescriptionEditable,\n  enableExtendedCourseDetails,\n  videoThumbnailImageAssetPath,\n  onChange,\n}) => {\n  const overviewHelpText = (\n    <FormattedMessage\n      id=\"course-authoring.schedule-section.introducing.course-overview.help-text\"\n      defaultMessage=\"Introductions, prerequisites, FAQs that are used on {hyperlink} (formatted in HTML)\"\n      values={{\n        hyperlink: (\n          <Hyperlink\n            destination={lmsLinkForAboutPage}\n            target=\"_blank\"\n            showLaunchIcon={false}\n          >\n            {intl.formatMessage(messages.courseAboutHyperlink)}\n          </Hyperlink>\n        ),\n      }}\n    />\n  );\n\n  const aboutSidebarHelpText = (\n    <FormattedMessage\n      id=\"course-authoring.schedule-section.introducing.about-sidebar.help-text\"\n      defaultMessage=\"Custom sidebar content for {hyperlink} (formatted in HTML)\"\n      values={{\n        hyperlink: (\n          <Hyperlink\n            destination={lmsLinkForAboutPage}\n            target=\"_blank\"\n            showLaunchIcon={false}\n          >\n            {intl.formatMessage(messages.courseAboutHyperlink)}\n          </Hyperlink>\n        ),\n      }}\n    />\n  );\n\n  return (\n    <section className=\"section-container introducing-section\">\n      {aboutPageEditable && (\n        <SectionSubHeader\n          title={intl.formatMessage(messages.introducingTitle)}\n          description={intl.formatMessage(messages.introducingDescription)}\n        />\n      )}\n      {enableExtendedCourseDetails && (\n        <ExtendedCourseDetails\n          title={title}\n          subtitle={subtitle}\n          duration={duration}\n          description={description}\n          onChange={onChange}\n        />\n      )}\n      {shortDescriptionEditable && (\n        <Form.Group className=\"form-group-custom\">\n          <Form.Label>\n            {intl.formatMessage(messages.courseShortDescriptionLabel)}\n          </Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            value={shortDescription}\n            name=\"shortDescription\"\n            onChange={(e) => onChange(e.target.value, 'shortDescription')}\n            aria-label={intl.formatMessage(\n              messages.courseShortDescriptionAriaLabel,\n            )}\n            maxLength={150}\n          />\n          <Form.Control.Feedback>\n            {intl.formatMessage(messages.courseShortDescriptionHelpText)}\n          </Form.Control.Feedback>\n        </Form.Group>\n      )}\n      {aboutPageEditable && (\n        <>\n          <Form.Group className=\"form-group-custom\">\n            <Form.Label>{intl.formatMessage(messages.courseOverviewLabel)}</Form.Label>\n            <WysiwygEditor\n              initialValue={overview}\n              onChange={(value) => onChange(value, 'overview')}\n            />\n            <Form.Control.Feedback>{overviewHelpText}</Form.Control.Feedback>\n          </Form.Group>\n          {sidebarHtmlEnabled && (\n            <Form.Group className=\"form-group-custom\">\n              <Form.Label>{intl.formatMessage(messages.courseAboutSidebarLabel)}</Form.Label>\n              <WysiwygEditor\n                initialValue={aboutSidebarHtml}\n                onChange={(value) => onChange(value, 'aboutSidebarHtml')}\n              />\n              <Form.Control.Feedback>{aboutSidebarHelpText}</Form.Control.Feedback>\n            </Form.Group>\n          )}\n          <CourseUploadImage\n            label={intl.formatMessage(messages.courseCardImageLabel)}\n            identifierFieldText={intl.formatMessage(messages.courseCardImageIdentifierText)}\n            assetImagePath={courseImageAssetPath}\n            assetImageField=\"courseImageAssetPath\"\n            imageNameField=\"courseImageName\"\n            showImageBodyText\n            onChange={onChange}\n          />\n        </>\n      )}\n      {enableExtendedCourseDetails && (\n        <>\n          <CourseUploadImage\n            label={intl.formatMessage(messages.courseBannerImageLabel)}\n            identifierFieldText={intl.formatMessage(messages.courseBannerImageInsertText)}\n            assetImagePath={bannerImageAssetPath}\n            assetImageField=\"bannerImageAssetPath\"\n            imageNameField=\"bannerImageName\"\n            showImageBodyText\n            onChange={onChange}\n          />\n          <CourseUploadImage\n            label={intl.formatMessage(messages.courseVideoThumbnailLabel)}\n            identifierFieldText={intl.formatMessage(messages.courseVideoThumbnailInsertText)}\n            assetImagePath={videoThumbnailImageAssetPath}\n            assetImageField=\"videoThumbnailImageAssetPath\"\n            imageNameField=\"videoThumbnailImageName\"\n            showImageBodyText\n            onChange={onChange}\n          />\n        </>\n      )}\n      {aboutPageEditable && (\n        <IntroductionVideo introVideo={introVideo} onChange={onChange} />\n      )}\n    </section>\n  );\n};\n\nIntroducingSection.defaultProps = {\n  title: '',\n  subtitle: '',\n  duration: '',\n  description: '',\n  introVideo: '',\n  shortDescription: '',\n  aboutSidebarHtml: '',\n  courseImageAssetPath: '',\n  bannerImageAssetPath: '',\n  videoThumbnailImageAssetPath: '',\n  overview: '',\n};\n\nIntroducingSection.propTypes = {\n  intl: intlShape.isRequired,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  duration: PropTypes.string,\n  description: PropTypes.string,\n  overview: PropTypes.string,\n  introVideo: PropTypes.string,\n  aboutSidebarHtml: PropTypes.string,\n  shortDescription: PropTypes.string,\n  aboutPageEditable: PropTypes.bool.isRequired,\n  sidebarHtmlEnabled: PropTypes.bool.isRequired,\n  lmsLinkForAboutPage: PropTypes.string.isRequired,\n  courseImageAssetPath: PropTypes.string,\n  bannerImageAssetPath: PropTypes.string,\n  shortDescriptionEditable: PropTypes.bool.isRequired,\n  enableExtendedCourseDetails: PropTypes.bool.isRequired,\n  videoThumbnailImageAssetPath: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(IntroducingSection);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  pacingTitle: {\n    id: 'course-authoring.schedule.pacing.title',\n    defaultMessage: 'Course pacing',\n  },\n  pacingDescription: {\n    id: 'course-authoring.schedule.pacing.description',\n    defaultMessage: 'Set the pacing for this course',\n  },\n  pacingRestriction: {\n    id: 'course-authoring.schedule.pacing.restriction',\n    defaultMessage: 'Course pacing cannot be changed once a course has started',\n  },\n  pacingTypeInstructorLabel: {\n    id: 'course-authoring.schedule.pacing.radio.instructor.label',\n    defaultMessage: 'Instructor-paced',\n  },\n  pacingTypeInstructorDescription: {\n    id: 'course-authoring.schedule.pacing.radio.instructor.description',\n    defaultMessage:\n      'Instructor-paced courses progress at the pace that the course author sets. You can configure release dates for course content and due dates for assignments.',\n  },\n  pacingTypeSelfLabel: {\n    id: 'course-authoring.schedule.pacing.radio.self-paced.label',\n    defaultMessage: 'Self-paced',\n  },\n  pacingTypeSelfDescription: {\n    id: 'course-authoring.schedule.pacing.radio.self-paced.description',\n    defaultMessage: 'Self-paced courses offer suggested due dates for assignments or exams based on the learner’s enrollment date and the expected course duration. These courses offer learners flexibility to modify the assignment dates as needed.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Form } from '@edx/paragon';\n\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport messages from './messages';\n\nconst PacingSection = ({\n  selfPaced, startDate, onChange,\n}) => {\n  const intl = useIntl();\n  const canTogglePace = new Date() <= new Date(startDate);\n\n  return (\n    <section className=\"section-container pacing-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.pacingTitle)}\n        description={intl.formatMessage(messages.pacingDescription)}\n      />\n      <Form.Group>\n        {!canTogglePace && (\n          <Form.Label className=\"text pt-3\">\n            {intl.formatMessage(messages.pacingRestriction)}\n          </Form.Label>\n        )}\n        <Form.RadioSet\n          name=\"selfPaced\"\n          onChange={(e) => onChange(e.target.value, e.target.name)}\n          value={selfPaced.toString()}\n        >\n          <Form.Radio\n            value=\"false\"\n            description={intl.formatMessage(messages.pacingTypeInstructorDescription)}\n            disabled={!canTogglePace}\n          >\n            {intl.formatMessage(messages.pacingTypeInstructorLabel)}\n          </Form.Radio>\n          <Form.Radio\n            value=\"true\"\n            description={intl.formatMessage(messages.pacingTypeSelfDescription)}\n            disabled={!canTogglePace}\n          >\n            {intl.formatMessage(messages.pacingTypeSelfLabel)}\n          </Form.Radio>\n        </Form.RadioSet>\n      </Form.Group>\n    </section>\n  );\n};\n\nPacingSection.defaultProps = {\n  selfPaced: '',\n  startDate: '',\n};\n\nPacingSection.propTypes = {\n  startDate: PropTypes.string,\n  selfPaced: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default PacingSection;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  calendarAltText: {\n    id: 'course-authoring.schedule.schedule-section.alt-text',\n    defaultMessage: 'Calendar for datepicker input',\n  },\n  datepickerUTC: {\n    id: 'course-authoring.schedule.schedule-section.datepicker.utc',\n    defaultMessage: 'UTC',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport DatePicker from 'react-datepicker/dist';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Form, Icon } from '@edx/paragon';\nimport { Calendar } from '@edx/paragon/icons';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { convertToDateFromString, convertToStringFromDate, isValidDate } from '../../utils';\nimport { DATE_FORMAT, TIME_FORMAT } from '../../constants';\nimport messages from './messages';\n\nexport const DATEPICKER_TYPES = {\n  date: 'date',\n  time: 'time',\n};\n\nconst DatepickerControl = ({\n  type,\n  label,\n  value,\n  showUTC,\n  readonly,\n  helpText,\n  isInvalid,\n  controlName,\n  onChange,\n}) => {\n  const intl = useIntl();\n  const formattedDate = convertToDateFromString(value);\n  const inputFormat = {\n    [DATEPICKER_TYPES.date]: DATE_FORMAT,\n    [DATEPICKER_TYPES.time]: TIME_FORMAT,\n  };\n\n  return (\n    <Form.Group className=\"form-group-custom datepicker-custom\">\n      <Form.Label className=\"d-flex justify-content-between\">\n        {label}\n        {showUTC && (\n          <span className=\"h6 font-weight-normal text-gray-500 mb-0\">\n            ({intl.formatMessage(messages.datepickerUTC)})\n          </span>\n        )}\n      </Form.Label>\n      <div className=\"position-relative\">\n        {type === DATEPICKER_TYPES.date && !readonly && (\n          <Icon\n            src={Calendar}\n            className=\"datepicker-custom-control-icon\"\n            alt={intl.formatMessage(messages.calendarAltText)}\n          />\n        )}\n        <DatePicker\n          name={controlName}\n          selected={formattedDate}\n          disabled={readonly}\n          dateFormat={inputFormat[type]}\n          timeFormat={inputFormat[type]}\n          className={classNames('datepicker-custom-control', {\n            'datepicker-custom-control_readonly': readonly,\n            'datepicker-custom-control_isInvalid': isInvalid,\n          })}\n          autoComplete=\"off\"\n          selectsStart\n          showTimeSelect={type === DATEPICKER_TYPES.time}\n          showTimeSelectOnly={type === DATEPICKER_TYPES.time}\n          placeholderText={inputFormat[type].toLocaleUpperCase()}\n          showPopperArrow={false}\n          onChange={(date) => {\n            if (isValidDate(date)) {\n              onChange(convertToStringFromDate(date));\n            }\n          }}\n        />\n      </div>\n      {helpText && <Form.Control.Feedback>{helpText}</Form.Control.Feedback>}\n    </Form.Group>\n  );\n};\n\nDatepickerControl.defaultProps = {\n  helpText: '',\n  showUTC: false,\n  value: '',\n  readonly: false,\n  isInvalid: false,\n};\n\nDatepickerControl.propTypes = {\n  type: PropTypes.oneOf(Object.values(DATEPICKER_TYPES)).isRequired,\n  value: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  showUTC: PropTypes.bool,\n  helpText: PropTypes.string,\n  readonly: PropTypes.bool,\n  isInvalid: PropTypes.bool,\n  controlName: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default DatepickerControl;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { DatepickerControl, DATEPICKER_TYPES } from '../../../generic/datepicker-control';\n\nexport const SCHEDULE_ROW_TYPES = {\n  datetime: 'datetime',\n  dropdown: 'dropdown',\n};\n\nexport const ScheduleRow = ({\n  value,\n  labels,\n  helpText,\n  readonly,\n  controlName,\n  errorFeedback,\n  onChange,\n}) => (\n  <li className=\"schedule-date-item\">\n    <div className=\"schedule-date-item-container\">\n      <DatepickerControl\n        type={DATEPICKER_TYPES.date}\n        value={value}\n        label={labels[0]}\n        helpText={helpText}\n        readonly={readonly}\n        isInvalid={!!errorFeedback}\n        controlName={`${controlName}-date`}\n        onChange={(date) => onChange(date, controlName)}\n      />\n      <DatepickerControl\n        type={DATEPICKER_TYPES.time}\n        value={value}\n        label={labels[1]}\n        readonly={readonly}\n        isInvalid={!!errorFeedback}\n        controlName={`${controlName}-time`}\n        onChange={(date) => onChange(date, controlName)}\n        showUTC\n      />\n    </div>\n    {errorFeedback && (\n      <span className=\"schedule-date-item-error\">{errorFeedback}</span>\n    )}\n  </li>\n);\n\nScheduleRow.defaultProps = {\n  value: '',\n  helpText: '',\n  readonly: false,\n  errorFeedback: '',\n};\n\nScheduleRow.propTypes = {\n  value: PropTypes.string,\n  labels: PropTypes.arrayOf(PropTypes.string).isRequired,\n  helpText: PropTypes.string,\n  readonly: PropTypes.bool,\n  controlName: PropTypes.string.isRequired,\n  errorFeedback: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ScheduleRow;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  certificateBehaviorLabel: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.label',\n    defaultMessage: 'Certificate display behavior',\n  },\n  certificateBehaviorHelpText: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.help-text',\n    defaultMessage: 'Certificates are awarded at the end of a course run',\n  },\n  certificateAvailableDateLabel: {\n    id: 'course-authoring.schedule.schedule-section.certificate-available-date.label',\n    defaultMessage: 'Certificate available date',\n  },\n  certificateDisplayBehaviorToggleTitle: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.toggle.title',\n    defaultMessage: 'Read more about this setting',\n  },\n  certificateDisplayBehaviorToggleParagraph: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.toggle.paragraph',\n    defaultMessage: 'In all configurations of this setting, certificates are generated for learners as soon as they achieve the passing threshold in the course (which can occur before a final assignment based on course design).',\n  },\n  certificateDisplayBehaviorToggleHeading1: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.toggle.heading-1',\n    defaultMessage: 'Immediately upon passing',\n  },\n  certificateDisplayBehaviorToggleParagraph1: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.toggle.paragraph-1',\n    defaultMessage: 'Learners can access their certificate as soon as they achieve a passing grade above the course grade threshold. Note: learners can achieve a passing grade before encountering all assignments in some course configurations.',\n  },\n  certificateDisplayBehaviorToggleHeading2: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.toggle.heading-2',\n    defaultMessage: 'On course end date',\n  },\n  certificateDisplayBehaviorToggleParagraph2: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.toggle.paragraph-2',\n    defaultMessage: 'Learners with passing grades can access their certificate once the end date of the course has elapsed.',\n  },\n  certificateDisplayBehaviorToggleHeading3: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.toggle.heading-3',\n    defaultMessage: 'A date after the course end date',\n  },\n  certificateDisplayBehaviorToggleParagraph3: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.toggle.paragraph-3',\n    defaultMessage: 'Learners with passing grades can access their certificate after the date that you set has elapsed.',\n  },\n  certificateBehaviorDropdownOption1: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.dropdown.option-1',\n    defaultMessage: 'Immediately upon passing',\n  },\n  certificateBehaviorDropdownOption2: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.dropdown.option-2',\n    defaultMessage: 'End date of course',\n  },\n  certificateBehaviorDropdownOption3: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.dropdown.option-3',\n    defaultMessage: 'A date after the course end date',\n  },\n  certificateBehaviorDropdownEmpty: {\n    id: 'course-authoring.schedule.schedule-section.certificate-behavior.dropdown.empty',\n    defaultMessage: 'Select certificate display behavior',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Dropdown, Form, Collapsible, Icon,\n} from '@edx/paragon';\nimport { InfoOutline } from '@edx/paragon/icons';\n\nimport { getLabelById } from '../../../utils';\nimport { DatepickerControl, DATEPICKER_TYPES } from '../../../generic/datepicker-control';\nimport messages from './messages';\n\nexport const CERTIFICATE_DISPLAY_BEHAVIOR = {\n  earlyNoInfo: 'early_no_info',\n  end: 'end',\n  endWithDate: 'end_with_date',\n};\n\nconst CertificateDisplayRow = ({\n  certificateAvailableDate,\n  availableDateErrorFeedback,\n  certificatesDisplayBehavior,\n  displayBehaviorErrorFeedback,\n  onChange,\n}) => {\n  const intl = useIntl();\n  const dropdownOptions = [\n    {\n      id: CERTIFICATE_DISPLAY_BEHAVIOR.earlyNoInfo,\n      label: intl.formatMessage(messages.certificateBehaviorDropdownOption1),\n    },\n    {\n      id: CERTIFICATE_DISPLAY_BEHAVIOR.end,\n      label: intl.formatMessage(messages.certificateBehaviorDropdownOption2),\n    },\n    {\n      id: CERTIFICATE_DISPLAY_BEHAVIOR.endWithDate,\n      label: intl.formatMessage(messages.certificateBehaviorDropdownOption3),\n    },\n  ];\n\n  const formatCertificateDisplayBehavior = (value) => {\n    if (!value) {\n      return '';\n    }\n\n    if (Object.values(CERTIFICATE_DISPLAY_BEHAVIOR).includes(value)) {\n      return value;\n    }\n\n    return value.split('.')[1].toLowerCase();\n  };\n\n  const handleOnChange = (optionId) => {\n    if (optionId !== CERTIFICATE_DISPLAY_BEHAVIOR.endWithDate) {\n      onChange('', 'certificateAvailableDate');\n    }\n    onChange(optionId, 'certificatesDisplayBehavior');\n  };\n\n  const formattedCertificateBehavior = formatCertificateDisplayBehavior(\n    certificatesDisplayBehavior,\n  );\n\n  const certificateDisplayValue = getLabelById(dropdownOptions, formattedCertificateBehavior)\n    || intl.formatMessage(messages.certificateBehaviorDropdownEmpty);\n\n  const showAvailableDate = formattedCertificateBehavior === CERTIFICATE_DISPLAY_BEHAVIOR.endWithDate;\n\n  const renderReadMoreToggle = () => {\n    const readMore = [\n      {\n        heading: intl.formatMessage(\n          messages.certificateDisplayBehaviorToggleHeading1,\n        ),\n        paragraph: intl.formatMessage(\n          messages.certificateDisplayBehaviorToggleParagraph1,\n        ),\n      },\n      {\n        heading: intl.formatMessage(\n          messages.certificateDisplayBehaviorToggleHeading2,\n        ),\n        paragraph: intl.formatMessage(\n          messages.certificateDisplayBehaviorToggleParagraph2,\n        ),\n      },\n      {\n        heading: intl.formatMessage(\n          messages.certificateDisplayBehaviorToggleHeading3,\n        ),\n        paragraph: intl.formatMessage(\n          messages.certificateDisplayBehaviorToggleParagraph3,\n        ),\n      },\n    ];\n\n    return (\n      <Collapsible.Advanced>\n        <Collapsible.Trigger className=\"d-flex small text-primary-500 align-items-center mt-3\">\n          <Icon className=\"mr-1\" src={InfoOutline} />\n          {intl.formatMessage(messages.certificateDisplayBehaviorToggleTitle)}\n        </Collapsible.Trigger>\n        <Collapsible.Body className=\"mt-2.5\">\n          <p className=\"x-small text-gray-500\">\n            {intl.formatMessage(\n              messages.certificateDisplayBehaviorToggleParagraph,\n            )}\n          </p>\n          {readMore.map(({ heading, paragraph }) => (\n            <div className=\"mt-2\" key={heading}>\n              <p className=\"h6 text-gray-700 mt-1\">{heading}</p>\n              <p className=\"x-small text-gray-500 mt-1\">{paragraph}</p>\n            </div>\n          ))}\n        </Collapsible.Body>\n      </Collapsible.Advanced>\n    );\n  };\n\n  return (\n    <li className=\"schedule-date-item\">\n      <div className=\"schedule-date-item-container\">\n        <Form.Group className=\"form-group-custom\">\n          <Form.Label>\n            {intl.formatMessage(messages.certificateBehaviorLabel)}\n          </Form.Label>\n          <Dropdown claswsName=\"bg-white\">\n            <Dropdown.Toggle id=\"certificate-behavior-dropdown\" variant=\"outline-primary\">\n              {certificateDisplayValue}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              {dropdownOptions.map(({ id, label }) => (\n                <Dropdown.Item key={id} onClick={() => handleOnChange(id)}>\n                  {label}\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n          </Dropdown>\n          <Form.Control.Feedback>\n            {intl.formatMessage(messages.certificateBehaviorHelpText)}\n          </Form.Control.Feedback>\n          {showAvailableDate && (\n            <DatepickerControl\n              label={intl.formatMessage(messages.certificateAvailableDateLabel)}\n              value={certificateAvailableDate}\n              type={DATEPICKER_TYPES.date}\n              onChange={(date) => onChange(date, 'certificateAvailableDate')}\n              isInvalid={!!availableDateErrorFeedback}\n              controlName=\"certificateAvailableDate\"\n            />\n          )}\n          {availableDateErrorFeedback && (\n            <span className=\"schedule-date-item-error\">\n              {availableDateErrorFeedback}\n            </span>\n          )}\n          {displayBehaviorErrorFeedback && (\n            <span className=\"schedule-date-item-error\">\n              {displayBehaviorErrorFeedback}\n            </span>\n          )}\n          {renderReadMoreToggle()}\n        </Form.Group>\n      </div>\n    </li>\n  );\n};\n\nCertificateDisplayRow.defaultProps = {\n  certificateAvailableDate: '',\n  availableDateErrorFeedback: '',\n  certificatesDisplayBehavior: '',\n  displayBehaviorErrorFeedback: '',\n};\n\nCertificateDisplayRow.propTypes = {\n  certificateAvailableDate: PropTypes.string,\n  availableDateErrorFeedback: PropTypes.string,\n  certificatesDisplayBehavior: PropTypes.string,\n  displayBehaviorErrorFeedback: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default CertificateDisplayRow;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  scheduleTitle: {\n    id: 'course-authoring.schedule.schedule-section.title',\n    defaultMessage: 'Course schedule',\n  },\n  scheduleDescription: {\n    id: 'course-authoring.schedule.schedule-section.description',\n    defaultMessage: 'Dates that control when your course can be viewed',\n  },\n  scheduleCourseStartDateLabel: {\n    id: 'course-authoring.schedule.schedule-section.course-start.date.label',\n    defaultMessage: 'Course start date',\n  },\n  scheduleCourseStartDateHelpText: {\n    id: 'course-authoring.schedule.schedule-section.course-start.date.help-text',\n    defaultMessage: 'First day the course begins',\n  },\n  scheduleCourseStartTimeLabel: {\n    id: 'course-authoring.schedule.schedule-section.course-start.time.label',\n    defaultMessage: 'Course start time',\n  },\n  scheduleCourseEndDateLabel: {\n    id: 'course-authoring.schedule.schedule-section.course-end.date.label',\n    defaultMessage: 'Course end date',\n  },\n  scheduleCourseEndDateHelpText: {\n    id: 'course-authoring.schedule.schedule-section.course-end.date.help-text',\n    defaultMessage: 'Last day your course is active',\n  },\n  scheduleCourseEndTimeLabel: {\n    id: 'course-authoring.schedule.schedule-section.course-end.time.label',\n    defaultMessage: 'Course end time',\n  },\n  scheduleEnrollmentStartDateLabel: {\n    id: 'course-authoring.schedule.schedule-section.enrollment-start.date.label',\n    defaultMessage: 'Enrollment start date',\n  },\n  scheduleEnrollmentStartDateHelpText: {\n    id: 'course-authoring.schedule.schedule-section.enrollment-start.help-text',\n    defaultMessage: 'First day students can enroll',\n  },\n  scheduleEnrollmentStartTimeLabel: {\n    id: 'course-authoring.schedule.schedule-section.enrollment-start.time.label',\n    defaultMessage: 'Enrollment start time',\n  },\n  scheduleEnrollmentEndDateLabel: {\n    id: 'course-authoring.schedule.schedule-section.enrollment-end.date.label',\n    defaultMessage: 'Enrollment end date',\n  },\n  scheduleEnrollmentEndDateHelpText: {\n    id: 'course-authoring.schedule.schedule-section.enrollment-end.date.help-text',\n    defaultMessage: 'Last day students can enroll.',\n  },\n  scheduleEnrollmentEndDateRestrictedHelpText: {\n    id: 'course-authoring.schedule.schedule-section.enrollment-end.date.restricted.help-text',\n    defaultMessage: 'Contact your {platformName} partner manager to update these settings.',\n  },\n  scheduleEnrollmentEndTimeLabel: {\n    id: 'course-authoring.schedule.schedule-section.enrollment-end.time.label',\n    defaultMessage: 'Enrollment end time',\n  },\n  scheduleUpgradeDeadlineDateLabel: {\n    id: 'course-authoring.schedule.schedule-section.upgrade-deadline.date.label',\n    defaultMessage: 'Upgrade deadline date',\n  },\n  scheduleUpgradeDeadlineDateHelpText: {\n    id: 'course-authoring.schedule.schedule-section.upgrade-deadline.date.help-text',\n    defaultMessage: 'Last day students can upgrade to a verified enrollment. Contact your {platformName} partner manager to update these settings.',\n  },\n  scheduleUpgradeDeadlineTimeLabel: {\n    id: 'course-authoring.schedule.schedule-section.upgrade-deadline.time.label',\n    defaultMessage: 'Upgrade deadline time',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport { ScheduleRow, SCHEDULE_ROW_TYPES } from './schedule-row';\nimport { CertificateDisplayRow } from './certificate-display-row';\nimport messages from './messages';\n\nconst ScheduleSection = ({\n  endDate,\n  startDate,\n  errorFields,\n  platformName,\n  enrollmentEnd,\n  enrollmentStart,\n  upgradeDeadline,\n  enrollmentEndEditable,\n  certificateAvailableDate,\n  certificatesDisplayBehavior,\n  canShowCertificateAvailableDateField,\n  onChange,\n}) => {\n  const intl = useIntl();\n  const enrollmentEndHelpText = intl.formatMessage(\n    messages.scheduleEnrollmentEndDateHelpText,\n  );\n  const enrollmentEndHelpTexRestricted = intl.formatMessage(\n    messages.scheduleEnrollmentEndDateRestrictedHelpText,\n    { platformName },\n  );\n  const computedEnrollmentEndHelpText = `${enrollmentEndHelpText} ${\n    !enrollmentEndEditable ? enrollmentEndHelpTexRestricted : ''\n  }`;\n\n  const propsForScheduleFields = [\n    {\n      value: startDate,\n      labels: [\n        intl.formatMessage(messages.scheduleCourseStartDateLabel),\n        intl.formatMessage(messages.scheduleCourseStartTimeLabel),\n      ],\n      rowType: SCHEDULE_ROW_TYPES.datetime,\n      helpText: intl.formatMessage(messages.scheduleCourseStartDateHelpText),\n      controlName: 'startDate',\n      errorFeedback: errorFields?.startDate,\n    },\n    {\n      labels: [\n        intl.formatMessage(messages.scheduleCourseEndDateLabel),\n        intl.formatMessage(messages.scheduleCourseEndTimeLabel),\n      ],\n      value: endDate,\n      rowType: SCHEDULE_ROW_TYPES.datetime,\n      helpText: intl.formatMessage(messages.scheduleCourseEndDateHelpText),\n      controlName: 'endDate',\n      errorFeedback: errorFields?.endDate,\n    },\n    {\n      skip: !canShowCertificateAvailableDateField,\n      key: 'certificate-display-row',\n      rowType: SCHEDULE_ROW_TYPES.dropdown,\n      certificateAvailableDate,\n      availableDateErrorFeedback: errorFields?.certificateAvailableDate,\n      certificatesDisplayBehavior,\n      displayBehaviorErrorFeedback: errorFields?.certificatesDisplayBehavior,\n    },\n    {\n      labels: [\n        intl.formatMessage(messages.scheduleEnrollmentStartDateLabel),\n        intl.formatMessage(messages.scheduleEnrollmentStartTimeLabel),\n      ],\n      value: enrollmentStart,\n      rowType: SCHEDULE_ROW_TYPES.datetime,\n      helpText: intl.formatMessage(messages.scheduleEnrollmentStartDateHelpText),\n      controlName: 'enrollmentStart',\n      errorFeedback: errorFields?.enrollmentStart,\n    },\n    {\n      labels: [\n        intl.formatMessage(messages.scheduleEnrollmentEndDateLabel),\n        intl.formatMessage(messages.scheduleEnrollmentEndTimeLabel),\n      ],\n      value: enrollmentEnd,\n      rowType: SCHEDULE_ROW_TYPES.datetime,\n      helpText: computedEnrollmentEndHelpText,\n      readonly: !enrollmentEndEditable,\n      controlName: 'enrollmentEnd',\n      errorFeedback: errorFields?.enrollmentEnd,\n    },\n    {\n      skip: !upgradeDeadline,\n      labels: [\n        intl.formatMessage(messages.scheduleUpgradeDeadlineDateLabel),\n        intl.formatMessage(messages.scheduleUpgradeDeadlineTimeLabel),\n      ],\n      value: upgradeDeadline,\n      rowType: SCHEDULE_ROW_TYPES.datetime,\n      helpText: intl.formatMessage(\n        messages.scheduleUpgradeDeadlineDateHelpText,\n        {\n          platformName,\n        },\n      ),\n      readonly: true,\n      controlName: 'upgradeDeadline',\n      errorFeedback: errorFields?.upgradeDeadline,\n    },\n  ];\n\n  return (\n    <section className=\"section-container schedule-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.scheduleTitle)}\n        description={intl.formatMessage(messages.scheduleDescription)}\n      />\n      <ul className=\"schedule-date-list\">\n        {propsForScheduleFields\n          .filter((field) => !field.skip)\n          .map((fieldProps) => {\n            if (fieldProps.rowType === SCHEDULE_ROW_TYPES.datetime) {\n              const { skip, rowType, ...restProps } = fieldProps;\n              return (\n                <ScheduleRow\n                  {...restProps}\n                  key={fieldProps.controlName}\n                  onChange={onChange}\n                />\n              );\n            }\n            const { rowType, key, ...restProps } = fieldProps;\n            return (\n              <CertificateDisplayRow\n                {...restProps}\n                key={key}\n                onChange={onChange}\n              />\n            );\n          })}\n      </ul>\n    </section>\n  );\n};\n\nScheduleSection.defaultProps = {\n  endDate: '',\n  startDate: '',\n  errorFields: {},\n  enrollmentEnd: '',\n  enrollmentStart: '',\n  upgradeDeadline: '',\n  certificateAvailableDate: '',\n};\n\nScheduleSection.propTypes = {\n  endDate: PropTypes.string,\n  startDate: PropTypes.string,\n  errorFields: PropTypes.objectOf(PropTypes.string),\n  platformName: PropTypes.string.isRequired,\n  enrollmentEnd: PropTypes.string,\n  enrollmentStart: PropTypes.string,\n  upgradeDeadline: PropTypes.string,\n  enrollmentEndEditable: PropTypes.bool.isRequired,\n  certificateAvailableDate: PropTypes.string,\n  certificatesDisplayBehavior: PropTypes.string.isRequired,\n  canShowCertificateAvailableDateField: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ScheduleSection;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  outcomesTitle: {\n    id: 'course-authoring.schedule.learning-outcomes-section.title',\n    defaultMessage: 'Learning outcomes',\n  },\n  outcomesDescription: {\n    id: 'course-authoring.schedule.learning-outcomes-section.description',\n    defaultMessage: 'Add the learning outcomes for this course',\n  },\n  outcomesDelete: {\n    id: 'course-authoring.schedule.learning-outcomes-section.delete',\n    defaultMessage: 'Delete',\n  },\n  outcomesAdd: {\n    id: 'course-authoring.schedule.learning-outcomes-section.add',\n    defaultMessage: 'Add learning outcome',\n  },\n  outcomesInputPlaceholder: {\n    id: 'course-authoring.schedule.learning-outcomes-section.input.placeholder',\n    defaultMessage: 'Add a learning outcome here',\n  },\n  outcomesLabelIncrement: {\n    id: 'course-authoring.schedule.learning-outcomes-section.label-increment',\n    defaultMessage: 'Learning outcome',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Form, Button } from '@edx/paragon';\nimport { Add as AddIcon } from '@edx/paragon/icons';\n\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport messages from './messages';\n\nconst LearningOutcomesSection = ({ learningInfo, onChange }) => {\n  const intl = useIntl();\n\n  const handleInputChange = (value, index) => {\n    const updatedInfo = [...learningInfo];\n    updatedInfo[index] = value;\n    onChange(updatedInfo, 'learningInfo');\n  };\n\n  const handleDelete = (index) => {\n    const updatedInfo = [...learningInfo];\n    updatedInfo.splice(index, 1);\n    onChange(updatedInfo, 'learningInfo');\n  };\n\n  const handleAdd = () => {\n    const updatedInfo = [...learningInfo, ''];\n    onChange(updatedInfo, 'learningInfo');\n  };\n\n  const renderLearningOutcomeItem = (text, idx) => (\n    <Form.Group\n      className=\"form-group-custom align-items-center d-flex\"\n      key={idx}\n    >\n      <Form.Label isInline>\n        {intl.formatMessage(messages.outcomesLabelIncrement)} {idx + 1}\n      </Form.Label>\n      <Form.Control\n        value={text}\n        placeholder={intl.formatMessage(messages.outcomesInputPlaceholder)}\n        onChange={(e) => handleInputChange(e.target.value, idx)}\n      />\n      <Button\n        variant=\"outline-primary\"\n        onClick={() => handleDelete(idx)}\n      >\n        {intl.formatMessage(messages.outcomesDelete)}\n      </Button>\n    </Form.Group>\n  );\n\n  return (\n    <section className=\"section-container learning-outcomes-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.outcomesTitle)}\n        description={intl.formatMessage(messages.outcomesDescription)}\n      />\n      <ul className=\"learning-outcomes-list\">\n        {learningInfo.map(renderLearningOutcomeItem)}\n      </ul>\n      <Button iconBefore={AddIcon} variant=\"primary\" onClick={handleAdd}>\n        {intl.formatMessage(messages.outcomesAdd)}\n      </Button>\n    </section>\n  );\n};\n\nLearningOutcomesSection.defaultProps = {\n  learningInfo: [],\n};\n\nLearningOutcomesSection.propTypes = {\n  learningInfo: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default LearningOutcomesSection;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  instructorNameLabel: {\n    id: 'course-authoring.schedule-section.instructor.name.label',\n    defaultMessage: 'Name',\n  },\n  instructorNameHelpText: {\n    id: 'course-authoring.schedule-section.instructor.name.help-text',\n    defaultMessage: 'Please add the instructor\\'s name',\n  },\n  instructorNameInputPlaceholder: {\n    id: 'course-authoring.schedule-section.instructor.name.input.placeholder',\n    defaultMessage: 'Instructor name',\n  },\n  instructorTitleLabel: {\n    id: 'course-authoring.schedule-section.instructor.title.label',\n    defaultMessage: 'Title',\n  },\n  instructorTitleHelpText: {\n    id: 'course-authoring.schedule-section.instructor.title.help-text',\n    defaultMessage: 'Please add the instructor\\'s title',\n  },\n  instructorTitleInputPlaceholder: {\n    id: 'course-authoring.schedule-section.instructor.title.input.placeholder',\n    defaultMessage: 'Instructor title',\n  },\n  instructorOrganizationLabel: {\n    id: 'course-authoring.schedule-section.instructor.organization.label',\n    defaultMessage: 'Organization',\n  },\n  instructorOrganizationHelpText: {\n    id: 'course-authoring.schedule-section.instructor.organization.help-text',\n    defaultMessage: 'Please add the institute where the instructor is associated',\n  },\n  instructorOrganizationInputPlaceholder: {\n    id: 'course-authoring.schedule-section.instructor.organization.input.placeholder',\n    defaultMessage: 'Instructor organization',\n  },\n  instructorBioLabel: {\n    id: 'course-authoring.schedule-section.instructor.bio.label',\n    defaultMessage: 'Biography',\n  },\n  instructorBioHelpText: {\n    id: 'course-authoring.schedule-section.instructor.bio.help-text',\n    defaultMessage: 'Please add the instructor\\'s biography',\n  },\n  instructorBioInputPlaceholder: {\n    id: 'course-authoring.schedule-section.instructor.bio.input.placeholder',\n    defaultMessage: 'Instructor biography',\n  },\n  instructorPhotoLabel: {\n    id: 'course-authoring.schedule-section.instructor.photo.label',\n    defaultMessage: 'Photo',\n  },\n  instructorPhotoHelpText: {\n    id: 'course-authoring.schedule-section.instructor.photo.help-text',\n    defaultMessage: 'Please add a photo of the instructor (Note: only JPEG or PNG format supported)',\n  },\n  instructorPhotoInputPlaceholder: {\n    id: 'course-authoring.schedule-section.instructor.photo.input.placeholder',\n    defaultMessage: 'Instructor photo URL',\n  },\n  instructorDelete: {\n    id: 'course-authoring.schedule-section.instructor.delete',\n    defaultMessage: 'Delete',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {\n  Card, Form, Col, Button,\n} from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport CourseUploadImage from '../../../generic/course-upload-image';\nimport messages from './messages';\n\nconst InstructorContainer = ({\n  instructor, idx, onDelete, onChange,\n}) => {\n  const intl = useIntl();\n  return (\n    <Card className=\"p-3.5\" key={idx}>\n      <Card.Body>\n        <Form>\n          <Form.Row>\n            <Form.Group as={Col} className=\"form-group-custom\">\n              <Form.Label>\n                {intl.formatMessage(messages.instructorNameLabel)}\n              </Form.Label>\n              <Form.Control\n                value={instructor?.name}\n                placeholder={intl.formatMessage(messages.instructorNameInputPlaceholder)}\n                onChange={(e) => onChange(e.target.value, idx, 'name')}\n              />\n              <Form.Text>\n                {intl.formatMessage(messages.instructorNameHelpText)}\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Col} className=\"form-group-custom\">\n              <Form.Label>\n                {intl.formatMessage(messages.instructorTitleLabel)}\n              </Form.Label>\n              <Form.Control\n                value={instructor?.title}\n                placeholder={intl.formatMessage(messages.instructorTitleInputPlaceholder)}\n                onChange={(e) => onChange(e.target.value, idx, 'title')}\n              />\n              <Form.Text>\n                {intl.formatMessage(messages.instructorTitleHelpText)}\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Col} className=\"form-group-custom\">\n              <Form.Label>\n                {intl.formatMessage(messages.instructorOrganizationLabel)}\n              </Form.Label>\n              <Form.Control\n                value={instructor?.organization}\n                placeholder={intl.formatMessage(messages.instructorOrganizationInputPlaceholder)}\n                onChange={(e) => onChange(e.target.value, idx, 'organization')}\n              />\n              <Form.Text>\n                {intl.formatMessage(messages.instructorOrganizationHelpText)}\n              </Form.Text>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} className=\"form-group-custom\">\n              <Form.Label>\n                {intl.formatMessage(messages.instructorBioLabel)}\n              </Form.Label>\n              <Form.Control\n                as={TextareaAutosize}\n                value={instructor?.bio}\n                placeholder={intl.formatMessage(messages.instructorBioInputPlaceholder)}\n                onChange={(e) => onChange(e.target.value, idx, 'bio')}\n              />\n              <Form.Text>\n                {intl.formatMessage(messages.instructorBioHelpText)}\n              </Form.Text>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row className=\"pl-1 pr-2.5\">\n            <CourseUploadImage\n              label={intl.formatMessage(messages.instructorPhotoLabel)}\n              assetImagePath={instructor?.image}\n              assetImageField=\"image\"\n              customInputPlaceholder={intl.formatMessage(\n                messages.instructorPhotoInputPlaceholder,\n              )}\n              customHelpText={intl.formatMessage(messages.instructorPhotoHelpText)}\n              onChange={(value, field) => onChange(value, idx, field)}\n            />\n          </Form.Row>\n        </Form>\n      </Card.Body>\n      <Card.Divider />\n      <Card.Footer className=\"p-0 mt-2.5\">\n        <Button variant=\"outline-primary\" onClick={() => onDelete(idx)}>\n          {intl.formatMessage(messages.instructorDelete)}\n        </Button>\n      </Card.Footer>\n    </Card>\n  );\n};\n\nInstructorContainer.defaultProps = {\n  instructor: {},\n};\n\nInstructorContainer.propTypes = {\n  instructor: PropTypes.shape({\n    bio: PropTypes.string,\n    image: PropTypes.string,\n    name: PropTypes.string,\n    organization: PropTypes.string,\n    title: PropTypes.string,\n  }),\n  idx: PropTypes.number.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InstructorContainer;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  instructorsTitle: {\n    id: 'course-authoring.schedule-section.instructors.title',\n    defaultMessage: 'Instructors',\n  },\n  instructorsDescription: {\n    id: 'course-authoring.schedule-section.instructors.description',\n    defaultMessage: 'Add details about the instructors for this course',\n  },\n  instructorAdd: {\n    id: 'course-authoring.schedule-section.instructors.add-instructor',\n    defaultMessage: 'Add Instructor',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuid } from 'uuid';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { Add as AddIcon } from '@edx/paragon/icons';\n\nimport InstructorContainer from './instructor-container';\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport messages from './messages';\n\nconst InstructorsSection = ({ instructors, onChange }) => {\n  const intl = useIntl();\n  const newInstructor = {\n    bio: '',\n    image: '',\n    name: '',\n    organization: '',\n    title: '',\n  };\n\n  const handleChange = (value, idx, field) => {\n    const updatedInstructors = instructors.map((instructor, index) => {\n      if (index === idx) {\n        return {\n          ...instructor,\n          [field]: value,\n        };\n      }\n      return instructor;\n    });\n\n    const updatedInstructorInfo = {\n      instructors: updatedInstructors,\n    };\n    onChange(updatedInstructorInfo, 'instructorInfo');\n  };\n\n  const handleDelete = (idx) => {\n    const updatedInstructorInfo = {\n      instructors: [...instructors],\n    };\n    updatedInstructorInfo.instructors.splice(idx, 1);\n    onChange(updatedInstructorInfo, 'instructorInfo');\n  };\n\n  const handleAdd = () => {\n    const updatedInstructorInfo = {\n      instructors: [...instructors, newInstructor],\n    };\n\n    onChange(updatedInstructorInfo, 'instructorInfo');\n  };\n\n  return (\n    <section className=\"section-container instructors-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.instructorsTitle)}\n        description={intl.formatMessage(messages.instructorsDescription)}\n      />\n      <ul className=\"instructors-list\">\n        {instructors.map((instructor, idx) => (\n          <InstructorContainer\n            instructor={instructor}\n            key={uuid}\n            idx={idx}\n            onDelete={handleDelete}\n            onChange={handleChange}\n          />\n        ))}\n      </ul>\n      <Button iconBefore={AddIcon} variant=\"primary\" onClick={handleAdd}>\n        {intl.formatMessage(messages.instructorAdd)}\n      </Button>\n    </section>\n  );\n};\n\nInstructorsSection.defaultProps = {\n  instructors: [],\n};\n\nInstructorsSection.propTypes = {\n  instructors: PropTypes.arrayOf(\n    PropTypes.shape({\n      bio: PropTypes.string,\n      image: PropTypes.string,\n      name: PropTypes.string,\n      organization: PropTypes.string,\n      title: PropTypes.string,\n    }),\n  ),\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default InstructorsSection;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  requirementsEntranceCollapseLabel: {\n    id: 'course-authoring.schedule-section.requirements.entrance.collapse.label',\n    defaultMessage: 'Grade requirements',\n  },\n  requirementsEntranceCollapseHelpText: {\n    id: 'course-authoring.schedule-section.requirements.entrance.collapse.help-text',\n    defaultMessage:\n      'The score student must meet in order to successfully complete the entrance exam.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Form, Stack } from '@edx/paragon';\n\nimport messages from './messages';\n\nconst GradeRequirements = ({\n  errorEffort,\n  entranceExamMinimumScorePct,\n  onChange,\n}) => (\n  <Form.Group\n    className={classNames('form-group-custom', {\n      'form-group-custom_isInvalid': errorEffort,\n    })}\n  >\n    <Form.Label>\n      <FormattedMessage {...messages.requirementsEntranceCollapseLabel} />\n    </Form.Label>\n    <Stack direction=\"horizontal\" className=\"w-25\">\n      <Form.Control\n        type=\"number\"\n        min={1}\n        max={100}\n        value={entranceExamMinimumScorePct}\n        onChange={(e) => onChange(e.target.value, 'entranceExamMinimumScorePct')}\n        trailingElement=\"%\"\n      />\n    </Stack>\n    {errorEffort && (\n      <Form.Control.Feedback className=\"feedback-error\">\n        {errorEffort}\n      </Form.Control.Feedback>\n    )}\n    <Form.Control.Feedback>\n      <FormattedMessage {...messages.requirementsEntranceCollapseHelpText} />\n    </Form.Control.Feedback>\n  </Form.Group>\n);\n\nGradeRequirements.defaultProps = {\n  errorEffort: '',\n  entranceExamMinimumScorePct: '',\n};\n\nGradeRequirements.propTypes = {\n  errorEffort: PropTypes.string,\n  entranceExamMinimumScorePct: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default GradeRequirements;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  requirementsEntrance: {\n    id: 'course-authoring.schedule-section.requirements.entrance.label',\n    defaultMessage: 'Entrance exam',\n  },\n  requirementsEntranceCollapseTitle: {\n    id: 'course-authoring.schedule-section.requirements.entrance.collapse.title',\n    defaultMessage: 'Require students to pass an exam before beginning the course.',\n  },\n  requirementsEntranceCollapseParagraph: {\n    id: 'course-authoring.schedule-section.requirements.entrance.collapse.paragraph',\n    defaultMessage: 'You can now view and author your course entrance exam from the {hyperlink}.',\n  },\n  requirementsEntranceCollapseHyperlink: {\n    id: 'course-authoring.schedule-section.requirements.entrance.collapse.hyperlink',\n    defaultMessage: 'course outline',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Form, Card, Hyperlink } from '@edx/paragon';\n\nimport { getPagePath } from '../../../utils';\nimport GradeRequirements from '../grade-requirements';\nimport messages from './messages';\n\nconst EntranceExam = ({\n  errorEffort,\n  isCheckedString,\n  entranceExamMinimumScorePct,\n  onChange,\n}) => {\n  const { courseId } = useParams();\n  const showEntranceExam = isCheckedString === 'true';\n  const toggleEntranceExam = () => onChange((!showEntranceExam).toString(), 'entranceExamEnabled');\n  const courseOutlineDestination = getPagePath(\n    courseId,\n    process.env.ENABLE_NEW_COURSE_OUTLINE_PAGE,\n    'course',\n  );\n\n  return (\n    <Form.Group className=\"form-group-custom\">\n      <Form.Label className=\"h3\">\n        <FormattedMessage {...messages.requirementsEntrance} />\n      </Form.Label>\n      <Card>\n        <Card.Section className=\"pt-2.5 pb-1 pl-3\">\n          <Form.Checkbox\n            checked={showEntranceExam}\n            onChange={toggleEntranceExam}\n          >\n            <FormattedMessage {...messages.requirementsEntranceCollapseTitle} />\n          </Form.Checkbox>\n        </Card.Section>\n        {showEntranceExam && (\n          <>\n            <Card.Divider />\n            <Card.Body className=\"pl-3 pt-2\">\n              <p className=\"small mb-2\">\n                <FormattedMessage\n                  {...messages.requirementsEntranceCollapseParagraph}\n                  values={{\n                    hyperlink: (\n                      <Hyperlink\n                        destination={courseOutlineDestination}\n                        target=\"_blank\"\n                        showLaunchIcon={false}\n                      >\n                        <FormattedMessage\n                          {...messages.requirementsEntranceCollapseHyperlink}\n                        />\n                      </Hyperlink>\n                    ),\n                  }}\n                />\n              </p>\n              <GradeRequirements\n                errorEffort={errorEffort}\n                entranceExamMinimumScorePct={entranceExamMinimumScorePct}\n                onChange={onChange}\n              />\n            </Card.Body>\n          </>\n        )}\n      </Card>\n    </Form.Group>\n  );\n};\n\nEntranceExam.defaultProps = {\n  errorEffort: '',\n  isCheckedString: '',\n  entranceExamMinimumScorePct: '',\n};\n\nEntranceExam.propTypes = {\n  errorEffort: PropTypes.string,\n  isCheckedString: PropTypes.string,\n  entranceExamMinimumScorePct: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default EntranceExam;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  requirementsTitle: {\n    id: 'course-authoring.schedule-section.requirements.title',\n    defaultMessage: 'Requirements',\n  },\n  requirementsDescription: {\n    id: 'course-authoring.schedule-section.requirements.description',\n    defaultMessage: 'Expectations of the students taking this course',\n  },\n  timepickerLabel: {\n    id: 'course-authoring.schedule-section.requirements.timepicker.label',\n    defaultMessage: 'Hours of effort per week',\n  },\n  timepickerHelpText: {\n    id: 'course-authoring.schedule-section.requirements.timepicker.help-text',\n    defaultMessage: 'Time spent on all course work',\n  },\n  dropdownLabel: {\n    id: 'course-authoring.schedule-section.requirements.dropdown.label',\n    defaultMessage: 'Prerequisite course',\n  },\n  dropdownHelpText: {\n    id: 'course-authoring.schedule-section.requirements.dropdown.help-text',\n    defaultMessage: 'Course that students must complete before beginning this course',\n  },\n  dropdownEmptyText: {\n    id: 'course-authoring.schedule-section.requirements.dropdown.empty-text',\n    defaultMessage: 'None',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Form, Dropdown } from '@edx/paragon';\n\nimport { TIME_FORMAT } from '../../constants';\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport EntranceExam from './entrance-exam';\nimport messages from './messages';\n\nconst RequirementsSection = ({\n  effort,\n  errorFields,\n  aboutPageEditable,\n  preRequisiteCourses,\n  entranceExamEnabled,\n  isEntranceExamsEnabled,\n  possiblePreRequisiteCourses,\n  entranceExamMinimumScorePct,\n  isPrerequisiteCoursesEnabled,\n  onChange,\n}) => {\n  const intl = useIntl();\n  const selectedItem = possiblePreRequisiteCourses?.find(\n    (course) => course.courseKey === preRequisiteCourses[0],\n  );\n  const formattedSelectedItem = selectedItem?.displayName || intl.formatMessage(messages.dropdownEmptyText);\n\n  const renderPrerequisiteDropdown = () => (\n    <Form.Group\n      className=\"form-group-custom dropdown-prerequisite\"\n      controlId=\"prerequisiteDropdown\"\n    >\n      <Form.Label>{intl.formatMessage(messages.dropdownLabel)}</Form.Label>\n      <Dropdown className=\"bg-white\">\n        <Dropdown.Toggle id=\"prerequisiteDropdown\" variant=\"outline-primary\">\n          {formattedSelectedItem}\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item\n            key={intl.formatMessage(messages.dropdownEmptyText)}\n            onClick={() => onChange([], 'preRequisiteCourses')}\n          >\n            {intl.formatMessage(messages.dropdownEmptyText)}\n          </Dropdown.Item>\n          {possiblePreRequisiteCourses.map((course) => (\n            <Dropdown.Item\n              key={course.courseKey}\n              onClick={() => onChange([course.courseKey], 'preRequisiteCourses')}\n            >\n              {course.displayName}\n            </Dropdown.Item>\n          ))}\n        </Dropdown.Menu>\n      </Dropdown>\n      <Form.Control.Feedback>\n        {intl.formatMessage(messages.dropdownHelpText)}\n      </Form.Control.Feedback>\n    </Form.Group>\n  );\n\n  return (\n    <section className=\"section-container requirements-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.requirementsTitle)}\n        description={intl.formatMessage(messages.requirementsDescription)}\n      />\n      {aboutPageEditable && (\n        <Form.Group className=\"form-group-custom\">\n          <Form.Label>\n            {intl.formatMessage(messages.timepickerLabel)}\n          </Form.Label>\n          <Form.Control\n            value={effort || ''}\n            placeholder={TIME_FORMAT.toUpperCase()}\n            onChange={(e) => onChange(e.target.value, 'effort')}\n          />\n          <Form.Control.Feedback>\n            {intl.formatMessage(messages.timepickerHelpText)}\n          </Form.Control.Feedback>\n        </Form.Group>\n      )}\n      {isPrerequisiteCoursesEnabled && renderPrerequisiteDropdown()}\n      {isEntranceExamsEnabled && (\n        <EntranceExam\n          errorEffort={errorFields?.entranceExamMinimumScorePct}\n          isCheckedString={entranceExamEnabled}\n          entranceExamMinimumScorePct={entranceExamMinimumScorePct}\n          onChange={onChange}\n        />\n      )}\n    </section>\n  );\n};\n\nconst preRequisitesCourse = {\n  courseKey: PropTypes.string,\n  displayName: PropTypes.string,\n  lmsLink: PropTypes.string,\n  number: PropTypes.string,\n  org: PropTypes.string,\n  rerunLink: PropTypes.string,\n  run: PropTypes.string,\n  url: PropTypes.string,\n};\n\nRequirementsSection.defaultProps = {\n  effort: '',\n  errorFields: {},\n  entranceExamEnabled: '',\n  preRequisiteCourses: [],\n  entranceExamMinimumScorePct: '',\n};\n\nRequirementsSection.propTypes = {\n  effort: PropTypes.string,\n  errorFields: PropTypes.objectOf(PropTypes.string),\n  aboutPageEditable: PropTypes.bool.isRequired,\n  preRequisiteCourses: PropTypes.arrayOf(PropTypes.string),\n  entranceExamEnabled: PropTypes.string,\n  isEntranceExamsEnabled: PropTypes.bool.isRequired,\n  possiblePreRequisiteCourses: PropTypes.arrayOf(\n    PropTypes.shape(preRequisitesCourse),\n  ).isRequired,\n  entranceExamMinimumScorePct: PropTypes.string,\n  isPrerequisiteCoursesEnabled: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default RequirementsSection;\n","const creativeCommonsLicensesURL = 'https://creativecommons.org/licenses';\nconst creativeCommonsVersion = '4.0';\n\nconst LICENSE_TYPE = {\n  allRightsReserved: 'all-rights-reserved',\n  creativeCommons: 'creative-commons',\n};\n\nconst LICENSE_COMMONS_OPTIONS = {\n  attribution: 'BY',\n  nonCommercial: 'NC',\n  noDerivatives: 'ND',\n  shareAlike: 'SA',\n};\n\nexport {\n  LICENSE_TYPE, LICENSE_COMMONS_OPTIONS, creativeCommonsLicensesURL, creativeCommonsVersion,\n};\n","const ApplyWrapper = ({ condition, wrapper, children }) => (condition ? wrapper(children) : children);\n\nexport default ApplyWrapper;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  allRightReservedLabel: {\n    id: 'course-authoring.schedule-section.license.all-right-reserved.label',\n    defaultMessage: 'All rights reserved',\n  },\n  creativeCommonsReservedLabel: {\n    id: 'course-authoring.schedule-section.license.creative-commons.label',\n    defaultMessage: 'Some rights reserved',\n  },\n});\n\nexport default messages;\n","/* eslint-disable react/no-unstable-nested-components */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Icon, Stack, Hyperlink } from '@edx/paragon';\nimport {\n  Attribution, Copyright, Cc, Nd, Nc, Sa,\n} from '@edx/paragon/icons';\n\nimport ApplyWrapper from '../../../generic/ApplyWrapper';\nimport { LICENSE_TYPE } from '../constants';\nimport messages from './messages';\n\nconst LicenseIcons = ({ licenseType, licenseDetails, licenseURL }) => (\n  <ApplyWrapper\n    condition={licenseURL}\n    wrapper={(children) => (\n      <Hyperlink\n        destination={licenseURL}\n        target=\"_blank\"\n        showLaunchIcon={false}\n      >\n        {children}\n      </Hyperlink>\n    )}\n  >\n    <Stack direction=\"horizontal\" gap={1}>\n      {[LICENSE_TYPE.allRightsReserved, null].includes(licenseType) && (\n        <Icon\n          src={Copyright}\n          name=\"testaa\"\n          className=\"mr-1 text-gray-700\"\n          style={{ height: '1.5rem', width: '1.5rem' }}\n        />\n      )}\n      {licenseType === LICENSE_TYPE.creativeCommons && (\n        <Icon\n          src={Cc}\n          className=\"mr-1 text-gray-700\"\n          style={{ height: '1.5rem', width: '1.5rem' }}\n        />\n      )}\n      {licenseDetails?.attribution && (\n        <Icon\n          src={Attribution}\n          className=\"mr-1 text-gray-700\"\n          style={{ height: '1.5rem', width: '1.5rem' }}\n        />\n      )}\n      {licenseDetails?.nonCommercial && (\n        <Icon\n          src={Nc}\n          className=\"mr-1 text-gray-700\"\n          style={{ height: '1.5rem', width: '1.5rem' }}\n        />\n      )}\n      {licenseDetails?.noDerivatives && (\n        <Icon\n          src={Nd}\n          className=\"mr-1 text-gray-700\"\n          style={{ height: '1.5rem', width: '1.5rem' }}\n        />\n      )}\n      {licenseDetails?.shareAlike && (\n        <Icon\n          src={Sa}\n          className=\"mr-1 text-gray-700\"\n          style={{ height: '1.5rem', width: '1.5rem' }}\n        />\n      )}\n      {[LICENSE_TYPE.allRightsReserved, null].includes(licenseType) && (\n        <span className=\"small text-gray-700\">\n          <FormattedMessage {...messages.allRightReservedLabel} />\n        </span>\n      )}\n      {licenseType === LICENSE_TYPE.creativeCommons && (\n        <span className=\"small text-gray-700\">\n          <FormattedMessage {...messages.creativeCommonsReservedLabel} />\n        </span>\n      )}\n    </Stack>\n  </ApplyWrapper>\n);\n\nLicenseIcons.defaultProps = {\n  licenseURL: '',\n  licenseType: null,\n};\n\nLicenseIcons.propTypes = {\n  licenseType: PropTypes.oneOf(Object.values(LICENSE_TYPE)),\n  licenseDetails: PropTypes.shape({\n    attribution: PropTypes.bool,\n    nonCommercial: PropTypes.bool,\n    noDerivatives: PropTypes.bool,\n    shareAlike: PropTypes.bool,\n  }).isRequired,\n  licenseURL: PropTypes.string,\n};\n\nexport default LicenseIcons;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  licenseDisplayLabel: {\n    id: 'course-authoring.schedule-section.license.license-display.label',\n    defaultMessage: 'License display',\n  },\n  licenseDisplayParagraph: {\n    id: 'course-authoring.schedule-section.license.license-display.paragraph',\n    defaultMessage: 'The following message will be displayed at the bottom of the courseware pages within your course:',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Form } from '@edx/paragon';\n\nimport { LICENSE_TYPE } from '../constants';\nimport LicenseIcons from '../license-icons';\nimport messages from './messages';\n\nconst LicenseDisplay = ({ licenseType, licenseDetails, licenseURL }) => (\n  <Form.Group className=\"p-2 mb-2.5\">\n    <p className=\"text-black mb-2.5\">\n      <FormattedMessage {...messages.licenseDisplayLabel} />\n    </p>\n    <p className=\"small text-gray-700\">\n      <FormattedMessage {...messages.licenseDisplayParagraph} />\n    </p>\n    <LicenseIcons\n      licenseType={licenseType}\n      licenseDetails={licenseDetails}\n      licenseURL={licenseURL}\n    />\n  </Form.Group>\n);\n\nLicenseDisplay.defaultProps = {\n  licenseURL: '',\n  licenseType: null,\n  licenseDetails: {},\n};\n\nLicenseDisplay.propTypes = {\n  licenseType: PropTypes.oneOf(Object.values(LICENSE_TYPE)),\n  licenseDetails: PropTypes.shape({\n    attribution: PropTypes.bool,\n    nonCommercial: PropTypes.bool,\n    noDerivatives: PropTypes.bool,\n    shareAlike: PropTypes.bool,\n  }),\n  licenseURL: PropTypes.string,\n};\n\nexport default LicenseDisplay;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  licenseType: {\n    id: 'course-authoring.schedule-section.license.type',\n    defaultMessage: 'License type',\n  },\n  licenseChoice1: {\n    id: 'course-authoring.schedule-section.license.choice-1',\n    defaultMessage: 'All rights reserved',\n  },\n  licenseChoice2: {\n    id: 'course-authoring.schedule-section.license.choice-2',\n    defaultMessage: 'Creative commons',\n  },\n  licenseTooltip1: {\n    id: 'course-authoring.schedule-section.license.tooltip-1',\n    defaultMessage: 'You reserve all rights for your work',\n  },\n  licenseTooltip2: {\n    id: 'course-authoring.schedule-section.license.tooltip-2',\n    defaultMessage: 'You waive some rights for your work, such that others can use it too',\n  },\n  creativeCommonsURLParagraph: {\n    id: 'course-authoring.schedule-section.license.creative-commons.url',\n    defaultMessage: 'Learn more about creative commons',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport {\n  Form,\n  ButtonGroup,\n  Button,\n  OverlayTrigger,\n  Tooltip,\n} from '@edx/paragon';\n\nimport { LICENSE_TYPE } from '../constants';\nimport messages from './messages';\n\nconst LicenseSelector = ({ licenseType, onChangeLicenseType }) => {\n  const LICENSE_BUTTON_GROUP_LABELS = {\n    [LICENSE_TYPE.allRightsReserved]: {\n      label: <FormattedMessage {...messages.licenseChoice1} />,\n      tooltip: <FormattedMessage {...messages.licenseTooltip1} />,\n    },\n    [LICENSE_TYPE.creativeCommons]: {\n      label: <FormattedMessage {...messages.licenseChoice2} />,\n      tooltip: <FormattedMessage {...messages.licenseTooltip2} />,\n    },\n  };\n\n  const renderButton = (type) => {\n    const isActive = licenseType === type;\n\n    return (\n      <OverlayTrigger\n        key={type}\n        overlay={\n          <Tooltip id={`tooltip-${type}`}>{LICENSE_BUTTON_GROUP_LABELS[type].tooltip}</Tooltip>\n        }\n      >\n        <Button\n          variant={isActive ? 'primary' : 'outline-primary'}\n          onClick={() => onChangeLicenseType(type, 'license')}\n        >\n          {LICENSE_BUTTON_GROUP_LABELS[type].label}\n        </Button>\n      </OverlayTrigger>\n    );\n  };\n\n  return (\n    <Form.Group className=\"p-2 mb-2.5\">\n      <p className=\"text-black mb-2.5\">\n        <FormattedMessage {...messages.licenseType} />\n      </p>\n      <ButtonGroup className=\"bg-white\">\n        {renderButton(LICENSE_TYPE.allRightsReserved)}\n        {renderButton(LICENSE_TYPE.creativeCommons)}\n      </ButtonGroup>\n    </Form.Group>\n  );\n};\n\nLicenseSelector.defaultProps = {\n  licenseType: null,\n};\n\nLicenseSelector.propTypes = {\n  licenseType: PropTypes.oneOf(Object.values(LICENSE_TYPE)),\n  onChangeLicenseType: PropTypes.func.isRequired,\n};\n\nexport default LicenseSelector;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  licenseCreativeOptionsLabel: {\n    id: 'course-authoring.schedule-section.license.creative-commons.options.label',\n    defaultMessage: 'Options for creative commons',\n  },\n  licenseCreativeOptionsHelpText: {\n    id: 'course-authoring.schedule-section.license.creative-commons.options.help-text',\n    defaultMessage: 'The following options are available for the creative commons license.',\n  },\n  licenseCreativeOptionBYLabel: {\n    id: 'course-authoring.schedule-section.license.creative-commons.option.BY.label',\n    defaultMessage: 'Attribution',\n  },\n  licenseCreativeOptionBYDescription: {\n    id: 'course-authoring.schedule-section.license.creative-commons.option.BY.description',\n    defaultMessage: 'Allow others to copy, distribute, display and perform your copyrighted work but only if they give credit the way you request. Currently, this option is required.',\n  },\n  licenseCreativeOptionNCLabel: {\n    id: 'course-authoring.schedule-section.license.creative-commons.option.NC.label',\n    defaultMessage: 'Noncommercial',\n  },\n  licenseCreativeOptionNCDescription: {\n    id: 'course-authoring.schedule-section.license.creative-commons.option.NC.description',\n    defaultMessage: ' Allow others to copy, distribute, display and perform your work - and derivative works based upon it - but for noncommercial purposes only.',\n  },\n  licenseCreativeOptionNDLabel: {\n    id: 'course-authoring.schedule-section.license.creative-commons.option.ND.label',\n    defaultMessage: 'No derivatives',\n  },\n  licenseCreativeOptionNDDescription: {\n    id: 'course-authoring.schedule-section.license.creative-commons.option.ND.description',\n    defaultMessage: 'Allow others to copy, distribute, display and perform only verbatim copies of your work, not derivative works based upon it. This option is incompatible with \"Share Alike\".',\n  },\n  licenseCreativeOptionSALabel: {\n    id: 'course-authoring.schedule-section.license.creative-commons.option.SA.label',\n    defaultMessage: 'Share alike',\n  },\n  licenseCreativeOptionSADescription: {\n    id: 'course-authoring.schedule-section.license.creative-commons.option.SA.description',\n    defaultMessage: 'Allow others to distribute derivative works only under a license identical to the license that governs your work. This option is incompatible with \"No Derivatives\".',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow, Form, Stack, CheckboxControl,\n} from '@edx/paragon';\n\nimport { LICENSE_COMMONS_OPTIONS } from '../constants';\nimport messages from './messages';\n\nconst LicenseCommonsOptions = ({ licenseDetails, onToggleCheckbox }) => {\n  const optionDetails = [\n    {\n      id: LICENSE_COMMONS_OPTIONS.attribution,\n      label: messages.licenseCreativeOptionBYLabel,\n      description: messages.licenseCreativeOptionBYDescription,\n      disabled: true,\n      checked: licenseDetails.attribution,\n    },\n    {\n      id: LICENSE_COMMONS_OPTIONS.nonCommercial,\n      label: messages.licenseCreativeOptionNCLabel,\n      description: messages.licenseCreativeOptionNCDescription,\n      disabled: false,\n      checked: licenseDetails.nonCommercial,\n    },\n    {\n      id: LICENSE_COMMONS_OPTIONS.noDerivatives,\n      label: messages.licenseCreativeOptionNDLabel,\n      description: messages.licenseCreativeOptionNDDescription,\n      disabled: false,\n      checked: licenseDetails.noDerivatives,\n    },\n    {\n      id: LICENSE_COMMONS_OPTIONS.shareAlike,\n      label: messages.licenseCreativeOptionSALabel,\n      description: messages.licenseCreativeOptionSADescription,\n      disabled: false,\n      checked: licenseDetails.shareAlike,\n    },\n  ];\n\n  const handleCheckboxClick = (option) => {\n    if (!option.disabled) {\n      onToggleCheckbox(option.id);\n    }\n  };\n\n  return (\n    <div className=\"p-2 mb-2.5\">\n      <p className=\"text-black\">\n        <FormattedMessage {...messages.licenseCreativeOptionsLabel} />\n      </p>\n      <p className=\"small\">\n        <FormattedMessage {...messages.licenseCreativeOptionsHelpText} />\n      </p>\n      <Stack gap={1}>\n        {optionDetails.map((option) => (\n          <Form.Group\n            key={option.id}\n            className={classNames('license-option', {\n              'license-option_clickable': !option.disabled,\n            })}\n            onClick={() => handleCheckboxClick(option)}\n          >\n            <ActionRow>\n              <CheckboxControl\n                checked={option.checked}\n                disabled={option.disabled}\n                className=\"p-1\"\n                readOnly\n              />\n              <p className=\"col-2 text-gray-700 pl-0 ml-0\">\n                <FormattedMessage {...option.label} />\n              </p>\n              <ActionRow.Spacer />\n              <p className=\"small mt-1 text-gray-700\">\n                <FormattedMessage {...option.description} />\n              </p>\n            </ActionRow>\n          </Form.Group>\n        ))}\n      </Stack>\n    </div>\n  );\n};\n\nLicenseCommonsOptions.propTypes = {\n  licenseDetails: PropTypes.shape({\n    attribution: PropTypes.bool.isRequired,\n    nonCommercial: PropTypes.bool.isRequired,\n    noDerivatives: PropTypes.bool.isRequired,\n    shareAlike: PropTypes.bool.isRequired,\n  }).isRequired,\n  onToggleCheckbox: PropTypes.func.isRequired,\n};\n\nexport default LicenseCommonsOptions;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  licenseTitle: {\n    id: 'course-authoring.schedule-section.license.title',\n    defaultMessage: 'Course content license',\n  },\n  licenseDescription: {\n    id: 'course-authoring.schedule-section.license.description',\n    defaultMessage: 'Select the default license for course content',\n  },\n});\n\nexport default messages;\n","import { useEffect, useState } from 'react';\n\nimport { LICENSE_TYPE, LICENSE_COMMONS_OPTIONS, creativeCommonsVersion } from './constants';\nimport { generateLicenseURL } from './utils';\n\nconst useLicenseDetails = (license, onChange) => {\n  const [licenseType, setLicenseType] = useState(null);\n  const [licenseDetails, setLicenseDetails] = useState({});\n  const [licenseURL, setLicenseURL] = useState('');\n\n  const {\n    attribution, nonCommercial, noDerivatives, shareAlike,\n  } = LICENSE_COMMONS_OPTIONS;\n\n  const defaultLicenseDetails = {\n    attribution: true,\n    nonCommercial: true,\n    noDerivatives: true,\n    shareAlike: false,\n  };\n\n  const updateLicense = () => {\n    if (licenseType === LICENSE_TYPE.allRightsReserved) {\n      onChange(LICENSE_TYPE.allRightsReserved, 'license');\n    }\n\n    if (licenseType === LICENSE_TYPE.creativeCommons) {\n      const orderedDetails = Object.entries(licenseDetails)\n        .filter(([, value]) => value)\n        .map(([key]) => LICENSE_COMMONS_OPTIONS[key]);\n\n      const updatedString = `${\n        LICENSE_TYPE.creativeCommons\n      }: ver=${creativeCommonsVersion} ${orderedDetails.join(' ')}`;\n      onChange(updatedString, 'license');\n    }\n  };\n\n  useEffect(() => {\n    if (license?.includes(LICENSE_TYPE.creativeCommons)) {\n      setLicenseType(LICENSE_TYPE.creativeCommons);\n      setLicenseDetails((prevLicenseDetails) => ({\n        ...prevLicenseDetails,\n        attribution: license.includes(attribution),\n        nonCommercial: license.includes(nonCommercial),\n        noDerivatives: license.includes(noDerivatives),\n        shareAlike: license.includes(shareAlike),\n      }));\n    } else if (license?.includes(LICENSE_TYPE.allRightsReserved)) {\n      setLicenseType(LICENSE_TYPE.allRightsReserved);\n      setLicenseDetails({});\n    } else {\n      setLicenseType(null);\n      setLicenseDetails({});\n    }\n  }, [license]);\n\n  useEffect(() => {\n    setLicenseURL(\n      licenseType === LICENSE_TYPE.creativeCommons\n        ? generateLicenseURL(licenseDetails)\n        : '',\n    );\n    updateLicense();\n  }, [licenseType, licenseDetails]);\n\n  const handleToggleCheckbox = (option) => {\n    const toggledLicenseDetail = Object.keys(LICENSE_COMMONS_OPTIONS).find(\n      (key) => LICENSE_COMMONS_OPTIONS[key] === option,\n    );\n\n    setLicenseDetails((prev) => {\n      if (option === noDerivatives) {\n        return {\n          ...prev,\n          noDerivatives: !prev.noDerivatives,\n          shareAlike: false,\n        };\n      }\n\n      if (option === shareAlike) {\n        return {\n          ...prev,\n          shareAlike: !prev.shareAlike,\n          noDerivatives: false,\n        };\n      }\n\n      return {\n        ...prev,\n        [toggledLicenseDetail]: !prev[toggledLicenseDetail],\n      };\n    });\n  };\n\n  const handleChangeLicenseType = (type) => {\n    setLicenseType(type);\n    setLicenseDetails(\n      type === LICENSE_TYPE.creativeCommons ? defaultLicenseDetails : {},\n    );\n  };\n\n  return {\n    licenseURL,\n    licenseType,\n    licenseDetails,\n    handleToggleCheckbox,\n    handleChangeLicenseType,\n  };\n};\n\n/* eslint-disable-next-line import/prefer-default-export */\nexport { useLicenseDetails };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport SectionSubHeader from '../../generic/section-sub-header';\nimport LicenseDisplay from './license-display';\nimport LicenseSelector from './license-selector';\nimport LicenseCommonsOptions from './license-commons-options';\nimport { LICENSE_TYPE } from './constants';\nimport messages from './messages';\nimport { useLicenseDetails } from './hooks';\n\nconst LicenseSection = ({ license, onChange }) => {\n  const intl = useIntl();\n  const {\n    licenseURL,\n    licenseType,\n    licenseDetails,\n    handleToggleCheckbox,\n    handleChangeLicenseType,\n  } = useLicenseDetails(license, onChange);\n\n  return (\n    <section className=\"section-container license-section\">\n      <SectionSubHeader\n        title={intl.formatMessage(messages.licenseTitle)}\n        description={intl.formatMessage(messages.licenseDescription)}\n      />\n      <LicenseSelector\n        licenseType={licenseType}\n        onChangeLicenseType={handleChangeLicenseType}\n      />\n      {licenseType === LICENSE_TYPE.creativeCommons && (\n        <LicenseCommonsOptions\n          licenseDetails={licenseDetails}\n          onToggleCheckbox={handleToggleCheckbox}\n        />\n      )}\n      <LicenseDisplay\n        licenseURL={licenseURL}\n        licenseType={licenseType}\n        licenseDetails={licenseDetails}\n      />\n    </section>\n  );\n};\n\nLicenseSection.defaultProps = {\n  license: null,\n};\n\nLicenseSection.propTypes = {\n  license: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default LicenseSection;\n","import {\n  LICENSE_COMMONS_OPTIONS,\n  creativeCommonsLicensesURL,\n  creativeCommonsVersion,\n} from './constants';\n\nconst generateLicenseURL = (details) => {\n  const detailsString = Object.entries(details)\n    .filter(([, value]) => value)\n    .map(([key]) => LICENSE_COMMONS_OPTIONS[key].toLowerCase())\n    .join('-');\n\n  return `${creativeCommonsLicensesURL}/${detailsString}/${creativeCommonsVersion}`;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { generateLicenseURL };\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  scheduleSidebarTitle: {\n    id: 'course-authoring.schedule.sidebar.about.title',\n    defaultMessage: 'How are these settings used?',\n  },\n  scheduleSidebarAbout: {\n    id: 'course-authoring.schedule.sidebar.about.text',\n    defaultMessage: \"Your course's schedule determines when students can enroll in and begin a course. Other information from this page appears on the About page for your course. This information includes the course overview, course image, introduction video, and estimated time requirements. Students use About pages to choose new courses to take.\",\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\n\nimport { HelpSidebar } from '../../generic/help-sidebar';\nimport messages from './messages';\n\nconst ScheduleSidebar = ({ courseId, proctoredExamSettingsUrl }) => {\n  const intl = useIntl();\n  return (\n    <HelpSidebar\n      courseId={courseId}\n      proctoredExamSettingsUrl={proctoredExamSettingsUrl}\n      showOtherSettings\n    >\n      <h4 className=\"help-sidebar-about-title\">\n        {intl.formatMessage(messages.scheduleSidebarTitle)}\n      </h4>\n      <p className=\"help-sidebar-about-descriptions\">\n        {intl.formatMessage(messages.scheduleSidebarAbout)}\n      </p>\n    </HelpSidebar>\n  );\n};\n\nScheduleSidebar.defaultProps = {\n  proctoredExamSettingsUrl: '',\n};\n\nScheduleSidebar.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  proctoredExamSettingsUrl: PropTypes.string,\n};\n\nexport default ScheduleSidebar;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headingTitle: {\n    id: 'course-authoring.schedule.heading.title',\n    defaultMessage: 'Schedule & details',\n  },\n  headingSubtitle: {\n    id: 'course-authoring.schedule.heading.subtitle',\n    defaultMessage: 'Settings',\n  },\n  buttonSaveText: {\n    id: 'course-authoring.schedule.alert.button.save',\n    defaultMessage: 'Save changes',\n  },\n  buttonSavingText: {\n    id: 'course-authoring.schedule.alert.button.saving',\n    defaultMessage: 'Saving',\n  },\n  buttonCancelText: {\n    id: 'course-authoring.schedule.alert.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n  alertWarningAriaLabelledby: {\n    id: 'course-authoring.schedule.alert.warning.aria.labelledby',\n    defaultMessage: 'notification-warning-title',\n  },\n  alertWarningAriaDescribedby: {\n    id: 'course-authoring.schedule.alert.warning.aria.describedby',\n    defaultMessage: 'notification-warning-description',\n  },\n  alertWarning: {\n    id: 'course-authoring.schedule.alert.warning',\n    defaultMessage: 'You\\'ve made some changes',\n  },\n  alertWarningOnSaveWithError: {\n    id: 'course-authoring.schedule.alert.warning.save.error',\n    defaultMessage: 'You\\'ve made some changes, but there are some errors',\n  },\n  alertWarningDescriptions: {\n    id: 'course-authoring.schedule.alert.warning.descriptions',\n    defaultMessage: 'Your changes will not take effect until you save your progress.',\n  },\n  alertWarningDescriptionsOnSaveWithError: {\n    id: 'course-authoring.schedule.alert.warning.save.descriptions.error',\n    defaultMessage: 'Please address the errors on this page first, and then save your progress.',\n  },\n  alertSuccessAriaLabelledby: {\n    id: 'course-authoring.schedule.alert.success.aria.labelledby',\n    defaultMessage: 'alert-confirmation-title',\n  },\n  alertSuccessAriaDescribedby: {\n    id: 'course-authoring.schedule.alert.success.aria.describedby',\n    defaultMessage: 'alert-confirmation-description',\n  },\n  alertSuccess: {\n    id: 'course-authoring.schedule.alert.success',\n    defaultMessage: 'Your changes have been saved.',\n  },\n  errorMessage1: {\n    id: 'course-authoring.schedule.schedule-section.error-message-1',\n    defaultMessage: 'The certificates display behavior must be \\'A date after the course end date\\' if certificate available date is set.',\n  },\n  errorMessage2: {\n    id: 'course-authoring.schedule.schedule-section.error-message-2',\n    defaultMessage: 'The enrollment end date cannot be after the course end date.',\n  },\n  errorMessage3: {\n    id: 'course-authoring.schedule.schedule-section.error-message-3',\n    defaultMessage: 'The enrollment start date cannot be after the enrollment end date.',\n  },\n  errorMessage4: {\n    id: 'course-authoring.schedule.schedule-section.error-message-4',\n    defaultMessage: 'The course start date must be later than the enrollment start date.',\n  },\n  errorMessage5: {\n    id: 'course-authoring.schedule.schedule-section.error-message-5',\n    defaultMessage: 'The course end date must be later than the course start date.',\n  },\n  errorMessage6: {\n    id: 'course-authoring.schedule.schedule-section.error-message-6',\n    defaultMessage: 'The certificate available date must be later than the course end date.',\n  },\n  errorMessage7: {\n    id: 'course-authoring.schedule.schedule-section.error-message-7',\n    defaultMessage: 'The course must have an assigned start date.',\n  },\n  errorMessage8: {\n    id: 'course-authoring.schedule.schedule-section.error-message-8',\n    defaultMessage: 'Please enter an integer between %(min)s and %(max)s.',\n  },\n});\n\nexport default messages;\n","import { CERTIFICATE_DISPLAY_BEHAVIOR } from './schedule-section/certificate-display-row';\nimport { defaultEntranceExamMinimumScorePct } from './constants';\nimport messages from './messages';\n\nconst isDateBeforeOrEqual = (\n  dateFormer,\n  dateLatter,\n  allowEqual = false,\n  checkExists = true,\n) => {\n  if (checkExists && (!dateFormer || !dateLatter)) {\n    return false;\n  }\n  if (allowEqual) {\n    return new Date(dateFormer) < new Date(dateLatter);\n  }\n\n  return new Date(dateFormer) <= new Date(dateLatter);\n};\n\nconst validateScheduleAndDetails = (courseDetails, intl) => {\n  const errors = {};\n  const {\n    endDate,\n    startDate,\n    enrollmentEnd,\n    enrollmentStart,\n    certificateAvailableDate,\n    entranceExamMinimumScorePct,\n    certificatesDisplayBehavior,\n  } = courseDetails;\n\n  if (!startDate) {\n    errors.startDate = intl.formatMessage(messages.errorMessage7);\n  }\n\n  if (isDateBeforeOrEqual(certificateAvailableDate, endDate)) {\n    errors.certificateAvailableDate = intl.formatMessage(messages.errorMessage6);\n  }\n\n  if (isDateBeforeOrEqual(endDate, startDate)) {\n    errors.endDate = intl.formatMessage(messages.errorMessage5);\n  }\n\n  if (isDateBeforeOrEqual(startDate, enrollmentStart, true)) {\n    errors.enrollmentStart = intl.formatMessage(messages.errorMessage4);\n  }\n\n  if (isDateBeforeOrEqual(enrollmentEnd, enrollmentStart)) {\n    errors.enrollmentStart = intl.formatMessage(messages.errorMessage3);\n  }\n\n  if (isDateBeforeOrEqual(endDate, enrollmentEnd, true)) {\n    errors.enrollmentEnd = intl.formatMessage(messages.errorMessage2);\n  }\n\n  if (\n    certificatesDisplayBehavior === CERTIFICATE_DISPLAY_BEHAVIOR.endWithDate\n    && !certificateAvailableDate\n  ) {\n    errors.certificateAvailableDate = intl.formatMessage(messages.errorMessage1);\n  }\n\n  if (entranceExamMinimumScorePct) {\n    const number = Number(entranceExamMinimumScorePct);\n    if (Number.isNaN(number) || number < 1 || number > 100) {\n      errors.entranceExamMinimumScorePct = intl.formatMessage(messages.errorMessage8);\n    }\n  }\n\n  return errors;\n};\n\nconst updateWithDefaultValues = (values) => {\n  const { entranceExamMinimumScorePct } = values;\n  if (entranceExamMinimumScorePct === '') {\n    return {\n      ...values,\n      entranceExamMinimumScorePct: defaultEntranceExamMinimumScorePct,\n    };\n  }\n\n  return values;\n};\n\nexport { updateWithDefaultValues, validateScheduleAndDetails };\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport {\n  Container, Button, Layout, StatefulButton,\n} from '@edx/paragon';\nimport {\n  CheckCircle as CheckCircleIcon,\n  Warning as WarningIcon,\n} from '@edx/paragon/icons';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport Placeholder from '@edx/frontend-lib-content-components';\n\nimport { RequestStatus } from '../data/constants';\nimport { useModel } from '../generic/model-store';\nimport AlertMessage from '../generic/alert-message';\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport { STATEFUL_BUTTON_STATES } from '../constants';\nimport {\n  fetchCourseSettingsQuery,\n  fetchCourseDetailsQuery,\n  updateCourseDetailsQuery,\n} from './data/thunks';\nimport {\n  getCourseSettings,\n  getCourseDetails,\n  getLoadingDetailsStatus,\n  getLoadingSettingsStatus,\n} from './data/selectors';\nimport BasicSection from './basic-section';\nimport CreditSection from './credit-section';\nimport DetailsSection from './details-section';\nimport IntroducingSection from './introducing-section';\nimport PacingSection from './pacing-section';\nimport ScheduleSection from './schedule-section';\nimport LearningOutcomesSection from './learning-outcomes-section';\nimport InstructorsSection from './instructors-section';\nimport RequirementsSection from './requirements-section';\nimport LicenseSection from './license-section';\nimport ScheduleSidebar from './schedule-sidebar';\nimport messages from './messages';\nimport { useSaveValuesPrompt } from './hooks';\nimport getPageHeadTitle from '../generic/utils';\n\nconst ScheduleAndDetails = ({ intl, courseId }) => {\n  const courseSettings = useSelector(getCourseSettings);\n  const courseDetails = useSelector(getCourseDetails);\n  const loadingDetailsStatus = useSelector(getLoadingDetailsStatus);\n  const loadingSettingsStatus = useSelector(getLoadingSettingsStatus);\n  const isLoading = loadingDetailsStatus === RequestStatus.IN_PROGRESS\n    || loadingSettingsStatus === RequestStatus.IN_PROGRESS;\n\n  const course = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(course?.name, intl.formatMessage(messages.headingTitle));\n\n  const {\n    errorFields,\n    savingStatus,\n    editedValues,\n    isQueryPending,\n    isEditableState,\n    showModifiedAlert,\n    showSuccessfulAlert,\n    dispatch,\n    handleResetValues,\n    handleValuesChange,\n    handleUpdateValues,\n    handleQueryProcessing,\n    handleInternetConnectionFailed,\n  } = useSaveValuesPrompt(courseId, updateCourseDetailsQuery, courseDetails);\n\n  const {\n    platformName,\n    isCreditCourse,\n    upgradeDeadline,\n    languageOptions,\n    marketingEnabled,\n    licensingEnabled,\n    aboutPageEditable,\n    courseDisplayName,\n    sidebarHtmlEnabled,\n    lmsLinkForAboutPage,\n    enrollmentEndEditable,\n    isEntranceExamsEnabled,\n    creditEligibilityEnabled,\n    shortDescriptionEditable,\n    enableExtendedCourseDetails,\n    isPrerequisiteCoursesEnabled,\n    mfeProctoredExamSettingsUrl,\n    possiblePreRequisiteCourses,\n    canShowCertificateAvailableDateField,\n  } = courseSettings;\n\n  const {\n    org,\n    courseId: courseNumber,\n    run,\n    title,\n    effort,\n    endDate,\n    license,\n    language,\n    subtitle,\n    overview,\n    duration,\n    selfPaced,\n    startDate,\n    introVideo,\n    description,\n    learningInfo,\n    enrollmentEnd,\n    instructorInfo,\n    enrollmentStart,\n    shortDescription,\n    aboutSidebarHtml,\n    preRequisiteCourses,\n    entranceExamEnabled,\n    courseImageAssetPath,\n    bannerImageAssetPath,\n    certificateAvailableDate,\n    entranceExamMinimumScorePct,\n    certificatesDisplayBehavior,\n    videoThumbnailImageAssetPath,\n  } = editedValues;\n\n  useEffect(() => {\n    dispatch(fetchCourseSettingsQuery(courseId));\n    dispatch(fetchCourseDetailsQuery(courseId));\n  }, [courseId]);\n\n  if (isLoading) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n  }\n\n  if (loadingDetailsStatus === RequestStatus.DENIED || loadingSettingsStatus === RequestStatus.DENIED) {\n    return (\n      <div className=\"row justify-content-center m-6\">\n        <Placeholder />\n      </div>\n    );\n  }\n\n  const showCreditSection = creditEligibilityEnabled && isCreditCourse;\n  const showRequirementsSection = aboutPageEditable || isPrerequisiteCoursesEnabled || isEntranceExamsEnabled;\n  const hasErrors = !!Object.keys(errorFields).length;\n  const updateValuesButtonState = {\n    labels: {\n      default: intl.formatMessage(messages.buttonSaveText),\n      pending: intl.formatMessage(messages.buttonSavingText),\n    },\n    disabledStates: [STATEFUL_BUTTON_STATES.pending],\n  };\n  const alertWhileSavingTitle = hasErrors\n    ? intl.formatMessage(messages.alertWarningOnSaveWithError)\n    : intl.formatMessage(messages.alertWarning);\n\n  const alertWhileSavingDescription = hasErrors\n    ? intl.formatMessage(messages.alertWarningDescriptionsOnSaveWithError)\n    : intl.formatMessage(messages.alertWarningDescriptions);\n\n  return (\n    <>\n      <Container size=\"xl\" className=\"px-4\">\n        <div className=\"mt-5\">\n          <AlertMessage\n            show={showSuccessfulAlert}\n            variant=\"success\"\n            icon={CheckCircleIcon}\n            title={intl.formatMessage(messages.alertSuccess)}\n            aria-hidden=\"true\"\n            aria-labelledby={intl.formatMessage(\n              messages.alertSuccessAriaLabelledby,\n            )}\n            aria-describedby={intl.formatMessage(\n              messages.alertSuccessAriaDescribedby,\n            )}\n          />\n          <header>\n            <span className=\"small text-gray-700\">\n              {intl.formatMessage(messages.headingSubtitle)}\n            </span>\n            <h2 className=\"mb-4 pb-1\">\n              {intl.formatMessage(messages.headingTitle)}\n            </h2>\n          </header>\n        </div>\n        <section className=\"setting-items mb-4\">\n          <Layout\n            lg={[{ span: 9 }, { span: 3 }]}\n            md={[{ span: 9 }, { span: 3 }]}\n            sm={[{ span: 9 }, { span: 3 }]}\n            xs={[{ span: 9 }, { span: 3 }]}\n            xl={[{ span: 9 }, { span: 3 }]}\n          >\n            <Layout.Element>\n              <article>\n                <div>\n                  <BasicSection\n                    org={org}\n                    courseNumber={courseNumber}\n                    run={run}\n                    lmsLinkForAboutPage={lmsLinkForAboutPage}\n                    marketingEnabled={marketingEnabled}\n                    courseDisplayName={courseDisplayName}\n                    platformName={platformName}\n                  />\n                  {showCreditSection && (\n                    <CreditSection\n                      creditRequirements={courseSettings?.creditRequirements}\n                    />\n                  )}\n                  <PacingSection\n                    selfPaced={selfPaced}\n                    startDate={startDate}\n                    onChange={handleValuesChange}\n                  />\n                  <ScheduleSection\n                    endDate={endDate}\n                    startDate={startDate}\n                    errorFields={errorFields}\n                    platformName={platformName}\n                    enrollmentEnd={enrollmentEnd}\n                    enrollmentStart={enrollmentStart}\n                    upgradeDeadline={upgradeDeadline}\n                    enrollmentEndEditable={enrollmentEndEditable}\n                    certificateAvailableDate={certificateAvailableDate}\n                    certificatesDisplayBehavior={certificatesDisplayBehavior}\n                    canShowCertificateAvailableDateField={canShowCertificateAvailableDateField}\n                    onChange={handleValuesChange}\n                  />\n                  {aboutPageEditable && (\n                    <DetailsSection\n                      language={language}\n                      languageOptions={languageOptions}\n                      onChange={handleValuesChange}\n                    />\n                  )}\n                  <IntroducingSection\n                    title={title}\n                    overview={overview}\n                    duration={duration}\n                    subtitle={subtitle}\n                    introVideo={introVideo}\n                    description={description}\n                    aboutSidebarHtml={aboutSidebarHtml}\n                    shortDescription={shortDescription}\n                    aboutPageEditable={aboutPageEditable}\n                    sidebarHtmlEnabled={sidebarHtmlEnabled}\n                    lmsLinkForAboutPage={lmsLinkForAboutPage}\n                    courseImageAssetPath={courseImageAssetPath}\n                    bannerImageAssetPath={bannerImageAssetPath}\n                    shortDescriptionEditable={shortDescriptionEditable}\n                    enableExtendedCourseDetails={enableExtendedCourseDetails}\n                    videoThumbnailImageAssetPath={videoThumbnailImageAssetPath}\n                    onChange={handleValuesChange}\n                  />\n                  {enableExtendedCourseDetails && (\n                    <>\n                      <LearningOutcomesSection\n                        learningInfo={learningInfo}\n                        onChange={handleValuesChange}\n                      />\n                      <InstructorsSection\n                        instructors={instructorInfo?.instructors}\n                        onChange={handleValuesChange}\n                      />\n                    </>\n                  )}\n                  {showRequirementsSection && (\n                    <RequirementsSection\n                      effort={effort}\n                      errorFields={errorFields}\n                      aboutPageEditable={aboutPageEditable}\n                      entranceExamEnabled={entranceExamEnabled}\n                      preRequisiteCourses={preRequisiteCourses}\n                      isEntranceExamsEnabled={isEntranceExamsEnabled}\n                      possiblePreRequisiteCourses={possiblePreRequisiteCourses}\n                      entranceExamMinimumScorePct={entranceExamMinimumScorePct}\n                      isPrerequisiteCoursesEnabled={\n                        isPrerequisiteCoursesEnabled\n                      }\n                      onChange={handleValuesChange}\n                    />\n                  )}\n                  {licensingEnabled && (\n                    <LicenseSection\n                      license={license}\n                      onChange={handleValuesChange}\n                    />\n                  )}\n                </div>\n              </article>\n            </Layout.Element>\n            <Layout.Element>\n              <ScheduleSidebar\n                courseId={courseId}\n                proctoredExamSettingsUrl={mfeProctoredExamSettingsUrl}\n              />\n            </Layout.Element>\n          </Layout>\n        </section>\n      </Container>\n      <div className=\"alert-toast\">\n        {!isEditableState && (\n          <InternetConnectionAlert\n            isFailed={savingStatus === RequestStatus.FAILED}\n            isQueryPending={isQueryPending}\n            onQueryProcessing={handleQueryProcessing}\n            onInternetConnectionFailed={handleInternetConnectionFailed}\n          />\n        )}\n        <AlertMessage\n          show={showModifiedAlert}\n          aria-hidden={showModifiedAlert}\n          aria-labelledby={intl.formatMessage(\n            messages.alertWarningAriaLabelledby,\n          )}\n          aria-describedby={intl.formatMessage(\n            messages.alertWarningAriaDescribedby,\n          )}\n          role=\"dialog\"\n          actions={[\n            !isQueryPending && (\n              <Button\n                key=\"cancel-button\"\n                variant=\"tertiary\"\n                onClick={handleResetValues}\n              >\n                {intl.formatMessage(messages.buttonCancelText)}\n              </Button>\n            ),\n            <StatefulButton\n              key=\"save-button\"\n              onClick={handleUpdateValues}\n              disabled={hasErrors}\n              state={\n                isQueryPending\n                  ? STATEFUL_BUTTON_STATES.pending\n                  : STATEFUL_BUTTON_STATES.default\n              }\n              {...updateValuesButtonState}\n            />,\n          ].filter(Boolean)}\n          variant=\"warning\"\n          icon={WarningIcon}\n          title={alertWhileSavingTitle}\n          description={alertWhileSavingDescription}\n        />\n      </div>\n    </>\n  );\n};\n\nScheduleAndDetails.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(ScheduleAndDetails);\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { RequestStatus } from '../data/constants';\nimport { getSavingStatus } from './data/selectors';\nimport { validateScheduleAndDetails, updateWithDefaultValues } from './utils';\n\nconst useSaveValuesPrompt = (\n  courseId,\n  updateDataQuery,\n  initialEditedData = {},\n) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const savingStatus = useSelector(getSavingStatus);\n  const [editedValues, setEditedValues] = useState(initialEditedData);\n  const [showSuccessfulAlert, setShowSuccessfulAlert] = useState(false);\n  const [showModifiedAlert, setShowModifiedAlert] = useState(false);\n  const [isQueryPending, setIsQueryPending] = useState(false);\n  const [isEditableState, setIsEditableState] = useState(false);\n  const [errorFields, setErrorFields] = useState({});\n\n  useEffect(() => {\n    if (!isQueryPending && !isEditableState) {\n      setEditedValues(initialEditedData);\n    }\n  }, [initialEditedData]);\n\n  useEffect(() => {\n    const errors = validateScheduleAndDetails(editedValues, intl);\n    setErrorFields(errors);\n  }, [editedValues]);\n\n  const handleValuesChange = (value, fieldName) => {\n    setIsEditableState(true);\n    setShowSuccessfulAlert(false);\n\n    if (editedValues[fieldName] !== value) {\n      setEditedValues((prevEditedValues) => ({\n        ...prevEditedValues,\n        [fieldName]: value || '',\n      }));\n\n      if (!showModifiedAlert) {\n        setShowModifiedAlert(true);\n      }\n    }\n  };\n\n  const handleResetValues = () => {\n    setIsEditableState(false);\n    setEditedValues(initialEditedData || {});\n    setShowModifiedAlert(false);\n    setShowSuccessfulAlert(false);\n  };\n\n  const handleUpdateValues = () => {\n    setIsQueryPending(true);\n    setIsEditableState(false);\n  };\n\n  const handleInternetConnectionFailed = () => {\n    setShowModifiedAlert(false);\n    setShowSuccessfulAlert(false);\n    setIsQueryPending(false);\n  };\n\n  const handleQueryProcessing = () => {\n    setShowSuccessfulAlert(false);\n    dispatch(updateDataQuery(courseId, updateWithDefaultValues(editedValues)));\n  };\n\n  useEffect(() => {\n    if (savingStatus === RequestStatus.SUCCESSFUL) {\n      setIsQueryPending(false);\n      setShowSuccessfulAlert(true);\n      setTimeout(() => setShowSuccessfulAlert(false), 15000);\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n\n      if (!isEditableState) {\n        setShowModifiedAlert(false);\n      }\n    }\n  }, [savingStatus]);\n\n  return {\n    errorFields,\n    savingStatus,\n    editedValues,\n    isQueryPending,\n    isEditableState,\n    showModifiedAlert,\n    showSuccessfulAlert,\n    dispatch,\n    setErrorFields,\n    handleResetValues,\n    handleValuesChange,\n    handleUpdateValues,\n    handleQueryProcessing,\n    handleInternetConnectionFailed,\n  };\n};\n\n/* eslint-disable-next-line import/prefer-default-export */\nexport { useSaveValuesPrompt };\n","// eslint-disable-next-line import/prefer-default-export\nexport const defaultEntranceExamMinimumScorePct = '50';\n","const getLoadingStatus = (state) => state.gradingSettings.loadingStatus;\nconst getGradingSettings = (state) => state.gradingSettings.gradingSettings.courseDetails;\nconst getCourseAssignmentLists = (state) => state.gradingSettings.gradingSettings.courseAssignmentLists;\nconst getSavingStatus = (state) => state.gradingSettings.savingStatus;\nconst getCourseSettings = (state) => state.gradingSettings.courseSettings;\n\nexport {\n  getLoadingStatus,\n  getGradingSettings,\n  getCourseAssignmentLists,\n  getSavingStatus,\n  getCourseSettings,\n};\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport { deepConvertingKeysToCamelCase, deepConvertingKeysToSnakeCase } from '../../utils';\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getGradingSettingsApiUrl = (courseId) => `${getApiBaseUrl()}/api/contentstore/v1/course_grading/${courseId}`;\nexport const getCourseSettingsApiUrl = (courseId) => `${getApiBaseUrl()}/api/contentstore/v1/course_settings/${courseId}`;\n\n/**\n * Get's grading setting for a course.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getGradingSettings(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getGradingSettingsApiUrl(courseId));\n  return deepConvertingKeysToCamelCase(data);\n}\n\n/**\n * Send`s grading setting for a course.\n * @param {string} courseId\n * @param {object} settings\n * @returns {Promise<Object>}\n */\nexport async function sendGradingSettings(courseId, settings) {\n  const { data } = await getAuthenticatedHttpClient()\n    .post(getGradingSettingsApiUrl(courseId), deepConvertingKeysToSnakeCase(settings));\n  return camelCaseObject(data);\n}\n\n/**\n * Get course settings.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getCourseSettings(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getCourseSettingsApiUrl(courseId));\n  return camelCaseObject(data);\n}\n","import { RequestStatus } from '../../data/constants';\nimport {\n  getGradingSettings,\n  sendGradingSettings,\n  getCourseSettings,\n} from './api';\nimport {\n  sendGradingSettingsSuccess,\n  updateLoadingStatus,\n  updateSavingStatus,\n  fetchGradingSettingsSuccess,\n  fetchCourseSettingsSuccess,\n} from './slice';\n\nexport function fetchGradingSettings(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ status: RequestStatus.IN_PROGRESS }));\n    try {\n      const settingValues = await getGradingSettings(courseId);\n      dispatch(fetchGradingSettingsSuccess(settingValues));\n      dispatch(updateLoadingStatus({ status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateLoadingStatus({ status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function sendGradingSetting(courseId, settings) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n    try {\n      const settingValues = await sendGradingSettings(courseId, settings);\n      dispatch(sendGradingSettingsSuccess(settingValues));\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateLoadingStatus({ status: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function fetchCourseSettingsQuery(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const settingsValues = await getCourseSettings(courseId);\n      dispatch(fetchCourseSettingsSuccess(settingsValues));\n      dispatch(updateLoadingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateLoadingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n","/* eslint-disable */\nimport React from 'react';\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) { return {}; }\n  const target = {};\n  const sourceKeys = Object.keys(source);\n  let key; let\n    i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) { continue; }\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst getBoundingClientRect = function getBoundingClientRect(element) {\n  const rect = element.getBoundingClientRect();\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n  };\n};\n\nconst sortNumList = function sortNumList(arr) {\n  return [].concat(arr).sort((a, b) => Number(a) - Number(b));\n};\n\nconst useGetLatest = function useGetLatest(val) {\n  const ref = React.useRef(val);\n  ref.current = val;\n  return React.useCallback(() => ref.current, []);\n};\n\nconst linearInterpolator = {\n  getPercentageForValue: function getPercentageForValue(val, min, max) {\n    return Math.max(0, Math.min(100, (val - min) / (max - min) * 100));\n  },\n  getValueForClientX: function getValueForClientX(clientX, trackDims, min, max) {\n    const { left } = trackDims;\n    const { width } = trackDims;\n    const percentageValue = (clientX - left) / width;\n    const value = (max - min) * percentageValue;\n    return value + min;\n  },\n};\nfunction useRanger(_ref) {\n  const _ref$interpolator = _ref.interpolator;\n  const interpolator = _ref$interpolator === void 0 ? linearInterpolator : _ref$interpolator;\n  const _ref$tickSize = _ref.tickSize;\n  const tickSize = _ref$tickSize === void 0 ? 10 : _ref$tickSize;\n  const { values } = _ref;\n  const { min } = _ref;\n  const { max } = _ref;\n  const controlledTicks = _ref.ticks;\n  const { steps } = _ref;\n  const { onChange } = _ref;\n  const { onDrag } = _ref;\n  const { stepSize } = _ref;\n\n  const _React$useState = React.useState(null);\n  const activeHandleIndex = _React$useState[0];\n  const setActiveHandleIndex = _React$useState[1];\n\n  const _React$useState2 = React.useState();\n  const tempValues = _React$useState2[0];\n  const setTempValues = _React$useState2[1];\n\n  const getLatest = useGetLatest({\n    activeHandleIndex,\n    onChange,\n    onDrag,\n    values,\n    tempValues,\n  });\n  const trackElRef = React.useRef();\n  const getValueForClientX = React.useCallback((clientX) => {\n    const trackDims = getBoundingClientRect(trackElRef.current);\n    return interpolator.getValueForClientX(clientX, trackDims, min, max);\n  }, [interpolator, max, min]);\n  const getNextStep = React.useCallback((val, direction) => {\n    if (steps) {\n      const currIndex = steps.indexOf(val);\n      const nextIndex = currIndex + direction;\n\n      if (nextIndex >= 0 && nextIndex < steps.length) {\n        return steps[nextIndex];\n      }\n      return val;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof stepSize === 'undefined') {\n        throw new Error('Warning: The option `stepSize` is expected in `useRanger`, but its value is `undefined`');\n      }\n    }\n\n    const nextVal = val + stepSize * direction;\n\n    if (nextVal >= min && nextVal <= max) {\n      return nextVal;\n    }\n    return val;\n  }, [max, min, stepSize, steps]);\n  const roundToStep = React.useCallback((val) => {\n    let left = min;\n    let right = max;\n\n    if (steps) {\n      steps.forEach((step) => {\n        if (step <= val && step > left) {\n          left = step;\n        }\n\n        if (step >= val && step < right) {\n          right = step;\n        }\n      });\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof stepSize === 'undefined') {\n          throw new Error('Warning: The option `stepSize` is expected in `useRanger`, but its value is `undefined`');\n        }\n      }\n\n      while (left < val && left + stepSize < val) {\n        left += stepSize;\n      }\n\n      right = Math.min(left + stepSize, max);\n    }\n\n    if (val - left < right - val) {\n      return left;\n    }\n\n    return right;\n  }, [max, min, stepSize, steps]);\n  const handleDrag = React.useCallback((e) => {\n    const _getLatest = getLatest();\n    const { activeHandleIndex } = _getLatest;\n    const { onDrag } = _getLatest;\n\n    const clientX = e.type === 'touchmove' ? e.changedTouches[0].clientX : e.clientX;\n    const newValue = getValueForClientX(clientX);\n    const newRoundedValue = roundToStep(newValue);\n    const newValues = []\n      .concat(values.slice(0, activeHandleIndex), [newRoundedValue], values.slice(activeHandleIndex + 1));\n\n    if (onDrag) {\n      onDrag(newValues);\n    } else {\n      setTempValues(newValues);\n    }\n  }, [getLatest, getValueForClientX, roundToStep, values]);\n  const handleKeyDown = React.useCallback((e, i) => {\n    const _getLatest2 = getLatest();\n    const { values } = _getLatest2;\n    const _getLatest2$onChange = _getLatest2.onChange;\n    const onChange = _getLatest2$onChange === void 0\n      ? function () {} : _getLatest2$onChange; // Left Arrow || Right Arrow\n\n    if (e.keyCode === 37 || e.keyCode === 39) {\n      setActiveHandleIndex(i);\n      const direction = e.keyCode === 37 ? -1 : 1;\n      const newValue = getNextStep(values[i], direction);\n      const newValues = [].concat(values.slice(0, i), [newValue], values.slice(i + 1));\n      const sortedValues = sortNumList(newValues);\n      onChange(sortedValues);\n    }\n  }, [getLatest, getNextStep]);\n  const handlePress = React.useCallback((e, i) => {\n    setActiveHandleIndex(i);\n\n    const handleRelease = function handleRelease(e) {\n      const _getLatest3 = getLatest();\n      const { tempValues } = _getLatest3;\n      const { values } = _getLatest3;\n      const _getLatest3$onChange = _getLatest3.onChange;\n      const onChange = _getLatest3$onChange === void 0 ? function () {} : _getLatest3$onChange;\n      const _getLatest3$onDrag = _getLatest3.onDrag;\n      const onDrag = _getLatest3$onDrag === void 0 ? function () {} : _getLatest3$onDrag;\n\n      document.removeEventListener('mousemove', handleDrag);\n      document.removeEventListener('touchmove', handleDrag);\n      document.removeEventListener('mouseup', handleRelease);\n      document.removeEventListener('touchend', handleRelease);\n      const sortedValues = sortNumList(tempValues || values);\n      onChange(sortedValues);\n      onDrag(sortedValues);\n      setActiveHandleIndex(null);\n      setTempValues();\n    };\n\n    document.addEventListener('mousemove', handleDrag);\n    document.addEventListener('touchmove', handleDrag);\n    document.addEventListener('mouseup', handleRelease);\n    document.addEventListener('touchend', handleRelease);\n  }, [getLatest, handleDrag]);\n  const getPercentageForValue = React.useCallback((val) =>\n    interpolator.getPercentageForValue(val, min, max), [interpolator, max, min]); // Build the ticks\n\n  const ticks = React.useMemo(() => {\n    let ticks = controlledTicks || steps;\n\n    if (!ticks) {\n      ticks = [min];\n\n      while (ticks[ticks.length - 1] < max - tickSize) {\n        ticks.push(ticks[ticks.length - 1] + tickSize);\n      }\n\n      ticks.push(max);\n    }\n\n    return ticks.map((value, i) => ({\n      value,\n      getTickProps: function getTickProps(_temp) {\n        const _ref2 = _temp === void 0 ? {} : _temp;\n        const _ref2$key = _ref2.key;\n        const key = _ref2$key === void 0 ? i : _ref2$key;\n        const _ref2$style = _ref2.style;\n        const style = _ref2$style === void 0 ? {} : _ref2$style;\n        const rest = _objectWithoutPropertiesLoose(_ref2, ['key', 'style']);\n\n        return {\n          key,\n          style: {\n            position: 'absolute',\n            width: 0,\n            left: `${getPercentageForValue(value) }%`,\n            transform: 'translateX(-50%)',\n            ...style,\n          },\n          ...rest,\n        };\n      },\n    }));\n  }, [controlledTicks, getPercentageForValue, max, min, steps, tickSize]);\n  const segments = React.useMemo(() => {\n    const sortedValues = sortNumList(tempValues || values);\n    return [].concat(sortedValues, [max]).map((value, i) => ({\n      value,\n      getSegmentProps: function getSegmentProps(_temp2) {\n        const _ref3 = _temp2 === void 0 ? {} : _temp2;\n        const _ref3$key = _ref3.key;\n        const key = _ref3$key === void 0 ? i : _ref3$key;\n        const _ref3$style = _ref3.style;\n        const style = _ref3$style === void 0 ? {} : _ref3$style;\n        const rest = _objectWithoutPropertiesLoose(_ref3, ['key', 'style']);\n\n        const left = getPercentageForValue(sortedValues[i - 1] ? sortedValues[i - 1] : min);\n        const width = getPercentageForValue(value) - left;\n        return {\n          key,\n          style: {\n            position: 'absolute',\n            left: `${left }%`,\n            width: `${width }%`,\n            ...style,\n          },\n          ...rest,\n        };\n      },\n    }));\n  }, [getPercentageForValue, max, min, tempValues, values]);\n  const handles = React.useMemo(() => (tempValues || values).map((value, i) => ({\n    value,\n    active: i === activeHandleIndex,\n    getHandleProps: function getHandleProps(_temp3) {\n      const _ref4 = _temp3 === void 0 ? {} : _temp3;\n      const _ref4$key = _ref4.key;\n      const key = _ref4$key === void 0 ? i : _ref4$key;\n      const { ref } = _ref4;\n      const _ref4$innerRef = _ref4.innerRef;\n      const _onKeyDown = _ref4.onKeyDown;\n      const _onMouseDown = _ref4.onMouseDown;\n      const _onTouchStart = _ref4.onTouchStart;\n      const _ref4$style = _ref4.style;\n      const style = _ref4$style === void 0 ? {} : _ref4$style;\n      const rest = _objectWithoutPropertiesLoose(_ref4, [\n        'key', 'ref', 'innerRef', 'onKeyDown', 'onMouseDown', 'onTouchStart', 'style',\n      ]);\n\n      return {\n        key,\n        onKeyDown: function onKeyDown(e) {\n          e.persist();\n          handleKeyDown(e, i);\n          if (_onKeyDown) { _onKeyDown(e); }\n        },\n        onMouseDown: function onMouseDown(e) {\n          e.persist();\n          handlePress(e, i);\n          if (_onMouseDown) { _onMouseDown(e); }\n        },\n        onTouchStart: function onTouchStart(e) {\n          e.persist();\n          handlePress(e, i);\n          if (_onTouchStart) { _onTouchStart(e); }\n        },\n        role: 'slider',\n        'aria-valuemin': min,\n        'aria-valuemax': max,\n        'aria-valuenow': value,\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: `${getPercentageForValue(value) }%`,\n          zIndex: i === activeHandleIndex ? '1' : '0',\n          transform: 'translate(-50%, -50%)',\n          ...style,\n        },\n        ...rest,\n      };\n    },\n  })), [activeHandleIndex, getPercentageForValue, handleKeyDown, handlePress, min, max, tempValues, values]);\n\n  const getTrackProps = function getTrackProps(_temp4) {\n    const _ref5 = _temp4 === void 0 ? {} : _temp4;\n    const _ref5$style = _ref5.style;\n    const style = _ref5$style === void 0 ? {} : _ref5$style;\n    const _ref6 = _ref5.ref;\n    const rest = _objectWithoutPropertiesLoose(_ref5, ['style', 'ref']);\n\n    return {\n      ref: function ref(el) {\n        trackElRef.current = el;\n\n        if (_ref6) {\n          if (typeof _ref6 === 'function') {\n            _ref6(el);\n          } else {\n            _ref6.current = el;\n          }\n        }\n      },\n      style: {\n        position: 'relative',\n        userSelect: 'none',\n        ...style,\n      },\n      ...rest,\n    };\n  };\n\n  return {\n    activeHandleIndex,\n    getTrackProps,\n    ticks,\n    segments,\n    handles,\n  };\n}\n\nexport { useRanger };\n// # sourceMappingURL=react-ranger.mjs.map\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  addNewSegmentButtonAltText: {\n    id: 'course-authoring.grading-settings.add-new-segment.btn.text',\n    defaultMessage: 'Add new grading segment',\n  },\n  removeSegmentButtonText: {\n    id: 'course-authoring.grading-settings.remove-segment.btn.text',\n    defaultMessage: 'Remove',\n  },\n  segmentFailGradingText: {\n    id: 'course-authoring.grading-settings.fail-segment.text',\n    defaultMessage: 'Fail',\n  },\n  defaultPassText: {\n    id: 'course-authoring.grading-settings.default.pass.text',\n    defaultMessage: 'Pass',\n  },\n});\n\nexport default messages;\n","import messages from './messages';\n\nexport const MAXIMUM_SCALE_LENGTH = 100;\n\n/**\n * Converting fractional numbers to integers.\n *\n * @param {object} cutoffs - The object containing the settings to grading cutoffs.\n * @returns {array} - Converted grading cutoffs.\n */\nexport const getGradingValues = (cutoffs) => Object.values(cutoffs)\n  .map(number => Math.round(number * MAXIMUM_SCALE_LENGTH));\n\n/**\n * Initially, the data comes in the format { a: 0.8 },\n * this function converts the data structure to the required { current: 100, previous: 80 } format.\n *\n * @param {object} gradeValues - The object containing the settings to grading cutoffs.\n * @returns {object} - New grading cutoffs.\n */\nexport const getSortedGrades = (gradeValues) => gradeValues.reduce((sortedArray, current, idx) => {\n  if (idx === (gradeValues.length - 1)) {\n    sortedArray.push({ current: gradeValues[idx - 1] || MAXIMUM_SCALE_LENGTH, previous: gradeValues[idx] });\n    sortedArray.push({ current: gradeValues[idx], previous: 0 });\n  } else if (idx === 0) {\n    sortedArray.push({ current: MAXIMUM_SCALE_LENGTH, previous: current });\n  } else {\n    const previous = gradeValues[idx - 1];\n    sortedArray.push({ current: previous, previous: current });\n  }\n\n  return sortedArray;\n}, []);\n\n/**\n * Changes the start and end values of the segments when there are two segments.\n *\n * @param {number} idx - Segment index.\n * @param {array} letters - Names of grading segments.\n * @param {array} gradingSegments - Grading cutoffs.\n * @returns {string} - Segment display name.\n */\nexport const getLettersOnLongScale = (idx, letters, gradingSegments) => {\n  const END_OF_SCALE_NAME = 'F';\n\n  if (idx === 0) {\n    return letters[0];\n  }\n\n  if ((idx - 1) === (gradingSegments.length - 1)) {\n    return END_OF_SCALE_NAME;\n  }\n\n  return letters[idx - 1];\n};\n\n/**\n * Changes the positions of segment names if there are more than two segments.\n *\n * @param {number} idx - Segment index.\n * @param {array} letters - Names of grading segments.\n * @returns {string} - Segment display name.\n */\nexport const getLettersOnShortScale = (idx, letters, intl) => {\n  const END_OF_SCALE_NAME = intl.formatMessage(messages.segmentFailGradingText);\n\n  return (idx === 1 ? letters[idx - 1] : END_OF_SCALE_NAME);\n};\n\n/**\n * Converts the data to the original format with fractional numbers { a: 0.8 }.\n *\n * @param {array} letters - Names of grading segments.\n * @param {array} gradingSegments - Grading cutoffs.\n * @param {func} setConvertedResult - Changing the state of the converted result.\n * @returns {void}\n */\nexport const convertGradeData = (letters, gradingSegments, setConvertedResult) => {\n  const convertedData = {};\n\n  if (!gradingSegments.length) {\n    return;\n  }\n\n  letters.forEach((letter, idx) => {\n    convertedData[letter] = gradingSegments[idx].previous / MAXIMUM_SCALE_LENGTH;\n  });\n\n  setConvertedResult(convertedData);\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { MAXIMUM_SCALE_LENGTH } from '../utils';\n\nconst GradingScaleHandle = ({\n  idx, value, gradingSegments, getHandleProps,\n}) => (\n  <button\n    key={value}\n    className=\"grading-scale-segment-btn-resize\"\n    type=\"button\"\n    disabled={gradingSegments[idx].current === MAXIMUM_SCALE_LENGTH}\n    {...getHandleProps({\n      style: gradingSegments[idx].current === MAXIMUM_SCALE_LENGTH ? {\n        cursor: 'default', display: 'none',\n      } : { cursor: 'e-resize' },\n    })}\n  />\n);\n\nGradingScaleHandle.propTypes = {\n  idx: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n  getHandleProps: PropTypes.func.isRequired,\n  gradingSegments: PropTypes.arrayOf(\n    PropTypes.shape({\n      current: PropTypes.number.isRequired,\n      previous: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default GradingScaleHandle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GradingScaleTick = ({ getTickProps, value }) => (\n  <div className=\"mt-5 grading-scale-tick\" data-testid=\"grading-scale-tick\" {...getTickProps()}>\n    <div className=\"grading-scale-tick-number\">{value}</div>\n  </div>\n);\n\nGradingScaleTick.propTypes = {\n  value: PropTypes.number.isRequired,\n  getTickProps: PropTypes.func.isRequired,\n};\n\nexport default GradingScaleTick;\n","import { Button } from '@edx/paragon';\nimport React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\n\nimport { getLettersOnLongScale, getLettersOnShortScale } from '../utils';\nimport messages from '../messages';\n\nconst GradingScaleSegment = ({\n  intl,\n  idx,\n  value,\n  getSegmentProps,\n  handleLetterChange,\n  letters,\n  gradingSegments,\n  removeGradingSegment,\n}) => (\n  <div\n    key={value}\n    className={`grading-scale-segment segment-${idx - 1}`}\n    data-testid=\"grading-scale-segment\"\n    {...getSegmentProps()}\n  >\n    <div className=\"grading-scale-segment-content\">\n      {gradingSegments.length === 2 && (\n        <input\n          className=\"grading-scale-segment-content-title m-0\"\n          data-testid=\"grading-scale-segment-input\"\n          value={getLettersOnShortScale(idx, letters, intl)}\n          onChange={e => handleLetterChange(e, idx)}\n          disabled={idx === gradingSegments.length}\n        />\n      )}\n      {gradingSegments.length > 2 && (\n        <input\n          className=\"grading-scale-segment-content-title m-0\"\n          data-testid=\"grading-scale-segment-input\"\n          value={getLettersOnLongScale(idx, letters, gradingSegments)}\n          onChange={e => handleLetterChange(e, idx)}\n          disabled={idx === gradingSegments.length}\n        />\n      )}\n      <span className=\"grading-scale-segment-content-number m-0\">\n        {gradingSegments[idx === 0 ? 0 : idx - 1]?.previous} - {value}\n      </span>\n    </div>\n    {idx !== gradingSegments.length && idx - 1 !== 0 && (\n      <Button\n        variant=\"link\"\n        size=\"inline\"\n        className=\"grading-scale-segment-btn-remove\"\n        data-testid=\"grading-scale-btn-remove\"\n        type=\"button\"\n        onClick={() => removeGradingSegment(idx)}\n      >\n        {intl.formatMessage(messages.removeSegmentButtonText)}\n      </Button>\n    )}\n  </div>\n);\n\nGradingScaleSegment.propTypes = {\n  intl: intlShape.isRequired,\n  idx: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n  getSegmentProps: PropTypes.func.isRequired,\n  handleLetterChange: PropTypes.func.isRequired,\n  removeGradingSegment: PropTypes.func.isRequired,\n  gradingSegments: PropTypes.arrayOf(\n    PropTypes.shape({\n      current: PropTypes.number.isRequired,\n      previous: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  letters: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default injectIntl(GradingScaleSegment);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, IconButtonWithTooltip } from '@edx/paragon';\nimport { Add as IconAdd } from '@edx/paragon/icons';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { useRanger } from './react-ranger';\nimport messages from './messages';\nimport { convertGradeData, MAXIMUM_SCALE_LENGTH } from './utils';\nimport { GradingScaleTicks, GradingScaleHandle, GradingScaleSegment } from './components';\n\nconst DEFAULT_LETTERS = ['A', 'B', 'C', 'D'];\nconst getDefaultPassText = intl => intl.formatMessage(messages.defaultPassText);\n\nconst GradingScale = ({\n  intl,\n  showSavePrompt,\n  gradeCutoffs,\n  setShowSuccessAlert,\n  setGradingData,\n  resetDataRef,\n  gradeLetters,\n  sortedGrades,\n  setOverrideInternetConnectionAlert,\n  setEligibleGrade,\n}) => {\n  const [gradingSegments, setGradingSegments] = useState(sortedGrades);\n  const [letters, setLetters] = useState(gradeLetters);\n  const [convertedResult, setConvertedResult] = useState({});\n  const gradingSegmentsValues = Object.values(gradingSegments);\n  const eligibleValue = gradingSegmentsValues[gradingSegmentsValues.length - 1];\n\n  useEffect(() => {\n    if (resetDataRef.current) {\n      setGradingSegments(sortedGrades);\n      setLetters(gradeLetters);\n      // eslint-disable-next-line no-param-reassign\n      resetDataRef.current = false;\n    }\n  }, [gradeCutoffs]);\n\n  useEffect(() => {\n    setGradingSegments(sortedGrades);\n    setLetters(gradeLetters);\n  }, [sortedGrades.length]);\n\n  useEffect(() => {\n    setGradingData(prevData => ({ ...prevData, gradeCutoffs: convertedResult }));\n    setEligibleGrade(eligibleValue?.current);\n  }, [JSON.stringify(convertedResult)]);\n\n  useEffect(() => {\n    convertGradeData(letters, gradingSegments, setConvertedResult);\n  }, [gradingSegments, letters]);\n\n  const addNewGradingSegment = () => {\n    setGradingSegments(prevSegments => {\n      const firstSegment = prevSegments[prevSegments.length - 1];\n      const secondSegment = prevSegments[prevSegments.length - 2];\n      const newCurrentValue = Math.ceil((secondSegment.current - secondSegment.previous) / 2);\n\n      const newSegment = {\n        current: (firstSegment.current + newCurrentValue),\n        previous: firstSegment.current,\n      };\n\n      const updatedSecondSegment = {\n        ...secondSegment,\n        previous: (firstSegment.current + newCurrentValue),\n      };\n\n      showSavePrompt(true);\n      setShowSuccessAlert(false);\n      setOverrideInternetConnectionAlert(false);\n\n      return [\n        ...prevSegments.slice(0, prevSegments.length - 2),\n        updatedSecondSegment,\n        newSegment,\n        firstSegment,\n      ];\n    });\n\n    const nextIndex = (letters.length % DEFAULT_LETTERS.length);\n\n    if (gradingSegments.length === 2) {\n      setLetters([DEFAULT_LETTERS[0], DEFAULT_LETTERS[nextIndex]]);\n    } else {\n      setLetters(prevLetters => [...prevLetters, DEFAULT_LETTERS[nextIndex]]);\n    }\n  };\n\n  const updateGradingSegments = (newGradingSegmentData, activeHandleIndex) => {\n    const gapToSegment = 1;\n    const sortedSegments = newGradingSegmentData.sort((currentValue, previousValue) => currentValue - previousValue);\n    const newSegmentValue = sortedSegments[sortedSegments.length - 1 - activeHandleIndex];\n    const prevSegmentBoundary = (gradingSegments[activeHandleIndex + 1]\n        && gradingSegments[activeHandleIndex + 1].current) || 0;\n    const nextSegmentBoundary = gradingSegments[activeHandleIndex - 1].current;\n\n    showSavePrompt(true);\n\n    setGradingSegments(gradingSegments.map((gradingSegment, idx) => {\n      const upperBoundaryValue = (newSegmentValue < nextSegmentBoundary - gapToSegment)\n        ? newSegmentValue : (nextSegmentBoundary - gapToSegment);\n      const lowerBoundaryValue = (upperBoundaryValue > prevSegmentBoundary + gapToSegment)\n        ? upperBoundaryValue : (prevSegmentBoundary + gapToSegment);\n\n      if (idx === activeHandleIndex - 1) {\n        return {\n          previous: lowerBoundaryValue,\n          current: gradingSegment.current,\n        };\n      }\n\n      if (idx === activeHandleIndex) {\n        return {\n          current: lowerBoundaryValue,\n          previous: gradingSegment.previous,\n        };\n      }\n\n      return gradingSegment;\n    }));\n  };\n\n  const removeGradingSegment = (gradingSegmentIndex) => {\n    setGradingSegments(prevSegments => {\n      const updatedSegments = [...prevSegments];\n      const removedSegment = updatedSegments.splice(gradingSegmentIndex - 1, 1)[0];\n      const previousSegment = updatedSegments[gradingSegmentIndex - 2];\n\n      if (previousSegment) {\n        previousSegment.previous = removedSegment.previous;\n      }\n\n      return updatedSegments;\n    });\n\n    showSavePrompt(true);\n    setShowSuccessAlert(false);\n    setOverrideInternetConnectionAlert(false);\n\n    setLetters(prevLetters => {\n      const updatedLetters = [...prevLetters];\n      updatedLetters.splice(updatedLetters.length - 1, 1);\n\n      return updatedLetters.length === 1 ? [getDefaultPassText(intl)] : updatedLetters;\n    });\n  };\n\n  const handleLetterChange = (e, idx) => {\n    const { value } = e.target;\n\n    showSavePrompt(true);\n    setShowSuccessAlert(false);\n    setOverrideInternetConnectionAlert(false);\n\n    setLetters(prevLetters => {\n      const updatedLetters = [...prevLetters];\n      const emptyString = '\\u200B';\n      updatedLetters[idx - 1] = value || emptyString;\n\n      return updatedLetters;\n    });\n  };\n\n  const handleSegmentChange = () => {\n    setShowSuccessAlert(false);\n    setOverrideInternetConnectionAlert(false);\n    setGradingData(prevData => ({ ...prevData, gradeCutoffs: convertedResult }));\n  };\n\n  const {\n    getTrackProps,\n    ticks,\n    segments,\n    handles,\n    activeHandleIndex,\n  } = useRanger({\n    min: 0,\n    max: MAXIMUM_SCALE_LENGTH,\n    stepSize: 1,\n    values: gradingSegments?.map(segment => segment.current),\n    onDrag: (segmentDataArray) => updateGradingSegments(segmentDataArray, activeHandleIndex),\n    onChange: handleSegmentChange,\n  });\n\n  return (\n    <div className=\"grading-scale\">\n      <IconButtonWithTooltip\n        tooltipPlacement=\"top\"\n        tooltipContent={intl.formatMessage(messages.addNewSegmentButtonAltText)}\n        disabled={gradingSegments.length >= 5}\n        data-testid=\"grading-scale-btn-add-segment\"\n        className=\"mr-3\"\n        src={IconAdd}\n        iconAs={Icon}\n        alt={intl.formatMessage(messages.addNewSegmentButtonAltText)}\n        onClick={addNewGradingSegment}\n      />\n      <div className=\"grading-scale-segments-and-ticks\" {...getTrackProps()}>\n        {ticks.map(({ value, getTickProps }) => (\n          <GradingScaleTicks key={value} value={value} getTickProps={getTickProps} />\n        ))}\n        {segments.reverse().map(({ value, getSegmentProps }, idx = 1) => (\n          <GradingScaleSegment\n            key={idx}\n            getSegmentProps={getSegmentProps}\n            removeGradingSegment={removeGradingSegment}\n            gradingSegments={gradingSegments}\n            value={value}\n            idx={idx}\n            handleLetterChange={handleLetterChange}\n            letters={letters}\n          />\n        ))}\n        {handles.map(({ value, getHandleProps }, idx) => (\n          <GradingScaleHandle\n            key={value}\n            getHandleProps={getHandleProps}\n            gradingSegments={gradingSegments}\n            value={value}\n            idx={idx}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nGradingScale.propTypes = {\n  intl: intlShape.isRequired,\n  showSavePrompt: PropTypes.func.isRequired,\n  gradeCutoffs: PropTypes.objectOf(PropTypes.number).isRequired,\n  gradeLetters: PropTypes.arrayOf(PropTypes.string).isRequired,\n  setShowSuccessAlert: PropTypes.func.isRequired,\n  setGradingData: PropTypes.func.isRequired,\n  setOverrideInternetConnectionAlert: PropTypes.func.isRequired,\n  resetDataRef: PropTypes.objectOf(PropTypes.bool).isRequired,\n  sortedGrades: PropTypes.arrayOf(\n    PropTypes.shape({\n      current: PropTypes.number.isRequired,\n      previous: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  setEligibleGrade: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(GradingScale);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  gradingSidebarTitle: {\n    id: 'course-authoring.grading-settings.sidebar.about.title',\n    defaultMessage: 'What can I do on this page?',\n  },\n  gradingSidebarAbout1: {\n    id: 'course-authoring.grading-settings.sidebar.about.text-1',\n    defaultMessage: 'You can use the slider under Overall Grade Range to specify whether your course is pass/fail or graded by letter, and to establish the thresholds for each grade.',\n  },\n  gradingSidebarAbout2: {\n    id: 'course-authoring.grading-settings.sidebar.about.text-2',\n    defaultMessage: 'You can specify whether your course offers students a grace period for late assignments.',\n  },\n  gradingSidebarAbout3: {\n    id: 'course-authoring.grading-settings.sidebar.about.text-3',\n    defaultMessage: 'You can also create assignment types, such as homework, labs, quizzes, and exams, and specify how much of a student\\'s grade each assignment type is worth.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\n\nimport { HelpSidebar } from '../../generic/help-sidebar';\nimport messages from './messages';\n\nconst GradingSidebar = ({ intl, courseId, proctoredExamSettingsUrl }) => (\n  <HelpSidebar\n    courseId={courseId}\n    showOtherSettings\n    proctoredExamSettingsUrl={proctoredExamSettingsUrl}\n  >\n    <h4 className=\"help-sidebar-about-title\">\n      {intl.formatMessage(messages.gradingSidebarTitle)}\n    </h4>\n    <p className=\"help-sidebar-about-descriptions\">\n      {intl.formatMessage(messages.gradingSidebarAbout1)}\n    </p>\n    <p className=\"help-sidebar-about-descriptions\">\n      {intl.formatMessage(messages.gradingSidebarAbout2)}\n    </p>\n    <p className=\"help-sidebar-about-descriptions\">\n      {intl.formatMessage(messages.gradingSidebarAbout3)}\n    </p>\n  </HelpSidebar>\n);\n\nGradingSidebar.defaultProps = {\n  proctoredExamSettingsUrl: '',\n};\n\nGradingSidebar.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n  proctoredExamSettingsUrl: PropTypes.string,\n};\n\nexport default injectIntl(GradingSidebar);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headingTitle: {\n    id: 'course-authoring.grading-settings.heading.title',\n    defaultMessage: 'Grading',\n  },\n  headingSubtitle: {\n    id: 'course-authoring.grading-settings.heading.subtitle',\n    defaultMessage: 'Settings',\n  },\n  policy: {\n    id: 'course-authoring.grading-settings.policies.title',\n    defaultMessage: 'Overall grade range',\n  },\n  policiesDescription: {\n    id: 'course-authoring.grading-settings.policies.description',\n    defaultMessage: 'Your overall grading scale for student final grades',\n  },\n  alertWarning: {\n    id: 'course-authoring.grading-settings.alert.warning',\n    defaultMessage: \"You've made some changes\",\n  },\n  alertWarningDescriptions: {\n    id: 'course-authoring.grading-settings.alert.warning.descriptions',\n    defaultMessage: 'Your changes will not take effect until you save your progress. Take care with key and value formatting, as validation is not implemented.',\n  },\n  alertSuccess: {\n    id: 'course-authoring.grading-settings.alert.success',\n    defaultMessage: 'Your changes have been saved.',\n  },\n  buttonSaveText: {\n    id: 'course-authoring.grading-settings.alert.button.save',\n    defaultMessage: 'Save changes',\n  },\n  buttonSavingText: {\n    id: 'course-authoring.grading-settings.alert.button.saving',\n    defaultMessage: 'Saving',\n  },\n  buttonCancelText: {\n    id: 'course-authoring.grading-settings.alert.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n  alertWarningAriaLabelledby: {\n    id: 'course-authoring.grading-settings.alert.warning.aria.labelledby',\n    defaultMessage: 'notification-warning-title',\n  },\n  alertWarningAriaDescribedby: {\n    id: 'course-authoring.grading-settings.alert.warning.aria.describedby',\n    defaultMessage: 'notification-warning-description',\n  },\n  alertSuccessAriaLabelledby: {\n    id: 'course-authoring.grading-settings.alert.success.aria.labelledby',\n    defaultMessage: 'alert-confirmation-title',\n  },\n  alertSuccessAriaDescribedby: {\n    id: 'course-authoring.grading-settings.alert.success.aria.describedby',\n    defaultMessage: 'alert-confirmation-description',\n  },\n  creditEligibilitySectionTitle: {\n    id: 'course-authoring.grading-settings.credit-eligibility.title',\n    defaultMessage: 'Credit eligibility',\n  },\n  creditEligibilitySectionDescription: {\n    id: 'course-authoring.grading-settings.credit-eligibility.description',\n    defaultMessage: 'Settings for course credit eligibility',\n  },\n  gradingRulesPoliciesSectionTitle: {\n    id: 'course-authoring.grading-settings.grading-rules-policies.title',\n    defaultMessage: 'Grading rules & policies',\n  },\n  gradingRulesPoliciesSectionDescription: {\n    id: 'course-authoring.grading-settings.grading-rules-policies.description',\n    defaultMessage: 'Deadlines, requirements, and logistics around grading student work',\n  },\n  assignmentTypeSectionTitle: {\n    id: 'course-authoring.grading-settings.assignment-type.title',\n    defaultMessage: 'Assignment types',\n  },\n  assignmentTypeSectionDescription: {\n    id: 'course-authoring.grading-settings.assignment-type.description',\n    defaultMessage: 'Categories and labels for any exercises that are gradable',\n  },\n  addNewAssignmentTypeBtn: {\n    id: 'course-authoring.grading-settings.add-new-assignment-type.btn',\n    defaultMessage: 'New assignment type',\n  },\n});\n\nexport default messages;\n","import PropTypes from 'prop-types';\n\nexport const DUPLICATE_ASSIGNMENT_NAME = 'duplicateAssignmentName';\n\nexport const ASSIGNMENT_TYPES = {\n  type: 'type',\n  weight: 'weight',\n  minCount: 'minCount',\n  dropCount: 'dropCount',\n};\n\nexport const defaultAssignmentsPropTypes = {\n  type: PropTypes.string,\n  minCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  dropCount: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  shortLabel: PropTypes.string,\n  weight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n","import { DUPLICATE_ASSIGNMENT_NAME } from './enum';\n\n/**\n * Updates the error list for the job and sets the save warning display flag.\n *\n * @param {string} assignmentName - The name of the field being validated.\n * @param {number} assignmentId - Assignment id.\n * @param {string, boolean} assignmentValue - The value of the field being validated.\n * @param {function} setErrorList - Function to update the error list state.\n * @param {function} setShowSavePrompt - Function to update the visibility of the save prompt.\n * @returns {void}\n */\nexport const updateAssignmentErrorList = (\n  assignmentName,\n  assignmentId,\n  setErrorList,\n  setShowSavePrompt,\n  assignmentValue = true,\n) => {\n  setErrorList(prevState => ({ ...prevState, [`${assignmentName}-${assignmentId}`]: assignmentValue }));\n  if (assignmentValue) {\n    setShowSavePrompt(false);\n  }\n};\n\n/**\n * Validates assignment fields.\n *\n * @param {number} assignmentId - Assignment id.\n * @param {string} assignmentName - The name of the field being validated.\n * @param {string} assignmentType - The type of the assignment.\n * @param {string} assignmentValue - The value of the field being validated.\n * @param {function} setErrorList - Function to update the error list state.\n * @param {function} setShowSavePrompt - Function to update the visibility of the save prompt.\n * @param {array} courseGraders - An array of existing grading data.\n * @param {number} weightOfTotalGrade - The weight of the assignment.\n * @param {number} assignmentMinCount - The minimum count of the assignment.\n * @param {number} assignmentDropCount - The drop count of the assignment.\n * @returns {void}\n */\nexport const validationAssignmentFields = (\n  assignmentId,\n  assignmentName,\n  assignmentType,\n  assignmentValue,\n  setErrorList,\n  setShowSavePrompt,\n  courseGraders,\n  weightOfTotalGrade,\n  assignmentMinCount,\n  assignmentDropCount,\n) => {\n  const courseGradingTypes = courseGraders?.map(grade => grade.type);\n\n  switch (assignmentName) {\n  case assignmentType:\n    if (assignmentValue === '') {\n      updateAssignmentErrorList(assignmentName, assignmentId, setErrorList, setShowSavePrompt);\n      return;\n    }\n    if (courseGradingTypes.includes(assignmentValue)) {\n      updateAssignmentErrorList(\n        assignmentName,\n        assignmentId,\n        setErrorList,\n        setShowSavePrompt,\n        DUPLICATE_ASSIGNMENT_NAME,\n      );\n      return;\n    }\n    updateAssignmentErrorList(\n      assignmentName,\n      assignmentId,\n      setErrorList,\n      setShowSavePrompt,\n      false,\n    );\n    break;\n  case weightOfTotalGrade:\n    if (assignmentValue < 0 || assignmentValue > 100 || assignmentValue === '-0') {\n      updateAssignmentErrorList(\n        assignmentName,\n        assignmentId,\n        setErrorList,\n        setShowSavePrompt,\n      );\n      return;\n    }\n    updateAssignmentErrorList(\n      assignmentName,\n      assignmentId,\n      setErrorList,\n      setShowSavePrompt,\n      false,\n    );\n    break;\n  case assignmentMinCount:\n    if (assignmentValue <= 0 || assignmentValue === '' || assignmentValue === '-0') {\n      updateAssignmentErrorList(\n        assignmentName,\n        assignmentId,\n        setErrorList,\n        setShowSavePrompt,\n      );\n      return;\n    }\n    updateAssignmentErrorList(\n      assignmentName,\n      assignmentId,\n      setErrorList,\n      setShowSavePrompt,\n      false,\n    );\n    break;\n  case assignmentDropCount:\n    if (assignmentValue < 0 || assignmentValue === '' || assignmentValue === '-0') {\n      updateAssignmentErrorList(\n        assignmentName,\n        assignmentId,\n        setErrorList,\n        setShowSavePrompt,\n      );\n      return;\n    }\n    updateAssignmentErrorList(\n      assignmentName,\n      assignmentId,\n      setErrorList,\n      setShowSavePrompt,\n      false,\n    );\n    break;\n  default:\n    updateAssignmentErrorList(\n      assignmentName,\n      assignmentId,\n      setErrorList,\n      setShowSavePrompt,\n      false,\n    );\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Form } from '@edx/paragon';\n\nimport { defaultAssignmentsPropTypes } from '../utils/enum';\n\nconst AssignmentItem = ({\n  title,\n  descriptions,\n  type,\n  min,\n  max,\n  errorMsg,\n  className,\n  name,\n  onChange,\n  value,\n  errorEffort,\n  secondErrorMsg,\n  gradeField,\n  trailingElement,\n}) => (\n  <li className={className}>\n    <Form.Group className={classNames('form-group-custom', {\n      'form-group-custom_isInvalid': errorEffort,\n    })}\n    >\n      <Form.Label className=\"grading-label\">{title}</Form.Label>\n      <Form.Control\n        data-testid={`assignment-${name}-input`}\n        type={type}\n        min={min}\n        max={max}\n        name={name}\n        onChange={onChange}\n        value={value}\n        isInvalid={errorEffort}\n        trailingElement={trailingElement}\n      />\n      <Form.Control.Feedback className=\"grading-description\">\n        {descriptions}\n      </Form.Control.Feedback>\n      {errorEffort && (\n        <Form.Control.Feedback className=\"feedback-error\" type=\"invalid\">\n          {errorMsg}\n        </Form.Control.Feedback>\n      )}\n      {gradeField?.dropCount !== 0 && gradeField?.dropCount > gradeField?.minCount && (\n        <Form.Control.Feedback className=\"feedback-error\" type=\"invalid\">\n          {secondErrorMsg}\n        </Form.Control.Feedback>\n      )}\n    </Form.Group>\n  </li>\n);\n\nAssignmentItem.defaultProps = {\n  max: undefined,\n  errorMsg: undefined,\n  min: undefined,\n  value: '',\n  secondErrorMsg: undefined,\n  errorEffort: false,\n  gradeField: undefined,\n  trailingElement: undefined,\n};\n\nAssignmentItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  descriptions: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  errorMsg: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  className: PropTypes.string.isRequired,\n  secondErrorMsg: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  errorEffort: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gradeField: PropTypes.shape(defaultAssignmentsPropTypes),\n  trailingElement: PropTypes.string,\n};\n\nexport default AssignmentItem;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  assignmentTypeNameTitle: {\n    id: 'course-authoring.grading-settings.assignment.type-name.title',\n    defaultMessage: 'Assignment type name',\n  },\n  assignmentTypeNameDescription: {\n    id: 'course-authoring.grading-settings.assignment.type-name.description',\n    defaultMessage: 'The general category for this type of assignment, for example, Homework or Midterm Exam. This name is visible to learners.',\n  },\n  assignmentTypeNameErrorMessage1: {\n    id: 'course-authoring.grading-settings.assignment.type-name.error.message-1',\n    defaultMessage: 'The assignment type must have a name.',\n  },\n  assignmentTypeNameErrorMessage2: {\n    id: 'course-authoring.grading-settings.assignment.type-name.error.message-2',\n    defaultMessage: 'For grading to work, you must change all {initialAssignmentName} subsections to {value}.',\n  },\n  assignmentTypeNameErrorMessage3: {\n    id: 'course-authoring.grading-settings.assignment.type-name.error.message-3',\n    defaultMessage: \"There's already another assignment type with this name.\",\n  },\n  abbreviationTitle: {\n    id: 'course-authoring.grading-settings.assignment.abbreviation.title',\n    defaultMessage: 'Abbreviation',\n  },\n  abbreviationDescription: {\n    id: 'course-authoring.grading-settings.assignment.abbreviation.description',\n    defaultMessage: \"This short name for the assignment type (for example, HW or Midterm) appears next to assignments on a learner's Progress page.\",\n  },\n  weightOfTotalGradeTitle: {\n    id: 'course-authoring.grading-settings.assignment.weight-of-total-grade.title',\n    defaultMessage: 'Weight of total grade',\n  },\n  weightOfTotalGradeDescription: {\n    id: 'course-authoring.grading-settings.assignment.weight-of-total-grade.description',\n    defaultMessage: 'The weight of all assignments of this type as a percentage of the total grade, for example, 40. Do not include the percent symbol.',\n  },\n  weightOfTotalGradeErrorMessage: {\n    id: 'course-authoring.grading-settings.assignment.weight-of-total-grade.error.message',\n    defaultMessage: 'Please enter an integer between 0 and 100.',\n  },\n  totalNumberTitle: {\n    id: 'course-authoring.grading-settings.assignment.total-number.title',\n    defaultMessage: 'Total number',\n  },\n  totalNumberDescription: {\n    id: 'course-authoring.grading-settings.assignment.total-number.description',\n    defaultMessage: 'The number of subsections in the course that contain problems of this assignment type.',\n  },\n  totalNumberErrorMessage: {\n    id: 'course-authoring.grading-settings.assignment.total-number.error.message',\n    defaultMessage: 'Please enter an integer greater than 0.',\n  },\n  numberOfDroppableTitle: {\n    id: 'course-authoring.grading-settings.assignment.number-of-droppable.title',\n    defaultMessage: 'Number of droppable',\n  },\n  numberOfDroppableDescription: {\n    id: 'course-authoring.grading-settings.assignment.number-of-droppable.description',\n    defaultMessage: 'The number of assignments of this type that will be dropped. The lowest scoring assignments are dropped first.',\n  },\n  numberOfDroppableErrorMessage: {\n    id: 'course-authoring.grading-settings.assignment.number-of-droppable.error.message',\n    defaultMessage: 'Please enter non-negative integer.',\n  },\n  numberOfDroppableSecondErrorMessage: {\n    id: 'course-authoring.grading-settings.assignment.number-of-droppable.second.error.message',\n    defaultMessage: 'Cannot drop more {type} assignments than are assigned.',\n  },\n  assignmentAlertWarningTitle: {\n    id: 'course-authoring.grading-settings.assignment.alert.warning.title',\n    defaultMessage: 'Warning: The number of {type} assignments defined here does not match the current number of {type} assignments in the course:',\n  },\n  assignmentAlertWarningDescription: {\n    id: 'course-authoring.grading-settings.assignment.alert.warning.description',\n    defaultMessage: 'There are no assignments of this type in the course.',\n  },\n  assignmentAlertWarningUsageTitle: {\n    id: 'course-authoring.grading-settings.assignment.alert.warning.usage.title',\n    defaultMessage: 'Warning: The number of {type} assignments defined here does not match the current number of {type} assignments in the course:',\n  },\n  assignmentAlertWarningSuccess: {\n    id: 'course-authoring.grading-settings.assignment.alert.success.title',\n    defaultMessage: 'The number of {type} assignments in the course matches the number defined here.',\n  },\n  assignmentDeleteButton: {\n    id: 'course-authoring.grading-settings.assignment.delete.button',\n    defaultMessage: 'Delete',\n  },\n});\n\nexport default messages;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Form } from '@edx/paragon';\n\nimport { ASSIGNMENT_TYPES, DUPLICATE_ASSIGNMENT_NAME } from '../utils/enum';\nimport messages from '../messages';\n\nconst AssignmentTypeName = ({\n  intl, value, errorEffort, onChange,\n}) => {\n  const initialAssignmentName = useRef(value);\n\n  return (\n    <li className=\"course-grading-assignment-type-name\">\n      <Form.Group className={classNames('form-group-custom', {\n        'form-group-custom_isInvalid': errorEffort,\n      })}\n      >\n        <Form.Label className=\"grading-label\">\n          {intl.formatMessage(messages.assignmentTypeNameTitle)}\n        </Form.Label>\n        <Form.Control\n          data-testid=\"assignment-type-name-input\"\n          type=\"text\"\n          name={ASSIGNMENT_TYPES.type}\n          onChange={onChange}\n          value={value}\n          isInvalid={Boolean(errorEffort)}\n        />\n        <Form.Control.Feedback className=\"grading-description\">\n          {intl.formatMessage(messages.assignmentTypeNameDescription)}\n        </Form.Control.Feedback>\n        {errorEffort && errorEffort !== DUPLICATE_ASSIGNMENT_NAME && (\n          <Form.Control.Feedback className=\"feedback-error\" type=\"invalid\">\n            {intl.formatMessage(messages.assignmentTypeNameErrorMessage1)}\n          </Form.Control.Feedback>\n        )}\n        {value !== initialAssignmentName.current && initialAssignmentName.current !== '' && (\n          <Form.Control.Feedback className=\"feedback-error\" type=\"invalid\">\n            {intl.formatMessage(messages.assignmentTypeNameErrorMessage2, {\n              initialAssignmentName: initialAssignmentName.current,\n              value,\n            })}\n          </Form.Control.Feedback>\n        )}\n        {errorEffort === DUPLICATE_ASSIGNMENT_NAME && (\n          <Form.Control.Feedback className=\"feedback-error\" type=\"invalid\">\n            {intl.formatMessage(messages.assignmentTypeNameErrorMessage3)}\n          </Form.Control.Feedback>\n        )}\n      </Form.Group>\n    </li>\n  );\n};\n\nAssignmentTypeName.defaultProps = {\n  errorEffort: false,\n};\n\nAssignmentTypeName.propTypes = {\n  intl: intlShape.isRequired,\n  onChange: PropTypes.func.isRequired,\n  errorEffort: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]).isRequired,\n};\n\nexport default injectIntl(AssignmentTypeName);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button } from '@edx/paragon';\nimport { CheckCircle, Warning } from '@edx/paragon/icons';\n\nimport AlertMessage from '../../generic/alert-message';\nimport { validationAssignmentFields } from './utils/validation';\nimport AssignmentItem from './assignments/AssignmentItem';\nimport AssignmentTypeName from './assignments/AssignmentTypeName';\nimport { defaultAssignmentsPropTypes, ASSIGNMENT_TYPES } from './utils/enum';\nimport messages from './messages';\n\nconst MIN_NUMBER_VALUE = 0;\nconst MAX_NUMBER_VALUE = 100;\n\nconst AssignmentSection = ({\n  intl,\n  handleRemoveAssignment,\n  setShowSavePrompt,\n  graders,\n  setGradingData,\n  courseAssignmentLists,\n  setShowSuccessAlert,\n}) => {\n  const [errorList, setErrorList] = useState({});\n  const {\n    type, weight, minCount, dropCount,\n  } = ASSIGNMENT_TYPES;\n  const isFieldsWithoutErrors = Object.values(errorList).every(field => field !== true);\n\n  if (!isFieldsWithoutErrors) {\n    setShowSavePrompt(false);\n  }\n\n  const handleAssignmentChange = (e, assignmentId) => {\n    const { name, value, type: inputType } = e.target;\n\n    let inputValue = value;\n    if (inputType === 'number') {\n      inputValue = parseInt(value, 10);\n    }\n\n    setShowSavePrompt(true);\n\n    setGradingData(prevState => ({\n      ...prevState,\n      graders: graders.map(grader => {\n        if (grader.id === assignmentId) {\n          return { ...grader, [name]: inputValue };\n        }\n        return grader;\n      }),\n    }));\n\n    validationAssignmentFields(\n      assignmentId,\n      name,\n      type,\n      value,\n      setErrorList,\n      setShowSavePrompt,\n      graders,\n      weight,\n      minCount,\n      dropCount,\n    );\n    setShowSuccessAlert(false);\n  };\n\n  return (\n    <div className=\"assignment-items\">\n      {graders?.map((gradeField) => {\n        const courseAssignmentUsage = courseAssignmentLists[gradeField.type];\n        const showDefinedCaseAlert = gradeField.minCount !== courseAssignmentUsage?.length\n            && Boolean(courseAssignmentUsage?.length);\n        const showNotDefinedCaseAlert = !courseAssignmentUsage?.length && Boolean(gradeField.type);\n\n        return (\n          <div key={gradeField.id} className=\"course-grading-assignment-wrapper mb-4\">\n            <ol className=\"course-grading-assignment-items p-0 mb-4\">\n              <AssignmentTypeName\n                value={gradeField.type}\n                errorEffort={errorList[`${type}-${gradeField.id}`]}\n                onChange={(e) => handleAssignmentChange(e, gradeField.id)}\n              />\n              <AssignmentItem\n                className=\"course-grading-assignment-abbreviation\"\n                title={intl.formatMessage(messages.abbreviationTitle)}\n                descriptions={intl.formatMessage(messages.abbreviationDescription)}\n                type=\"text\"\n                name=\"shortLabel\"\n                value={gradeField.shortLabel}\n                onChange={(e) => handleAssignmentChange(e, gradeField.id)}\n              />\n              <AssignmentItem\n                className=\"course-grading-assignment-total-grade\"\n                title={intl.formatMessage(messages.weightOfTotalGradeTitle)}\n                descriptions={intl.formatMessage(messages.weightOfTotalGradeDescription)}\n                type=\"number\"\n                min={MIN_NUMBER_VALUE}\n                max={MAX_NUMBER_VALUE}\n                errorMsg={intl.formatMessage(messages.weightOfTotalGradeErrorMessage)}\n                name={weight}\n                value={gradeField.weight}\n                onChange={(e) => handleAssignmentChange(e, gradeField.id)}\n                errorEffort={errorList[`${weight}-${gradeField.id}`]}\n                trailingElement=\"%\"\n              />\n              <AssignmentItem\n                className=\"course-grading-assignment-total-number\"\n                title={intl.formatMessage(messages.totalNumberTitle)}\n                descriptions={intl.formatMessage(messages.totalNumberDescription)}\n                type=\"number\"\n                min={1}\n                errorMsg={intl.formatMessage(messages.totalNumberErrorMessage)}\n                name={minCount}\n                value={gradeField.minCount}\n                onChange={(e) => handleAssignmentChange(e, gradeField.id)}\n                errorEffort={errorList[`${minCount}-${gradeField.id}`]}\n              />\n              <AssignmentItem\n                className=\"course-grading-assignment-number-droppable\"\n                title={intl.formatMessage(messages.numberOfDroppableTitle)}\n                descriptions={intl.formatMessage(messages.numberOfDroppableDescription)}\n                type=\"number\"\n                min={MIN_NUMBER_VALUE}\n                errorMsg={intl.formatMessage(messages.numberOfDroppableErrorMessage)}\n                name={dropCount}\n                gradeField={gradeField}\n                value={gradeField.dropCount}\n                onChange={(e) => handleAssignmentChange(e, gradeField.id)}\n                secondErrorMsg={intl.formatMessage(messages.numberOfDroppableSecondErrorMessage, {\n                  type: gradeField.type,\n                })}\n                errorEffort={errorList[`${dropCount}-${gradeField.id}`]}\n              />\n            </ol>\n            {showDefinedCaseAlert && (\n              <AlertMessage\n                className=\"course-grading-assignment-item-alert-warning\"\n                variant=\"warning\"\n                icon={Warning}\n                title={intl.formatMessage(messages.assignmentAlertWarningUsageTitle, { type: gradeField.type })}\n                description={(\n                  <>\n                    <span className=\"course-grading-assignment-item-alert-warning-list-label\">\n                      {courseAssignmentUsage.length} Final assignment(s) found:\n                    </span>\n                    <ol className=\"course-grading-assignment-item-alert-warning-list\">\n                      {courseAssignmentUsage.map(assignmentItem => (\n                        <li key={assignmentItem}>{assignmentItem}</li>\n                      ))}\n                    </ol>\n                  </>\n                )}\n                aria-hidden=\"true\"\n              />\n            )}\n            {showNotDefinedCaseAlert && (\n              <AlertMessage\n                className=\"course-grading-assignment-item-alert-warning\"\n                variant=\"warning\"\n                icon={Warning}\n                title={intl.formatMessage(messages.assignmentAlertWarningTitle, { type: gradeField.type })}\n                description={(\n                  <span className=\"course-grading-assignment-item-alert-warning-list-label\">\n                    {intl.formatMessage(messages.assignmentAlertWarningDescription)}\n                  </span>\n                )}\n                aria-hidden=\"true\"\n              />\n            )}\n            {gradeField.minCount === courseAssignmentUsage?.length && (\n              <AlertMessage\n                className=\"course-grading-assignment-item-alert-success\"\n                variant=\"success\"\n                icon={CheckCircle}\n                title={intl.formatMessage(messages.assignmentAlertWarningSuccess, { type: gradeField.type })}\n                aria-hidden=\"true\"\n              />\n            )}\n            <Button\n              className=\"course-grading-assignment-delete-btn\"\n              variant=\"outline-primary\"\n              size=\"sm\"\n              onClick={() => handleRemoveAssignment(gradeField.id)}\n            >\n              {intl.formatMessage(messages.assignmentDeleteButton)}\n            </Button>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nAssignmentSection.defaultProps = {\n  courseAssignmentLists: undefined,\n  graders: undefined,\n};\n\nAssignmentSection.propTypes = {\n  intl: intlShape.isRequired,\n  handleRemoveAssignment: PropTypes.func.isRequired,\n  setGradingData: PropTypes.func.isRequired,\n  setShowSavePrompt: PropTypes.func.isRequired,\n  setShowSuccessAlert: PropTypes.func.isRequired,\n  courseAssignmentLists: PropTypes.shape(defaultAssignmentsPropTypes),\n  graders: PropTypes.arrayOf(\n    PropTypes.shape(defaultAssignmentsPropTypes),\n  ),\n};\n\nexport default injectIntl(AssignmentSection);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  creditEligibilityLabel: {\n    id: 'course-authoring.grading-settings.credit.eligibility.label',\n    defaultMessage: 'Minimum credit-eligible grade:',\n  },\n  creditEligibilityDescription: {\n    id: 'course-authoring.grading-settings.credit.eligibility.description',\n    defaultMessage: '% Must be greater than or equal to the course passing grade',\n  },\n  creditEligibilityErrorMsg: {\n    id: 'course-authoring.grading-settings.credit.eligibility.error.msg',\n    defaultMessage: 'Not able to set passing grade to less than:',\n  },\n});\n\nexport default messages;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Form } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\n\nconst CreditSection = ({\n  intl, eligibleGrade, setShowSavePrompt, minimumGradeCredit, setGradingData, setShowSuccessAlert,\n}) => {\n  const [errorEffort, setErrorEffort] = useState(false);\n\n  const handleCreditChange = (e) => {\n    const { value } = e.target;\n\n    setGradingData(prevData => ({\n      ...prevData,\n      minimumGradeCredit: value / 100,\n    }));\n\n    if (value <= eligibleGrade) {\n      setErrorEffort(true);\n      setShowSavePrompt(false);\n      return;\n    }\n\n    setShowSavePrompt(true);\n    setErrorEffort(false);\n    setShowSuccessAlert(false);\n  };\n\n  return (\n    <Form.Group\n      className={classNames('form-group-custom w-50', {\n        'form-group-custom_isInvalid': errorEffort,\n      })}\n    >\n      <Form.Label className=\"grading-label\">\n        {intl.formatMessage(messages.creditEligibilityLabel)}\n      </Form.Label>\n      <Form.Control\n        data-testid=\"minimum-grade-credit-input\"\n        type=\"number\"\n        min={0}\n        value={Math.round(parseFloat(minimumGradeCredit) * 100) || ''}\n        name=\"minimum_grade_credit\"\n        onChange={handleCreditChange}\n      />\n      <Form.Control.Feedback className=\"grading-description\">\n        {intl.formatMessage(messages.creditEligibilityDescription)}\n      </Form.Control.Feedback>\n      {errorEffort && (\n        <Form.Control.Feedback className=\"feedback-error\" type=\"invalid\">\n          {intl.formatMessage(messages.creditEligibilityErrorMsg)} {eligibleGrade}.\n        </Form.Control.Feedback>\n      )}\n    </Form.Group>\n  );\n};\n\nCreditSection.propTypes = {\n  intl: intlShape.isRequired,\n  eligibleGrade: PropTypes.number.isRequired,\n  setShowSavePrompt: PropTypes.func.isRequired,\n  setGradingData: PropTypes.func.isRequired,\n  setShowSuccessAlert: PropTypes.func.isRequired,\n  minimumGradeCredit: PropTypes.number.isRequired,\n};\n\nexport default injectIntl(CreditSection);\n","/**\n * Time format conversions for values (hours or minutes) that are less than 10.\n *\n * @param {number} time - incoming time data.\n * @returns {string} - formatted time string.\n */\nexport function formatTime(time) {\n  return (time >= 10 ? time.toString() : `0${time}`);\n}\n\n/**\n * Validates inputStr as a time in HH:MM format.\n *\n * @param {string} inputStr - the input string to validate.\n * @param {function} setShowSavePrompt - a function to control save prompt display.\n * @param {function} setIsError - a function to set error state.\n * @returns {boolean} - returns `true` if `inputStr` is a valid time, else `false`.\n */\nexport function timerValidation(inputStr, setShowSavePrompt, setIsError) {\n  const timePattern = /^(?:[01]\\d|2[0-3]):[0-5]\\d$/;\n\n  const isValid = timePattern.test(inputStr);\n  setShowSavePrompt(isValid);\n  setIsError(!isValid);\n\n  return isValid;\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  gracePeriodOnDeadlineLabel: {\n    id: 'course-authoring.grading-settings.deadline.label',\n    defaultMessage: 'Grace period on deadline:',\n  },\n  gracePeriodOnDeadlineDescription: {\n    id: 'course-authoring.grading-settings.deadline.description',\n    defaultMessage: 'Leeway on due dates',\n  },\n  gracePeriodOnDeadlineErrorMsg: {\n    id: 'course-authoring.grading-settings.deadline.error.message',\n    defaultMessage: 'Grace period must be specified in {timeFormat} format.',\n  },\n});\n\nexport default messages;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport classNames from 'classnames';\n\nimport { DEFAULT_TIME_STAMP, TIME_FORMAT } from '../../constants';\nimport { formatTime, timerValidation } from './utils';\nimport messages from './messages';\n\nconst DeadlineSection = ({\n  intl, setShowSavePrompt, gracePeriod, setGradingData, setShowSuccessAlert,\n}) => {\n  const timeStampValue = gracePeriod\n    ? gracePeriod.hours && `${formatTime(gracePeriod.hours)}:${formatTime(gracePeriod.minutes)}`\n    : DEFAULT_TIME_STAMP;\n  const [newDeadlineValue, setNewDeadlineValue] = useState(timeStampValue);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    setNewDeadlineValue(timeStampValue);\n  }, [gracePeriod]);\n\n  const handleDeadlineChange = (e) => {\n    const { value } = e.target;\n    const [hours, minutes] = value.split(':');\n\n    setNewDeadlineValue(value);\n\n    if (timerValidation(value, setShowSavePrompt, setIsError)) {\n      setGradingData(prevData => ({\n        ...prevData,\n        gracePeriod: {\n          hours: +hours,\n          minutes: +minutes,\n        },\n      }));\n      setShowSuccessAlert(false);\n    }\n  };\n\n  return (\n    <Form.Group className={classNames('w-50 form-group-custom', {\n      'form-group-custom_isInvalid': isError,\n    })}\n    >\n      <Form.Label className=\"grading-label\">\n        {intl.formatMessage(messages.gracePeriodOnDeadlineLabel)}\n      </Form.Label>\n      <Form.Control\n        data-testid=\"deadline-period-input\"\n        value={newDeadlineValue}\n        onChange={handleDeadlineChange}\n        placeholder={TIME_FORMAT.toUpperCase()}\n      />\n      <Form.Control.Feedback className=\"grading-description\">\n        {intl.formatMessage(messages.gracePeriodOnDeadlineDescription)}\n      </Form.Control.Feedback>\n      {isError && (\n        <Form.Control.Feedback className=\"feedback-error\" type=\"invalid\">\n          {intl.formatMessage(messages.gracePeriodOnDeadlineErrorMsg, { timeFormat: TIME_FORMAT.toUpperCase() })}\n        </Form.Control.Feedback>\n      )}\n    </Form.Group>\n  );\n};\n\nDeadlineSection.defaultProps = {\n  gracePeriod: null,\n};\n\nDeadlineSection.propTypes = {\n  intl: intlShape.isRequired,\n  setShowSavePrompt: PropTypes.func.isRequired,\n  setGradingData: PropTypes.func.isRequired,\n  setShowSuccessAlert: PropTypes.func.isRequired,\n  gracePeriod: PropTypes.shape({\n    hours: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    minutes: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n};\n\nexport default injectIntl(DeadlineSection);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Container, Layout, Button, StatefulButton,\n} from '@edx/paragon';\nimport { CheckCircle, Warning, Add as IconAdd } from '@edx/paragon/icons';\n\nimport { useModel } from '../generic/model-store';\nimport AlertMessage from '../generic/alert-message';\nimport { RequestStatus } from '../data/constants';\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport SubHeader from '../generic/sub-header/SubHeader';\nimport SectionSubHeader from '../generic/section-sub-header';\nimport { STATEFUL_BUTTON_STATES } from '../constants';\nimport {\n  getGradingSettings,\n  getCourseAssignmentLists,\n  getSavingStatus,\n  getLoadingStatus,\n  getCourseSettings,\n} from './data/selectors';\nimport { fetchGradingSettings, sendGradingSetting, fetchCourseSettingsQuery } from './data/thunks';\nimport GradingScale from './grading-scale/GradingScale';\nimport GradingSidebar from './grading-sidebar';\nimport messages from './messages';\nimport AssignmentSection from './assignment-section';\nimport CreditSection from './credit-section';\nimport DeadlineSection from './deadline-section';\nimport { useConvertGradeCutoffs, useUpdateGradingData } from './hooks';\nimport getPageHeadTitle from '../generic/utils';\n\nconst GradingSettings = ({ intl, courseId }) => {\n  const gradingSettingsData = useSelector(getGradingSettings);\n  const courseSettingsData = useSelector(getCourseSettings);\n  const courseAssignmentLists = useSelector(getCourseAssignmentLists);\n  const savingStatus = useSelector(getSavingStatus);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const [showSuccessAlert, setShowSuccessAlert] = useState(false);\n  const dispatch = useDispatch();\n  const isLoading = loadingStatus === RequestStatus.IN_PROGRESS;\n  const [isQueryPending, setIsQueryPending] = useState(false);\n  const [showOverrideInternetConnectionAlert, setOverrideInternetConnectionAlert] = useState(false);\n  const [eligibleGrade, setEligibleGrade] = useState(null);\n\n  const courseDetails = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(courseDetails?.name, intl.formatMessage(messages.headingTitle));\n\n  const {\n    graders,\n    resetDataRef,\n    setGradingData,\n    gradingData,\n    gradeCutoffs,\n    gracePeriod,\n    minimumGradeCredit,\n    showSavePrompt,\n    setShowSavePrompt,\n    handleResetPageData,\n    handleAddAssignment,\n    handleRemoveAssignment,\n  } = useUpdateGradingData(gradingSettingsData, setOverrideInternetConnectionAlert, setShowSuccessAlert);\n\n  const {\n    gradeLetters,\n    gradeValues,\n    sortedGrades,\n  } = useConvertGradeCutoffs(gradeCutoffs);\n\n  useEffect(() => {\n    if (savingStatus === RequestStatus.SUCCESSFUL) {\n      setShowSuccessAlert(!showSuccessAlert);\n      setShowSavePrompt(!showSavePrompt);\n      setTimeout(() => setShowSuccessAlert(false), 15000);\n      setIsQueryPending(!isQueryPending);\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  }, [savingStatus]);\n\n  useEffect(() => {\n    dispatch(fetchGradingSettings(courseId));\n    dispatch(fetchCourseSettingsQuery(courseId));\n  }, [courseId]);\n\n  if (isLoading) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n  }\n\n  const handleQueryProcessing = () => {\n    setShowSuccessAlert(false);\n    dispatch(sendGradingSetting(courseId, gradingData));\n  };\n\n  const handleSendGradingSettingsData = () => {\n    setIsQueryPending(true);\n    setOverrideInternetConnectionAlert(true);\n  };\n\n  const handleInternetConnectionFailed = () => {\n    setShowSavePrompt(false);\n    setShowSuccessAlert(false);\n    setIsQueryPending(false);\n    setOverrideInternetConnectionAlert(true);\n  };\n\n  const updateValuesButtonState = {\n    labels: {\n      default: intl.formatMessage(messages.buttonSaveText),\n      pending: intl.formatMessage(messages.buttonSavingText),\n    },\n    disabledStates: [RequestStatus.PENDING],\n  };\n\n  return (\n    <>\n      <Container size=\"xl\" className=\"px-4\">\n        <div className=\"mt-5\">\n          <AlertMessage\n            show={showSuccessAlert}\n            variant=\"success\"\n            icon={CheckCircle}\n            title={intl.formatMessage(messages.alertSuccess)}\n            aria-hidden=\"true\"\n            aria-labelledby={intl.formatMessage(messages.alertSuccessAriaLabelledby)}\n            aria-describedby={intl.formatMessage(messages.alertSuccessAriaDescribedby)}\n          />\n        </div>\n        <div>\n          <section className=\"setting-items mb-4\">\n            <Layout\n              lg={[{ span: 9 }, { span: 3 }]}\n              md={[{ span: 9 }, { span: 3 }]}\n              sm={[{ span: 9 }, { span: 3 }]}\n              xs={[{ span: 9 }, { span: 3 }]}\n              xl={[{ span: 9 }, { span: 3 }]}\n            >\n              <Layout.Element>\n                <article>\n                  <SubHeader\n                    title={intl.formatMessage(messages.headingTitle)}\n                    subtitle={intl.formatMessage(messages.headingSubtitle)}\n                    contentTitle={intl.formatMessage(messages.policy)}\n                    description={intl.formatMessage(messages.policiesDescription)}\n                  />\n                  <section>\n                    <GradingScale\n                      gradeCutoffs={gradeCutoffs}\n                      showSavePrompt={setShowSavePrompt}\n                      gradeLetters={gradeLetters}\n                      gradeValues={gradeValues}\n                      sortedGrades={sortedGrades}\n                      setShowSuccessAlert={setShowSuccessAlert}\n                      setGradingData={setGradingData}\n                      resetDataRef={resetDataRef}\n                      setOverrideInternetConnectionAlert={setOverrideInternetConnectionAlert}\n                      setEligibleGrade={setEligibleGrade}\n                    />\n                  </section>\n                  {courseSettingsData.creditEligibilityEnabled && courseSettingsData.isCreditCourse && (\n                    <section>\n                      <SectionSubHeader\n                        title={intl.formatMessage(messages.creditEligibilitySectionTitle)}\n                        description={intl.formatMessage(messages.creditEligibilitySectionDescription)}\n                      />\n                      <CreditSection\n                        eligibleGrade={eligibleGrade}\n                        setShowSavePrompt={setShowSavePrompt}\n                        minimumGradeCredit={minimumGradeCredit}\n                        setGradingData={setGradingData}\n                        setShowSuccessAlert={setShowSuccessAlert}\n                      />\n                    </section>\n                  )}\n                  <section>\n                    <SectionSubHeader\n                      title={intl.formatMessage(messages.gradingRulesPoliciesSectionTitle)}\n                      description={intl.formatMessage(messages.gradingRulesPoliciesSectionDescription)}\n                    />\n                    <DeadlineSection\n                      setShowSavePrompt={setShowSavePrompt}\n                      gracePeriod={gracePeriod}\n                      setGradingData={setGradingData}\n                      setShowSuccessAlert={setShowSuccessAlert}\n                    />\n                  </section>\n                  <section>\n                    <header className=\"row justify-content-between align-items-center mt-4 mx-0 mb-2\">\n                      <h2 className=\"lead\">\n                        {intl.formatMessage(messages.assignmentTypeSectionTitle)}\n                      </h2>\n                      <span className=\"small text-gray-700\">\n                        {intl.formatMessage(messages.assignmentTypeSectionDescription)}\n                      </span>\n                    </header>\n                    <AssignmentSection\n                      handleRemoveAssignment={handleRemoveAssignment}\n                      setShowSavePrompt={setShowSavePrompt}\n                      graders={graders}\n                      setGradingData={setGradingData}\n                      courseAssignmentLists={courseAssignmentLists}\n                      setShowSuccessAlert={setShowSuccessAlert}\n                    />\n                    <Button\n                      variant=\"primary\"\n                      iconBefore={IconAdd}\n                      onClick={handleAddAssignment}\n                    >\n                      {intl.formatMessage(messages.addNewAssignmentTypeBtn)}\n                    </Button>\n                  </section>\n                </article>\n              </Layout.Element>\n              <Layout.Element>\n                <GradingSidebar\n                  courseId={courseId}\n                  intl={intl}\n                  proctoredExamSettingsUrl={courseSettingsData.mfeProctoredExamSettingsUrl}\n                />\n              </Layout.Element>\n            </Layout>\n          </section>\n        </div>\n      </Container>\n      <div className=\"alert-toast\">\n        {showOverrideInternetConnectionAlert && (\n          <InternetConnectionAlert\n            isFailed={savingStatus === RequestStatus.FAILED}\n            isQueryPending={isQueryPending}\n            onQueryProcessing={handleQueryProcessing}\n            onInternetConnectionFailed={handleInternetConnectionFailed}\n          />\n        )}\n        <AlertMessage\n          show={showSavePrompt}\n          aria-hidden={!showSavePrompt}\n          aria-labelledby={intl.formatMessage(messages.alertWarningAriaLabelledby)}\n          aria-describedby={intl.formatMessage(messages.alertWarningAriaDescribedby)}\n          data-testid=\"grading-settings-save-alert\"\n          role=\"dialog\"\n          actions={[\n            !isQueryPending && (\n              <Button variant=\"tertiary\" onClick={handleResetPageData}>\n                {intl.formatMessage(messages.buttonCancelText)}\n              </Button>\n            ),\n            <StatefulButton\n              key=\"statefulBtn\"\n              onClick={handleSendGradingSettingsData}\n              state={isQueryPending ? STATEFUL_BUTTON_STATES.pending : STATEFUL_BUTTON_STATES.default}\n              {...updateValuesButtonState}\n            />,\n          ].filter(Boolean)}\n          variant=\"warning\"\n          icon={Warning}\n          title={intl.formatMessage(messages.alertWarning)}\n          description={intl.formatMessage(messages.alertWarningDescriptions)}\n        />\n      </div>\n    </>\n  );\n};\n\nGradingSettings.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(GradingSettings);\n","import { useEffect, useRef, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { getGradingValues, getSortedGrades } from './grading-scale/utils';\n\nconst useConvertGradeCutoffs = (\n  gradeCutoffs,\n) => {\n  const gradeLetters = gradeCutoffs && Object.keys(gradeCutoffs);\n  const gradeValues = gradeCutoffs && getGradingValues(gradeCutoffs);\n  const sortedGrades = gradeCutoffs && getSortedGrades(gradeValues);\n\n  return {\n    gradeLetters,\n    gradeValues,\n    sortedGrades,\n  };\n};\n\nconst useUpdateGradingData = (gradingSettingsData, setOverrideInternetConnectionAlert, setShowSuccessAlert) => {\n  const uniqueId = uuidv4();\n  const [gradingData, setGradingData] = useState({});\n  const [showSavePrompt, setShowSavePrompt] = useState(false);\n  const resetDataRef = useRef(false);\n  const {\n    gradeCutoffs = {},\n    gracePeriod = { hours: '', minutes: '' },\n    minimumGradeCredit,\n    graders,\n  } = gradingData;\n\n  useEffect(() => {\n    if (gradingSettingsData !== undefined) {\n      setGradingData(gradingSettingsData);\n    }\n  }, [gradingSettingsData]);\n\n  const handleResetPageData = () => {\n    setShowSavePrompt(!showSavePrompt);\n    setShowSuccessAlert(false);\n    setGradingData(gradingSettingsData);\n    resetDataRef.current = true;\n    setOverrideInternetConnectionAlert(false);\n  };\n\n  const handleAddAssignment = () => {\n    setGradingData(prevState => ({\n      ...prevState,\n      graders: [...prevState.graders, {\n        id: uniqueId,\n        dropCount: 0,\n        minCount: 1,\n        shortLabel: '',\n        type: '',\n        weight: 0,\n      }],\n    }));\n    setShowSuccessAlert(false);\n  };\n\n  const handleRemoveAssignment = (assignmentId) => {\n    setGradingData((prevState) => ({\n      ...prevState,\n      graders: prevState.graders.filter((grade) => grade.id !== assignmentId),\n    }));\n    setShowSuccessAlert(false);\n    setShowSavePrompt(true);\n  };\n\n  return {\n    graders,\n    resetDataRef,\n    setGradingData,\n    gradingData,\n    gradeCutoffs,\n    gracePeriod,\n    minimumGradeCredit,\n    showSavePrompt,\n    setShowSavePrompt,\n    handleResetPageData,\n    handleAddAssignment,\n    handleRemoveAssignment,\n  };\n};\n\nexport { useConvertGradeCutoffs, useUpdateGradingData };\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headingTitle: {\n    id: 'course-authoring.course-team.headingTitle',\n    defaultMessage: 'Course team',\n  },\n  headingSubtitle: {\n    id: 'course-authoring.course-team.subTitle',\n    defaultMessage: 'Settings',\n  },\n  addNewMemberButton: {\n    id: 'course-authoring.course-team.button.new-team-member',\n    defaultMessage: 'New team member',\n  },\n});\n\nexport default messages;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  sidebarTitle: {\n    id: 'course-authoring.course-team.sidebar.title',\n    defaultMessage: 'Course team roles',\n  },\n  sidebarAbout_1: {\n    id: 'course-authoring.course-team.sidebar.about-1',\n    defaultMessage: 'Course team members with the Staff role are course co-authors. They have full writing and editing privileges on all course content.',\n  },\n  sidebarAbout_2: {\n    id: 'course-authoring.course-team.sidebar.about-2',\n    defaultMessage: 'Admins are course team members who can add and remove other course team members.',\n  },\n  sidebarAbout_3: {\n    id: 'course-authoring.course-team.sidebar.about-3',\n    defaultMessage: 'All course team members can access content in Studio, the LMS, and Insights, but are not automatically enrolled in the course.',\n  },\n  ownershipTitle: {\n    id: 'course-authoring.course-team.sidebar.ownership.title',\n    defaultMessage: 'Transferring ownership',\n  },\n  ownershipDescription: {\n    id: 'course-authoring.course-team.sidebar.ownership.description',\n    defaultMessage: 'Every course must have an Admin. If you are the Admin and you want to transfer ownership of the course, click {strong} to make another user the Admin, then ask that user to remove you from the Course Team list.',\n  },\n  addAdminAccess: {\n    id: 'course-authoring.course-team.sidebar.ownership.addAdminAccess',\n    defaultMessage: 'Add admin access',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { HelpSidebar } from '../../generic/help-sidebar';\nimport messages from './messages';\n\nconst CourseTeamSideBar = ({ courseId, isOwnershipHint, isShowInitialSidebar }) => {\n  const intl = useIntl();\n\n  return (\n    <div\n      className=\"course-team-sidebar\"\n      data-testid={isShowInitialSidebar ? 'course-team-sidebar__initial' : 'course-team-sidebar'}\n    >\n      <HelpSidebar\n        intl={intl}\n        courseId={courseId}\n        showOtherSettings={false}\n      >\n        <h4 className=\"help-sidebar-about-title\">\n          {intl.formatMessage(messages.sidebarTitle)}\n        </h4>\n        <p className=\"help-sidebar-about-descriptions\">\n          {intl.formatMessage(messages.sidebarAbout_1)}\n        </p>\n        <p className=\"help-sidebar-about-descriptions\">\n          {intl.formatMessage(messages.sidebarAbout_2)}\n        </p>\n        <p className=\"help-sidebar-about-descriptions\">\n          {intl.formatMessage(messages.sidebarAbout_3)}\n        </p>\n      </HelpSidebar>\n      {isOwnershipHint && (\n        <>\n          <hr />\n          <HelpSidebar\n            intl={intl}\n            courseId={courseId}\n            showOtherSettings={false}\n          >\n            <h4 className=\"help-sidebar-about-title\">\n              {intl.formatMessage(messages.ownershipTitle)}\n            </h4>\n            <p className=\"help-sidebar-about-descriptions\">\n              {intl.formatMessage(\n                messages.ownershipDescription,\n                { strong: <strong>{intl.formatMessage(messages.addAdminAccess)}</strong> },\n              )}\n            </p>\n          </HelpSidebar>\n        </>\n      )}\n    </div>\n  );\n};\n\nCourseTeamSideBar.defaultProps = {\n  isShowInitialSidebar: false,\n};\n\nCourseTeamSideBar.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  isOwnershipHint: PropTypes.bool.isRequired,\n  isShowInitialSidebar: PropTypes.bool,\n};\n\nexport default CourseTeamSideBar;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  formTitle: {\n    id: 'course-authoring.course-team.form.title',\n    defaultMessage: 'Add a user to your course\\'s team',\n  },\n  formLabel: {\n    id: 'course-authoring.course-team.form.label',\n    defaultMessage: 'User\\'s email address',\n  },\n  formPlaceholder: {\n    id: 'course-authoring.course-team.form.placeholder',\n    defaultMessage: 'example: {email}',\n  },\n  formHelperText: {\n    id: 'course-authoring.course-team.form.helperText',\n    defaultMessage: 'Provide the email address of the user you want to add as Staff',\n  },\n  addUserButton: {\n    id: 'course-authoring.course-team.form.button.addUser',\n    defaultMessage: 'Add user',\n  },\n  cancelButton: {\n    id: 'course-authoring.course-team.form.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n\n});\n\nexport default messages;\n","export const MODAL_TYPES = {\n  error: 'error',\n  delete: 'delete',\n  warning: 'warning',\n};\n\nexport const BADGE_STATES = {\n  admin: 'primary-700',\n  staff: 'gray-500',\n};\n\nexport const USER_ROLES = {\n  admin: 'instructor',\n  staff: 'staff',\n};\n\nexport const EXAMPLE_USER_EMAIL = 'username@domain.com';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Button,\n  Form,\n  ActionRow,\n} from '@edx/paragon';\nimport { Formik } from 'formik';\n\nimport messages from './messages';\nimport FormikControl from '../../generic/FormikControl';\nimport { EXAMPLE_USER_EMAIL } from '../constants';\n\nconst AddUserForm = ({ onSubmit, onCancel }) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"add-user-form\" data-testid=\"add-user-form\">\n      <Formik\n        initialValues={{ email: '' }}\n        onSubmit={onSubmit}\n        validateOnBlur\n      >\n        {({ handleSubmit, values }) => (\n          <>\n            <Form.Group size=\"sm\" className=\"form-field\">\n              <h3 className=\"form-title\">{intl.formatMessage(messages.formTitle)}</h3>\n              <Form.Label size=\"sm\" className=\"form-label font-weight-bold\">\n                {intl.formatMessage(messages.formLabel)}\n              </Form.Label>\n              <FormikControl\n                name=\"email\"\n                value={values.email}\n                placeholder={intl.formatMessage(messages.formPlaceholder, { email: EXAMPLE_USER_EMAIL })}\n              />\n              <Form.Control.Feedback className=\"form-helper-text\">\n                {intl.formatMessage(messages.formHelperText)}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <ActionRow>\n              <Button variant=\"tertiary\" size=\"sm\" onClick={onCancel}>\n                {intl.formatMessage(messages.cancelButton)}\n              </Button>\n              <Button\n                size=\"sm\"\n                onClick={handleSubmit}\n                disabled={!values.email.length}\n                type=\"submit\"\n              >\n                {intl.formatMessage(messages.addUserButton)}\n              </Button>\n            </ActionRow>\n          </>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nAddUserForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired,\n};\n\nexport default AddUserForm;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  title: {\n    id: 'course-authoring.course-team.add-team-member.title',\n    defaultMessage: 'Add team members to this course',\n  },\n  description: {\n    id: 'course-authoring.course-team.add-team-member.description',\n    defaultMessage: 'Adding team members makes course authoring collaborative. Users must be signed up for Studio and have an active account.',\n  },\n  button: {\n    id: 'course-authoring.course-team.add-team-member.button',\n    defaultMessage: 'Add a new team member',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Add as IconAdd } from '@edx/paragon/icons';\nimport { Button } from '@edx/paragon';\n\nimport messages from './messages';\n\nconst AddTeamMember = ({ onFormOpen, isButtonDisable }) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"add-team-member bg-gray-100\" data-testid=\"add-team-member\">\n      <div className=\"add-team-member-info\">\n        <h3 className=\"add-team-member-title font-weight-bold\">{intl.formatMessage(messages.title)}</h3>\n        <span className=\"text-gray-500 small\">{intl.formatMessage(messages.description)}</span>\n      </div>\n      <Button\n        variant=\"primary\"\n        iconBefore={IconAdd}\n        onClick={onFormOpen}\n        disabled={isButtonDisable}\n      >\n        {intl.formatMessage(messages.button)}\n      </Button>\n    </div>\n  );\n};\n\nAddTeamMember.propTypes = {\n  onFormOpen: PropTypes.func.isRequired,\n  isButtonDisable: PropTypes.bool,\n};\n\nAddTeamMember.defaultProps = {\n  isButtonDisable: false,\n};\n\nexport default AddTeamMember;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  roleAdmin: {\n    id: 'course-authoring.course-team.member.role.admin',\n    defaultMessage: 'Admin',\n  },\n  roleStaff: {\n    id: 'course-authoring.course-team.member.role.staff',\n    defaultMessage: 'Staff',\n  },\n  roleYou: {\n    id: 'course-authoring.course-team.member.role.you',\n    defaultMessage: 'You!',\n  },\n  hint: {\n    id: 'course-authoring.course-team.member.hint',\n    defaultMessage: 'Promote another member to Admin to remove your admin rights',\n  },\n  addButton: {\n    id: 'course-authoring.course-team.member.button.add',\n    defaultMessage: 'Add admin access',\n  },\n  removeButton: {\n    id: 'course-authoring.course-team.member.button.remove',\n    defaultMessage: 'Remove admin access',\n  },\n  deleteUserButton: {\n    id: 'course-authoring.course-team.member.button.delete',\n    defaultMessage: 'Delete user',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Badge,\n  Button,\n  Icon,\n  IconButtonWithTooltip,\n  MailtoLink,\n} from '@edx/paragon';\nimport { DeleteOutline } from '@edx/paragon/icons';\n\nimport messages from './messages';\nimport { USER_ROLES, BADGE_STATES } from '../constants';\n\nconst CourseTeamMember = ({\n  userName,\n  role,\n  email,\n  onChangeRole,\n  onDelete,\n  currentUserEmail,\n  isHideActions,\n  isAllowActions,\n}) => {\n  const intl = useIntl();\n  const isAdminRole = role === USER_ROLES.admin;\n  const badgeColor = isAdminRole ? BADGE_STATES.admin : BADGE_STATES.staff;\n\n  return (\n    <div className=\"course-team-member\" data-testid=\"course-team-member\">\n      <div className=\"member-info\">\n        <Badge className={`badge-current-user bg-${badgeColor} text-light-100`}>\n          {isAdminRole\n            ? intl.formatMessage(messages.roleAdmin)\n            : intl.formatMessage(messages.roleStaff)}\n          {currentUserEmail === email && (\n            <span className=\"badge-current-user x-small text-light-500\">{intl.formatMessage(messages.roleYou)}</span>\n          )}\n        </Badge>\n        <span className=\"member-info-name font-weight-bold\">{userName}</span>\n        <MailtoLink to={email}>{email}</MailtoLink>\n      </div>\n      {/* eslint-disable-next-line no-nested-ternary */}\n      {isAllowActions && (\n        !isHideActions ? (\n          <div className=\"member-actions\">\n            <Button\n              variant={isAdminRole ? 'tertiary' : 'primary'}\n              size=\"sm\"\n              onClick={() => onChangeRole(email, isAdminRole ? USER_ROLES.staff : USER_ROLES.admin)}\n            >\n              {isAdminRole ? intl.formatMessage(messages.removeButton) : intl.formatMessage(messages.addButton)}\n            </Button>\n            <IconButtonWithTooltip\n              src={DeleteOutline}\n              tooltipContent={intl.formatMessage(messages.deleteUserButton)}\n              onClick={() => onDelete(email)}\n              iconAs={Icon}\n              alt={intl.formatMessage(messages.deleteUserButton)}\n              data-testid=\"delete-button\"\n            />\n          </div>\n        ) : (\n          <div className=\"member-hint text-right\">\n            <span>{intl.formatMessage(messages.hint)}</span>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nCourseTeamMember.propTypes = {\n  userName: PropTypes.string.isRequired,\n  role: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  onChangeRole: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  currentUserEmail: PropTypes.string.isRequired,\n  isHideActions: PropTypes.bool.isRequired,\n  isAllowActions: PropTypes.bool.isRequired,\n};\n\nexport default CourseTeamMember;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  deleteModalTitle: {\n    id: 'course-authoring.course-team.member.button.remove',\n    defaultMessage: 'Delete course team member',\n  },\n  deleteModalMessage: {\n    id: 'course-authoring.course-team.delete-modal.message',\n    defaultMessage: 'Are you sure you want to delete {email} from the course team for “{courseName}”?',\n  },\n  deleteModalDeleteButton: {\n    id: 'course-authoring.course-team.delete-modal.button.delete',\n    defaultMessage: 'Delete',\n  },\n  deleteModalCancelButton: {\n    id: 'course-authoring.course-team.delete-modal.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n  errorModalTitle: {\n    id: 'course-authoring.course-team.error-modal.title',\n    defaultMessage: 'Error adding user',\n  },\n  errorModalOkButton: {\n    id: 'course-authoring.course-team.error-modal.button.ok',\n    defaultMessage: 'Ok',\n  },\n  warningModalTitle: {\n    id: 'course-authoring.course-team.warning-modal.title',\n    defaultMessage: 'Already a course team member',\n  },\n  warningModalMessage: {\n    id: 'course-authoring.course-team.warning-modal.message',\n    defaultMessage: '{email} is already on the {courseName} team. Recheck the email address if you want to add a new member.',\n  },\n  warningModalReturnButton: {\n    id: 'course-authoring.course-team.warning-modal.button.return',\n    defaultMessage: 'Return to team listing',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ActionRow,\n  Button,\n  AlertModal,\n} from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { MODAL_TYPES } from '../constants';\nimport { getInfoModalSettings } from '../utils';\n\nconst InfoModal = ({\n  modalType,\n  isOpen,\n  close,\n  onDeleteSubmit,\n  currentEmail,\n  errorMessage,\n  courseName,\n}) => {\n  const intl = useIntl();\n\n  const {\n    title,\n    message,\n    variant,\n    closeButtonText,\n    submitButtonText,\n    closeButtonVariant,\n  } = getInfoModalSettings(modalType, currentEmail, errorMessage, courseName, intl);\n\n  const isEmptyErrorMessage = modalType === MODAL_TYPES.error && !errorMessage;\n\n  return (\n    <AlertModal\n      title={title}\n      variant={variant}\n      isOpen={isOpen && !isEmptyErrorMessage}\n      onClose={close}\n      footerNode={(\n        <ActionRow>\n          <Button variant={closeButtonVariant} onClick={close}>\n            {closeButtonText}\n          </Button>\n          {modalType === MODAL_TYPES.delete && (\n            <Button\n              onClick={(e) => {\n                e.preventDefault();\n                onDeleteSubmit();\n              }}\n            >\n              {submitButtonText}\n            </Button>\n          )}\n        </ActionRow>\n      )}\n    >\n      <p>{message}</p>\n    </AlertModal>\n  );\n};\n\nInfoModal.propTypes = {\n  modalType: PropTypes.string.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  currentEmail: PropTypes.string.isRequired,\n  errorMessage: PropTypes.string.isRequired,\n  courseName: PropTypes.string.isRequired,\n  onDeleteSubmit: PropTypes.func.isRequired,\n};\n\nexport default InfoModal;\n","import { MODAL_TYPES } from './constants';\nimport messages from './info-modal/messages';\n\n/**\n * Create an info modal settings dependent on modal type\n * @param {typeof MODAL_TYPES} modalType - one of MODAL_TYPES\n * @param {string} currentEmail - email in current user\n * @param {string} errorEmail - email from wrong request\n * @param {string} courseName - current course name\n * @returns {{\n   * title: string,\n   * message: string,\n   * variant: string,\n   * closeButtonText: string,\n   * submitButtonText: string,\n   * closeButtonVariant: string\n * }}\n */\n\nconst getInfoModalSettings = (modalType, currentEmail, errorMessage, courseName, intl) => {\n  switch (modalType) {\n  case MODAL_TYPES.delete:\n    return {\n      title: intl.formatMessage(messages.deleteModalTitle),\n      message: intl.formatMessage(messages.deleteModalMessage, { email: currentEmail, courseName }),\n      variant: '',\n      closeButtonText: intl.formatMessage(messages.deleteModalCancelButton),\n      submitButtonText: intl.formatMessage(messages.deleteModalDeleteButton),\n      closeButtonVariant: 'tertiary',\n    };\n  case MODAL_TYPES.error:\n    return {\n      title: intl.formatMessage(messages.errorModalTitle),\n      message: errorMessage,\n      variant: 'danger',\n      closeButtonText: intl.formatMessage(messages.errorModalOkButton),\n      closeButtonVariant: 'primary',\n    };\n  case MODAL_TYPES.warning:\n    return {\n      title: intl.formatMessage(messages.warningModalTitle),\n      message: intl.formatMessage(messages.warningModalMessage, { email: currentEmail, courseName }),\n      variant: 'warning',\n      closeButtonText: intl.formatMessage(messages.warningModalReturnButton),\n      mainButtonVariant: 'primary',\n    };\n  default:\n    return '';\n  }\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { getInfoModalSettings };\n","import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport { USER_ROLES } from '../../constants';\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getCourseTeamApiUrl = (courseId) => `${getApiBaseUrl()}/api/contentstore/v1/course_team/${courseId}`;\nexport const updateCourseTeamUserApiUrl = (courseId, email) => `${getApiBaseUrl()}/course_team/${courseId}/${email}`;\n\n/**\n * Get course team.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getCourseTeam(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getCourseTeamApiUrl(courseId));\n\n  return camelCaseObject(data);\n}\n\n/**\n * Create course team user.\n * @param {string} courseId\n * @param {string} email\n * @returns {Promise<Object>}\n */\nexport async function createTeamUser(courseId, email) {\n  await getAuthenticatedHttpClient()\n    .post(updateCourseTeamUserApiUrl(courseId, email), { role: USER_ROLES.staff });\n}\n\n/**\n * Change role course team user.\n * @param {string} courseId\n * @param {string} email\n * @param {string} role\n * @returns {Promise<Object>}\n */\nexport async function changeRoleTeamUser(courseId, email, role) {\n  await getAuthenticatedHttpClient()\n    .put(updateCourseTeamUserApiUrl(courseId, email), { role });\n}\n\n/**\n * Delete course team user.\n * @param {string} courseId\n * @param {string} email\n * @returns {Promise<Object>}\n */\nexport async function deleteTeamUser(courseId, email) {\n  await getAuthenticatedHttpClient()\n    .delete(updateCourseTeamUserApiUrl(courseId, email));\n}\n","export const getCourseTeamUsers = (state) => state.courseTeam.users;\nexport const getCourseTeamLoadingStatus = (state) => state.courseTeam.loadingCourseTeamStatus;\nexport const getErrorMessage = (state) => state.courseTeam.errorMessage;\nexport const getIsAllowActions = (state) => state.courseTeam.allowActions;\nexport const getIsOwnershipHint = (state) => state.courseTeam.showTransferOwnershipHint;\nexport const getSavingStatus = (state) => state.courseTeam.savingStatus;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { useEffect, useState } from 'react';\nimport { useToggle } from '@edx/paragon';\n\nimport { USER_ROLES } from '../constants';\nimport { RequestStatus } from '../data/constants';\nimport { useModel } from '../generic/model-store';\nimport {\n  changeRoleTeamUserQuery,\n  createCourseTeamQuery,\n  deleteCourseTeamQuery,\n  fetchCourseTeamQuery,\n} from './data/thunk';\nimport {\n  getCourseTeamLoadingStatus,\n  getCourseTeamUsers,\n  getErrorMessage,\n  getIsAllowActions,\n  getIsOwnershipHint, getSavingStatus,\n} from './data/selectors';\nimport { setErrorMessage } from './data/slice';\nimport { MODAL_TYPES } from './constants';\n\nconst useCourseTeam = ({ courseId }) => {\n  const dispatch = useDispatch();\n\n  const { email: currentUserEmail } = getAuthenticatedUser();\n  const courseDetails = useModel('courseDetails', courseId);\n\n  const [modalType, setModalType] = useState(MODAL_TYPES.delete);\n  const [isInfoModalOpen, openInfoModal, closeInfoModal] = useToggle(false);\n  const [isFormVisible, openForm, hideForm] = useToggle(false);\n  const [currentEmail, setCurrentEmail] = useState('');\n  const [isQueryPending, setIsQueryPending] = useState(false);\n  const courseTeamUsers = useSelector(getCourseTeamUsers);\n  const errorMessage = useSelector(getErrorMessage);\n  const savingStatus = useSelector(getSavingStatus);\n  const isAllowActions = useSelector(getIsAllowActions);\n  const isOwnershipHint = useSelector(getIsOwnershipHint);\n  const loadingCourseTeamStatus = useSelector(getCourseTeamLoadingStatus);\n\n  const isSingleAdmin = courseTeamUsers.filter((user) => user.role === USER_ROLES.admin).length === 1;\n\n  const handleOpenInfoModal = (type, email) => {\n    setCurrentEmail(email);\n    setModalType(type);\n    openInfoModal();\n  };\n\n  const handleCloseInfoModal = () => {\n    dispatch(setErrorMessage(''));\n    closeInfoModal();\n  };\n\n  const handleAddUserSubmit = (data) => {\n    setIsQueryPending(true);\n\n    const { email } = data;\n    const isUserContains = courseTeamUsers.some((user) => user.email === email);\n\n    if (isUserContains) {\n      handleOpenInfoModal(MODAL_TYPES.warning, email);\n      return;\n    }\n\n    dispatch(createCourseTeamQuery(courseId, email)).then((result) => {\n      if (result) {\n        hideForm();\n        dispatch(setErrorMessage(''));\n        return;\n      }\n\n      handleOpenInfoModal(MODAL_TYPES.error, email);\n    });\n  };\n\n  const handleDeleteUserSubmit = () => {\n    setIsQueryPending(true);\n    dispatch(deleteCourseTeamQuery(courseId, currentEmail));\n    handleCloseInfoModal();\n  };\n\n  const handleChangeRoleUserSubmit = (email, role) => {\n    setIsQueryPending(true);\n    dispatch(changeRoleTeamUserQuery(courseId, email, role));\n  };\n\n  const handleInternetConnectionFailed = () => {\n    setIsQueryPending(false);\n  };\n\n  const handleOpenDeleteModal = (email) => {\n    handleOpenInfoModal(MODAL_TYPES.delete, email);\n  };\n\n  useEffect(() => {\n    dispatch(fetchCourseTeamQuery(courseId));\n  }, [courseId]);\n\n  useEffect(() => {\n    if (savingStatus === RequestStatus.SUCCESSFUL) {\n      setIsQueryPending(false);\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  }, [savingStatus]);\n\n  return {\n    modalType,\n    errorMessage,\n    courseName: courseDetails?.name || '',\n    currentEmail,\n    courseTeamUsers,\n    currentUserEmail,\n    isLoading: loadingCourseTeamStatus === RequestStatus.IN_PROGRESS,\n    isSingleAdmin,\n    isFormVisible,\n    isAllowActions,\n    isInfoModalOpen,\n    isOwnershipHint,\n    isQueryPending,\n    isInternetConnectionAlertFailed: savingStatus === RequestStatus.FAILED,\n    isShowAddTeamMember: courseTeamUsers.length === 1 && isAllowActions,\n    isShowInitialSidebar: !courseTeamUsers.length && !isFormVisible,\n    isShowUserFilledSidebar: Boolean(courseTeamUsers.length) || isFormVisible,\n    openForm,\n    hideForm,\n    closeInfoModal,\n    handleAddUserSubmit,\n    handleOpenInfoModal,\n    handleOpenDeleteModal,\n    handleDeleteUserSubmit,\n    handleChangeRoleUserSubmit,\n    handleInternetConnectionFailed,\n  };\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { useCourseTeam };\n","import { RequestStatus } from '../../data/constants';\nimport {\n  getCourseTeam,\n  deleteTeamUser,\n  createTeamUser,\n  changeRoleTeamUser,\n} from './api';\nimport {\n  fetchCourseTeamSuccess,\n  updateLoadingCourseTeamStatus,\n  deleteCourseTeamUser,\n  updateSavingStatus,\n  setErrorMessage,\n} from './slice';\n\nexport function fetchCourseTeamQuery(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingCourseTeamStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const courseTeam = await getCourseTeam(courseId);\n      dispatch(fetchCourseTeamSuccess(courseTeam));\n\n      dispatch(updateLoadingCourseTeamStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateLoadingCourseTeamStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function createCourseTeamQuery(courseId, email) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      await createTeamUser(courseId, email);\n      const courseTeam = await getCourseTeam(courseId);\n      dispatch(fetchCourseTeamSuccess(courseTeam));\n\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      const message = error?.response?.data?.error || '';\n      dispatch(setErrorMessage(message));\n\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function changeRoleTeamUserQuery(courseId, email, role) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      await changeRoleTeamUser(courseId, email, role);\n      const courseTeam = await getCourseTeam(courseId);\n      dispatch(fetchCourseTeamSuccess(courseTeam));\n\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch ({ message }) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function deleteCourseTeamQuery(courseId, email) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      await deleteTeamUser(courseId, email);\n      dispatch(deleteCourseTeamUser(email));\n\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl, injectIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Button,\n  Container,\n  Layout,\n} from '@edx/paragon';\nimport { Add as IconAdd } from '@edx/paragon/icons';\n\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport { useModel } from '../generic/model-store';\nimport SubHeader from '../generic/sub-header/SubHeader';\nimport { USER_ROLES } from '../constants';\nimport messages from './messages';\nimport CourseTeamSideBar from './course-team-sidebar/CourseTeamSidebar';\nimport AddUserForm from './add-user-form/AddUserForm';\nimport AddTeamMember from './add-team-member/AddTeamMember';\nimport CourseTeamMember from './course-team-member/CourseTeamMember';\nimport InfoModal from './info-modal/InfoModal';\nimport { useCourseTeam } from './hooks';\nimport getPageHeadTitle from '../generic/utils';\n\nconst CourseTeam = ({ courseId }) => {\n  const intl = useIntl();\n\n  const courseDetails = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(courseDetails?.name, intl.formatMessage(messages.headingTitle));\n\n  const {\n    modalType,\n    errorMessage,\n    courseName,\n    currentEmail,\n    courseTeamUsers,\n    currentUserEmail,\n    isLoading,\n    isSingleAdmin,\n    isFormVisible,\n    isQueryPending,\n    isAllowActions,\n    isInfoModalOpen,\n    isOwnershipHint,\n    isShowAddTeamMember,\n    isShowInitialSidebar,\n    isShowUserFilledSidebar,\n    isInternetConnectionAlertFailed,\n    openForm,\n    hideForm,\n    closeInfoModal,\n    handleAddUserSubmit,\n    handleOpenDeleteModal,\n    handleDeleteUserSubmit,\n    handleChangeRoleUserSubmit,\n    handleInternetConnectionFailed,\n  } = useCourseTeam({ intl, courseId });\n\n  if (isLoading) {\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    return <></>;\n  }\n\n  return (\n    <>\n      <Container size=\"xl\" className=\"px-4\">\n        <section className=\"course-team-container mb-4\">\n          <Layout\n            lg={[{ span: 9 }, { span: 3 }]}\n            md={[{ span: 9 }, { span: 3 }]}\n            sm={[{ span: 9 }, { span: 3 }]}\n            xs={[{ span: 9 }, { span: 3 }]}\n            xl={[{ span: 9 }, { span: 3 }]}\n          >\n            <Layout.Element>\n              <article>\n                <div>\n                  <SubHeader\n                    title={intl.formatMessage(messages.headingTitle)}\n                    subtitle={intl.formatMessage(messages.headingSubtitle)}\n                    headerActions={isAllowActions && (\n                      <Button\n                        variant=\"primary\"\n                        iconBefore={IconAdd}\n                        size=\"sm\"\n                        onClick={openForm}\n                        disabled={isFormVisible}\n                      >\n                        {intl.formatMessage(messages.addNewMemberButton)}\n                      </Button>\n                    )}\n                  />\n                  <section className=\"course-team-section\">\n                    <div className=\"members-container\">\n                      {isFormVisible && (\n                        <AddUserForm\n                          onSubmit={handleAddUserSubmit}\n                          onCancel={hideForm}\n                        />\n                      )}\n                      {courseTeamUsers.length ? courseTeamUsers.map(({ username, role, email }) => (\n                        <CourseTeamMember\n                          key={email}\n                          userName={username}\n                          role={role}\n                          email={email}\n                          currentUserEmail={currentUserEmail || ''}\n                          isAllowActions={isAllowActions}\n                          isHideActions={role === USER_ROLES.admin && isSingleAdmin}\n                          onChangeRole={handleChangeRoleUserSubmit}\n                          onDelete={handleOpenDeleteModal}\n                        />\n                      )) : null}\n                      {isShowAddTeamMember && (\n                        <AddTeamMember\n                          onFormOpen={openForm}\n                          isButtonDisable={isFormVisible}\n                        />\n                      )}\n                    </div>\n                    {isShowInitialSidebar && (\n                      <div className=\"sidebar-container\">\n                        <CourseTeamSideBar\n                          courseId={courseId}\n                          isOwnershipHint={isOwnershipHint}\n                          isShowInitialSidebar={isShowInitialSidebar}\n                        />\n                      </div>\n                    )}\n                    <InfoModal\n                      isOpen={isInfoModalOpen}\n                      close={closeInfoModal}\n                      currentEmail={currentEmail}\n                      errorMessage={errorMessage}\n                      courseName={courseName}\n                      modalType={modalType}\n                      onDeleteSubmit={handleDeleteUserSubmit}\n                    />\n                  </section>\n                </div>\n              </article>\n            </Layout.Element>\n            <Layout.Element>\n              {isShowUserFilledSidebar && (\n                <CourseTeamSideBar\n                  courseId={courseId}\n                  isOwnershipHint={isOwnershipHint}\n                />\n              )}\n            </Layout.Element>\n          </Layout>\n        </section>\n      </Container>\n      <div className=\"alert-toast\">\n        <InternetConnectionAlert\n          isFailed={isInternetConnectionAlertFailed}\n          isQueryPending={isQueryPending}\n          onInternetConnectionFailed={handleInternetConnectionFailed}\n        />\n      </div>\n    </>\n  );\n};\n\nCourseTeam.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(CourseTeam);\n","// eslint-disable-next-line import/prefer-default-export\nexport const getProcessingNotification = (state) => ({\n  isShow: state.processingNotification.isShow,\n  title: state.processingNotification.title,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { Badge, Icon } from '@edx/paragon';\nimport { Settings as IconSettings } from '@edx/paragon/icons';\nimport { capitalize } from 'lodash';\n\nimport { NOTIFICATION_MESSAGES } from '../../constants';\n\nconst ProcessingNotification = ({ isShow, title }) => (\n  <Badge\n    className={classNames('processing-notification', {\n      'is-show': isShow,\n    })}\n    variant=\"secondary\"\n    aria-hidden={isShow}\n  >\n    <Icon className=\"processing-notification-icon\" src={IconSettings} />\n    <h2 className=\"processing-notification-title\">\n      {capitalize(title)}\n    </h2>\n  </Badge>\n);\n\nProcessingNotification.propTypes = {\n  isShow: PropTypes.bool.isRequired,\n  title: PropTypes.oneOf(Object.values(NOTIFICATION_MESSAGES)).isRequired,\n};\n\nexport default ProcessingNotification;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  handoutsTitle: {\n    id: 'course-authoring.course-updates.handouts.title',\n    defaultMessage: 'Course handouts',\n  },\n  editButton: {\n    id: 'course-authoring.course-updates.actions.edit',\n    defaultMessage: 'Edit',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, IconButtonWithTooltip } from '@edx/paragon';\nimport { EditOutline } from '@edx/paragon/icons';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\n\nconst CourseHandouts = ({ contentForHandouts, onEdit, isDisabledButtons }) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"course-handouts\" data-testid=\"course-handouts\">\n      <div className=\"course-handouts-header\">\n        <h2 className=\"course-handouts-header__title lead\">{intl.formatMessage(messages.handoutsTitle)}</h2>\n        <IconButtonWithTooltip\n          tooltipContent={intl.formatMessage(messages.editButton)}\n          src={EditOutline}\n          iconAs={Icon}\n          disabled={isDisabledButtons}\n          data-testid=\"course-handouts-edit-button\"\n          onClick={onEdit}\n        />\n      </div>\n      <div\n        className=\"small\"\n        // eslint-disable-next-line react/no-danger\n        dangerouslySetInnerHTML={{ __html: contentForHandouts || '' }}\n      />\n    </div>\n  );\n};\n\nCourseHandouts.propTypes = {\n  contentForHandouts: PropTypes.string.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  isDisabledButtons: PropTypes.bool.isRequired,\n};\n\nexport default CourseHandouts;\n","import moment from 'moment';\n\nimport { COMMA_SEPARATED_DATE_FORMAT } from '../../constants';\n\n/**\n * Check is valid date format in course update\n * @param {string} date - date for update\n * @returns {boolean} - is valid date format\n */\nconst isDateForUpdateValid = (date) => {\n  const parsedDate = moment(date, COMMA_SEPARATED_DATE_FORMAT, true);\n\n  return parsedDate.isValid() && parsedDate.format(COMMA_SEPARATED_DATE_FORMAT) === date;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { isDateForUpdateValid };\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  editButton: {\n    id: 'course-authoring.course-updates.button.edit',\n    defaultMessage: 'Edit',\n  },\n  deleteButton: {\n    id: 'course-authoring.course-updates.button.delete',\n    defaultMessage: 'Delete',\n  },\n  errorMessage: {\n    id: 'course-authoring.course-updates.date-invalid',\n    defaultMessage: 'Action required: Enter a valid date.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Icon, IconButtonWithTooltip } from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { DeleteOutline, EditOutline, Error as ErrorIcon } from '@edx/paragon/icons';\n\nimport { isDateForUpdateValid } from './utils';\nimport messages from './messages';\n\nconst CourseUpdate = ({\n  dateForUpdate,\n  contentForUpdate,\n  onEdit,\n  onDelete,\n  isDisabledButtons,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"course-update\" data-testid=\"course-update\">\n      <div className=\"course-update-header\">\n        <span className=\"course-update-header__date small font-weight-bold\">{dateForUpdate}</span>\n        {!isDateForUpdateValid(dateForUpdate) && (\n          <div className=\"course-update-header__error\">\n            <Icon src={ErrorIcon} alt={intl.formatMessage(messages.errorMessage)} />\n            <p className=\"message-error small m-0\">{intl.formatMessage(messages.errorMessage)}</p>\n          </div>\n        )}\n        <div className=\"course-update-header__action\">\n          <IconButtonWithTooltip\n            tooltipContent={intl.formatMessage(messages.editButton)}\n            src={EditOutline}\n            iconAs={Icon}\n            disabled={isDisabledButtons}\n            data-testid=\"course-update-edit-button\"\n            onClick={onEdit}\n          />\n          <IconButtonWithTooltip\n            tooltipContent={intl.formatMessage(messages.deleteButton)}\n            src={DeleteOutline}\n            iconAs={Icon}\n            disabled={isDisabledButtons}\n            data-testid=\"course-update-delete-button\"\n            onClick={onDelete}\n          />\n        </div>\n      </div>\n      {Boolean(contentForUpdate) && (\n        <div\n          className=\"small text-gray-800\"\n          data-testid=\"course-update-content\"\n          // eslint-disable-next-line react/no-danger\n          dangerouslySetInnerHTML={{ __html: contentForUpdate }}\n        />\n      )}\n    </div>\n  );\n};\n\nCourseUpdate.propTypes = {\n  dateForUpdate: PropTypes.string.isRequired,\n  contentForUpdate: PropTypes.string.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  isDisabledButtons: PropTypes.bool.isRequired,\n};\n\nexport default CourseUpdate;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  deleteModalTitle: {\n    id: 'course-authoring.course-updates.delete-modal.title',\n    defaultMessage: 'Are you sure you want to delete this update?',\n  },\n  deleteModalDescription: {\n    id: 'course-authoring.course-updates.delete-modal.description',\n    defaultMessage: 'This action cannot be undone.',\n  },\n  cancelButton: {\n    id: 'course-authoring.course-updates.actions.cancel',\n    defaultMessage: 'Cancel',\n  },\n  deleteButton: {\n    id: 'course-authoring.course-updates.button.delete',\n    defaultMessage: 'Delete',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ActionRow,\n  Button,\n  AlertModal,\n} from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport messages from './messages';\n\nconst DeleteModal = ({ isOpen, close, onDeleteSubmit }) => {\n  const intl = useIntl();\n\n  return (\n    <AlertModal\n      title={intl.formatMessage(messages.deleteModalTitle)}\n      isOpen={isOpen}\n      onClose={close}\n      footerNode={(\n        <ActionRow>\n          <Button variant=\"tertiary\" onClick={close}>\n            {intl.formatMessage(messages.cancelButton)}\n          </Button>\n          <Button\n            onClick={(e) => {\n              e.preventDefault();\n              onDeleteSubmit();\n            }}\n          >\n            {intl.formatMessage(messages.deleteButton)}\n          </Button>\n        </ActionRow>\n      )}\n    >\n      <p>{intl.formatMessage(messages.deleteModalDescription)}</p>\n    </AlertModal>\n  );\n};\n\nDeleteModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  onDeleteSubmit: PropTypes.func.isRequired,\n};\n\nexport default DeleteModal;\n","// eslint-disable-next-line import/prefer-default-export\nexport const REQUEST_TYPES = {\n  add_new_update: 'add_new_update',\n  edit_update: 'edit_update',\n  edit_handouts: 'edit_handouts',\n  delete_update: 'delete_update',\n};\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  updateFormDate: {\n    id: 'course-authoring.course-updates.update-form.date',\n    defaultMessage: 'Date',\n  },\n  updateFormInValid: {\n    id: 'course-authoring.course-updates.update-form.inValid',\n    defaultMessage: 'Action required: Enter a valid date.',\n  },\n  updateFormCalendarAltText: {\n    id: 'course-authoring.course-updates.update-form.calendar-alt-text',\n    defaultMessage: 'Calendar for datepicker input',\n  },\n  updateFormErrorAltText: {\n    id: 'course-authoring.course-updates.update-form.error-alt-text',\n    defaultMessage: 'Error icon',\n  },\n  addNewUpdateTitle: {\n    id: 'course-authoring.course-updates.update-form.new-update-title',\n    defaultMessage: 'Add new update',\n  },\n  editUpdateTitle: {\n    id: 'course-authoring.course-updates.update-form.edit-update-title',\n    defaultMessage: 'Edit update',\n  },\n  editHandoutsTitle: {\n    id: 'course-authoring.course-updates.update-form.edit-handouts-title',\n    defaultMessage: 'Edit handouts',\n  },\n  saveButton: {\n    id: 'course-authoring.course-updates.actions.save',\n    defaultMessage: 'Save',\n  },\n  postButton: {\n    id: 'course-authoring.course-updates.actions.post',\n    defaultMessage: 'Post',\n  },\n  cancelButton: {\n    id: 'course-authoring.course-updates.actions.cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ActionRow,\n  Button,\n  Form,\n  Icon,\n} from '@edx/paragon';\nimport classNames from 'classnames';\nimport DatePicker from 'react-datepicker/dist';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Calendar as CalendarIcon, Error as ErrorIcon } from '@edx/paragon/icons';\nimport { Formik } from 'formik';\n\nimport {\n  convertToStringFromDate,\n  convertToDateFromString,\n  isValidDate,\n} from '../../utils';\nimport { DATE_FORMAT, DEFAULT_EMPTY_WYSIWYG_VALUE } from '../../constants';\nimport { WysiwygEditor } from '../../generic/WysiwygEditor';\nimport { REQUEST_TYPES } from '../constants';\nimport { geUpdateFormSettings } from './utils';\nimport messages from './messages';\n\nconst UpdateForm = ({\n  close,\n  requestType,\n  onSubmit,\n  courseUpdatesInitialValues,\n  isInnerForm,\n  isFirstUpdate,\n}) => {\n  const intl = useIntl();\n\n  const {\n    currentContent,\n    formTitle,\n    validationSchema,\n    contentFieldName,\n    submitButtonText,\n  } = geUpdateFormSettings(requestType, courseUpdatesInitialValues, intl);\n\n  return (\n    <div className={classNames('update-form', {\n      'update-form__inner': isInnerForm,\n      'update-form__inner-first': isFirstUpdate,\n    })}\n    >\n      <Formik\n        initialValues={courseUpdatesInitialValues}\n        validationSchema={validationSchema}\n        validateOnMount\n        validateOnBlur\n        onSubmit={onSubmit}\n      >\n        {({\n          values, handleSubmit, isValid, setFieldValue,\n        }) => (\n          <>\n            <h3 className=\"update-form-title\">{formTitle}</h3>\n            {(requestType !== REQUEST_TYPES.edit_handouts) && (\n              <Form.Group className=\"mb-4 datepicker-field datepicker-custom\">\n                <Form.Control.Feedback className=\"datepicker-float-labels\">\n                  {intl.formatMessage(messages.updateFormDate)}\n                </Form.Control.Feedback>\n                <div className=\"position-relative\">\n                  <Icon\n                    src={CalendarIcon}\n                    className=\"datepicker-custom-control-icon\"\n                    alt={intl.formatMessage(messages.updateFormCalendarAltText)}\n                  />\n                  <DatePicker\n                    name=\"date\"\n                    data-testid=\"course-updates-datepicker\"\n                    selected={isValidDate(values.date) ? convertToDateFromString(values.date) : ''}\n                    dateFormat={DATE_FORMAT}\n                    className={classNames('datepicker-custom-control', {\n                      'datepicker-custom-control_isInvalid': !isValid,\n                    })}\n                    autoComplete=\"off\"\n                    selectsStart\n                    showPopperArrow={false}\n                    onChange={(value) => {\n                      if (!isValidDate(value)) {\n                        return;\n                      }\n                      setFieldValue('date', convertToStringFromDate(value));\n                    }}\n                  />\n                </div>\n                {!isValid && (\n                  <div className=\"datepicker-field-error\">\n                    <Icon src={ErrorIcon} className=\"text-danger-500\" alt={intl.formatMessage(messages.updateFormErrorAltText)} />\n                    <span className=\"message-error\">{intl.formatMessage(messages.updateFormInValid)}</span>\n                  </div>\n                )}\n              </Form.Group>\n            )}\n            <Form.Group className=\"m-0 mb-3\">\n              <WysiwygEditor\n                initialValue={currentContent}\n                data-testid=\"course-updates-wisiwyg-editor\"\n                name={contentFieldName}\n                minHeight={300}\n                onChange={(value) => {\n                  setFieldValue(contentFieldName, value || DEFAULT_EMPTY_WYSIWYG_VALUE);\n                }}\n              />\n            </Form.Group>\n            <ActionRow>\n              <Button variant=\"tertiary\" type=\"button\" onClick={close}>\n                {intl.formatMessage(messages.cancelButton)}\n              </Button>\n              <Button onClick={handleSubmit} type=\"submit\" disabled={!isValid}>\n                {submitButtonText}\n              </Button>\n            </ActionRow>\n          </>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nUpdateForm.defaultProps = {\n  isInnerForm: false,\n  isFirstUpdate: false,\n};\n\nUpdateForm.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  courseUpdatesInitialValues: PropTypes.object.isRequired,\n  close: PropTypes.func.isRequired,\n  requestType: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  isInnerForm: PropTypes.bool,\n  isFirstUpdate: PropTypes.bool,\n};\n\nexport default UpdateForm;\n","import * as Yup from 'yup';\n\nimport { REQUEST_TYPES } from '../constants';\nimport messages from './messages';\n\n/**\n * Get Update form settings depending on requestType\n * @param {typeof REQUEST_TYPES} requestType - one of REQUEST_TYPES\n * @param {object} courseUpdatesInitialValues - form initial values depending on requestType\n * @returns {{\n  *  currentContent: string,\n  *  validationSchema: object,\n  *  formTitle: string,\n  *  submitButtonText: string,\n  *  contentFieldName: string\n *  }}\n */\nconst geUpdateFormSettings = (requestType, courseUpdatesInitialValues, intl) => {\n  const updatesValidationSchema = Yup.object().shape({\n    id: Yup.number().required(),\n    date: Yup.date().required(),\n    content: Yup.string(),\n  });\n\n  switch (requestType) {\n  case REQUEST_TYPES.edit_handouts:\n    return {\n      currentContent: courseUpdatesInitialValues.data,\n      formTitle: intl.formatMessage(messages.editHandoutsTitle),\n      validationSchema: Yup.object().shape(),\n      contentFieldName: 'data',\n      submitButtonText: intl.formatMessage(messages.saveButton),\n    };\n  case REQUEST_TYPES.add_new_update:\n    return {\n      currentContent: courseUpdatesInitialValues.content,\n      formTitle: intl.formatMessage(messages.addNewUpdateTitle),\n      validationSchema: updatesValidationSchema,\n      contentFieldName: 'content',\n      submitButtonText: intl.formatMessage(messages.postButton),\n    };\n  case REQUEST_TYPES.edit_update:\n    return {\n      currentContent: courseUpdatesInitialValues.content,\n      formTitle: intl.formatMessage(messages.editUpdateTitle),\n      validationSchema: updatesValidationSchema,\n      contentFieldName: 'content',\n      submitButtonText: intl.formatMessage(messages.postButton),\n    };\n  default:\n    return '';\n  }\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { geUpdateFormSettings };\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headingTitle: {\n    id: 'course-authoring.course-updates.header.title',\n    defaultMessage: 'Course updates',\n  },\n  headingSubtitle: {\n    id: 'course-authoring.course-updates.header.subtitle',\n    defaultMessage: 'Content',\n  },\n  sectionInfo: {\n    id: 'course-authoring.course-updates.section-info',\n    defaultMessage: 'Use course updates to notify students of important dates or exams, highlight particular discussions in the forums, announce schedule changes, and respond to student questions.',\n  },\n  newUpdateButton: {\n    id: 'course-authoring.course-updates.actions.new-update',\n    defaultMessage: 'New update',\n  },\n});\n\nexport default messages;\n","export const getCourseUpdates = (state) => state.courseUpdates.courseUpdates;\nexport const getCourseHandouts = (state) => state.courseUpdates.courseHandouts;\nexport const getSavingStatuses = (state) => state.courseUpdates.savingStatuses;\nexport const getLoadingStatuses = (state) => state.courseUpdates.loadingStatuses;\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getCourseUpdatesApiUrl = (courseId) => `${getApiBaseUrl()}/course_info_update/${courseId}/`;\nexport const updateCourseUpdatesApiUrl = (courseId, updateId) => `${getApiBaseUrl()}/course_info_update/${courseId}/${updateId}`;\nexport const getCourseHandoutApiUrl = (courseId) => {\n  const formattedCourseId = courseId.split('course-v1:')[1];\n  return `${getApiBaseUrl()}/xblock/block-v1:${formattedCourseId}+type@course_info+block@handouts`;\n};\n\n/**\n * Get course updates.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getCourseUpdates(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getCourseUpdatesApiUrl(courseId));\n\n  return data;\n}\n\n/**\n * Create new course update.\n * @param {string} courseId\n * @param {object} courseUpdate\n * @returns {Promise<Object>}\n */\nexport async function createUpdate(courseId, courseUpdate) {\n  const { data } = await getAuthenticatedHttpClient()\n    .post(getCourseUpdatesApiUrl(courseId), courseUpdate);\n\n  return data;\n}\n\n/**\n * Edit course update.\n * @param {string} courseId\n * @param {object} courseUpdate\n * @returns {Promise<Object>}\n */\nexport async function editUpdate(courseId, courseUpdate) {\n  const { data } = await getAuthenticatedHttpClient()\n    .put(updateCourseUpdatesApiUrl(courseId, courseUpdate.id), courseUpdate);\n\n  return data;\n}\n\n/**\n * Delete course update.\n * @param {string} courseId\n * @param {number} updateId\n1 */\nexport async function deleteUpdate(courseId, updateId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .delete(updateCourseUpdatesApiUrl(courseId, updateId));\n\n  return data;\n}\n\n/**\n * Get course handouts.\n * @param {string} courseId\n * @returns {Promise<Object>}\n */\nexport async function getCourseHandouts(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getCourseHandoutApiUrl(courseId));\n  return data;\n}\n\n/**\n * Edit course handouts.\n * @param {string} courseId\n * @param {object} courseHandouts\n * @returns {Promise<Object>}\n */\nexport async function editHandouts(courseId, courseHandouts) {\n  const { data } = await getAuthenticatedHttpClient()\n    .put(getCourseHandoutApiUrl(courseId), courseHandouts);\n\n  return data;\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport moment from 'moment/moment';\nimport { useEffect, useState } from 'react';\nimport { useToggle } from '@edx/paragon';\n\nimport { COMMA_SEPARATED_DATE_FORMAT } from '../constants';\nimport { getCourseHandouts, getCourseUpdates } from './data/selectors';\nimport { REQUEST_TYPES } from './constants';\nimport {\n  createCourseUpdateQuery,\n  deleteCourseUpdateQuery,\n  editCourseHandoutsQuery,\n  editCourseUpdateQuery,\n  fetchCourseHandoutsQuery,\n  fetchCourseUpdatesQuery,\n} from './data/thunk';\n\nconst useCourseUpdates = ({ courseId }) => {\n  const dispatch = useDispatch();\n  const initialUpdate = { id: 0, date: moment().utc().toDate(), content: '' };\n\n  const [requestType, setRequestType] = useState('');\n  const [isUpdateFormOpen, openUpdateForm, closeUpdateForm] = useToggle(false);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useToggle(false);\n  const [currentUpdate, setCurrentUpdate] = useState(initialUpdate);\n\n  const courseUpdates = useSelector(getCourseUpdates);\n  const courseHandouts = useSelector(getCourseHandouts);\n\n  const courseUpdatesInitialValues = requestType === REQUEST_TYPES.edit_handouts\n    ? courseHandouts\n    : currentUpdate;\n\n  const handleOpenUpdateForm = (type, courseUpdate) => {\n    setRequestType(type);\n\n    switch (type) {\n    case REQUEST_TYPES.add_new_update:\n      setCurrentUpdate(initialUpdate);\n      break;\n    case REQUEST_TYPES.edit_update:\n      setCurrentUpdate(courseUpdate);\n      break;\n    default:\n      window.scrollTo(0, 0);\n    }\n\n    openUpdateForm();\n  };\n\n  const handleOpenDeleteForm = (courseUpdate) => {\n    setRequestType(REQUEST_TYPES.delete_update);\n    setCurrentUpdate(courseUpdate);\n    openDeleteModal();\n  };\n\n  const handleUpdatesSubmit = (data) => {\n    const dataToSend = {\n      ...data,\n      date: moment(data.date).format(COMMA_SEPARATED_DATE_FORMAT),\n    };\n    const { id, date, content } = dataToSend;\n\n    const handleQuerySubmit = (handler) => {\n      closeUpdateForm();\n      setCurrentUpdate(initialUpdate);\n      return handler();\n    };\n\n    switch (requestType) {\n    case REQUEST_TYPES.add_new_update:\n      return handleQuerySubmit(dispatch(createCourseUpdateQuery(courseId, { date, content })));\n    case REQUEST_TYPES.edit_update:\n      return handleQuerySubmit(dispatch(editCourseUpdateQuery(courseId, { id, date, content })));\n    case REQUEST_TYPES.edit_handouts:\n      return handleQuerySubmit(dispatch(editCourseHandoutsQuery(courseId, { ...data, data: data?.data || '' })));\n    default:\n      return true;\n    }\n  };\n\n  const handleDeleteUpdateSubmit = () => {\n    const { id } = currentUpdate;\n\n    dispatch(deleteCourseUpdateQuery(courseId, id));\n    setCurrentUpdate(initialUpdate);\n    closeDeleteModal();\n  };\n\n  useEffect(() => {\n    dispatch(fetchCourseUpdatesQuery(courseId));\n    dispatch(fetchCourseHandoutsQuery(courseId));\n  }, [courseId]);\n\n  return {\n    requestType,\n    courseUpdates,\n    courseHandouts,\n    courseUpdatesInitialValues,\n    isMainFormOpen: isUpdateFormOpen && requestType !== REQUEST_TYPES.edit_update,\n    isInnerFormOpen: (id) => isUpdateFormOpen && currentUpdate.id === id && requestType === REQUEST_TYPES.edit_update,\n    isUpdateFormOpen,\n    isDeleteModalOpen,\n    closeUpdateForm,\n    closeDeleteModal,\n    handleUpdatesSubmit,\n    handleOpenUpdateForm,\n    handleDeleteUpdateSubmit,\n    handleOpenDeleteForm,\n  };\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { useCourseUpdates };\n","// eslint-disable-next-line import/prefer-default-export\nexport const matchesAnyStatus = (statuses, status) => Object.values(statuses).some(s => s === status);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Button,\n  Container,\n  Layout,\n} from '@edx/paragon';\nimport { Add as AddIcon } from '@edx/paragon/icons';\nimport { useSelector } from 'react-redux';\n\nimport { useModel } from '../generic/model-store';\nimport { getProcessingNotification } from '../generic/processing-notification/data/selectors';\nimport ProcessingNotification from '../generic/processing-notification';\nimport SubHeader from '../generic/sub-header/SubHeader';\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport { RequestStatus } from '../data/constants';\nimport CourseHandouts from './course-handouts/CourseHandouts';\nimport CourseUpdate from './course-update/CourseUpdate';\nimport DeleteModal from './delete-modal/DeleteModal';\nimport UpdateForm from './update-form/UpdateForm';\nimport { REQUEST_TYPES } from './constants';\nimport messages from './messages';\nimport { useCourseUpdates } from './hooks';\nimport { getLoadingStatuses, getSavingStatuses } from './data/selectors';\nimport { matchesAnyStatus } from './utils';\nimport getPageHeadTitle from '../generic/utils';\n\nconst CourseUpdates = ({ courseId }) => {\n  const intl = useIntl();\n\n  const courseDetails = useModel('courseDetails', courseId);\n  document.title = getPageHeadTitle(courseDetails?.name, intl.formatMessage(messages.headingTitle));\n\n  const {\n    requestType,\n    courseUpdates,\n    courseHandouts,\n    courseUpdatesInitialValues,\n    isMainFormOpen,\n    isInnerFormOpen,\n    isUpdateFormOpen,\n    isDeleteModalOpen,\n    closeUpdateForm,\n    closeDeleteModal,\n    handleUpdatesSubmit,\n    handleOpenUpdateForm,\n    handleOpenDeleteForm,\n    handleDeleteUpdateSubmit,\n  } = useCourseUpdates({ courseId });\n\n  const {\n    isShow: isShowProcessingNotification,\n    title: processingNotificationTitle,\n  } = useSelector(getProcessingNotification);\n\n  const loadingStatuses = useSelector(getLoadingStatuses);\n  const savingStatuses = useSelector(getSavingStatuses);\n\n  const anyStatusFailed = matchesAnyStatus({ ...loadingStatuses, ...savingStatuses }, RequestStatus.FAILED);\n  const anyStatusInProgress = matchesAnyStatus({ ...loadingStatuses, ...savingStatuses }, RequestStatus.IN_PROGRESS);\n  const anyStatusPending = matchesAnyStatus({ ...loadingStatuses, ...savingStatuses }, RequestStatus.PENDING);\n\n  return (\n    <>\n      <Container size=\"xl\" className=\"px-4\">\n        <section className=\"setting-items mb-4 mt-5\">\n          <Layout\n            lg={[{ span: 12 }]}\n            md={[{ span: 12 }]}\n            sm={[{ span: 12 }]}\n            xs={[{ span: 12 }]}\n            xl={[{ span: 12 }]}\n          >\n            <Layout.Element>\n              <article>\n                <div>\n                  <SubHeader\n                    title={intl.formatMessage(messages.headingTitle)}\n                    subtitle={intl.formatMessage(messages.headingSubtitle)}\n                    instruction={intl.formatMessage(messages.sectionInfo)}\n                    headerActions={(\n                      <Button\n                        variant=\"primary\"\n                        iconBefore={AddIcon}\n                        size=\"sm\"\n                        onClick={() => handleOpenUpdateForm(REQUEST_TYPES.add_new_update)}\n                        disabled={isUpdateFormOpen}\n                      >\n                        {intl.formatMessage(messages.newUpdateButton)}\n                      </Button>\n                    )}\n                  />\n                  <section className=\"updates-section\">\n                    {isMainFormOpen && (\n                      <UpdateForm\n                        isOpen={isUpdateFormOpen}\n                        close={closeUpdateForm}\n                        requestType={requestType}\n                        onSubmit={handleUpdatesSubmit}\n                        courseUpdatesInitialValues={courseUpdatesInitialValues}\n                      />\n                    )}\n                    <div className=\"updates-container\">\n                      <div className=\"p-4.5\">\n                        {courseUpdates.length ? courseUpdates.map((courseUpdate, index) => (\n                          isInnerFormOpen(courseUpdate.id) ? (\n                            <UpdateForm\n                              isOpen={isUpdateFormOpen}\n                              close={closeUpdateForm}\n                              requestType={requestType}\n                              isInnerForm\n                              isFirstUpdate={index === 0}\n                              onSubmit={handleUpdatesSubmit}\n                              courseUpdatesInitialValues={courseUpdatesInitialValues}\n                            />\n                          ) : (\n                            <CourseUpdate\n                              dateForUpdate={courseUpdate.date}\n                              contentForUpdate={courseUpdate.content}\n                              onEdit={() => handleOpenUpdateForm(REQUEST_TYPES.edit_update, courseUpdate)}\n                              onDelete={() => handleOpenDeleteForm(courseUpdate)}\n                              isDisabledButtons={isUpdateFormOpen}\n                            />\n                          ))) : null}\n                      </div>\n                      <div className=\"updates-handouts-container\">\n                        <CourseHandouts\n                          contentForHandouts={courseHandouts?.data || ''}\n                          onEdit={() => handleOpenUpdateForm(REQUEST_TYPES.edit_handouts)}\n                          isDisabledButtons={isUpdateFormOpen}\n                        />\n                      </div>\n                      <DeleteModal\n                        isOpen={isDeleteModalOpen}\n                        close={closeDeleteModal}\n                        onDeleteSubmit={handleDeleteUpdateSubmit}\n                      />\n                      {isShowProcessingNotification && (\n                        <ProcessingNotification\n                          isShow={isShowProcessingNotification}\n                          title={processingNotificationTitle}\n                        />\n                      )}\n                    </div>\n                  </section>\n                </div>\n              </article>\n            </Layout.Element>\n          </Layout>\n        </section>\n      </Container>\n      <div className=\"alert-toast\">\n        <InternetConnectionAlert\n          isFailed={anyStatusFailed}\n          isQueryPending={anyStatusInProgress || anyStatusPending}\n          onInternetConnectionFailed={() => null}\n        />\n      </div>\n    </>\n  );\n};\n\nCourseUpdates.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default CourseUpdates;\n","import { NOTIFICATION_MESSAGES } from '../../constants';\nimport { RequestStatus } from '../../data/constants';\nimport { hideProcessingNotification, showProcessingNotification } from '../../generic/processing-notification/data/slice';\nimport {\n  getCourseUpdates,\n  getCourseHandouts,\n  createUpdate,\n  editUpdate,\n  deleteUpdate,\n  editHandouts,\n} from './api';\nimport {\n  fetchCourseUpdatesSuccess,\n  createCourseUpdate,\n  editCourseUpdate,\n  deleteCourseUpdate,\n  fetchCourseHandoutsSuccess,\n  editCourseHandouts,\n  updateLoadingStatuses,\n  updateSavingStatuses,\n} from './slice';\n\nexport function fetchCourseUpdatesQuery(courseId) {\n  return async (dispatch) => {\n    try {\n      dispatch(updateLoadingStatuses({ fetchCourseHandoutsQuery: RequestStatus.IN_PROGRESS }));\n      const courseUpdates = await getCourseUpdates(courseId);\n      dispatch(fetchCourseUpdatesSuccess(courseUpdates));\n      dispatch(updateLoadingStatuses({ fetchCourseHandoutsQuery: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateLoadingStatuses({ fetchCourseHandoutsQuery: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function createCourseUpdateQuery(courseId, data) {\n  return async (dispatch) => {\n    try {\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.PENDING }));\n      dispatch(showProcessingNotification(NOTIFICATION_MESSAGES.saving));\n      const courseUpdate = await createUpdate(courseId, data);\n      dispatch(createCourseUpdate(courseUpdate));\n      dispatch(hideProcessingNotification());\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(hideProcessingNotification());\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function editCourseUpdateQuery(courseId, data) {\n  return async (dispatch) => {\n    try {\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.PENDING }));\n      dispatch(showProcessingNotification(NOTIFICATION_MESSAGES.saving));\n      const courseUpdate = await editUpdate(courseId, data);\n      dispatch(editCourseUpdate(courseUpdate));\n      dispatch(hideProcessingNotification());\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(hideProcessingNotification());\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function deleteCourseUpdateQuery(courseId, updateId) {\n  return async (dispatch) => {\n    try {\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.PENDING }));\n      dispatch(showProcessingNotification(NOTIFICATION_MESSAGES.deleting));\n      const courseUpdates = await deleteUpdate(courseId, updateId);\n      dispatch(deleteCourseUpdate(courseUpdates));\n      dispatch(hideProcessingNotification());\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(hideProcessingNotification());\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function fetchCourseHandoutsQuery(courseId) {\n  return async (dispatch) => {\n    try {\n      dispatch(updateLoadingStatuses({ fetchCourseHandoutsQuery: RequestStatus.IN_PROGRESS }));\n      const courseHandouts = await getCourseHandouts(courseId);\n      dispatch(fetchCourseHandoutsSuccess(courseHandouts));\n      dispatch(updateLoadingStatuses({ fetchCourseHandoutsQuery: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateLoadingStatuses({ fetchCourseHandoutsQuery: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function editCourseHandoutsQuery(courseId, data) {\n  return async (dispatch) => {\n    try {\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.PENDING }));\n      dispatch(showProcessingNotification(NOTIFICATION_MESSAGES.saving));\n      const courseHandouts = await editHandouts(courseId, data);\n      dispatch(editCourseHandouts(courseHandouts));\n      dispatch(hideProcessingNotification());\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(hideProcessingNotification());\n      dispatch(updateSavingStatuses({ createCourseUpdateQuery: RequestStatus.FAILED }));\n    }\n  };\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  pageTitle: {\n    id: 'course-authoring.export.page.title',\n    defaultMessage: '{headingTitle} | {courseName} | {siteName}',\n  },\n  headingTitle: {\n    id: 'course-authoring.export.heading.title',\n    defaultMessage: 'Course export',\n  },\n  headingSubtitle: {\n    id: 'course-authoring.export.heading.subtitle',\n    defaultMessage: 'Tools',\n  },\n  description1: {\n    id: 'course-authoring.export.description1',\n    defaultMessage: 'You can export courses and edit them outside of {studioShortName}. The exported file is a .tar.gz file (that is, a .tar file compressed with GNU Zip) that contains the course structure and content. You can also re-import courses that you\\'ve exported.',\n  },\n  description2: {\n    id: 'course-authoring.export.description2',\n    defaultMessage: 'Caution: When you export a course, information such as MATLAB API keys, LTI passports, annotation secret token strings, and annotation storage URLs are included in the exported data. If you share your exported files, you may also be sharing sensitive or license-specific information.',\n  },\n  titleUnderButton: {\n    id: 'course-authoring.export.title-under-button',\n    defaultMessage: 'Export my course content',\n  },\n  buttonTitle: {\n    id: 'course-authoring.export.button.title',\n    defaultMessage: 'Export course content',\n  },\n});\n\nexport default messages;\n","export const selectHelpUrlsByNames = (names) => (state) => {\n  const urlsDictionary = {};\n\n  names.forEach(name => {\n    urlsDictionary[name] = state.helpUrls.pages[name] || null;\n  });\n\n  return urlsDictionary;\n};\n\nexport const getPages = (state) => state.helpUrls.pages;\n\nexport const getLoadingHelpUrlsStatus = (state) => state.helpUrls.loadingHelpUrlsStatus;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty } from 'lodash';\n\nimport { fetchHelpUrls } from './data/thunks';\nimport { getPages, selectHelpUrlsByNames } from './data/selectors';\n\nconst useHelpUrls = (tokenNames) => {\n  const dispatch = useDispatch();\n  const helpTokens = useSelector(selectHelpUrlsByNames(tokenNames));\n  const pages = useSelector(getPages);\n\n  useEffect(() => {\n    if (isEmpty(pages)) {\n      dispatch(fetchHelpUrls());\n    }\n  }, []);\n\n  return helpTokens;\n};\n/* eslint-disable-next-line import/prefer-default-export */\nexport { useHelpUrls };\n","import { RequestStatus } from '../../data/constants';\n\nimport { getHelpUrls } from './api';\nimport { updateLoadingHelpUrlsStatus, updatePages } from './slice';\n\n/* eslint-disable import/prefer-default-export */\nexport function fetchHelpUrls() {\n  return async (dispatch) => {\n    dispatch(updateLoadingHelpUrlsStatus({ status: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const urls = await getHelpUrls();\n\n      dispatch(updatePages(urls));\n\n      dispatch(updateLoadingHelpUrlsStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateLoadingHelpUrlsStatus({ status: RequestStatus.FAILED }));\n\n      return false;\n    }\n  };\n}\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nexport async function getHelpUrls() {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(`${getConfig().STUDIO_BASE_URL}/api/contentstore/v1/help_urls`);\n  return camelCaseObject(data);\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  title1: {\n    id: 'course-authoring.export.sidebar.title1',\n    defaultMessage: 'Why export a course?',\n  },\n  description1: {\n    id: 'course-authoring.export.sidebar.description1',\n    defaultMessage: 'You may want to edit the XML in your course directly, outside of {studioShortName}. You may want to create a backup copy of your course. Or, you may want to create a copy of your course that you can later import into another course instance and customize.',\n  },\n  exportedContent: {\n    id: 'course-authoring.export.sidebar.exportedContent',\n    defaultMessage: 'What content is exported?',\n  },\n  exportedContentHeading: {\n    id: 'course-authoring.export.sidebar.exportedContentHeading',\n    defaultMessage: 'The following content is exported.',\n  },\n  content1: {\n    id: 'course-authoring.export.sidebar.content1',\n    defaultMessage: 'Course content and structure',\n  },\n  content2: {\n    id: 'course-authoring.export.sidebar.content2',\n    defaultMessage: 'Course dates',\n  },\n  content3: {\n    id: 'course-authoring.export.sidebar.content3',\n    defaultMessage: 'Grading policy',\n  },\n  content4: {\n    id: 'course-authoring.export.sidebar.content4',\n    defaultMessage: 'Any group configurations',\n  },\n  content5: {\n    id: 'course-authoring.export.sidebar.content5',\n    defaultMessage: 'Settings on the Advanced settings page, including MATLAB API keys and LTI passports',\n  },\n  notExportedContent: {\n    id: 'course-authoring.export.sidebar.notExportedContent',\n    defaultMessage: 'The following content is not exported.',\n  },\n  content6: {\n    id: 'course-authoring.export.sidebar.content6',\n    defaultMessage: 'Learner-specific content, such as learner grades and discussion forum data',\n  },\n  content7: {\n    id: 'course-authoring.export.sidebar.content7',\n    defaultMessage: 'The course team',\n  },\n  openDownloadFile: {\n    id: 'course-authoring.export.sidebar.openDownloadFile',\n    defaultMessage: 'Opening the downloaded file',\n  },\n  openDownloadFileDescription: {\n    id: 'course-authoring.export.sidebar.openDownloadFileDescription',\n    defaultMessage: 'Use an archive program to extract the data from the .tar.gz file. Extracted data includes the course.xml file, as well as subfolders that contain course content.',\n  },\n  learnMoreButtonTitle: {\n    id: 'course-authoring.export.sidebar.learnMoreButtonTitle',\n    defaultMessage: 'Learn more about exporting a course',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport {\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { HelpSidebar } from '../../generic/help-sidebar';\nimport { useHelpUrls } from '../../help-urls/hooks';\nimport messages from './messages';\n\nconst ExportSidebar = ({ intl, courseId }) => {\n  const { exportCourse: exportLearnMoreUrl } = useHelpUrls(['exportCourse']);\n  return (\n    <HelpSidebar courseId={courseId}>\n      <h4 className=\"help-sidebar-about-title\">{intl.formatMessage(messages.title1)}</h4>\n      <p className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.description1, { studioShortName: getConfig().STUDIO_SHORT_NAME })}</p>\n      <hr />\n      <h4 className=\"help-sidebar-about-title\">{intl.formatMessage(messages.exportedContent)}</h4>\n      <p className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.exportedContentHeading)}</p>\n      <ul className=\"px-3\">\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content1)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content2)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content3)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content4)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content5)}</li>\n      </ul>\n      <p className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.notExportedContent)}</p>\n      <ul className=\"px-3\">\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content6)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content7)}</li>\n      </ul>\n      <hr />\n      <h4 className=\"help-sidebar-about-title\">{intl.formatMessage(messages.openDownloadFile)}</h4>\n      <p className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.openDownloadFileDescription)}</p>\n      <hr />\n      <Hyperlink className=\"small\" href={exportLearnMoreUrl} target=\"_blank\" variant=\"outline-primary\">{intl.formatMessage(messages.learnMoreButtonTitle)}</Hyperlink>\n    </HelpSidebar>\n  );\n};\n\nExportSidebar.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(ExportSidebar);\n","export const getExportTriggered = (state) => state.courseExport.exportTriggered;\nexport const getCurrentStage = (state) => state.courseExport.currentStage;\nexport const getDownloadPath = (state) => state.courseExport.downloadPath;\nexport const getSuccessDate = (state) => state.courseExport.successDate;\nexport const getError = (state) => state.courseExport.error;\nexport const getIsErrorModalOpen = (state) => state.courseExport.isErrorModalOpen;\nexport const getLoadingStatus = (state) => state.courseExport.loadingStatus;\nexport const getSavingStatus = (state) => state.courseExport.savingStatus;\n","export const LAST_EXPORT_COOKIE_NAME = 'lastexport';\nexport const EXPORT_STAGES = {\n  PREPARING: 0,\n  EXPORTING: 1,\n  COMPRESSING: 2,\n  SUCCESS: 3,\n};\nexport const SUCCESS_DATE_FORMAT = 'MM/DD/yyyy';\n","import Cookies from 'universal-cookie';\nimport moment from 'moment';\n\nimport { TIME_FORMAT } from '../constants';\nimport { LAST_EXPORT_COOKIE_NAME, SUCCESS_DATE_FORMAT } from './data/constants';\n\n/**\n * Sets an export-related cookie with the provided information.\n *\n * @param {Date} date - Date of export.\n * @param {boolean} completed - Indicates if export was completed successfully.\n * @returns {void}\n */\nexport const setExportCookie = (date, completed) => {\n  const cookies = new Cookies();\n  cookies.set(LAST_EXPORT_COOKIE_NAME, { date, completed }, { path: window.location.pathname });\n};\n\n/**\n * Formats a Unix timestamp as a formatted success date string.\n *\n * @param {number} unixDate - Unix timestamp to be formatted.\n * @returns {string|null} Formatted success date string, including date and time in UTC, or null if the input is falsy.\n */\nexport const getFormattedSuccessDate = (unixDate) => {\n  const formattedDate = moment(unixDate).utc().format(SUCCESS_DATE_FORMAT);\n  const formattedTime = moment(unixDate).utc().format(TIME_FORMAT);\n  return unixDate ? ` (${formattedDate} at ${formattedTime} UTC)` : null;\n};\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const postExportCourseApiUrl = (courseId) => new URL(`export/${courseId}`, getApiBaseUrl()).href;\nexport const getExportStatusApiUrl = (courseId) => new URL(`export_status/${courseId}`, getApiBaseUrl()).href;\n\nexport async function startCourseExporting(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .post(postExportCourseApiUrl(courseId));\n  return camelCaseObject(data);\n}\n\nexport async function getExportStatus(courseId) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getExportStatusApiUrl(courseId));\n  return camelCaseObject(data);\n}\n","import Cookies from 'universal-cookie';\nimport moment from 'moment';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { RequestStatus } from '../../data/constants';\nimport { setExportCookie } from '../utils';\nimport { EXPORT_STAGES, LAST_EXPORT_COOKIE_NAME } from './constants';\n\nimport {\n  startCourseExporting,\n  getExportStatus,\n} from './api';\nimport {\n  updateExportTriggered,\n  updateCurrentStage,\n  updateDownloadPath,\n  updateSuccessDate,\n  updateError,\n  updateIsErrorModalOpen,\n  reset,\n  updateLoadingStatus,\n  updateSavingStatus,\n} from './slice';\n\nexport function startExportingCourse(courseId) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.PENDING }));\n    try {\n      dispatch(reset());\n      dispatch(updateExportTriggered(true));\n      const exportData = await startCourseExporting(courseId);\n      dispatch(updateCurrentStage(exportData.exportStatus));\n      setExportCookie(moment().valueOf(), exportData.exportStatus === EXPORT_STAGES.SUCCESS);\n\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport function fetchExportStatus(courseId) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatus({ status: RequestStatus.IN_PROGRESS }));\n    try {\n      const { exportStatus, exportOutput, exportError } = await getExportStatus(courseId);\n      dispatch(updateCurrentStage(Math.abs(exportStatus)));\n\n      if (exportOutput) {\n        if (exportOutput.startsWith('/')) {\n          dispatch(updateDownloadPath(`${getConfig().STUDIO_BASE_URL}${exportOutput}`));\n        } else {\n          dispatch(updateDownloadPath(exportOutput));\n        }\n        dispatch(updateSuccessDate(moment().valueOf()));\n      }\n\n      const cookies = new Cookies();\n      const cookieData = cookies.get(LAST_EXPORT_COOKIE_NAME);\n      if (!cookieData?.completed) {\n        setExportCookie(moment().valueOf(), exportStatus === EXPORT_STAGES.SUCCESS);\n      }\n\n      if (exportError) {\n        const errorMessage = exportError.rawErrorMsg || exportError;\n        const errorUnitUrl = exportError.editUnitUrl || null;\n        dispatch(updateError({ msg: errorMessage, unitUrl: errorUnitUrl }));\n        dispatch(updateIsErrorModalOpen(true));\n      }\n\n      dispatch(updateLoadingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateLoadingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ActionRow, AlertModal, Button } from '@edx/paragon';\nimport { Error } from '@edx/paragon/icons';\n\nconst ModalError = ({\n  isOpen, title, message, handleCancel, handleAction, cancelButtonText, actionButtonText,\n}) => (\n  <AlertModal\n    title={title}\n    isOpen={isOpen}\n    variant=\"danger\"\n    icon={Error}\n    footerNode={(\n      <ActionRow>\n        <Button variant=\"tertiary\" onClick={handleCancel}>{cancelButtonText}</Button>\n        <Button onClick={handleAction}>{actionButtonText}</Button>\n      </ActionRow>\n    )}\n  >\n    <p>{message}</p>\n  </AlertModal>\n);\n\nModalError.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired,\n  handleCancel: PropTypes.func.isRequired,\n  handleAction: PropTypes.func.isRequired,\n  cancelButtonText: PropTypes.string.isRequired,\n  actionButtonText: PropTypes.string.isRequired,\n};\n\nexport default ModalError;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  errorTitle: {\n    id: 'course-authoring.export.modal.error.title',\n    defaultMessage: 'There has been an error while exporting.',\n  },\n  errorDescriptionNotUnit: {\n    id: 'course-authoring.export.modal.error.description.not.unit',\n    defaultMessage: 'Your course could not be exported to XML. There is not enough information to identify the failed component. Inspect your course to identify any problematic components and try again. The raw error message is: {errorMessage}',\n  },\n  errorDescriptionUnit: {\n    id: 'course-authoring.export.modal.error.description.unit',\n    defaultMessage: 'There has been a failure to export to XML at least one component. It is recommended that you go to the edit page and repair the error before attempting another export. Please check that all components on the page are valid and do not display any error messages. The raw error message is: {errorMessage}',\n  },\n  errorCancelButtonUnit: {\n    id: 'course-authoring.export.modal.error.button.cancel.unit',\n    defaultMessage: 'Return to export',\n  },\n  errorCancelButtonNotUnit: {\n    id: 'course-authoring.export.modal.error.button.cancel.not.unit',\n    defaultMessage: 'Cancel',\n  },\n  errorActionButtonNotUnit: {\n    id: 'course-authoring.export.modal.error.button.action.not.unit',\n    defaultMessage: 'Take me to the main course page',\n  },\n  errorActionButtonUnit: {\n    id: 'course-authoring.export.modal.error.button.action.unit',\n    defaultMessage: 'Correct failed component',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getConfig } from '@edx/frontend-platform';\nimport PropTypes from 'prop-types';\n\nimport ModalError from '../../generic/modal-error/ModalError';\nimport { getError, getIsErrorModalOpen } from '../data/selectors';\nimport { updateIsErrorModalOpen } from '../data/slice';\nimport messages from './messages';\n\nconst ExportModalError = ({\n  intl,\n  courseId,\n}) => {\n  const dispatch = useDispatch();\n  const isErrorModalOpen = useSelector(getIsErrorModalOpen);\n  const { msg: errorMessage, unitUrl: unitErrorUrl } = useSelector(getError);\n\n  const handleUnitRedirect = () => { window.location.assign(unitErrorUrl); };\n  const handleRedirectCourseHome = () => { window.location.assign(`${getConfig().STUDIO_BASE_URL}/course/${courseId}`); };\n  return (\n    <ModalError\n      isOpen={isErrorModalOpen}\n      title={intl.formatMessage(messages.errorTitle)}\n      message={\n        intl.formatMessage(\n          unitErrorUrl\n            ? messages.errorDescriptionUnit\n            : messages.errorDescriptionNotUnit,\n          { errorMessage },\n        )\n      }\n      cancelButtonText={\n        intl.formatMessage(unitErrorUrl ? messages.errorCancelButtonUnit : messages.errorCancelButtonNotUnit)\n      }\n      actionButtonText={\n        intl.formatMessage(unitErrorUrl ? messages.errorActionButtonUnit : messages.errorActionButtonNotUnit)\n      }\n      handleCancel={() => dispatch(updateIsErrorModalOpen(false))}\n      handleAction={unitErrorUrl ? handleUnitRedirect : handleRedirectCourseHome}\n    />\n  );\n};\n\nExportModalError.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nExportModalError.defaultProps = {};\n\nexport default injectIntl(ExportModalError);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  exportedDataTitle: {\n    id: 'course-authoring.export.footer.exportedData.title',\n    defaultMessage: 'Data exported with your course:',\n  },\n  exportedDataItem1: {\n    id: 'course-authoring.export.footer.exportedData.item.1',\n    defaultMessage: 'Values from Advanced settings, including MATLAB API keys and LTI passports',\n  },\n  exportedDataItem2: {\n    id: 'course-authoring.export.footer.exportedData.item.2',\n    defaultMessage: 'Course content (all sections, sub-sections, and units)',\n  },\n  exportedDataItem3: {\n    id: 'course-authoring.export.footer.exportedData.item.3',\n    defaultMessage: 'Course structure',\n  },\n  exportedDataItem4: {\n    id: 'course-authoring.export.footer.exportedData.item.4',\n    defaultMessage: 'Individual problems',\n  },\n  exportedDataItem5: {\n    id: 'course-authoring.export.footer.exportedData.item.5',\n    defaultMessage: 'Pages',\n  },\n  exportedDataItem6: {\n    id: 'course-authoring.export.footer.exportedData.item.6',\n    defaultMessage: 'Course assets',\n  },\n  exportedDataItem7: {\n    id: 'course-authoring.export.footer.exportedData.item.7',\n    defaultMessage: 'Course settings',\n  },\n  notExportedDataTitle: {\n    id: 'course-authoring.export.footer.notExportedData.title',\n    defaultMessage: 'Data not exported with your course:',\n  },\n  notExportedDataItem1: {\n    id: 'course-authoring.export.footer.notExportedData.item.1',\n    defaultMessage: 'User data',\n  },\n  notExportedDataItem2: {\n    id: 'course-authoring.export.footer.notExportedData.item.2',\n    defaultMessage: 'Course team data',\n  },\n  notExportedDataItem3: {\n    id: 'course-authoring.export.footer.notExportedData.item.3',\n    defaultMessage: 'Forum/discussion data',\n  },\n  notExportedDataItem4: {\n    id: 'course-authoring.export.footer.notExportedData.item.4',\n    defaultMessage: 'Certificates',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport {\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport { Layout } from '@edx/paragon';\n\nimport messages from './messages';\n\nconst ExportFooter = ({ intl }) => (\n  <footer className=\"mt-4 small\">\n    <Layout\n      lg={[{ span: 5 }, { span: 2 }, { span: 5 }]}\n      md={[{ span: 5 }, { span: 2 }, { span: 5 }]}\n      sm={[{ span: 5 }, { span: 2 }, { span: 5 }]}\n      xs={[{ span: 5 }, { span: 2 }, { span: 5 }]}\n      xl={[{ span: 5 }, { span: 2 }, { span: 5 }]}\n    >\n      <Layout.Element>\n        <h4>{intl.formatMessage(messages.exportedDataTitle)}</h4>\n        <ul className=\"export-footer-list\">\n          <li>{intl.formatMessage(messages.exportedDataItem1)}</li>\n          <li>{intl.formatMessage(messages.exportedDataItem2)}</li>\n          <li>{intl.formatMessage(messages.exportedDataItem3)}</li>\n          <li>{intl.formatMessage(messages.exportedDataItem4)}</li>\n          <li>{intl.formatMessage(messages.exportedDataItem5)}</li>\n          <li>{intl.formatMessage(messages.exportedDataItem6)}</li>\n          <li>{intl.formatMessage(messages.exportedDataItem7)}</li>\n        </ul>\n      </Layout.Element>\n      <Layout.Element />\n      <Layout.Element>\n        <h4>{intl.formatMessage(messages.notExportedDataTitle)}</h4>\n        <ul className=\"export-footer-list\">\n          <li>{intl.formatMessage(messages.notExportedDataItem1)}</li>\n          <li>{intl.formatMessage(messages.notExportedDataItem2)}</li>\n          <li>{intl.formatMessage(messages.notExportedDataItem3)}</li>\n          <li>{intl.formatMessage(messages.notExportedDataItem4)}</li>\n        </ul>\n      </Layout.Element>\n    </Layout>\n  </footer>\n);\n\nExportFooter.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ExportFooter);\n","import React from 'react';\nimport { injectIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Settings as SettingsIcon,\n  ManageHistory as SuccessIcon,\n  Warning as ErrorIcon,\n  CheckCircle,\n} from '@edx/paragon/icons';\nimport { Icon } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst CourseStepper = ({\n  steps,\n  activeKey,\n  percent,\n  hasError,\n  errorMessage,\n}) => {\n  const getStepperSettings = (index) => {\n    const lastStepIndex = steps.length - 1;\n    const isActiveStep = index === activeKey;\n    const isLastStep = index === lastStepIndex;\n    const isErrorStep = isActiveStep && hasError;\n    const isLastStepDone = isLastStep && isActiveStep;\n    const completedStep = index < activeKey && !hasError;\n\n    const getStepIcon = () => {\n      if (completedStep) {\n        return CheckCircle;\n      }\n      if (hasError && isActiveStep) {\n        return ErrorIcon;\n      }\n      if (isLastStep && !isActiveStep) {\n        return SuccessIcon;\n      }\n      if (isLastStepDone) {\n        return CheckCircle;\n      }\n\n      return SettingsIcon;\n    };\n\n    return {\n      stepIcon: getStepIcon(index),\n      isPercentShow: Boolean(percent) && percent !== 100 && isActiveStep && !hasError,\n      isErrorMessageShow: isErrorStep && errorMessage,\n      isActiveClass: isActiveStep && !isLastStep && !hasError,\n      isDoneClass: index < activeKey || isLastStepDone,\n      isErrorClass: isErrorStep,\n    };\n  };\n\n  return (\n    <div className=\"course-stepper\">\n      {steps.length ? steps.map(({ title, description }, index) => {\n        const {\n          stepIcon,\n          isPercentShow,\n          isErrorMessageShow,\n          isActiveClass,\n          isDoneClass,\n          isErrorClass,\n        } = getStepperSettings(index);\n\n        return (\n          <div\n            className={classNames('course-stepper__step', {\n              active: isActiveClass,\n              done: isDoneClass,\n              error: isErrorClass,\n            })}\n            key={title}\n            data-testid=\"course-stepper__step\"\n          >\n            <div className=\"course-stepper__step-icon\">\n              <Icon src={stepIcon} alt={title} data-testid={`${title}-icon`} />\n            </div>\n            <div className=\"course-stepper__step-info\">\n              <h3 className=\"h4 title course-stepper__step-title font-weight-600\">{title}</h3>\n              {isPercentShow && (\n                <p\n                  className=\"course-stepper__step-percent font-weight-400\"\n                  data-testid=\"course-stepper__step-percent\"\n                >\n                  {percent}%\n                </p>\n              )}\n              <p className=\"course-stepper__step-description font-weight-400\">\n                {isErrorMessageShow ? errorMessage : description}\n              </p>\n            </div>\n          </div>\n        );\n      }) : null}\n    </div>\n  );\n};\n\nCourseStepper.defaultProps = {\n  percent: false,\n  hasError: false,\n  errorMessage: '',\n};\n\nCourseStepper.propTypes = {\n  steps: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n  })).isRequired,\n  activeKey: PropTypes.number.isRequired,\n  percent: PropTypes.oneOfType([PropTypes.number, PropTypes.bool]),\n  errorMessage: PropTypes.string,\n  hasError: PropTypes.bool,\n};\n\nexport default injectIntl(CourseStepper);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  stepperPreparingTitle: {\n    id: 'course-authoring.export.stepper.title.preparing',\n    defaultMessage: 'Preparing',\n  },\n  stepperExportingTitle: {\n    id: 'course-authoring.export.stepper.title.exporting',\n    defaultMessage: 'Exporting',\n  },\n  stepperCompressingTitle: {\n    id: 'course-authoring.export.stepper.title.compressing',\n    defaultMessage: 'Compressing',\n  },\n  stepperSuccessTitle: {\n    id: 'course-authoring.export.stepper.title.success',\n    defaultMessage: 'Success',\n  },\n  stepperPreparingDescription: {\n    id: 'course-authoring.export.stepper.description.preparing',\n    defaultMessage: 'Preparing to start the export',\n  },\n  stepperExportingDescription: {\n    id: 'course-authoring.export.stepper.description.exporting',\n    defaultMessage: 'Creating the export data files (You can now leave this page safely, but avoid making drastic changes to content until this export is complete)',\n  },\n  stepperCompressingDescription: {\n    id: 'course-authoring.export.stepper.description.compressing',\n    defaultMessage: 'Compressing the exported data and preparing it for download',\n  },\n  stepperSuccessDescription: {\n    id: 'course-authoring.export.stepper.description.success',\n    defaultMessage: 'Your exported course can now be downloaded',\n  },\n  downloadCourseButtonTitle: {\n    id: 'course-authoring.export.stepper.download.button.title',\n    defaultMessage: 'Download exported course',\n  },\n  stepperHeaderTitle: {\n    id: 'course-authoring.export.stepper.header.title',\n    defaultMessage: 'Course export status',\n  },\n});\n\nexport default messages;\n","import React, { useEffect } from 'react';\nimport {\n  FormattedDate,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from '@edx/paragon';\n\nimport CourseStepper from '../../generic/course-stepper';\nimport {\n  getCurrentStage, getDownloadPath, getError, getLoadingStatus, getSuccessDate,\n} from '../data/selectors';\nimport { fetchExportStatus } from '../data/thunks';\nimport { EXPORT_STAGES } from '../data/constants';\nimport { RequestStatus } from '../../data/constants';\nimport messages from './messages';\n\nconst ExportStepper = ({ intl, courseId }) => {\n  const currentStage = useSelector(getCurrentStage);\n  const downloadPath = useSelector(getDownloadPath);\n  const successDate = useSelector(getSuccessDate);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const { msg: errorMessage } = useSelector(getError);\n  const dispatch = useDispatch();\n  const isStopFetching = currentStage === EXPORT_STAGES.SUCCESS\n    || loadingStatus === RequestStatus.FAILED\n    || errorMessage;\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (isStopFetching) {\n        clearInterval(id);\n      } else {\n        dispatch(fetchExportStatus(courseId));\n      }\n    }, 3000);\n    return () => clearInterval(id);\n  });\n\n  let successTitle = intl.formatMessage(messages.stepperSuccessTitle);\n  const localizedSuccessDate = successDate ? (\n    <FormattedDate\n      value={successDate}\n      year=\"2-digit\"\n      month=\"2-digit\"\n      day=\"2-digit\"\n      hour=\"numeric\"\n      minute=\"numeric\"\n    />\n  ) : null;\n\n  if (localizedSuccessDate && currentStage === EXPORT_STAGES.SUCCESS) {\n    const successWithDate = (\n      <>\n        {successTitle} ({localizedSuccessDate})\n      </>\n    );\n    successTitle = successWithDate;\n  }\n\n  const steps = [\n    {\n      title: intl.formatMessage(messages.stepperPreparingTitle),\n      description: intl.formatMessage(messages.stepperPreparingDescription),\n      key: EXPORT_STAGES.PREPARING,\n    }, {\n      title: intl.formatMessage(messages.stepperExportingTitle),\n      description: intl.formatMessage(messages.stepperExportingDescription),\n      key: EXPORT_STAGES.EXPORTING,\n    }, {\n      title: intl.formatMessage(messages.stepperCompressingTitle),\n      description: intl.formatMessage(messages.stepperCompressingDescription),\n      key: EXPORT_STAGES.COMPRESSING,\n    }, {\n      title: successTitle,\n      description: intl.formatMessage(messages.stepperSuccessDescription),\n      key: EXPORT_STAGES.SUCCESS,\n    },\n  ];\n\n  return (\n    <div>\n      <h3 className=\"mt-4\">{intl.formatMessage(messages.stepperHeaderTitle)}</h3>\n      <CourseStepper\n        courseId={courseId}\n        steps={steps}\n        activeKey={currentStage}\n        errorMessage={errorMessage}\n        hasError={!!errorMessage}\n      />\n      {downloadPath && currentStage === EXPORT_STAGES.SUCCESS && <Button className=\"ml-5.5 mt-n2.5\" href={downloadPath} download>{intl.formatMessage(messages.downloadCourseButtonTitle)}</Button>}\n    </div>\n  );\n};\n\nExportStepper.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(ExportStepper);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Container, Layout, Button, Card,\n} from '@edx/paragon';\nimport { ArrowCircleDown as ArrowCircleDownIcon } from '@edx/paragon/icons';\nimport Cookies from 'universal-cookie';\nimport { getConfig } from '@edx/frontend-platform';\nimport { Helmet } from 'react-helmet';\n\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport SubHeader from '../generic/sub-header/SubHeader';\nimport { RequestStatus } from '../data/constants';\nimport { useModel } from '../generic/model-store';\nimport messages from './messages';\nimport ExportSidebar from './export-sidebar/ExportSidebar';\nimport {\n  getCurrentStage, getError, getExportTriggered, getLoadingStatus, getSavingStatus,\n} from './data/selectors';\nimport { startExportingCourse } from './data/thunks';\nimport { EXPORT_STAGES, LAST_EXPORT_COOKIE_NAME } from './data/constants';\nimport { updateExportTriggered, updateSavingStatus, updateSuccessDate } from './data/slice';\nimport ExportModalError from './export-modal-error/ExportModalError';\nimport ExportFooter from './export-footer/ExportFooter';\nimport ExportStepper from './export-stepper/ExportStepper';\n\nconst CourseExportPage = ({ intl, courseId }) => {\n  const dispatch = useDispatch();\n  const exportTriggered = useSelector(getExportTriggered);\n  const courseDetails = useModel('courseDetails', courseId);\n  const currentStage = useSelector(getCurrentStage);\n  const { msg: errorMessage } = useSelector(getError);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const savingStatus = useSelector(getSavingStatus);\n  const cookies = new Cookies();\n  const isShowExportButton = !exportTriggered || errorMessage || currentStage === EXPORT_STAGES.SUCCESS;\n  const anyRequestFailed = savingStatus === RequestStatus.FAILED || loadingStatus === RequestStatus.FAILED;\n  const anyRequestInProgress = savingStatus === RequestStatus.PENDING || loadingStatus === RequestStatus.IN_PROGRESS;\n\n  useEffect(() => {\n    const cookieData = cookies.get(LAST_EXPORT_COOKIE_NAME);\n    if (cookieData) {\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      dispatch(updateExportTriggered(true));\n      dispatch(updateSuccessDate(cookieData.date));\n    }\n  }, []);\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {intl.formatMessage(messages.pageTitle, {\n            headingTitle: intl.formatMessage(messages.headingTitle),\n            courseName: courseDetails?.name,\n            siteName: process.env.SITE_NAME,\n          })}\n        </title>\n      </Helmet>\n      <Container size=\"xl\" className=\"mt-4 px-4 export\">\n        <section className=\"setting-items mb-4\">\n          <Layout\n            lg={[{ span: 9 }, { span: 3 }]}\n            md={[{ span: 9 }, { span: 3 }]}\n            sm={[{ span: 9 }, { span: 3 }]}\n            xs={[{ span: 9 }, { span: 3 }]}\n            xl={[{ span: 9 }, { span: 3 }]}\n          >\n            <Layout.Element>\n              <article>\n                <SubHeader\n                  title={intl.formatMessage(messages.headingTitle)}\n                  subtitle={intl.formatMessage(messages.headingSubtitle)}\n                />\n                <p className=\"small\">{intl.formatMessage(messages.description1, { studioShortName: getConfig().STUDIO_SHORT_NAME })}</p>\n                <p className=\"small\">{intl.formatMessage(messages.description2)}</p>\n                <Card>\n                  <Card.Header\n                    className=\"h3 px-3 text-black mb-4\"\n                    title={intl.formatMessage(messages.titleUnderButton)}\n                  />\n                  {isShowExportButton && (\n                    <Card.Section className=\"px-3 py-1\">\n                      <Button\n                        size=\"lg\"\n                        block\n                        className=\"mb-4\"\n                        onClick={() => dispatch(startExportingCourse(courseId))}\n                        iconBefore={ArrowCircleDownIcon}\n                      >\n                        {intl.formatMessage(messages.buttonTitle)}\n                      </Button>\n                    </Card.Section>\n                  )}\n                </Card>\n                {exportTriggered && <ExportStepper courseId={courseId} />}\n                <ExportFooter />\n              </article>\n            </Layout.Element>\n            <Layout.Element>\n              <ExportSidebar courseId={courseId} />\n            </Layout.Element>\n          </Layout>\n        </section>\n        <ExportModalError courseId={courseId} />\n      </Container>\n      <div className=\"alert-toast\">\n        <InternetConnectionAlert\n          isFailed={anyRequestFailed}\n          isQueryPending={anyRequestInProgress}\n          onInternetConnectionFailed={() => null}\n        />\n      </div>\n    </>\n  );\n};\n\nCourseExportPage.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nCourseExportPage.defaultProps = {};\n\nexport default injectIntl(CourseExportPage);\n","export const LAST_IMPORT_COOKIE_NAME = 'lastimport';\nexport const IMPORT_STAGES = {\n  UPLOADING: 0,\n  UNPACKING: 1,\n  VERIFYING: 2,\n  UPDATING: 3,\n  SUCCESS: 4,\n};\n","import Cookies from 'universal-cookie';\n\nimport { LAST_IMPORT_COOKIE_NAME } from './data/constants';\n\n/**\n * Sets an import-related cookie with the provided information.\n *\n * @param {Date} date - Date of import.\n * @param {boolean} completed - Indicates if import was completed successfully.\n * @param {string} fileName - File name.\n * @returns {void}\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const setImportCookie = (date, completed, fileName) => {\n  const cookies = new Cookies();\n  cookies.set(LAST_IMPORT_COOKIE_NAME, { date, completed, fileName }, { path: window.location.pathname });\n};\n","/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const postImportCourseApiUrl = (courseId) => `${getApiBaseUrl()}/import/${courseId}`;\nexport const getImportStatusApiUrl = (courseId, fileName) => `${getApiBaseUrl()}/import_status/${courseId}/${fileName}`;\n\n/**\n * Start import course.\n * @param {string} courseId\n * @param {Object} fileData\n * @param {Object} requestConfig\n * @returns {Promise<Object>}\n */\nexport async function startCourseImporting(courseId, fileData, requestConfig) {\n  const { data } = await getAuthenticatedHttpClient()\n    .post(postImportCourseApiUrl(courseId), { 'course-data': fileData }, { headers: { 'content-type': 'multipart/form-data' }, ...requestConfig });\n  return camelCaseObject(data);\n}\n\n/**\n * Get import status.\n * @param {string} courseId\n * @param {string} fileName\n * @returns {Promise<Object>}\n */\nexport async function getImportStatus(courseId, fileName) {\n  const { data } = await getAuthenticatedHttpClient()\n    .get(getImportStatusApiUrl(courseId, fileName));\n  return camelCaseObject(data);\n}\n","/* eslint-disable import/prefer-default-export */\nimport Cookies from 'universal-cookie';\nimport moment from 'moment';\n\nimport { RequestStatus } from '../../data/constants';\nimport { setImportCookie } from '../utils';\nimport { getImportStatus, startCourseImporting } from './api';\nimport {\n  reset, updateCurrentStage, updateError, updateFileName,\n  updateImportTriggered, updateLoadingStatus, updateSavingStatus, updateSuccessDate,\n} from './slice';\nimport { IMPORT_STAGES, LAST_IMPORT_COOKIE_NAME } from './constants';\n\nexport function fetchImportStatus(courseId, fileName) {\n  return async (dispatch) => {\n    try {\n      dispatch(updateLoadingStatus(RequestStatus.IN_PROGRESS));\n      const { importStatus, message } = await getImportStatus(courseId, fileName);\n      dispatch(updateCurrentStage(Math.abs(importStatus)));\n      const cookies = new Cookies();\n      const cookieData = cookies.get(LAST_IMPORT_COOKIE_NAME);\n\n      if (importStatus < 0) {\n        dispatch(updateError({ hasError: true, message }));\n      } else if (importStatus === IMPORT_STAGES.SUCCESS && !cookieData?.completed) {\n        dispatch(updateSuccessDate(moment().valueOf()));\n      }\n\n      if (!cookieData?.completed) {\n        setImportCookie(moment().valueOf(), importStatus === IMPORT_STAGES.SUCCESS, fileName);\n      }\n      dispatch(updateLoadingStatus(RequestStatus.SUCCESSFUL));\n      return true;\n    } catch (error) {\n      dispatch(updateLoadingStatus(RequestStatus.FAILED));\n      return false;\n    }\n  };\n}\n\nexport function handleProcessUpload(courseId, fileData, requestConfig, handleError) {\n  return async (dispatch) => {\n    try {\n      const file = fileData.get('file');\n      dispatch(reset());\n      dispatch(updateSavingStatus(RequestStatus.PENDING));\n      dispatch(updateImportTriggered(true));\n      dispatch(updateFileName(file.name));\n      const { importStatus } = await startCourseImporting(courseId, file, requestConfig);\n      dispatch(updateCurrentStage(importStatus));\n      setImportCookie(moment().valueOf(), importStatus === IMPORT_STAGES.SUCCESS, file.name);\n      dispatch(updateSavingStatus(RequestStatus.SUCCESSFUL));\n      return true;\n    } catch (error) {\n      handleError(error);\n      dispatch(updateSavingStatus(RequestStatus.FAILED));\n      return false;\n    }\n  };\n}\n","export const getProgress = (state) => state.courseImport.progress;\nexport const getCurrentStage = (state) => state.courseImport.currentStage;\nexport const getImportTriggered = (state) => state.courseImport.importTriggered;\nexport const getFileName = (state) => state.courseImport.fileName;\nexport const getError = (state) => state.courseImport.error;\nexport const getLoadingStatus = (state) => state.courseImport.loadingStatus;\nexport const getSavingStatus = (state) => state.courseImport.savingStatus;\nexport const getSuccessDate = (state) => state.courseImport.successDate;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  stepperUploadingTitle: {\n    id: 'course-authoring.import.stepper.title.uploading',\n    defaultMessage: 'Uploading',\n  },\n  stepperUnpackingTitle: {\n    id: 'course-authoring.import.stepper.title.unpacking',\n    defaultMessage: 'Unpacking',\n  },\n  stepperVerifyingTitle: {\n    id: 'course-authoring.import.stepper.title.verifying',\n    defaultMessage: 'Verifying',\n  },\n  stepperUpdatingTitle: {\n    id: 'course-authoring.import.stepper.title.updating',\n    defaultMessage: 'Updating сourse',\n  },\n  stepperSuccessTitle: {\n    id: 'course-authoring.import.stepper.title.success',\n    defaultMessage: 'Success',\n  },\n  stepperUploadingDescription: {\n    id: 'course-authoring.import.stepper.description.uploading',\n    defaultMessage: 'Transferring your file to our servers',\n  },\n  stepperUnpackingDescription: {\n    id: 'course-authoring.import.stepper.description.unpacking',\n    defaultMessage: 'Expanding and preparing folder/file structure (You can now leave this page safely, but avoid making drastic changes to content until this import is complete)',\n  },\n  stepperVerifyingDescription: {\n    id: 'course-authoring.import.stepper.description.verifying',\n    defaultMessage: 'Reviewing semantics, syntax, and required data',\n  },\n  stepperUpdatingDescription: {\n    id: 'course-authoring.import.stepper.description.updating',\n    defaultMessage: 'Integrating your imported content into this course. This process might take longer with larger courses.',\n  },\n  stepperSuccessDescription: {\n    id: 'course-authoring.import.stepper.description.success',\n    defaultMessage: 'Your imported content has now been integrated into this course',\n  },\n  viewOutlineButton: {\n    id: 'course-authoring.import.stepper.button.outline',\n    defaultMessage: 'View updated outline',\n  },\n  defaultErrorMessage: {\n    id: 'course-authoring.import.stepper.error.default',\n    defaultMessage: 'Error importing course',\n  },\n  stepperHeaderTitle: {\n    id: 'course-authoring.export.stepper.header.title',\n    defaultMessage: 'Course import status',\n  },\n});\n\nexport default messages;\n","import React, { useEffect } from 'react';\nimport {\n  FormattedDate,\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { RequestStatus } from '../../data/constants';\nimport CourseStepper from '../../generic/course-stepper';\nimport { IMPORT_STAGES } from '../data/constants';\nimport { fetchImportStatus } from '../data/thunks';\nimport {\n  getCurrentStage, getError, getFileName, getLoadingStatus, getProgress, getSavingStatus, getSuccessDate,\n} from '../data/selectors';\nimport messages from './messages';\n\nconst ImportStepper = ({ intl, courseId }) => {\n  const currentStage = useSelector(getCurrentStage);\n  const fileName = useSelector(getFileName);\n  const { hasError, message: errorMessage } = useSelector(getError);\n  const progress = useSelector(getProgress);\n  const dispatch = useDispatch();\n  const loadingStatus = useSelector(getLoadingStatus);\n  const savingStatus = useSelector(getSavingStatus);\n  const successDate = useSelector(getSuccessDate);\n  const isStopFetching = currentStage === IMPORT_STAGES.SUCCESS\n    || loadingStatus === RequestStatus.FAILED\n    || savingStatus === RequestStatus.FAILED\n    || hasError;\n  const formattedErrorMessage = hasError ? errorMessage || intl.formatMessage(messages.defaultErrorMessage) : '';\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      if (isStopFetching) {\n        clearInterval(id);\n      } else if (fileName) {\n        dispatch(fetchImportStatus(courseId, fileName));\n      }\n    }, 3000);\n    return () => clearInterval(id);\n  });\n\n  let successTitle = intl.formatMessage(messages.stepperSuccessTitle);\n  const localizedSuccessDate = successDate ? (\n    <FormattedDate\n      value={successDate}\n      year=\"2-digit\"\n      month=\"2-digit\"\n      day=\"2-digit\"\n      hour=\"numeric\"\n      minute=\"numeric\"\n    />\n  ) : null;\n  if (localizedSuccessDate && currentStage === IMPORT_STAGES.SUCCESS) {\n    const successWithDate = (\n      <>\n        {successTitle} ({localizedSuccessDate})\n      </>\n    );\n    successTitle = successWithDate;\n  }\n\n  const handleRedirectCourseOutline = () => window.location.replace(`${getConfig().STUDIO_BASE_URL}/course/${courseId}`);\n\n  const steps = [\n    {\n      title: intl.formatMessage(messages.stepperUploadingTitle),\n      description: intl.formatMessage(messages.stepperUploadingDescription),\n      key: IMPORT_STAGES.UPLOADING,\n    }, {\n      title: intl.formatMessage(messages.stepperUnpackingTitle),\n      description: intl.formatMessage(messages.stepperUnpackingDescription),\n      key: IMPORT_STAGES.UNPACKING,\n    }, {\n      title: intl.formatMessage(messages.stepperVerifyingTitle),\n      description: intl.formatMessage(messages.stepperVerifyingDescription),\n      key: IMPORT_STAGES.VERIFYING,\n    }, {\n      title: intl.formatMessage(messages.stepperUpdatingTitle),\n      description: intl.formatMessage(messages.stepperUpdatingDescription),\n      key: IMPORT_STAGES.UPDATING,\n    }, {\n      title: successTitle,\n      description: intl.formatMessage(messages.stepperSuccessDescription),\n      key: IMPORT_STAGES.SUCCESS,\n    },\n  ];\n\n  return (\n    <section>\n      <h3 className=\"mt-4\">{intl.formatMessage(messages.stepperHeaderTitle)}</h3>\n      <CourseStepper\n        courseId={courseId}\n        percent={progress}\n        steps={steps}\n        activeKey={currentStage}\n        hasError={hasError}\n        errorMessage={formattedErrorMessage}\n      />\n      {currentStage === IMPORT_STAGES.SUCCESS && (\n        <Button className=\"ml-5.5 mt-n2.5\" onClick={handleRedirectCourseOutline}>{intl.formatMessage(messages.viewOutlineButton)}</Button>\n      )}\n    </section>\n  );\n};\n\nImportStepper.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(ImportStepper);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  title1: {\n    id: 'course-authoring.import.sidebar.title1',\n    defaultMessage: 'Why import a course?',\n  },\n  description1: {\n    id: 'course-authoring.import.sidebar.description1',\n    defaultMessage: 'You may want to run a new version of an existing course, or replace an existing course altogether. Or, you may have developed a course outside {studioShortName}.',\n  },\n  importedContent: {\n    id: 'course-authoring.import.sidebar.importedContent',\n    defaultMessage: 'What content is imported?',\n  },\n  importedContentHeading: {\n    id: 'course-authoring.import.sidebar.importedContentHeading',\n    defaultMessage: 'The following content is imported.',\n  },\n  content1: {\n    id: 'course-authoring.import.sidebar.content1',\n    defaultMessage: 'Course content and structure',\n  },\n  content2: {\n    id: 'course-authoring.import.sidebar.content2',\n    defaultMessage: 'Course dates',\n  },\n  content3: {\n    id: 'course-authoring.import.sidebar.content3',\n    defaultMessage: 'Grading policy',\n  },\n  content4: {\n    id: 'course-authoring.import.sidebar.content4',\n    defaultMessage: 'Any group configurations',\n  },\n  content5: {\n    id: 'course-authoring.import.sidebar.content5',\n    defaultMessage: 'Settings on the advanced settings page, including MATLAB API keys and LTI passports',\n  },\n  notImportedContent: {\n    id: 'course-authoring.import.sidebar.notImportedContent',\n    defaultMessage: 'The following content is not exported.',\n  },\n  content6: {\n    id: 'course-authoring.import.sidebar.content6',\n    defaultMessage: 'Learner-specific content, such as learner grades and discussion forum data',\n  },\n  content7: {\n    id: 'course-authoring.import.sidebar.content7',\n    defaultMessage: 'The course team',\n  },\n  warningTitle: {\n    id: 'course-authoring.import.sidebar.warningTitle',\n    defaultMessage: 'Warning: importing while a course is running',\n  },\n  warningDescription: {\n    id: 'course-authoring.import.sidebar.warningDescription',\n    defaultMessage: 'If you perform an import while your course is running, and you change the URL names (or url_name nodes) of any problem components, the student data associated with those problem components may be lost. This data includes students\\' problem scores.',\n  },\n  learnMoreButtonTitle: {\n    id: 'course-authoring.import.sidebar.learnMoreButtonTitle',\n    defaultMessage: 'Learn more about importing a course',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport {\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { Hyperlink } from '@edx/paragon';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { HelpSidebar } from '../../generic/help-sidebar';\nimport { useHelpUrls } from '../../help-urls/hooks';\nimport messages from './messages';\n\nconst ImportSidebar = ({ intl, courseId }) => {\n  const { importCourse: importLearnMoreUrl } = useHelpUrls(['importCourse']);\n  return (\n    <HelpSidebar courseId={courseId}>\n      <h4 className=\"help-sidebar-about-title\">{intl.formatMessage(messages.title1)}</h4>\n      <p className=\"help-sidebar-about-descriptions\">\n        {intl.formatMessage(messages.description1, { studioShortName: getConfig().STUDIO_SHORT_NAME })}\n      </p>\n      <hr />\n      <h4 className=\"help-sidebar-about-title\">{intl.formatMessage(messages.importedContent)}</h4>\n      <p className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.importedContentHeading)}</p>\n      <ul className=\"px-3\">\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content1)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content2)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content3)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content4)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content5)}</li>\n      </ul>\n      <p className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.notImportedContent)}</p>\n      <ul className=\"px-3\">\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content6)}</li>\n        <li className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.content7)}</li>\n      </ul>\n      <hr />\n      <h4 className=\"help-sidebar-about-title\">{intl.formatMessage(messages.warningTitle)}</h4>\n      <p className=\"help-sidebar-about-descriptions\">{intl.formatMessage(messages.warningDescription)}</p>\n      <hr />\n      <Hyperlink\n        className=\"small\"\n        href={importLearnMoreUrl}\n        target=\"_blank\"\n        variant=\"outline-primary\"\n      >\n        {intl.formatMessage(messages.learnMoreButtonTitle)}\n      </Hyperlink>\n    </HelpSidebar>\n  );\n};\n\nImportSidebar.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(ImportSidebar);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headingTitle: {\n    id: 'course-authoring.import.file-section.title',\n    defaultMessage: 'Select a .tar.gz file to replace your course content',\n  },\n  fileChosen: {\n    id: 'course-authoring.import.file-section.chosen-file',\n    defaultMessage: 'File chosen: {fileName}',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport {\n  injectIntl,\n  intlShape,\n} from '@edx/frontend-platform/i18n';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Card, Dropzone } from '@edx/paragon';\n\nimport { IMPORT_STAGES } from '../data/constants';\nimport {\n  getCurrentStage, getError, getFileName, getImportTriggered,\n} from '../data/selectors';\nimport { updateProgress } from '../data/slice';\nimport messages from './messages';\nimport { handleProcessUpload } from '../data/thunks';\n\nconst FileSection = ({ intl, courseId }) => {\n  const dispatch = useDispatch();\n  const importTriggered = useSelector(getImportTriggered);\n  const currentStage = useSelector(getCurrentStage);\n  const fileName = useSelector(getFileName);\n  const { hasError } = useSelector(getError);\n  const isShowedDropzone = !importTriggered || currentStage === IMPORT_STAGES.SUCCESS || hasError;\n\n  return (\n    <Card>\n      <Card.Header\n        className=\"h3 px-3 text-black\"\n        title={intl.formatMessage(messages.headingTitle)}\n        subtitle={fileName && intl.formatMessage(messages.fileChosen, { fileName })}\n      />\n      <Card.Section className=\"px-3 pt-2 pb-4\">\n        {isShowedDropzone\n          && (\n            <Dropzone\n              onProcessUpload={\n                ({ fileData, requestConfig, handleError }) => dispatch(handleProcessUpload(\n                  courseId,\n                  fileData,\n                  requestConfig,\n                  handleError,\n                ))\n              }\n              onUploadProgress={(percent) => dispatch(updateProgress(percent))}\n              accept={{ 'application/gzip': ['.tar.gz'] }}\n              data-testid=\"dropzone\"\n            />\n          )}\n      </Card.Section>\n    </Card>\n  );\n};\n\nFileSection.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(FileSection);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  pageTitle: {\n    id: 'course-authoring.import.page.title',\n    defaultMessage: '{headingTitle} | {courseName} | {siteName}',\n  },\n  headingTitle: {\n    id: 'course-authoring.import.heading.title',\n    defaultMessage: 'Course import',\n  },\n  headingSubtitle: {\n    id: 'course-authoring.import.heading.subtitle',\n    defaultMessage: 'Tools',\n  },\n  description1: {\n    id: 'course-authoring.import.description1',\n    defaultMessage: 'Be sure you want to import a course before continuing. The contents of the imported course will replace the contents of the existing course. You cannot undo a course import. Before you proceed, we recommend that you export the current course, so that you have a backup copy of it.',\n  },\n  description2: {\n    id: 'course-authoring.import.description2',\n    defaultMessage: 'The course that you import must be in a .tar.gz file (that is, a .tar file compressed with GNU Zip). This .tar.gz file must contain a course.xml file. It may also contain other files.',\n  },\n  description3: {\n    id: 'course-authoring.import.description3',\n    defaultMessage: 'The import process has five stages. During the first two stages, you must stay on this page. You can leave this page after the unpacking stage has completed. We recommend, however, that you don\\'t make important changes to your course until the import operation has completed.',\n  },\n});\n\nexport default messages;\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Container, Layout,\n} from '@edx/paragon';\nimport Cookies from 'universal-cookie';\nimport { Helmet } from 'react-helmet';\n\nimport SubHeader from '../generic/sub-header/SubHeader';\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport { RequestStatus } from '../data/constants';\nimport { useModel } from '../generic/model-store';\nimport {\n  updateFileName, updateImportTriggered, updateSavingStatus, updateSuccessDate,\n} from './data/slice';\nimport ImportStepper from './import-stepper/ImportStepper';\nimport { getImportTriggered, getLoadingStatus, getSavingStatus } from './data/selectors';\nimport { LAST_IMPORT_COOKIE_NAME } from './data/constants';\nimport ImportSidebar from './import-sidebar/ImportSidebar';\nimport FileSection from './file-section/FileSection';\nimport messages from './messages';\n\nconst CourseImportPage = ({ intl, courseId }) => {\n  const dispatch = useDispatch();\n  const cookies = new Cookies();\n  const courseDetails = useModel('courseDetails', courseId);\n  const importTriggered = useSelector(getImportTriggered);\n  const savingStatus = useSelector(getSavingStatus);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const anyRequestFailed = savingStatus === RequestStatus.FAILED || loadingStatus === RequestStatus.FAILED;\n  const anyRequestInProgress = savingStatus === RequestStatus.PENDING || loadingStatus === RequestStatus.IN_PROGRESS;\n\n  useEffect(() => {\n    const cookieData = cookies.get(LAST_IMPORT_COOKIE_NAME);\n    if (cookieData) {\n      dispatch(updateSavingStatus(RequestStatus.SUCCESSFUL));\n      dispatch(updateImportTriggered(true));\n      dispatch(updateFileName(cookieData.fileName));\n      dispatch(updateSuccessDate(cookieData.date));\n    }\n  }, []);\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {intl.formatMessage(messages.pageTitle, {\n            headingTitle: intl.formatMessage(messages.headingTitle),\n            courseName: courseDetails?.name,\n            siteName: process.env.SITE_NAME,\n          })}\n        </title>\n      </Helmet>\n      <Container size=\"xl\" className=\"mt-4 px-4 import\">\n        <section className=\"setting-items mb-4\">\n          <Layout\n            lg={[{ span: 9 }, { span: 3 }]}\n            md={[{ span: 9 }, { span: 3 }]}\n            sm={[{ span: 9 }, { span: 3 }]}\n            xs={[{ span: 9 }, { span: 3 }]}\n            xl={[{ span: 9 }, { span: 3 }]}\n          >\n            <Layout.Element>\n              <article>\n                <SubHeader\n                  title={intl.formatMessage(messages.headingTitle)}\n                  subtitle={intl.formatMessage(messages.headingSubtitle)}\n                />\n                <p className=\"small\">{intl.formatMessage(messages.description1)}</p>\n                <p className=\"small\">{intl.formatMessage(messages.description2)}</p>\n                <p className=\"small\">{intl.formatMessage(messages.description3)}</p>\n                <FileSection courseId={courseId} />\n                {importTriggered && <ImportStepper courseId={courseId} />}\n              </article>\n            </Layout.Element>\n            <Layout.Element>\n              <ImportSidebar courseId={courseId} />\n            </Layout.Element>\n          </Layout>\n        </section>\n      </Container>\n      <div className=\"alert-toast\">\n        <InternetConnectionAlert\n          isFailed={anyRequestFailed}\n          isQueryPending={anyRequestInProgress}\n          onInternetConnectionFailed={() => null}\n        />\n      </div>\n    </>\n  );\n};\n\nCourseImportPage.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nCourseImportPage.defaultProps = {};\n\nexport default injectIntl(CourseImportPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Switch, useRouteMatch } from 'react-router';\nimport { PageRoute } from '@edx/frontend-platform/react';\nimport Placeholder from '@edx/frontend-lib-content-components';\nimport CourseAuthoringPage from './CourseAuthoringPage';\nimport { PagesAndResources } from './pages-and-resources';\nimport ProctoredExamSettings from './proctored-exam-settings/ProctoredExamSettings';\nimport EditorContainer from './editors/EditorContainer';\nimport VideoSelectorContainer from './selectors/VideoSelectorContainer';\nimport CustomPages from './custom-pages';\nimport FilesAndUploads from './files-and-uploads';\nimport { AdvancedSettings } from './advanced-settings';\nimport ScheduleAndDetails from './schedule-and-details';\nimport { GradingSettings } from './grading-settings';\nimport CourseTeam from './course-team/CourseTeam';\nimport { CourseUpdates } from './course-updates';\nimport CourseExportPage from './export-page/CourseExportPage';\nimport CourseImportPage from './import-page/CourseImportPage';\n\n/**\n * As of this writing, these routes are mounted at a path prefixed with the following:\n *\n * /course/:courseId\n *\n * Meaning that their absolute paths look like:\n *\n * /course/:courseId/course-pages\n * /course/:courseId/proctored-exam-settings\n * /course/:courseId/editor/:blockType/:blockId\n *\n * This component and CourseAuthoringPage should maybe be combined once we no longer need to have\n * CourseAuthoringPage split out for use in LegacyProctoringRoute.  Once that route is removed, we\n * can move the Header/Footer rendering to this component and likely pull the course detail loading\n * in as well, and it'd feel a bit better-factored and the roles would feel more clear.\n */\nconst CourseAuthoringRoutes = ({ courseId }) => {\n  const { path } = useRouteMatch();\n  return (\n    <CourseAuthoringPage courseId={courseId}>\n      <Switch>\n        <PageRoute path={`${path}/outline`}>\n          {process.env.ENABLE_NEW_COURSE_OUTLINE_PAGE === 'true'\n            && (\n              <Placeholder />\n            )}\n        </PageRoute>\n        <PageRoute path={`${path}/course_info`}>\n          <CourseUpdates courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/assets`}>\n          <FilesAndUploads courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/videos`}>\n          {process.env.ENABLE_NEW_VIDEO_UPLOAD_PAGE === 'true'\n            && (\n              <Placeholder />\n            )}\n        </PageRoute>\n        <PageRoute path={`${path}/pages-and-resources`}>\n          <PagesAndResources courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/proctored-exam-settings`}>\n          <ProctoredExamSettings courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/custom-pages`}>\n          <CustomPages courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/container/:blockId`}>\n          {process.env.ENABLE_UNIT_PAGE === 'true'\n            && (\n              <Placeholder />\n            )}\n        </PageRoute>\n        <PageRoute path={`${path}/editor/course-videos/:blockId`}>\n          {process.env.ENABLE_NEW_EDITOR_PAGES === 'true'\n            && (\n              <VideoSelectorContainer\n                courseId={courseId}\n              />\n            )}\n        </PageRoute>\n        <PageRoute path={`${path}/editor/:blockType/:blockId?`}>\n          {process.env.ENABLE_NEW_EDITOR_PAGES === 'true'\n            && (\n              <EditorContainer\n                courseId={courseId}\n              />\n            )}\n        </PageRoute>\n        <PageRoute path={`${path}/settings/details`}>\n          <ScheduleAndDetails courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/settings/grading`}>\n          <GradingSettings courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/course_team`}>\n          <CourseTeam courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/settings/advanced`}>\n          <AdvancedSettings courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/import`}>\n          <CourseImportPage courseId={courseId} />\n        </PageRoute>\n        <PageRoute path={`${path}/export`}>\n          <CourseExportPage courseId={courseId} />\n        </PageRoute>\n      </Switch>\n    </CourseAuthoringPage>\n  );\n};\n\nCourseAuthoringRoutes.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default CourseAuthoringRoutes;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  'course-authoring.page.title': {\n    id: 'course-authoring.page.title',\n    defaultMessage: 'Course Authoring | {siteName}',\n    description: 'Title tag',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport messages from './messages';\n\nconst Head = ({ intl }) => (\n  <Helmet>\n    <title>\n      {intl.formatMessage(messages['course-authoring.page.title'], { siteName: getConfig().SITE_NAME })}\n    </title>\n    <link rel=\"shortcut icon\" href={getConfig().FAVICON_URL} type=\"image/x-icon\" />\n  </Helmet>\n);\n\nHead.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(Head);\n","export const getStudioHomeData = state => state.studioHome.studioHomeData;\nexport const getLoadingStatuses = (state) => state.studioHome.loadingStatuses;\nexport const getSavingStatuses = (state) => state.studioHome.savingStatuses;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  aboutTitle: {\n    id: 'course-authoring.studio-home.sidebar.about.title',\n    defaultMessage: 'New to {studioName}?',\n  },\n  aboutDescription: {\n    id: 'course-authoring.studio-home.sidebar.about.description',\n    defaultMessage: 'Click \"Looking for help with Studio\" at the bottom of the page to access our continually updated documentation and other {studioShortName} resources.',\n  },\n  studioHomeLinkToGettingStarted: {\n    id: 'course-authoring.studio-home.sidebar.about.getting-started',\n    defaultMessage: 'Getting started with {studioName}',\n  },\n  sidebarHeader2: {\n    id: 'course-authoring.studio-home.sidebar.about.header-2',\n    defaultMessage: 'Can I create courses in {studioName}?',\n  },\n  sidebarDescription2: {\n    id: 'course-authoring.studio-home.sidebar.about.description-2',\n    defaultMessage: 'In order to create courses in {studioName}, you must {mailTo}',\n  },\n  sidebarDescription2MailTo: {\n    id: 'course-authoring.studio-home.sidebar.about.description-2.mail-to',\n    defaultMessage: 'contact {platformName} staff to help you create a course.',\n  },\n  sidebarHeader3: {\n    id: 'course-authoring.studio-home.sidebar.about.header-3',\n    defaultMessage: 'Can I create courses in {studioName}?',\n  },\n  sidebarDescription3: {\n    id: 'course-authoring.studio-home.sidebar.about.description-3',\n    defaultMessage: 'In order to create courses in {studioName}, you must have course creator privileges to create your own course.',\n  },\n  sidebarHeader4: {\n    id: 'course-authoring.studio-home.sidebar.about.header-4',\n    defaultMessage: 'Can I create courses in {studioName}?',\n  },\n  sidebarDescription4: {\n    id: 'course-authoring.studio-home.sidebar.about.description-4',\n    defaultMessage: 'Your request to author courses in {studioName} has been denied. Please {mailTo}.',\n  },\n  sidebarDescription4MailTo: {\n    id: 'course-authoring.studio-home.sidebar.about.description-4.mail-to',\n    defaultMessage: 'contact {platformName} staff with further questions',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { MailtoLink } from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { COURSE_CREATOR_STATES } from '../../constants';\nimport { useHelpUrls } from '../../help-urls/hooks';\nimport { HelpSidebar, HelpSidebarLink } from '../../generic/help-sidebar';\nimport { getStudioHomeData } from '../data/selectors';\nimport messages from './messages';\n\nconst HomeSidebar = () => {\n  const intl = useIntl();\n  const {\n    studioName,\n    platformName,\n    studioShortName,\n    studioRequestEmail,\n    techSupportEmail,\n    courseCreatorStatus,\n  } = useSelector(getStudioHomeData);\n  const { home: aboutHomeLink } = useHelpUrls(['home']);\n\n  // eslint-disable-next-line max-len\n  const isShowMailToGetInstruction = courseCreatorStatus === COURSE_CREATOR_STATES.disallowedForThisSite\n    && !!studioRequestEmail;\n  const isShowUnrequestedInstruction = courseCreatorStatus === COURSE_CREATOR_STATES.unrequested;\n  const isShowDeniedInstruction = courseCreatorStatus === COURSE_CREATOR_STATES.denied;\n\n  return (\n    <HelpSidebar>\n      <h4 className=\"help-sidebar-about-title\">\n        {intl.formatMessage(messages.aboutTitle, { studioName })}\n      </h4>\n      <p className=\"help-sidebar-about-descriptions\">\n        {intl.formatMessage(messages.aboutDescription, { studioShortName })}\n      </p>\n      <HelpSidebarLink\n        as=\"span\"\n        pathToPage={aboutHomeLink || ''}\n        title={intl.formatMessage(messages.studioHomeLinkToGettingStarted, { studioName })}\n      />\n      {isShowMailToGetInstruction && (\n        <>\n          <hr />\n          <h4 className=\"help-sidebar-about-title\">\n            {intl.formatMessage(messages.sidebarHeader2, { studioName })}\n          </h4>\n          <p className=\"help-sidebar-about-descriptions\">\n            {intl.formatMessage(messages.sidebarDescription2, {\n              studioName,\n              mailTo: (\n                <MailtoLink to={studioRequestEmail}>{\n                  intl.formatMessage(messages.sidebarDescription2MailTo, { platformName })\n                }\n                </MailtoLink>\n              ),\n            })}\n          </p>\n        </>\n      )}\n      {isShowUnrequestedInstruction && (\n        <>\n          <hr />\n          <h4 className=\"help-sidebar-about-title\">\n            {intl.formatMessage(messages.sidebarHeader3, { studioName })}\n          </h4>\n          <p className=\"help-sidebar-about-descriptions\">\n            {intl.formatMessage(messages.sidebarDescription3, { studioName })}\n          </p>\n        </>\n      )}\n      {isShowDeniedInstruction && (\n        <>\n          <hr />\n          <h4 className=\"help-sidebar-about-title\">\n            {intl.formatMessage(messages.sidebarHeader4, { studioName })}\n          </h4>\n          <p className=\"help-sidebar-about-descriptions\">\n            {intl.formatMessage(messages.sidebarDescription4, {\n              studioName,\n              mailTo: (\n                <MailtoLink to={techSupportEmail}>{\n                  intl.formatMessage(messages.sidebarDescription4MailTo, { platformName })\n                }\n                </MailtoLink>\n              ),\n            })}\n          </p>\n        </>\n      )}\n    </HelpSidebar>\n  );\n};\n\nexport default HomeSidebar;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headingTitle: {\n    id: 'course-authoring.studio-home.heading.title',\n    defaultMessage: '{studioShortName} home',\n  },\n  addNewCourseBtnText: {\n    id: 'course-authoring.studio-home.add-new-course.btn.text',\n    defaultMessage: 'New course',\n  },\n  addNewLibraryBtnText: {\n    id: 'course-authoring.studio-home.add-new-library.btn.text',\n    defaultMessage: 'New library',\n  },\n  emailStaffBtnText: {\n    id: 'course-authoring.studio-home.email-staff.btn.text',\n    defaultMessage: 'Email staff to create course',\n  },\n  coursesTabTitle: {\n    id: 'course-authoring.studio-home.courses.tab.title',\n    defaultMessage: 'Courses',\n  },\n  librariesTabTitle: {\n    id: 'course-authoring.studio-home.libraries.tab.title',\n    defaultMessage: 'Libraries',\n  },\n  archivedTabTitle: {\n    id: 'course-authoring.studio-home.archived.tab.title',\n    defaultMessage: 'Archived courses',\n  },\n  defaultSection_1_Title: {\n    id: 'course-authoring.studio-home.default-section-1.title',\n    defaultMessage: 'Are you staff on an existing {studioShortName} course?',\n  },\n  defaultSection_1_Description: {\n    id: 'course-authoring.studio-home.default-section-1.description',\n    defaultMessage: 'The course creator must give you access to the course. Contact the course creator or administrator for the course you are helping to author.',\n  },\n  defaultSection_2_Title: {\n    id: 'course-authoring.studio-home.default-section-2.title',\n    defaultMessage: 'Create your first course',\n  },\n  defaultSection_2_Description: {\n    id: 'course-authoring.studio-home.default-section-2.description',\n    defaultMessage: 'Your new course is just a click away!',\n  },\n  btnAddNewCourseText: {\n    id: 'course-authoring.studio-home.btn.add-new-course.text',\n    defaultMessage: 'Create your first course',\n  },\n  btnReRunText: {\n    id: 'course-authoring.studio-home.btn.re-run.text',\n    defaultMessage: 'Re-run course',\n  },\n  viewLiveBtnText: {\n    id: 'course-authoring.studio-home.btn.view-live.text',\n    defaultMessage: 'View live',\n  },\n  organizationTitle: {\n    id: 'course-authoring.studio-home.organization.title',\n    defaultMessage: 'Organization and library settings',\n  },\n  organizationLabel: {\n    id: 'course-authoring.studio-home.organization.label',\n    defaultMessage: 'Show all courses in organization:',\n  },\n  organizationSubmitBtnText: {\n    id: 'course-authoring.studio-home.organization.btn.submit.text',\n    defaultMessage: 'Submit',\n  },\n  organizationInputPlaceholder: {\n    id: 'course-authoring.studio-home.organization.input.placeholder',\n    defaultMessage: 'For example, MITx',\n  },\n  organizationInputNoOptions: {\n    id: 'course-authoring.studio-home.organization.input.no-options',\n    defaultMessage: 'No options',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ActionRow, Card, Hyperlink } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport { COURSE_CREATOR_STATES } from '../../constants';\nimport { getStudioHomeData } from '../data/selectors';\nimport messages from '../messages';\n\nconst CardItem = ({\n  intl, displayName, lmsLink, rerunLink, org, number, run, isLibraries, url,\n}) => {\n  const {\n    allowCourseReruns,\n    courseCreatorStatus,\n    rerunCreatorStatus,\n  } = useSelector(getStudioHomeData);\n  const courseUrl = new URL(url, getConfig().STUDIO_BASE_URL);\n  const subtitle = isLibraries ? `${org} / ${number}` : `${org} / ${number} / ${run}`;\n  const readOnlyItem = !(lmsLink || rerunLink || url);\n  const showActions = !(readOnlyItem || isLibraries);\n  const isShowRerunLink = allowCourseReruns\n    && rerunCreatorStatus\n    && courseCreatorStatus === COURSE_CREATOR_STATES.granted;\n\n  return (\n    <Card className=\"card-item\">\n      <Card.Header\n        size=\"sm\"\n        title={!readOnlyItem ? (\n          <Hyperlink\n            className=\"card-item-title\"\n            destination={courseUrl.toString()}\n          >\n            {displayName}\n          </Hyperlink>\n        ) : (\n          <span className=\"card-item-title\">{displayName}</span>\n        )}\n        subtitle={subtitle}\n        actions={showActions && (\n          <ActionRow>\n            {isShowRerunLink && (\n              <Hyperlink className=\"small\" destination={rerunLink}>\n                {intl.formatMessage(messages.btnReRunText)}\n              </Hyperlink>\n            )}\n            <Hyperlink className=\"small ml-3\" destination={lmsLink}>\n              {intl.formatMessage(messages.viewLiveBtnText)}\n            </Hyperlink>\n          </ActionRow>\n        )}\n      />\n    </Card>\n  );\n};\n\nCardItem.defaultProps = {\n  isLibraries: false,\n  rerunLink: '',\n  lmsLink: '',\n  run: '',\n};\n\nCardItem.propTypes = {\n  intl: intlShape.isRequired,\n  displayName: PropTypes.string.isRequired,\n  lmsLink: PropTypes.string,\n  rerunLink: PropTypes.string,\n  org: PropTypes.string.isRequired,\n  run: PropTypes.string,\n  number: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  isLibraries: PropTypes.bool,\n};\n\nexport default injectIntl(CardItem);\n","/**\n * Alphabetical sorting for arrays of courses and libraries.\n *\n * @param {array} arr - Array of courses or libraries.\n * @returns {array} - An array of alphabetically sorted courses or libraries.\n */\nconst sortAlphabeticallyArray = (arr) => [...arr]\n  .sort((firstArrayData, secondArrayData) => firstArrayData\n    .displayName.localeCompare(secondArrayData.displayName));\n\n// eslint-disable-next-line import/prefer-default-export\nexport { sortAlphabeticallyArray };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CardItem from '../../card-item';\nimport { sortAlphabeticallyArray } from '../utils';\n\nconst LibrariesTab = ({ libraries }) => (\n  <div className=\"courses-tab\">\n    {sortAlphabeticallyArray(libraries).map(({\n      displayName, org, number, url,\n    }) => (\n      <CardItem\n        key={number}\n        isLibraries\n        displayName={displayName}\n        org={org}\n        number={number}\n        url={url}\n      />\n    ))}\n  </div>\n);\n\nLibrariesTab.propTypes = {\n  libraries: PropTypes.arrayOf(\n    PropTypes.shape({\n      displayName: PropTypes.string.isRequired,\n      libraryKey: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      org: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default LibrariesTab;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CardItem from '../../card-item';\nimport { sortAlphabeticallyArray } from '../utils';\n\nconst ArchivedTab = ({ archivedCoursesData }) => (\n  <div className=\"courses-tab\">\n    {sortAlphabeticallyArray(archivedCoursesData).map(({\n      courseKey, displayName, lmsLink, org, rerunLink, number, run, url,\n    }) => (\n      <CardItem\n        key={courseKey}\n        displayName={displayName}\n        lmsLink={lmsLink}\n        rerunLink={rerunLink}\n        org={org}\n        number={number}\n        run={run}\n        url={url}\n      />\n    ))}\n  </div>\n);\n\nArchivedTab.propTypes = {\n  archivedCoursesData: PropTypes.arrayOf(\n    PropTypes.shape({\n      courseKey: PropTypes.string.isRequired,\n      displayName: PropTypes.string.isRequired,\n      lmsLink: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      org: PropTypes.string.isRequired,\n      rerunLink: PropTypes.string.isRequired,\n      run: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default ArchivedTab;\n","import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nconst getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getStudioHomeApiUrl = (search) => new URL(`api/contentstore/v1/home${search}`, getApiBaseUrl()).href;\nexport const getRequestCourseCreatorUrl = () => new URL('request_course_creator', getApiBaseUrl()).href;\nexport const getCourseNotificationUrl = (url) => new URL(url, getApiBaseUrl()).href;\n\n/**\n * Get's studio home data.\n * @param {string} search\n * @returns {Promise<Object>}\n */\nexport async function getStudioHomeData(search) {\n  const { data } = await getAuthenticatedHttpClient().get(getStudioHomeApiUrl(search));\n  return camelCaseObject(data);\n}\n\n/**\n * Handle course notification requests.\n * @param {string} url\n * @returns {Promise<Object>}\n*/\nexport async function handleCourseNotification(url) {\n  const { data } = await getAuthenticatedHttpClient().delete(getCourseNotificationUrl(url));\n  return camelCaseObject(data);\n}\n\n/**\n * Send user request to course creation access for studio home data.\n * @returns {Promise<Object>}\n */\nexport async function sendRequestForCourseCreator() {\n  const { data } = await getAuthenticatedHttpClient().post(getRequestCourseCreatorUrl());\n  return camelCaseObject(data);\n}\n","import { RequestStatus } from '../../data/constants';\nimport { getStudioHomeData, sendRequestForCourseCreator, handleCourseNotification } from './api';\nimport {\n  fetchStudioHomeDataSuccess,\n  updateLoadingStatuses,\n  updateSavingStatuses,\n} from './slice';\n\nfunction fetchStudioHomeData(search) {\n  return async (dispatch) => {\n    dispatch(updateLoadingStatuses({ studioHomeLoadingStatus: RequestStatus.IN_PROGRESS }));\n\n    try {\n      const studioHomeData = await getStudioHomeData(search || '');\n      dispatch(fetchStudioHomeDataSuccess(studioHomeData));\n      dispatch(updateLoadingStatuses({ studioHomeLoadingStatus: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateLoadingStatuses({ studioHomeLoadingStatus: RequestStatus.FAILED }));\n    }\n  };\n}\n\nfunction handleDeleteNotificationQuery(url) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatuses({ deleteNotificationSavingStatus: RequestStatus.PENDING }));\n\n    try {\n      await handleCourseNotification(url);\n      dispatch(updateSavingStatuses({ deleteNotificationSavingStatus: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateSavingStatuses({ deleteNotificationSavingStatus: RequestStatus.FAILED }));\n    }\n  };\n}\n\nfunction requestCourseCreatorQuery() {\n  return async (dispatch) => {\n    dispatch(updateSavingStatuses({ courseCreatorSavingStatus: RequestStatus.PENDING }));\n\n    try {\n      await sendRequestForCourseCreator();\n      dispatch(updateSavingStatuses({ courseCreatorSavingStatus: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateSavingStatuses({ courseCreatorSavingStatus: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n\nexport {\n  fetchStudioHomeData,\n  requestCourseCreatorQuery,\n  handleDeleteNotificationQuery,\n};\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  deniedCollapsibleTitle: {\n    id: 'course-authoring.studio-home.collapsible.denied.title',\n    defaultMessage: 'Your course creator request status',\n  },\n  deniedCollapsibleDescription: {\n    id: 'course-authoring.studio-home.collapsible.denied.description',\n    defaultMessage: '{studioName} is a hosted solution for our xConsortium partners and selected guests. Courses for which you are a team member appear above for you to edit, while course creator privileges are granted by {platformName}. Our team has completed evaluating your request.',\n  },\n  deniedCollapsibleActionTitle: {\n    id: 'course-authoring.studio-home.collapsible.denied.action.title',\n    defaultMessage: 'Your course creator request status:',\n  },\n  deniedCollapsibleState: {\n    id: 'course-authoring.studio-home.collapsible.denied.state',\n    defaultMessage: 'Denied',\n  },\n  deniedCollapsibleActionText: {\n    id: 'course-authoring.studio-home.collapsible.denied.action.text',\n    defaultMessage: 'Your request did not meet the criteria/guidelines specified by {platformName} Staff.',\n  },\n  pendingCollapsibleTitle: {\n    id: 'course-authoring.studio-home.collapsible.pending.title',\n    defaultMessage: 'Your course creator request status',\n  },\n  pendingCollapsibleDescription: {\n    id: 'course-authoring.studio-home.collapsible.pending.description',\n    defaultMessage: '{studioName} is a hosted solution for our xConsortium partners and selected guests. Courses for which you are a team member appear above for you to edit, while course creator privileges are granted by {platformName}. Our team is currently evaluating your request.',\n  },\n  pendingCollapsibleActionTitle: {\n    id: 'course-authoring.studio-home.collapsible.pending.action.title',\n    defaultMessage: 'Your course creator request status:',\n  },\n  pendingCollapsibleState: {\n    id: 'course-authoring.studio-home.collapsible.pending.state',\n    defaultMessage: 'Pending',\n  },\n  pendingCollapsibleActionText: {\n    id: 'course-authoring.studio-home.collapsible.pending.action.text',\n    defaultMessage: 'Your request is currently being reviewed by {platformName} staff and should be updated shortly.',\n  },\n  unrequestedCollapsibleTitle: {\n    id: 'course-authoring.studio-home.collapsible.unrequested.title',\n    defaultMessage: 'Becoming a course creator in {studioShortName}',\n  },\n  unrequestedCollapsibleDescription: {\n    id: 'course-authoring.studio-home.collapsible.unrequested.description',\n    defaultMessage: '{studioName} is a hosted solution for our xConsortium partners and selected guests. Courses for which you are a team member appear above for you to edit, while course creator privileges are granted by {platformName}. Our team will evaluate your request and provide you feedback within 24 hours during the work week.',\n  },\n  unrequestedCollapsibleDefaultButton: {\n    id: 'course-authoring.studio-home.collapsible.unrequested.button.default',\n    defaultMessage: 'Request the ability to create courses',\n  },\n  unrequestedCollapsiblePendingButton: {\n    id: 'course-authoring.studio-home.collapsible.unrequested.button.pending',\n    defaultMessage: 'Submitting your request',\n  },\n  unrequestedCollapsibleFailedButton: {\n    id: 'course-authoring.studio-home.collapsible.unrequested.button.failed',\n    defaultMessage: 'Sorry, there was error with your request',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport {\n  Collapsible,\n  Bubble,\n  Icon,\n  StatefulButton,\n} from '@edx/paragon';\nimport {\n  Add as AddIcon,\n  Minus as MinusIcon,\n} from '@edx/paragon/icons/es5';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { RequestStatus } from '../../data/constants';\nimport { COURSE_CREATOR_STATES, STATEFUL_BUTTON_STATES } from '../../constants';\nimport { getStudioHomeData, getSavingStatuses } from '../data/selectors';\nimport { requestCourseCreatorQuery } from '../data/thunks';\nimport messages from './messages';\n\nconst CollapsibleStateWithAction = ({ state, className }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const {\n    platformName,\n    studioName,\n    studioShortName,\n  } = useSelector(getStudioHomeData);\n  const { courseCreatorSavingStatus } = useSelector(getSavingStatuses);\n\n  const requestButtonStates = {\n    labels: {\n      default: intl.formatMessage(messages.unrequestedCollapsibleDefaultButton),\n      pending: intl.formatMessage(messages.unrequestedCollapsiblePendingButton),\n      error: intl.formatMessage(messages.unrequestedCollapsibleFailedButton),\n    },\n    disabledStates: [STATEFUL_BUTTON_STATES.pending, STATEFUL_BUTTON_STATES.error],\n  };\n\n  const statusButtonMap = {\n    [RequestStatus.PENDING]: STATEFUL_BUTTON_STATES.pending,\n    [RequestStatus.FAILED]: STATEFUL_BUTTON_STATES.error,\n  };\n\n  const requestButtonCurrentState = statusButtonMap[courseCreatorSavingStatus] || STATEFUL_BUTTON_STATES.default;\n\n  function getTextForStatus() {\n    const matchTextAction = {\n      [COURSE_CREATOR_STATES.denied]: {\n        title: intl.formatMessage(messages.deniedCollapsibleTitle),\n        description: intl.formatMessage(messages.deniedCollapsibleDescription, {\n          studioName,\n          platformName,\n        }),\n        stateName: intl.formatMessage(messages.deniedCollapsibleState),\n        actionTitle: intl.formatMessage(messages.deniedCollapsibleActionTitle),\n        actionText: intl.formatMessage(messages.deniedCollapsibleActionText, {\n          platformName,\n        }),\n      },\n      [COURSE_CREATOR_STATES.unrequested]: {\n        title: intl.formatMessage(messages.unrequestedCollapsibleTitle, {\n          studioShortName,\n        }),\n        description: intl.formatMessage(\n          messages.unrequestedCollapsibleDescription,\n          { studioName, platformName },\n        ),\n      },\n      [COURSE_CREATOR_STATES.pending]: {\n        title: intl.formatMessage(messages.pendingCollapsibleTitle),\n        description: intl.formatMessage(\n          messages.pendingCollapsibleDescription,\n          { studioName, platformName },\n        ),\n        stateName: intl.formatMessage(messages.pendingCollapsibleState),\n        actionTitle: intl.formatMessage(messages.pendingCollapsibleActionTitle),\n        actionText: intl.formatMessage(messages.pendingCollapsibleActionText, {\n          platformName,\n        }),\n      },\n    };\n\n    return matchTextAction[state];\n  }\n\n  const {\n    title,\n    stateName,\n    actionText,\n    description,\n    actionTitle,\n  } = getTextForStatus();\n\n  return (\n    <Collapsible.Advanced\n      className={classNames('collapsible-card rounded-sm', className)}\n      defaultOpen={[COURSE_CREATOR_STATES.denied, COURSE_CREATOR_STATES.pending].includes(state)}\n    >\n      <Collapsible.Trigger className=\"collapsible-trigger d-flex py-2.5 px-3.5 bg-gray-700\">\n        <span className=\"flex-grow-1 text-white small\">{title}</span>\n        <Collapsible.Visible whenClosed>\n          <Bubble className=\"bg-light-700\">\n            <Icon\n              src={AddIcon}\n              className=\"text-gray-700\"\n              size=\"xs\"\n            />\n          </Bubble>\n        </Collapsible.Visible>\n        <Collapsible.Visible whenOpen>\n          <Bubble className=\"bg-light-700\">\n            <Icon\n              src={MinusIcon}\n              className=\"text-gray-700\"\n              size=\"xs\"\n            />\n          </Bubble>\n        </Collapsible.Visible>\n      </Collapsible.Trigger>\n\n      <Collapsible.Body className=\"collapsible-body bg-light-white py-3 px-3.5\">\n        <p className=\"small text-gray-700\">{description}</p>\n        <h5 className=\"text-gray-700\">{actionTitle}</h5>\n        {[COURSE_CREATOR_STATES.denied, COURSE_CREATOR_STATES.pending].includes(state) ? (\n          <div\n            className={classNames('py-1 px-2.5 rounded-sm', {\n              'bg-danger-100': state === COURSE_CREATOR_STATES.denied,\n              'bg-warning-100': state === COURSE_CREATOR_STATES.pending,\n            })}\n          >\n            <span className=\"d-inline-block text-black font-weight-bold m-2.5\">\n              {stateName}\n            </span>\n            <span className=\"text-gray-700 small\">{actionText}</span>\n          </div>\n        ) : (\n          <StatefulButton\n            key=\"request-button\"\n            size=\"sm\"\n            onClick={() => dispatch(requestCourseCreatorQuery())}\n            state={requestButtonCurrentState}\n            {...requestButtonStates}\n          />\n        )}\n      </Collapsible.Body>\n    </Collapsible.Advanced>\n  );\n};\n\nCollapsibleStateWithAction.defaultProps = {\n  className: undefined,\n};\n\nCollapsibleStateWithAction.propTypes = {\n  state: PropTypes.oneOf(Object.values(COURSE_CREATOR_STATES)).isRequired,\n  className: PropTypes.string,\n};\n\nexport default CollapsibleStateWithAction;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button, Card } from '@edx/paragon';\nimport { Add as AddIcon } from '@edx/paragon/icons/es5';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { getStudioHomeData } from '../../../data/selectors';\nimport messages from '../../../messages';\n\nconst ContactAdministrator = ({\n  intl, hasAbilityToCreateCourse, showNewCourseContainer, onClickNewCourse,\n}) => {\n  const { studioShortName } = useSelector(getStudioHomeData);\n\n  return (\n    <Card variant=\"muted\">\n      <Card.Section\n        title={intl.formatMessage(messages.defaultSection_1_Title, { studioShortName })}\n        className=\"small\"\n      >\n        {intl.formatMessage(messages.defaultSection_1_Description)}\n      </Card.Section>\n      {hasAbilityToCreateCourse && (\n        <>\n          <Card.Divider />\n          <Card.Section\n            className=\"small\"\n            title={intl.formatMessage(messages.defaultSection_2_Title)}\n            actions={(\n              <Button\n                iconBefore={AddIcon}\n                variant=\"outline-primary\"\n                data-testid=\"contact-admin-create-course\"\n                disabled={!hasAbilityToCreateCourse || showNewCourseContainer}\n                onClick={onClickNewCourse}\n              >\n                {intl.formatMessage(messages.btnAddNewCourseText)}\n              </Button>\n            )}\n          >\n            {intl.formatMessage(messages.defaultSection_2_Description)}\n          </Card.Section>\n        </>\n      )}\n    </Card>\n  );\n};\n\nContactAdministrator.defaultProps = {\n  hasAbilityToCreateCourse: false,\n};\n\nContactAdministrator.propTypes = {\n  intl: intlShape.isRequired,\n  hasAbilityToCreateCourse: PropTypes.bool,\n  showNewCourseContainer: PropTypes.bool.isRequired,\n  onClickNewCourse: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(ContactAdministrator);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  itemInProgressFooterText: {\n    id: 'course-authoring.studio-home.processing.course-item.footer.in-progress',\n    defaultMessage: 'The new course will be added to your course list in 5-10 minutes. Return to this page or {refresh} to update the course list. The new course will need some manual configuration.',\n  },\n  itemInProgressFooterHyperlink: {\n    id: 'course-authoring.studio-home.processing.course-item.footer.in-progress.hyperlink',\n    defaultMessage: 'refresh it',\n  },\n  itemInProgressActionText: {\n    id: 'course-authoring.studio-home.processing.course-item.action.in-progress',\n    defaultMessage: 'Configuring as re-run',\n  },\n  itemIsFailedActionText: {\n    id: 'course-authoring.studio-home.processing.course-item.action.failed',\n    defaultMessage: 'Configuration error',\n  },\n  itemFailedFooterText: {\n    id: 'course-authoring.studio-home.processing.course-item.footer.failed',\n    defaultMessage: 'A system error occurred while your course was being processed. Please go to the original course to try the re-run again, or contact your PM for assistance.',\n  },\n  itemFailedFooterButton: {\n    id: 'course-authoring.studio-home.processing.course-item.footer.failed.button',\n    defaultMessage: 'Dismiss',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  ActionRow,\n  Card,\n  Hyperlink,\n  Button,\n  Icon,\n} from '@edx/paragon';\nimport {\n  Close as CloseIcon,\n  Warning as WarningIcon,\n  RotateRight as RotateRightIcon,\n} from '@edx/paragon/icons';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { handleDeleteNotificationQuery } from '../../data/thunks';\nimport messages from './messages';\n\nconst CourseItem = ({ course }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const {\n    displayName, org, number, run, isInProgress, isFailed, dismissLink,\n  } = course;\n  const subtitle = `${org} / ${number} / ${run}`;\n\n  return (\n    <div data-testid=\"course-item\">\n      {isInProgress && (\n        <Card className=\"card-item\">\n          <Card.Header\n            size=\"sm\"\n            title={<p className=\"card-item-title\">{displayName}</p>}\n            subtitle={subtitle}\n            actions={(\n              <ActionRow>\n                <Icon src={RotateRightIcon} className=\"spinner-icon\" />\n                <ActionRow.Spacer />\n                <span className=\"small\">{intl.formatMessage(messages.itemInProgressActionText)}</span>\n              </ActionRow>\n            )}\n          />\n          <Card.Divider />\n          <Card.Section className=\"p-3.5 small text-gray-700 bg-light-200\">\n            {intl.formatMessage(messages.itemInProgressFooterText, {\n              refresh: (\n                <Hyperlink destination=\"/home\">\n                  {intl.formatMessage(messages.itemInProgressFooterHyperlink)}\n                </Hyperlink>\n              ),\n            })}\n          </Card.Section>\n        </Card>\n      )}\n\n      {isFailed && (\n        <Card className=\"card-item\">\n          <Card.Header\n            size=\"sm\"\n            title={<p className=\"card-item-title\">{displayName}</p>}\n            subtitle={subtitle}\n            actions={(\n              <ActionRow>\n                <Icon src={WarningIcon} className=\"text-danger-500\" />\n                <span className=\"small\">{intl.formatMessage(messages.itemIsFailedActionText)}</span>\n              </ActionRow>\n            )}\n          />\n          <Card.Divider />\n          <Card.Footer className=\"p-3.5 small text-gray-700 bg-danger-100 align-content-between\">\n            <span className=\"w-75 mr-auto\">{intl.formatMessage(messages.itemFailedFooterText)}</span>\n            <Button\n              onClick={() => dispatch(handleDeleteNotificationQuery(dismissLink))}\n              iconBefore={CloseIcon}\n              variant=\"tertiary\"\n              size=\"sm\"\n            >\n              {intl.formatMessage(messages.itemFailedFooterButton)}\n            </Button>\n          </Card.Footer>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nCourseItem.propTypes = {\n  course: PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    courseKey: PropTypes.string.isRequired,\n    org: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    run: PropTypes.string.isRequired,\n    isFailed: PropTypes.bool.isRequired,\n    isInProgress: PropTypes.bool.isRequired,\n    dismissLink: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default CourseItem;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  processingTitle: {\n    id: 'course-authoring.studio-home.processing.title',\n    defaultMessage: 'Courses being processed',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Stack } from '@edx/paragon';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { getStudioHomeData } from '../data/selectors';\nimport CourseItem from './course-item';\nimport messages from './messages';\n\nconst ProcessingCourses = () => {\n  const intl = useIntl();\n  const { inProcessCourseActions } = useSelector(getStudioHomeData);\n\n  return (\n    <>\n      <div className=\"text-gray-500 small\">\n        {intl.formatMessage(messages.processingTitle)}\n      </div>\n      <hr />\n      <Stack gap={3} className=\"border-bottom border-light-400 mb-4 px-4 pt-3\">\n        {inProcessCourseActions.map((course) => (\n          <CourseItem\n            course={course}\n            key={course.courseKey}\n          />\n        ))}\n      </Stack>\n    </>\n  );\n};\n\nexport default ProcessingCourses;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { COURSE_CREATOR_STATES } from '../../../constants';\nimport { getStudioHomeData } from '../../data/selectors';\nimport CardItem from '../../card-item';\nimport CollapsibleStateWithAction from '../../collapsible-state-with-action';\nimport { sortAlphabeticallyArray } from '../utils';\nimport ContactAdministrator from './contact-administrator';\nimport ProcessingCourses from '../../processing-courses';\n\nconst CoursesTab = ({\n  coursesDataItems,\n  showNewCourseContainer,\n  onClickNewCourse,\n  isShowProcessing,\n}) => {\n  const {\n    courseCreatorStatus,\n    optimizationEnabled,\n  } = useSelector(getStudioHomeData);\n  const hasAbilityToCreateCourse = courseCreatorStatus === COURSE_CREATOR_STATES.granted;\n  const showCollapsible = [\n    COURSE_CREATOR_STATES.denied,\n    COURSE_CREATOR_STATES.pending,\n    COURSE_CREATOR_STATES.unrequested,\n  ].includes(courseCreatorStatus);\n\n  return (\n    <>\n      {isShowProcessing && <ProcessingCourses />}\n      {coursesDataItems?.length ? (\n        sortAlphabeticallyArray(coursesDataItems).map(\n          ({\n            courseKey,\n            displayName,\n            lmsLink,\n            org,\n            rerunLink,\n            number,\n            run,\n            url,\n          }) => (\n            <CardItem\n              key={courseKey}\n              displayName={displayName}\n              lmsLink={lmsLink}\n              rerunLink={rerunLink}\n              org={org}\n              number={number}\n              run={run}\n              url={url}\n            />\n          ),\n        )\n      ) : (!optimizationEnabled && (\n        <ContactAdministrator\n          hasAbilityToCreateCourse={hasAbilityToCreateCourse}\n          showNewCourseContainer={showNewCourseContainer}\n          onClickNewCourse={onClickNewCourse}\n        />\n      )\n      )}\n      {showCollapsible && (\n        <CollapsibleStateWithAction\n          state={courseCreatorStatus}\n          className=\"mt-3\"\n        />\n      )}\n    </>\n  );\n};\n\nCoursesTab.propTypes = {\n  coursesDataItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      courseKey: PropTypes.string.isRequired,\n      displayName: PropTypes.string.isRequired,\n      lmsLink: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      org: PropTypes.string.isRequired,\n      rerunLink: PropTypes.string.isRequired,\n      run: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  showNewCourseContainer: PropTypes.bool.isRequired,\n  onClickNewCourse: PropTypes.func.isRequired,\n  isShowProcessing: PropTypes.bool.isRequired,\n};\n\nexport default CoursesTab;\n","import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Tab, Tabs } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { getStudioHomeData } from '../data/selectors';\nimport messages from '../messages';\nimport LibrariesTab from './libraries-tab';\nimport ArchivedTab from './archived-tab';\nimport CoursesTab from './courses-tab';\n\nconst TabsSection = ({\n  intl, tabsData, showNewCourseContainer, onClickNewCourse, isShowProcessing,\n}) => {\n  const TABS_LIST = {\n    courses: 'courses',\n    libraries: 'libraries',\n    archived: 'archived',\n  };\n  const {\n    libraryAuthoringMfeUrl,\n    redirectToLibraryAuthoringMfe,\n  } = useSelector(getStudioHomeData);\n  const {\n    activeTab, courses, librariesEnabled, libraries, archivedCourses,\n  } = tabsData;\n\n  // Controlling the visibility of tabs when using conditional rendering is necessary for\n  // the correct operation of iterating over child elements inside the Paragon Tabs component.\n  const visibleTabs = useMemo(() => {\n    const tabs = [];\n    tabs.push(\n      <Tab\n        key={TABS_LIST.courses}\n        eventKey={TABS_LIST.courses}\n        title={intl.formatMessage(messages.coursesTabTitle)}\n      >\n        <CoursesTab\n          coursesDataItems={courses}\n          showNewCourseContainer={showNewCourseContainer}\n          onClickNewCourse={onClickNewCourse}\n          isShowProcessing={isShowProcessing}\n        />\n      </Tab>,\n    );\n\n    if (archivedCourses?.length) {\n      tabs.push(\n        <Tab\n          key={TABS_LIST.archived}\n          eventKey={TABS_LIST.archived}\n          title={intl.formatMessage(messages.archivedTabTitle)}\n        >\n          <ArchivedTab archivedCoursesData={archivedCourses} />\n        </Tab>,\n      );\n    }\n\n    if (librariesEnabled) {\n      tabs.push(\n        <Tab\n          key={TABS_LIST.libraries}\n          eventKey={TABS_LIST.libraries}\n          title={intl.formatMessage(messages.librariesTabTitle)}\n        >\n          {!redirectToLibraryAuthoringMfe && <LibrariesTab libraries={libraries} />}\n        </Tab>,\n      );\n    }\n\n    return tabs;\n  }, [archivedCourses, librariesEnabled, showNewCourseContainer]);\n\n  const handleSelectTab = (tab) => {\n    if (tab === TABS_LIST.libraries && redirectToLibraryAuthoringMfe) {\n      window.location.assign(libraryAuthoringMfeUrl);\n    }\n  };\n\n  return (\n    <Tabs\n      className=\"studio-home-tabs\"\n      variant=\"tabs\"\n      defaultActiveKey={activeTab}\n      onSelect={handleSelectTab}\n    >\n      {visibleTabs}\n    </Tabs>\n  );\n};\n\nconst courseDataStructure = {\n  courseKey: PropTypes.string.isRequired,\n  displayName: PropTypes.string.isRequired,\n  lmsLink: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  org: PropTypes.string.isRequired,\n  rerunLink: PropTypes.string.isRequired,\n  run: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nTabsSection.propTypes = {\n  intl: intlShape.isRequired,\n  tabsData: PropTypes.shape({\n    activeTab: PropTypes.string.isRequired,\n    archivedCourses: PropTypes.arrayOf(\n      PropTypes.shape(courseDataStructure),\n    ).isRequired,\n    courses: PropTypes.arrayOf(\n      PropTypes.shape(courseDataStructure),\n    ).isRequired,\n    libraries: PropTypes.arrayOf(\n      PropTypes.shape({\n        displayName: PropTypes.string.isRequired,\n        libraryKey: PropTypes.string.isRequired,\n        url: PropTypes.string.isRequired,\n        org: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }),\n    ).isRequired,\n    librariesEnabled: PropTypes.bool.isRequired,\n  }).isRequired,\n  showNewCourseContainer: PropTypes.bool.isRequired,\n  onClickNewCourse: PropTypes.func.isRequired,\n  isShowProcessing: PropTypes.bool.isRequired,\n};\n\nexport default injectIntl(TabsSection);\n","export const getLoadingStatuses = (state) => state.generic.loadingStatuses;\nexport const getSavingStatus = (state) => state.generic.savingStatus;\nexport const getOrganizations = (state) => state.generic.organizations;\nexport const getCourseData = (state) => state.generic.createOrRerunCourse.courseData;\nexport const getCourseRerunData = (state) => state.generic.createOrRerunCourse.courseRerunData;\nexport const getRedirectUrlObj = (state) => state.generic.createOrRerunCourse.redirectUrlObj;\nexport const getPostErrors = (state) => state.generic.createOrRerunCourse.postErrors;\n","import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport { convertObjectToSnakeCase } from '../../utils';\n\nexport const getApiBaseUrl = () => getConfig().STUDIO_BASE_URL;\nexport const getCreateOrRerunCourseUrl = () => new URL('course/', getApiBaseUrl()).href;\nexport const getCourseRerunUrl = (courseId) => new URL(`/api/contentstore/v1/course_rerun/${courseId}`, getApiBaseUrl()).href;\nexport const getOrganizationsUrl = () => new URL('organizations', getApiBaseUrl()).href;\n\n/**\n * Get's organizations data.\n * @returns {Promise<Object>}\n */\nexport async function getOrganizations() {\n  const { data } = await getAuthenticatedHttpClient().get(\n    getOrganizationsUrl(),\n  );\n  return camelCaseObject(data);\n}\n\n/**\n * Get's course rerun data.\n * @returns {Promise<Object>}\n */\nexport async function getCourseRerun(courseId) {\n  const { data } = await getAuthenticatedHttpClient().get(\n    getCourseRerunUrl(courseId),\n  );\n  return camelCaseObject(data);\n}\n\n/**\n * Create or rerun course with data.\n * @param {object} data\n * @returns {Promise<Object>}\n */\nexport async function createOrRerunCourse(courseData) {\n  const { data } = await getAuthenticatedHttpClient().post(\n    getCreateOrRerunCourseUrl(),\n    convertObjectToSnakeCase(courseData, true),\n  );\n  return camelCaseObject(data);\n}\n","import { RequestStatus } from '../../data/constants';\nimport { createOrRerunCourse, getOrganizations, getCourseRerun } from './api';\nimport {\n  fetchOrganizations,\n  updatePostErrors,\n  updateLoadingStatuses,\n  updateRedirectUrlObj,\n  updateCourseRerunData,\n  updateSavingStatus,\n} from './slice';\n\nexport function fetchOrganizationsQuery() {\n  return async (dispatch) => {\n    try {\n      const organizations = await getOrganizations();\n      dispatch(fetchOrganizations(organizations));\n      dispatch(updateLoadingStatuses({ organizationLoadingStatus: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateLoadingStatuses({ organizationLoadingStatus: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function fetchCourseRerunQuery(courseId) {\n  return async (dispatch) => {\n    try {\n      const courseRerun = await getCourseRerun(courseId);\n      dispatch(updateCourseRerunData(courseRerun));\n      dispatch(updateLoadingStatuses({ courseRerunLoadingStatus: RequestStatus.SUCCESSFUL }));\n    } catch (error) {\n      dispatch(updateLoadingStatuses({ courseRerunLoadingStatus: RequestStatus.FAILED }));\n    }\n  };\n}\n\nexport function updateCreateOrRerunCourseQuery(courseData) {\n  return async (dispatch) => {\n    dispatch(updateSavingStatus({ status: RequestStatus.PENDING }));\n\n    try {\n      const response = await createOrRerunCourse(courseData);\n      dispatch(updateRedirectUrlObj('url' in response ? response : {}));\n      dispatch(updatePostErrors('errMsg' in response ? response : {}));\n      dispatch(updateSavingStatus({ status: RequestStatus.SUCCESSFUL }));\n      return true;\n    } catch (error) {\n      dispatch(updateSavingStatus({ status: RequestStatus.FAILED }));\n      return false;\n    }\n  };\n}\n","import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport { history } from '@edx/frontend-platform';\nimport { Button, Form, FormLabel } from '@edx/paragon';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { TypeaheadDropdown } from '@edx/frontend-lib-content-components';\n\nimport { getOrganizations } from '../../generic/data/selectors';\nimport { fetchOrganizationsQuery } from '../../generic/data/thunks';\nimport messages from '../messages';\n\nconst OrganizationSection = ({ intl }) => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const fieldName = 'org';\n  const searchParams = new URLSearchParams(location.search);\n  const orgURLValue = searchParams.get(fieldName) || '';\n  const [inputValue, setInputValue] = useState('');\n  const organizations = useSelector(getOrganizations);\n\n  useEffect(() => {\n    if (isEmpty(organizations)) {\n      dispatch(fetchOrganizationsQuery());\n    }\n  }, []);\n\n  // We have to set value only after the list of organizations to be received to display the initial state correctly.\n  useEffect(() => {\n    if (organizations.length) {\n      setInputValue(orgURLValue);\n    }\n  }, [orgURLValue, organizations]);\n\n  const handleSubmit = () => {\n    history.push({\n      pathname: '/home',\n      search: `?${fieldName}=${inputValue}`,\n    });\n  };\n\n  return (\n    <div className=\"organization-section\">\n      <h3 className=\"organization-section-title\">\n        {intl.formatMessage(messages.organizationTitle)}\n      </h3>\n      <Form.Group className=\"organization-section-form d-flex align-items-baseline\">\n        <FormLabel isInline className=\"organization-section-form-label\">\n          {intl.formatMessage(messages.organizationLabel)}\n        </FormLabel>\n        <TypeaheadDropdown\n          readOnly={false}\n          name=\"organizationSearch\"\n          value={inputValue}\n          options={organizations}\n          placeholder={intl.formatMessage(messages.organizationInputPlaceholder)}\n          handleBlur={(e) => setInputValue(e.target.value)}\n          handleChange={(value) => setInputValue(value)}\n          noOptionsMessage={intl.formatMessage(messages.organizationInputNoOptions)}\n          helpMessage=\"\"\n          errorMessage=\"\"\n          floatingLabel=\"\"\n        />\n      </Form.Group>\n      <Button onClick={handleSubmit}>\n        {intl.formatMessage(messages.organizationSubmitBtnText)}\n      </Button>\n    </div>\n  );\n};\n\nOrganizationSection.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(OrganizationSection);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  headingTitle: {\n    id: 'course-authoring.studio-home.verify-email.heading',\n    defaultMessage: 'Thanks for signing up, {username}!',\n  },\n  bannerTitle: {\n    id: 'course-authoring.studio-home.verify-email.banner.title',\n    defaultMessage: 'We need to verify your email address',\n  },\n  bannerDescription: {\n    id: 'course-authoring.studio-home.verify-email.banner.description',\n    defaultMessage: 'Almost there! In order to complete your sign up we need you to verify your email address ({email}). An activation message and next steps should be waiting for you there.',\n  },\n  sidebarTitle: {\n    id: 'course-authoring.studio-home.verify-email.sidebar.title',\n    defaultMessage: 'Need help?',\n  },\n  sidebarDescription: {\n    id: 'course-authoring.studio-home.verify-email.sidebar.description',\n    defaultMessage: 'Please check your Junk or Spam folders in case our email isn\\'t in your INBOX. Still can\\'t find the verification email? Request help via the link below.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { Layout, Card } from '@edx/paragon';\nimport { getAuthenticatedUser } from '@edx/frontend-platform/auth';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { HelpSidebar } from '../../generic/help-sidebar';\nimport messages from './messages';\n\nconst VerifyEmailLayout = () => {\n  const intl = useIntl();\n  const { email, username } = getAuthenticatedUser();\n\n  return (\n    <Layout\n      lg={[{ span: 9 }, { span: 3 }]}\n      md={[{ span: 9 }, { span: 3 }]}\n      sm={[{ span: 9 }, { span: 3 }]}\n      xs={[{ span: 9 }, { span: 3 }]}\n      xl={[{ span: 9 }, { span: 3 }]}\n    >\n      <Layout.Element>\n        <section>\n          <h3>{intl.formatMessage(messages.headingTitle, { username })}</h3>\n          <Card variant=\"muted\">\n            <Card.Section\n              title={intl.formatMessage(messages.bannerTitle)}\n              className=\"small\"\n            >\n              {intl.formatMessage(messages.bannerDescription, { email })}\n            </Card.Section>\n          </Card>\n        </section>\n      </Layout.Element>\n      <Layout.Element>\n        <HelpSidebar>\n          <h4 className=\"help-sidebar-about-title\">\n            {intl.formatMessage(messages.sidebarTitle)}\n          </h4>\n          <p className=\"help-sidebar-about-descriptions\">\n            {intl.formatMessage(messages.sidebarDescription)}\n          </p>\n        </HelpSidebar>\n      </Layout.Element>\n    </Layout>\n  );\n};\n\nexport default VerifyEmailLayout;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  courseDisplayNameLabel: {\n    id: 'course-authoring.create-or-rerun-course.display-name.label',\n    defaultMessage: 'Course name',\n  },\n  courseDisplayNamePlaceholder: {\n    id: 'course-authoring.create-or-rerun-course.display-name.placeholder',\n    defaultMessage: 'e.g. Introduction to Computer Science',\n  },\n  courseDisplayNameCreateHelpText: {\n    id: 'course-authoring.create-or-rerun-course.create.display-name.help-text',\n    defaultMessage: 'The public display name for your course. This cannot be changed, but you can set a different display name in advanced settings later.',\n  },\n  courseDisplayNameRerunHelpText: {\n    id: 'course-authoring.create-or-rerun-course.rerun.display-name.help-text',\n    defaultMessage: 'The public display name for the new course. (This name is often the same as the original course name.)',\n  },\n  courseOrgLabel: {\n    id: 'course-authoring.create-or-rerun-course.org.label',\n    defaultMessage: 'Organization',\n  },\n  courseOrgPlaceholder: {\n    id: 'course-authoring.create-or-rerun-course.org.placeholder',\n    defaultMessage: 'e.g. UniversityX or OrganizationX',\n  },\n  courseOrgNoOptions: {\n    id: 'course-authoring.create-or-rerun-course.org.no-options',\n    defaultMessage: 'No options',\n  },\n  courseOrgCreateHelpText: {\n    id: 'course-authoring.create-or-rerun-course.create.org.help-text',\n    defaultMessage: 'The name of the organization sponsoring the course. {strong} This cannot be changed, but you can set a different display name in advanced settings later.',\n  },\n  courseOrgRerunHelpText: {\n    id: 'course-authoring.create-or-rerun-course.rerun.org.help-text',\n    defaultMessage: 'The name of the organization sponsoring the new course. (This name is often the same as the original organization name.) {strong}',\n  },\n  courseNoteNoSpaceAllowedStrong: {\n    id: 'course-authoring.create-or-rerun-course.no-space-allowed.strong',\n    defaultMessage: 'Note: No spaces or special characters are allowed.',\n  },\n  courseNoteOrgNameIsPartStrong: {\n    id: 'course-authoring.create-or-rerun-course.org.help-text.strong',\n    defaultMessage: 'Note: The organization name is part of the course URL.',\n  },\n  courseNumberLabel: {\n    id: 'course-authoring.create-or-rerun-course.number.label',\n    defaultMessage: 'Course number',\n  },\n  courseNumberPlaceholder: {\n    id: 'course-authoring.create-or-rerun-course.number.placeholder',\n    defaultMessage: 'e.g. CS101',\n  },\n  courseNumberCreateHelpText: {\n    id: 'course-authoring.create-or-rerun-course.create.number.help-text',\n    defaultMessage: 'The unique number that identifies your course within your organization. {strong}',\n  },\n  courseNumberRerunHelpText: {\n    id: 'course-authoring.create-or-rerun-course.rerun.number.help-text',\n    defaultMessage: 'The unique number that identifies the new course within the organization. (This number will be the same as the original course number and cannot be changed.)',\n  },\n  courseNotePartCourseURLRequireStrong: {\n    id: 'course-authoring.create-or-rerun-course.number.help-text.strong',\n    defaultMessage: 'Note: This is part of your course URL, so no spaces or special characters are allowed and it cannot be changed.',\n  },\n  courseRunLabel: {\n    id: 'course-authoring.create-or-rerun-course.run.label',\n    defaultMessage: 'Course run',\n  },\n  courseRunPlaceholder: {\n    id: 'course-authoring.create-or-rerun-course.run.placeholder',\n    defaultMessage: 'e.g. 2014_T1',\n  },\n  courseRunCreateHelpText: {\n    id: 'course-authoring.create-or-rerun-course.create.run.help-text',\n    defaultMessage: 'The term in which your course will run. {strong}',\n  },\n  courseRunRerunHelpText: {\n    id: 'course-authoring.create-or-rerun-course.create.rerun.help-text',\n    defaultMessage: 'The term in which the new course will run. (This value is often different than the original course run value.){strong}',\n  },\n  defaultPlaceholder: {\n    id: 'course-authoring.create-or-rerun-course.default-placeholder',\n    defaultMessage: 'Label',\n  },\n  createButton: {\n    id: 'course-authoring.create-or-rerun-course.create.button.create',\n    defaultMessage: 'Create',\n  },\n  rerunCreateButton: {\n    id: 'course-authoring.create-or-rerun-course.rerun.button.create',\n    defaultMessage: 'Create re-run',\n  },\n  creatingButton: {\n    id: 'course-authoring.create-or-rerun-course.button.creating',\n    defaultMessage: 'Creating',\n  },\n  rerunningCreateButton: {\n    id: 'course-authoring.create-or-rerun-course.rerun.button.rerunning',\n    defaultMessage: 'Processing re-run request',\n  },\n  cancelButton: {\n    id: 'course-authoring.create-or-rerun-course.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n  requiredFieldError: {\n    id: 'course-authoring.create-or-rerun-course.required.error',\n    defaultMessage: 'Required field.',\n  },\n  disallowedCharsError: {\n    id: 'course-authoring.create-or-rerun-course.disallowed-chars.error',\n    defaultMessage: 'Please do not use any spaces or special characters in this field.',\n  },\n  noSpaceError: {\n    id: 'course-authoring.create-or-rerun-course.no-space.error',\n    defaultMessage: 'Please do not use any spaces in this field.',\n  },\n  alertErrorExistsAriaLabelledBy: {\n    id: 'course-authoring.create-or-rerun-course.error.already-exists.labelledBy',\n    defaultMessage: 'alert-already-exists-title',\n  },\n  alertErrorExistsAriaDescribedBy: {\n    id: 'course-authoring.create-or-rerun-course.error.already-exists.aria.describedBy',\n    defaultMessage: 'alert-confirmation-description',\n  },\n});\n\nexport default messages;\n","import React, { useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router';\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport {\n  Form,\n  Button,\n  Dropdown,\n  ActionRow,\n  StatefulButton,\n  TransitionReplace,\n} from '@edx/paragon';\nimport { Info as InfoIcon } from '@edx/paragon/icons';\nimport { TypeaheadDropdown } from '@edx/frontend-lib-content-components';\n\nimport AlertMessage from '../alert-message';\nimport { STATEFUL_BUTTON_STATES } from '../../constants';\nimport { RequestStatus } from '../../data/constants';\nimport { getSavingStatus } from '../data/selectors';\nimport { getStudioHomeData } from '../../studio-home/data/selectors';\nimport { updatePostErrors } from '../data/slice';\nimport { updateCreateOrRerunCourseQuery } from '../data/thunks';\nimport { useCreateOrRerunCourse } from './hooks';\nimport messages from './messages';\n\nconst CreateOrRerunCourseForm = ({\n  title,\n  isCreateNewCourse,\n  initialValues,\n  onClickCancel,\n}) => {\n  const { courseId } = useParams();\n  const savingStatus = useSelector(getSavingStatus);\n  const { allowToCreateNewOrg } = useSelector(getStudioHomeData);\n  const runFieldReference = useRef(null);\n  const displayNameFieldReference = useRef(null);\n\n  const {\n    intl,\n    errors,\n    values,\n    postErrors,\n    isFormFilled,\n    isFormInvalid,\n    organizations,\n    showErrorBanner,\n    dispatch,\n    handleBlur,\n    handleChange,\n    hasErrorField,\n    setFieldValue,\n  } = useCreateOrRerunCourse(initialValues);\n\n  const newCourseFields = [\n    {\n      label: intl.formatMessage(messages.courseDisplayNameLabel),\n      helpText: intl.formatMessage(\n        isCreateNewCourse\n          ? messages.courseDisplayNameCreateHelpText\n          : messages.courseDisplayNameRerunHelpText,\n      ),\n      name: 'displayName',\n      value: values.displayName,\n      placeholder: intl.formatMessage(messages.courseDisplayNamePlaceholder),\n      disabled: false,\n      ref: displayNameFieldReference,\n    },\n    {\n      label: intl.formatMessage(messages.courseOrgLabel),\n      helpText: isCreateNewCourse\n        ? intl.formatMessage(messages.courseOrgCreateHelpText, {\n          strong: <strong>{intl.formatMessage(messages.courseNoteOrgNameIsPartStrong)}</strong>,\n        })\n        : intl.formatMessage(messages.courseOrgRerunHelpText, {\n          strong: (\n            <>\n              <br />\n              <strong>\n                {intl.formatMessage(messages.courseNoteNoSpaceAllowedStrong)}\n              </strong>\n            </>\n          ),\n        }),\n      name: 'org',\n      value: values.org,\n      options: organizations,\n      placeholder: intl.formatMessage(messages.courseOrgPlaceholder),\n      disabled: false,\n    },\n    {\n      label: intl.formatMessage(messages.courseNumberLabel),\n      helpText: isCreateNewCourse\n        ? intl.formatMessage(messages.courseNumberCreateHelpText, {\n          strong: (\n            <strong>\n              {intl.formatMessage(messages.courseNotePartCourseURLRequireStrong)}\n            </strong>\n          ),\n        })\n        : intl.formatMessage(messages.courseNumberRerunHelpText),\n      name: 'number',\n      value: values.number,\n      placeholder: intl.formatMessage(messages.courseNumberPlaceholder),\n      disabled: !isCreateNewCourse,\n    },\n    {\n      label: intl.formatMessage(messages.courseRunLabel),\n      helpText: isCreateNewCourse\n        ? intl.formatMessage(messages.courseRunCreateHelpText, {\n          strong: (\n            <strong>\n              {intl.formatMessage(messages.courseNotePartCourseURLRequireStrong)}\n            </strong>\n          ),\n        })\n        : intl.formatMessage(messages.courseRunRerunHelpText, {\n          strong: (\n            <>\n              <br />\n              <strong>\n                {intl.formatMessage(messages.courseNoteNoSpaceAllowedStrong)}\n              </strong>\n            </>\n          ),\n        }),\n      name: 'run',\n      value: values.run,\n      placeholder: intl.formatMessage(messages.courseRunPlaceholder),\n      disabled: false,\n      ref: runFieldReference,\n    },\n  ];\n\n  const createButtonState = {\n    labels: {\n      default: intl.formatMessage(isCreateNewCourse ? messages.createButton : messages.rerunCreateButton),\n      pending: intl.formatMessage(isCreateNewCourse ? messages.creatingButton : messages.rerunningCreateButton),\n    },\n    disabledStates: [STATEFUL_BUTTON_STATES.pending],\n  };\n\n  const handleOnClickCreate = () => {\n    const courseData = isCreateNewCourse ? values : { ...values, sourceCourseKey: courseId };\n    dispatch(updateCreateOrRerunCourseQuery(courseData));\n  };\n\n  const handleOnClickCancel = () => {\n    dispatch(updatePostErrors({}));\n    onClickCancel();\n  };\n\n  const handleCustomBlurForDropdown = (e) => {\n    // it needs to correct handleOnChange Form.Autosuggest\n    const { value, name } = e.target;\n    setFieldValue(name, value);\n    handleBlur(e);\n  };\n\n  const renderOrgField = (field) => (allowToCreateNewOrg ? (\n    <TypeaheadDropdown\n      readOnly={false}\n      name={field.name}\n      value={field.value}\n      controlClassName={classNames({ 'is-invalid': hasErrorField(field.name) })}\n      options={field.options}\n      placeholder={field.placeholder}\n      handleBlur={handleCustomBlurForDropdown}\n      handleChange={(value) => setFieldValue(field.name, value)}\n      noOptionsMessage={intl.formatMessage(messages.courseOrgNoOptions)}\n      helpMessage=\"\"\n      errorMessage=\"\"\n      floatingLabel=\"\"\n    />\n  ) : (\n    <Dropdown className=\"mr-2\">\n      <Dropdown.Toggle id={`${field.name}-dropdown`} variant=\"outline-primary\">\n        {field.value || intl.formatMessage(messages.courseOrgNoOptions)}\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        {field.options?.map((value) => (\n          <Dropdown.Item\n            key={value}\n            onClick={() => setFieldValue(field.name, value)}\n          >\n            {value}\n          </Dropdown.Item>\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  ));\n\n  useEffect(() => {\n    // it needs to display the initial focus for the field depending on the current page\n    if (!isCreateNewCourse) {\n      runFieldReference?.current?.focus();\n    } else {\n      displayNameFieldReference?.current?.focus();\n    }\n  }, []);\n\n  return (\n    <div className=\"create-or-rerun-course-form\">\n      <TransitionReplace>\n        {showErrorBanner ? (\n          <AlertMessage\n            variant=\"danger\"\n            icon={InfoIcon}\n            title={postErrors.errMsg}\n            aria-hidden=\"true\"\n            aria-labelledby={intl.formatMessage(\n              messages.alertErrorExistsAriaLabelledBy,\n            )}\n            aria-describedby={intl.formatMessage(\n              messages.alertErrorExistsAriaDescribedBy,\n            )}\n          />\n        ) : null}\n      </TransitionReplace>\n      <h3 className=\"mb-3\">{title}</h3>\n      <Form>\n        {newCourseFields.map((field) => (\n          <Form.Group\n            className={classNames('form-group-custom', {\n              'form-group-custom_isInvalid': hasErrorField(field.name),\n            })}\n            key={field.label}\n          >\n            <Form.Label>{field.label}</Form.Label>\n            {field.name !== 'org' ? (\n              <Form.Control\n                value={field.value}\n                placeholder={field.placeholder}\n                name={field.name}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                isInvalid={hasErrorField(field.name)}\n                disabled={field.disabled}\n                ref={field?.ref}\n              />\n            ) : renderOrgField(field)}\n            <Form.Text>{field.helpText}</Form.Text>\n            {hasErrorField(field.name) && (\n              <Form.Control.Feedback\n                className=\"feedback-error\"\n                type=\"invalid\"\n                hasIcon={false}\n              >\n                {errors[field.name]}\n              </Form.Control.Feedback>\n            )}\n          </Form.Group>\n        ))}\n        <ActionRow className=\"justify-content-start\">\n          <Button\n            variant=\"outline-primary\"\n            onClick={handleOnClickCancel}\n          >\n            {intl.formatMessage(messages.cancelButton)}\n          </Button>\n          <StatefulButton\n            key=\"save-button\"\n            className=\"ml-3\"\n            onClick={handleOnClickCreate}\n            disabled={!isFormFilled || isFormInvalid}\n            state={\n              savingStatus === RequestStatus.PENDING\n                ? STATEFUL_BUTTON_STATES.pending\n                : STATEFUL_BUTTON_STATES.default\n            }\n            {...createButtonState}\n          />\n        </ActionRow>\n      </Form>\n    </div>\n  );\n};\n\nCreateOrRerunCourseForm.defaultProps = {\n  title: '',\n  isCreateNewCourse: false,\n};\n\nCreateOrRerunCourseForm.propTypes = {\n  title: PropTypes.string,\n  initialValues: PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    org: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    run: PropTypes.string.isRequired,\n  }).isRequired,\n  isCreateNewCourse: PropTypes.bool,\n  onClickCancel: PropTypes.func.isRequired,\n};\n\nexport default CreateOrRerunCourseForm;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getConfig } from '@edx/frontend-platform';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { RequestStatus } from '../../data/constants';\nimport { getStudioHomeData } from '../../studio-home/data/selectors';\nimport {\n  getRedirectUrlObj,\n  getOrganizations,\n  getPostErrors,\n  getSavingStatus,\n} from '../data/selectors';\nimport { updateSavingStatus, updatePostErrors } from '../data/slice';\nimport { fetchOrganizationsQuery } from '../data/thunks';\nimport messages from './messages';\n\nconst useCreateOrRerunCourse = (initialValues) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const redirectUrlObj = useSelector(getRedirectUrlObj);\n  const createOrRerunCourseSavingStatus = useSelector(getSavingStatus);\n  const allOrganizations = useSelector(getOrganizations);\n  const postErrors = useSelector(getPostErrors);\n  const {\n    allowToCreateNewOrg,\n    allowedOrganizations,\n  } = useSelector(getStudioHomeData);\n  const [isFormFilled, setFormFilled] = useState(false);\n  const [showErrorBanner, setShowErrorBanner] = useState(false);\n  const organizations = allowToCreateNewOrg ? allOrganizations : allowedOrganizations;\n  const specialCharsRule = /^[a-zA-Z0-9_\\-.'*~\\s]+$/;\n  const noSpaceRule = /^\\S*$/;\n  const validationSchema = Yup.object().shape({\n    displayName: Yup.string().required(\n      intl.formatMessage(messages.requiredFieldError),\n    ),\n    org: Yup.string()\n      .required(intl.formatMessage(messages.requiredFieldError))\n      .matches(\n        specialCharsRule,\n        intl.formatMessage(messages.disallowedCharsError),\n      )\n      .matches(noSpaceRule, intl.formatMessage(messages.noSpaceError)),\n    number: Yup.string()\n      .required(intl.formatMessage(messages.requiredFieldError))\n      .matches(\n        specialCharsRule,\n        intl.formatMessage(messages.disallowedCharsError),\n      )\n      .matches(noSpaceRule, intl.formatMessage(messages.noSpaceError)),\n    run: Yup.string()\n      .required(intl.formatMessage(messages.requiredFieldError))\n      .matches(\n        specialCharsRule,\n        intl.formatMessage(messages.disallowedCharsError),\n      )\n      .matches(noSpaceRule, intl.formatMessage(messages.noSpaceError)),\n  });\n\n  const {\n    values, errors, touched, handleChange, handleBlur, setFieldValue,\n  } = useFormik({\n    initialValues,\n    enableReinitialize: true,\n    validateOnBlur: false,\n    validationSchema,\n  });\n\n  useEffect(() => {\n    if (allowToCreateNewOrg) {\n      dispatch(fetchOrganizationsQuery());\n    }\n  }, []);\n\n  useEffect(() => {\n    setFormFilled(Object.values(values).every((i) => i));\n    dispatch(updatePostErrors({}));\n  }, [values]);\n\n  useEffect(() => {\n    setShowErrorBanner(!!postErrors.errMsg);\n  }, [postErrors]);\n\n  useEffect(() => {\n    if (createOrRerunCourseSavingStatus === RequestStatus.SUCCESSFUL) {\n      dispatch(updateSavingStatus({ status: '' }));\n      const { url, destinationCourseKey } = redirectUrlObj;\n      // New courses' url to the outline page is provided in the url. However, for course\n      // re-runs the url is /course/. The actual destination for the rer-run's  outline\n      // is in the destionationCourseKey attribute from the api.\n      if (url) {\n        if (destinationCourseKey) {\n          window.location.assign(`${getConfig().STUDIO_BASE_URL}${url}${destinationCourseKey}`);\n        } else {\n          window.location.assign(`${getConfig().STUDIO_BASE_URL}${url}`);\n        }\n      }\n    } else if (createOrRerunCourseSavingStatus === RequestStatus.FAILED) {\n      dispatch(updateSavingStatus({ status: '' }));\n    }\n  }, [createOrRerunCourseSavingStatus]);\n\n  const hasErrorField = (fieldName) => !!errors[fieldName] && !!touched[fieldName];\n  const isFormInvalid = Object.keys(errors).length;\n\n  return {\n    intl,\n    errors,\n    values,\n    postErrors,\n    isFormFilled,\n    isFormInvalid,\n    organizations,\n    showErrorBanner,\n    dispatch,\n    handleBlur,\n    handleChange,\n    hasErrorField,\n    setFieldValue,\n    setShowErrorBanner,\n  };\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { useCreateOrRerunCourse };\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  createNewCourse: {\n    id: 'course-authoring.studio-home.new-course.title',\n    defaultMessage: 'Create a new course',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { CreateOrRerunCourseForm } from '../../generic/create-or-rerun-course';\nimport messages from './messages';\n\nconst CreateNewCourseForm = ({ handleOnClickCancel }) => {\n  const intl = useIntl();\n  const initialNewCourseData = {\n    displayName: '',\n    org: '',\n    number: '',\n    run: '',\n  };\n\n  return (\n    <div className=\"mb-4.5\" data-testid=\"create-course-form\">\n      <CreateOrRerunCourseForm\n        title={intl.formatMessage(messages.createNewCourse)}\n        initialValues={initialNewCourseData}\n        onClickCancel={handleOnClickCancel}\n        isCreateNewCourse\n      />\n    </div>\n  );\n};\n\nCreateNewCourseForm.propTypes = {\n  handleOnClickCancel: PropTypes.func.isRequired,\n};\n\nexport default CreateNewCourseForm;\n","import React from 'react';\nimport {\n  Button,\n  Container,\n  Layout,\n  MailtoLink,\n} from '@edx/paragon';\nimport { Add as AddIcon } from '@edx/paragon/icons/es5';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { StudioFooter } from '@edx/frontend-component-footer';\nimport { getConfig } from '@edx/frontend-platform';\n\nimport Loading from '../generic/Loading';\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport Header from '../header';\nimport SubHeader from '../generic/sub-header/SubHeader';\nimport HomeSidebar from './home-sidebar';\nimport TabsSection from './tabs-section';\nimport OrganizationSection from './organization-section';\nimport VerifyEmailLayout from './verify-email-layout';\nimport CreateNewCourseForm from './create-new-course-form';\nimport messages from './messages';\nimport { useStudioHome } from './hooks';\n\nconst StudioHome = ({ intl }) => {\n  const {\n    isLoadingPage,\n    studioHomeData,\n    isShowProcessing,\n    anyQueryIsFailed,\n    isShowEmailStaff,\n    anyQueryIsPending,\n    showNewCourseContainer,\n    isShowOrganizationDropdown,\n    hasAbilityToCreateNewCourse,\n    setShowNewCourseContainer,\n  } = useStudioHome();\n\n  const {\n    userIsActive,\n    studioShortName,\n    studioRequestEmail,\n    libraryAuthoringMfeUrl,\n    redirectToLibraryAuthoringMfe,\n  } = studioHomeData;\n\n  function getHeaderButtons() {\n    const headerButtons = [];\n\n    if (isShowEmailStaff) {\n      headerButtons.push(\n        <MailtoLink to={studioRequestEmail}>{intl.formatMessage(messages.emailStaffBtnText)}</MailtoLink>,\n      );\n    }\n\n    if (hasAbilityToCreateNewCourse) {\n      headerButtons.push(\n        <Button\n          variant=\"outline-primary\"\n          iconBefore={AddIcon}\n          size=\"sm\"\n          disabled={showNewCourseContainer}\n          onClick={() => setShowNewCourseContainer(true)}\n        >\n          {intl.formatMessage(messages.addNewCourseBtnText)}\n        </Button>,\n      );\n    }\n\n    let libraryHref = `${getConfig().STUDIO_BASE_URL}/home_library`;\n    if (redirectToLibraryAuthoringMfe) {\n      libraryHref = `${libraryAuthoringMfeUrl}/create`;\n    }\n\n    headerButtons.push(\n      <Button\n        variant=\"outline-primary\"\n        iconBefore={AddIcon}\n        size=\"sm\"\n        disabled={showNewCourseContainer}\n        href={libraryHref}\n        data-testid=\"new-library-button\"\n      >\n        {intl.formatMessage(messages.addNewLibraryBtnText)}\n      </Button>,\n    );\n\n    return headerButtons;\n  }\n\n  const headerButtons = userIsActive ? getHeaderButtons() : [];\n  if (isLoadingPage) {\n    return (<Loading />);\n  }\n\n  return (\n    <>\n      <Header isHiddenMainMenu />\n      <Container size=\"xl\" className=\"p-4 mt-3\">\n        <section className=\"mb-4\">\n          <article className=\"studio-home-sub-header\">\n            <section>\n              <SubHeader\n                title={intl.formatMessage(messages.headingTitle, { studioShortName })}\n                headerActions={headerButtons}\n              />\n            </section>\n          </article>\n          {!userIsActive ? (\n            <VerifyEmailLayout />\n          ) : (\n            <Layout\n              lg={[{ span: 9 }, { span: 3 }]}\n              md={[{ span: 9 }, { span: 3 }]}\n              sm={[{ span: 9 }, { span: 3 }]}\n              xs={[{ span: 9 }, { span: 3 }]}\n              xl={[{ span: 9 }, { span: 3 }]}\n            >\n              <Layout.Element>\n                <section>\n                  {showNewCourseContainer && (\n                    <CreateNewCourseForm handleOnClickCancel={() => setShowNewCourseContainer(false)} />\n                  )}\n                  {isShowOrganizationDropdown && <OrganizationSection />}\n                  <TabsSection\n                    tabsData={studioHomeData}\n                    showNewCourseContainer={showNewCourseContainer}\n                    onClickNewCourse={() => setShowNewCourseContainer(true)}\n                    isShowProcessing={isShowProcessing}\n                  />\n                </section>\n              </Layout.Element>\n              <Layout.Element>\n                <HomeSidebar />\n              </Layout.Element>\n            </Layout>\n          )}\n        </section>\n      </Container>\n      <div className=\"alert-toast\">\n        <InternetConnectionAlert\n          isFailed={anyQueryIsFailed}\n          isQueryPending={anyQueryIsPending}\n        />\n      </div>\n      <StudioFooter />\n    </>\n  );\n};\n\nStudioHome.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(StudioHome);\n","import { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RequestStatus } from '../data/constants';\nimport { COURSE_CREATOR_STATES } from '../constants';\nimport { getCourseData, getSavingStatus } from '../generic/data/selectors';\nimport { fetchStudioHomeData } from './data/thunks';\nimport {\n  getLoadingStatuses,\n  getSavingStatuses,\n  getStudioHomeData,\n} from './data/selectors';\nimport { updateSavingStatuses } from './data/slice';\n\nconst useStudioHome = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const studioHomeData = useSelector(getStudioHomeData);\n  const newCourseData = useSelector(getCourseData);\n  const { studioHomeLoadingStatus } = useSelector(getLoadingStatuses);\n  const savingCreateRerunStatus = useSelector(getSavingStatus);\n  const {\n    courseCreatorSavingStatus,\n    deleteNotificationSavingStatus,\n  } = useSelector(getSavingStatuses);\n  const [showNewCourseContainer, setShowNewCourseContainer] = useState(false);\n  const isLoadingPage = studioHomeLoadingStatus === RequestStatus.IN_PROGRESS;\n\n  useEffect(() => {\n    dispatch(fetchStudioHomeData(location.search ?? ''));\n    setShowNewCourseContainer(false);\n  }, [location.search]);\n\n  useEffect(() => {\n    if (courseCreatorSavingStatus === RequestStatus.SUCCESSFUL) {\n      dispatch(updateSavingStatuses({ courseCreatorSavingStatus: '' }));\n      dispatch(fetchStudioHomeData());\n    }\n  }, [courseCreatorSavingStatus]);\n\n  useEffect(() => {\n    if (deleteNotificationSavingStatus === RequestStatus.SUCCESSFUL) {\n      dispatch(updateSavingStatuses({ courseCreatorSavingStatus: '' }));\n      dispatch(fetchStudioHomeData());\n    } else if (deleteNotificationSavingStatus === RequestStatus.FAILED) {\n      dispatch(updateSavingStatuses({ deleteNotificationSavingStatus: '' }));\n    }\n  }, [deleteNotificationSavingStatus]);\n\n  const {\n    allowCourseReruns,\n    rerunCreatorStatus,\n    optimizationEnabled,\n    studioRequestEmail,\n    inProcessCourseActions,\n    courseCreatorStatus,\n  } = studioHomeData;\n\n  const isShowOrganizationDropdown = optimizationEnabled && courseCreatorStatus === COURSE_CREATOR_STATES.granted;\n  const isShowEmailStaff = courseCreatorStatus === COURSE_CREATOR_STATES.disallowedForThisSite && !!studioRequestEmail;\n  const isShowProcessing = allowCourseReruns && rerunCreatorStatus && inProcessCourseActions.length > 0;\n  const hasAbilityToCreateNewCourse = courseCreatorStatus === COURSE_CREATOR_STATES.granted;\n  const anyQueryIsPending = [deleteNotificationSavingStatus, courseCreatorSavingStatus, savingCreateRerunStatus]\n    .includes(RequestStatus.PENDING);\n  const anyQueryIsFailed = [deleteNotificationSavingStatus, courseCreatorSavingStatus, savingCreateRerunStatus]\n    .includes(RequestStatus.FAILED);\n\n  return {\n    isLoadingPage,\n    newCourseData,\n    studioHomeData,\n    isShowProcessing,\n    anyQueryIsFailed,\n    isShowEmailStaff,\n    anyQueryIsPending,\n    showNewCourseContainer,\n    courseCreatorSavingStatus,\n    isShowOrganizationDropdown,\n    hasAbilityToCreateNewCourse,\n    deleteNotificationSavingStatus,\n    dispatch,\n    setShowNewCourseContainer,\n  };\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { useStudioHome };\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  rerunCourseDescription: {\n    id: 'course-authoring.course-rerun.form.description',\n    defaultMessage: 'Provide identifying information for this re-run of the course. The original course is not affected in any way by a re-run. {strong}',\n  },\n  rerunCourseDescriptionStrong: {\n    id: 'course-authoring.course-rerun.form.description.strong',\n    defaultMessage: 'Note: Together, the organization, course number, and course run must uniquely identify this new course instance.',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { CreateOrRerunCourseForm } from '../../generic/create-or-rerun-course';\nimport messages from './messages';\n\nconst CourseRerunForm = ({ initialFormValues, onClickCancel }) => {\n  const intl = useIntl();\n  return (\n    <div className=\"mb-4.5\">\n      <div className=\"my-2.5\">{intl.formatMessage(messages.rerunCourseDescription, {\n        strong: (\n          <strong>{intl.formatMessage(messages.rerunCourseDescriptionStrong)}</strong>\n        ),\n      })}\n      </div>\n      <CreateOrRerunCourseForm\n        initialValues={initialFormValues}\n        onClickCancel={onClickCancel}\n      />\n    </div>\n  );\n};\n\nCourseRerunForm.propTypes = {\n  initialFormValues: PropTypes.shape({\n    displayName: PropTypes.string.isRequired,\n    org: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    run: PropTypes.string,\n  }).isRequired,\n  onClickCancel: PropTypes.func.isRequired,\n};\n\nexport default CourseRerunForm;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  sectionTitle1: {\n    id: 'course-authoring.course-rerun.sidebar.section-1.title',\n    defaultMessage: 'When will my course re-run start?',\n  },\n  sectionDescription1: {\n    id: 'course-authoring.course-rerun.sidebar.section-1.description',\n    defaultMessage: 'The new course is set to start on',\n  },\n  sectionTitle2: {\n    id: 'course-authoring.course-rerun.sidebar.section-2.title',\n    defaultMessage: 'What transfers from the original course?',\n  },\n  sectionDescription2: {\n    id: 'course-authoring.course-rerun.sidebar.section-2.description',\n    defaultMessage: 'The new course has the same course outline and content as the original course. All problems, videos, announcements, and other files are duplicated to the new course.',\n  },\n  sectionTitle3: {\n    id: 'course-authoring.course-rerun.sidebar.section-3.title',\n    defaultMessage: 'What does not transfer from the original course?',\n  },\n  sectionDescription3: {\n    id: 'course-authoring.course-rerun.sidebar.section-3.description',\n    defaultMessage: 'You are the only member of the new course\\'s staff. No students are enrolled in the course, and there is no student data. There is no content in the discussion topics or wiki.',\n  },\n  sectionLink4: {\n    id: 'course-authoring.course-rerun.sidebar.section-4.link',\n    defaultMessage: 'Learn more about course re-runs',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { Hyperlink } from '@edx/paragon';\nimport { FormattedDate, useIntl } from '@edx/frontend-platform/i18n';\n\nimport { useHelpUrls } from '../../help-urls/hooks';\nimport { HelpSidebar } from '../../generic/help-sidebar';\nimport messages from './messages';\n\nconst CourseRerunSideBar = () => {\n  const intl = useIntl();\n  const { default: learnMoreUrl } = useHelpUrls(['default']);\n  const defaultCourseDate = new Date(Date.UTC(2030, 0, 1, 0, 0));\n  const localizedCourseDate = (\n    <FormattedDate\n      value={defaultCourseDate}\n      year=\"numeric\"\n      month=\"long\"\n      day=\"2-digit\"\n      hour=\"numeric\"\n      minute=\"numeric\"\n    />\n  );\n\n  const sidebarMessages = [\n    {\n      title: intl.formatMessage(messages.sectionTitle1),\n      description: `${intl.formatMessage(messages.sectionDescription1)}`,\n      date: localizedCourseDate,\n    },\n    {\n      title: intl.formatMessage(messages.sectionTitle2),\n      description: intl.formatMessage(messages.sectionDescription2),\n    },\n    {\n      title: intl.formatMessage(messages.sectionTitle3),\n      description: intl.formatMessage(messages.sectionDescription3),\n    },\n    {\n      link: {\n        text: intl.formatMessage(messages.sectionLink4),\n        href: learnMoreUrl,\n      },\n    },\n  ];\n\n  return (\n    <HelpSidebar\n      intl={intl}\n      showOtherSettings={false}\n      className=\"mt-3\"\n    >\n      {sidebarMessages.map(({\n        title,\n        description,\n        link,\n        date,\n      }, index) => {\n        const isLastSection = index === sidebarMessages.length - 1;\n\n        return (\n          <div key={uuid()}>\n            <h4 className=\"help-sidebar-about-title\">{title}</h4>\n            <p className=\"help-sidebar-about-descriptions\">{description} {date}</p>\n            {!!link && (\n              <Hyperlink\n                className=\"small\"\n                destination={link.href || ''}\n                target=\"_blank\"\n                showLaunchIcon={false}\n              >\n                {link.text}\n              </Hyperlink>\n            )}\n            {!isLastSection && <hr className=\"my-3.5\" />}\n          </div>\n        );\n      })}\n    </HelpSidebar>\n  );\n};\n\nexport default CourseRerunSideBar;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  rerunTitle: {\n    id: 'course-authoring.course-rerun.title',\n    defaultMessage: 'Create a re-run of',\n  },\n  cancelButton: {\n    id: 'course-authoring.course-rerun.actions.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {\n  Container,\n  Layout,\n  Stack,\n  ActionRow,\n  Button,\n} from '@edx/paragon';\nimport { history } from '@edx/frontend-platform';\nimport { StudioFooter } from '@edx/frontend-component-footer';\n\nimport Header from '../header';\nimport Loading from '../generic/Loading';\nimport { getLoadingStatuses } from '../generic/data/selectors';\nimport InternetConnectionAlert from '../generic/internet-connection-alert';\nimport { RequestStatus } from '../data/constants';\nimport CourseRerunForm from './course-rerun-form';\nimport CourseRerunSideBar from './course-rerun-sidebar';\nimport messages from './messages';\nimport { useCourseRerun } from './hooks';\n\nconst CourseRerun = ({ courseId }) => {\n  const {\n    intl,\n    displayName,\n    savingStatus,\n    initialFormValues,\n    originalCourseData,\n  } = useCourseRerun(courseId);\n  const { organizationLoadingStatus } = useSelector(getLoadingStatuses);\n\n  if (organizationLoadingStatus === RequestStatus.IN_PROGRESS) {\n    return <Loading />;\n  }\n\n  const handleRerunCourseCancel = () => {\n    history.push('/home');\n  };\n\n  return (\n    <>\n      <Header isHiddenMainMenu />\n      <Container size=\"xl\" className=\"small p-4 mt-3\">\n        <section className=\"mb-4\">\n          <article>\n            <section>\n              <header className=\"d-flex\">\n                <Stack>\n                  <h2>\n                    {intl.formatMessage(messages.rerunTitle)} {displayName}\n                  </h2>\n                  <span className=\"large\">{originalCourseData}</span>\n                </Stack>\n                <ActionRow className=\"ml-auto\">\n                  <Button variant=\"outline-primary\" size=\"sm\" onClick={handleRerunCourseCancel}>\n                    {intl.formatMessage(messages.cancelButton)}\n                  </Button>\n                </ActionRow>\n              </header>\n              <hr />\n            </section>\n          </article>\n          <Layout\n            lg={[{ span: 9 }, { span: 3 }]}\n            md={[{ span: 9 }, { span: 3 }]}\n            sm={[{ span: 9 }, { span: 3 }]}\n            xs={[{ span: 9 }, { span: 3 }]}\n            xl={[{ span: 9 }, { span: 3 }]}\n          >\n            <Layout.Element>\n              <CourseRerunForm\n                initialFormValues={initialFormValues}\n                onClickCancel={handleRerunCourseCancel}\n              />\n            </Layout.Element>\n            <Layout.Element>\n              <CourseRerunSideBar />\n            </Layout.Element>\n          </Layout>\n        </section>\n      </Container>\n      <div className=\"alert-toast\">\n        <InternetConnectionAlert\n          isFailed={savingStatus === RequestStatus.FAILED}\n          isQueryPending={savingStatus === RequestStatus.PENDING}\n        />\n      </div>\n      <StudioFooter />\n    </>\n  );\n};\n\nCourseRerun.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default CourseRerun;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { history } from '@edx/frontend-platform';\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { RequestStatus } from '../data/constants';\nimport { updateSavingStatus } from '../generic/data/slice';\nimport {\n  getSavingStatus,\n  getRedirectUrlObj,\n  getCourseRerunData,\n  getCourseData,\n} from '../generic/data/selectors';\nimport { fetchCourseRerunQuery, fetchOrganizationsQuery } from '../generic/data/thunks';\nimport { fetchStudioHomeData } from '../studio-home/data/thunks';\n\nconst useCourseRerun = (courseId) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const savingStatus = useSelector(getSavingStatus);\n  const courseData = useSelector(getCourseData);\n  const courseRerunData = useSelector(getCourseRerunData);\n  const redirectUrlObj = useSelector(getRedirectUrlObj);\n\n  const {\n    displayName = '',\n    org = '',\n    run = '',\n    number = '',\n  } = courseRerunData;\n  const originalCourseData = `${org} ${number} ${run}`;\n  const initialFormValues = {\n    displayName,\n    org,\n    number,\n    run: '',\n  };\n\n  useEffect(() => {\n    dispatch(fetchStudioHomeData());\n    dispatch(fetchCourseRerunQuery(courseId));\n    dispatch(fetchOrganizationsQuery());\n  }, []);\n\n  useEffect(() => {\n    if (savingStatus === RequestStatus.SUCCESSFUL) {\n      dispatch(updateSavingStatus({ status: '' }));\n      const { url } = redirectUrlObj;\n      if (url) {\n        history.push('/home');\n      }\n    }\n  }, [savingStatus]);\n\n  return {\n    intl,\n    courseData,\n    displayName,\n    savingStatus,\n    initialFormValues,\n    originalCourseData,\n    dispatch,\n  };\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { useCourseRerun };\n","// extracted by mini-css-extract-plugin\nexport default {\"xs\":\"0\",\"sm\":\"576px\",\"md\":\"768px\",\"lg\":\"992px\",\"xl\":\"1200px\",\"xxl\":\"1400px\"};","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport {\n  APP_INIT_ERROR, APP_READY, subscribe, initialize, mergeConfig,\n} from '@edx/frontend-platform';\nimport { AppProvider, ErrorPage } from '@edx/frontend-platform/react';\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { initializeHotjar } from '@edx/frontend-enterprise-hotjar';\nimport { logError } from '@edx/frontend-platform/logging';\nimport messages from './i18n';\n\nimport initializeStore from './store';\nimport CourseAuthoringRoutes from './CourseAuthoringRoutes';\nimport Head from './head/Head';\nimport { StudioHome } from './studio-home';\nimport CourseRerun from './course-rerun';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './index.scss';\n\nconst App = () => {\n  useEffect(() => {\n    if (process.env.HOTJAR_APP_ID) {\n      try {\n        initializeHotjar({\n          hotjarId: process.env.HOTJAR_APP_ID,\n          hotjarVersion: process.env.HOTJAR_VERSION,\n          hotjarDebug: !!process.env.HOTJAR_DEBUG,\n        });\n      } catch (error) {\n        logError(error);\n      }\n    }\n  }, []);\n\n  return (\n    <AppProvider store={initializeStore()}>\n      <Head />\n      <Switch>\n        <Route path=\"/home\">\n          <StudioHome />\n        </Route>\n        <Route\n          path=\"/course/:courseId\"\n          render={({ match }) => {\n            const { params: { courseId } } = match;\n            return (\n              <CourseAuthoringRoutes courseId={courseId} />\n            );\n          }}\n        />\n        <Route\n          path=\"/course_rerun/:courseId\"\n          render={({ match }) => {\n            const { params: { courseId } } = match;\n            return (\n              <CourseRerun courseId={courseId} />\n            );\n          }}\n        />\n      </Switch>\n    </AppProvider>\n  );\n};\n\nsubscribe(APP_READY, () => {\n  ReactDOM.render(\n    (<App />),\n    document.getElementById('root'),\n  );\n});\n\nsubscribe(APP_INIT_ERROR, (error) => {\n  ReactDOM.render(<ErrorPage message={error.message} />, document.getElementById('root'));\n});\n\ninitialize({\n  handlers: {\n    config: () => {\n      mergeConfig({\n        SUPPORT_URL: process.env.SUPPORT_URL || null,\n        SUPPORT_EMAIL: process.env.SUPPORT_EMAIL || null,\n        LEARNING_BASE_URL: process.env.LEARNING_BASE_URL,\n        EXAMS_BASE_URL: process.env.EXAMS_BASE_URL || null,\n        CALCULATOR_HELP_URL: process.env.CALCULATOR_HELP_URL || null,\n        ENABLE_PROGRESS_GRAPH_SETTINGS: process.env.ENABLE_PROGRESS_GRAPH_SETTINGS || 'false',\n        ENABLE_TEAM_TYPE_SETTING: process.env.ENABLE_TEAM_TYPE_SETTING === 'true',\n        BBB_LEARN_MORE_URL: process.env.BBB_LEARN_MORE_URL || '',\n        STUDIO_BASE_URL: process.env.STUDIO_BASE_URL || null,\n        STUDIO_SHORT_NAME: process.env.STUDIO_SHORT_NAME || null,\n      }, 'CourseAuthoringConfig');\n    },\n  },\n  messages,\n  requireAuthenticatedUser: true,\n});\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const PagesAndResourcesContext = React.createContext({});\n\nconst PagesAndResourcesProvider = ({ courseId, children }) => {\n  const contextValue = useMemo(() => ({\n    courseId,\n    path: `/course/${courseId}/pages-and-resources`,\n  }), []);\n  return (\n    <PagesAndResourcesContext.Provider\n      value={contextValue}\n    >\n      {children}\n    </PagesAndResourcesContext.Provider>\n  );\n};\n\nPagesAndResourcesProvider.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default PagesAndResourcesProvider;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst AppConfigFormDivider = ({ thick, marginAdj }) => (\n  <hr\n    className={classNames(\n      'my-2 mx-n4 border-light-300',\n      {\n        [`mx-sm-n${marginAdj.sm}`]: marginAdj.sm !== null,\n        [`mx-n${marginAdj.default}`]: marginAdj.default !== null,\n      },\n    )}\n    style={{\n      borderTopWidth: thick ? '3px' : '1px',\n    }}\n  />\n);\n\nAppConfigFormDivider.propTypes = {\n  thick: PropTypes.bool,\n  marginAdj: PropTypes.shape({\n    default: PropTypes.number,\n    sm: PropTypes.number,\n  }),\n};\n\nAppConfigFormDivider.defaultProps = {\n  thick: false,\n  marginAdj: {\n    default: 4,\n    sm: 5,\n  },\n};\n\nexport default AppConfigFormDivider;\n","export default __webpack_public_path__ + \"3b12626e50d4130de68ecdc161029609.png\";","export default __webpack_public_path__ + \"75f63c6c039dc68934413c59cbe36796.png\";","export default __webpack_public_path__ + \"90bc8046dbfec985088f206fa60d6b1c.png\";","export default __webpack_public_path__ + \"3631bca2f9d67d95083714f3a7caa7b4.png\";","export default __webpack_public_path__ + \"b04a494cbaadc7fdbe8b80b0aa11f4f8.png\";","export default __webpack_public_path__ + \"440b1fd39e91e51e7522b7475338e338.png\";","var map = {\n\t\"./af\": 94506,\n\t\"./af.js\": 94506,\n\t\"./ar\": 59687,\n\t\"./ar-dz\": 62887,\n\t\"./ar-dz.js\": 62887,\n\t\"./ar-kw\": 66307,\n\t\"./ar-kw.js\": 66307,\n\t\"./ar-ly\": 51664,\n\t\"./ar-ly.js\": 51664,\n\t\"./ar-ma\": 89926,\n\t\"./ar-ma.js\": 89926,\n\t\"./ar-sa\": 85207,\n\t\"./ar-sa.js\": 85207,\n\t\"./ar-tn\": 52912,\n\t\"./ar-tn.js\": 52912,\n\t\"./ar.js\": 59687,\n\t\"./az\": 5011,\n\t\"./az.js\": 5011,\n\t\"./be\": 25997,\n\t\"./be.js\": 25997,\n\t\"./bg\": 4427,\n\t\"./bg.js\": 4427,\n\t\"./bm\": 85385,\n\t\"./bm.js\": 85385,\n\t\"./bn\": 67703,\n\t\"./bn-bd\": 57002,\n\t\"./bn-bd.js\": 57002,\n\t\"./bn.js\": 67703,\n\t\"./bo\": 39841,\n\t\"./bo.js\": 39841,\n\t\"./br\": 45642,\n\t\"./br.js\": 45642,\n\t\"./bs\": 69038,\n\t\"./bs.js\": 69038,\n\t\"./ca\": 53512,\n\t\"./ca.js\": 53512,\n\t\"./cs\": 39497,\n\t\"./cs.js\": 39497,\n\t\"./cv\": 6479,\n\t\"./cv.js\": 6479,\n\t\"./cy\": 89318,\n\t\"./cy.js\": 89318,\n\t\"./da\": 97229,\n\t\"./da.js\": 97229,\n\t\"./de\": 63460,\n\t\"./de-at\": 51044,\n\t\"./de-at.js\": 51044,\n\t\"./de-ch\": 26445,\n\t\"./de-ch.js\": 26445,\n\t\"./de.js\": 63460,\n\t\"./dv\": 32096,\n\t\"./dv.js\": 32096,\n\t\"./el\": 16048,\n\t\"./el.js\": 16048,\n\t\"./en-au\": 74301,\n\t\"./en-au.js\": 74301,\n\t\"./en-ca\": 66855,\n\t\"./en-ca.js\": 66855,\n\t\"./en-gb\": 761,\n\t\"./en-gb.js\": 761,\n\t\"./en-ie\": 46127,\n\t\"./en-ie.js\": 46127,\n\t\"./en-il\": 49157,\n\t\"./en-il.js\": 49157,\n\t\"./en-in\": 37199,\n\t\"./en-in.js\": 37199,\n\t\"./en-nz\": 31511,\n\t\"./en-nz.js\": 31511,\n\t\"./en-sg\": 47309,\n\t\"./en-sg.js\": 47309,\n\t\"./eo\": 92160,\n\t\"./eo.js\": 92160,\n\t\"./es\": 68582,\n\t\"./es-do\": 71885,\n\t\"./es-do.js\": 71885,\n\t\"./es-mx\": 68131,\n\t\"./es-mx.js\": 68131,\n\t\"./es-us\": 16962,\n\t\"./es-us.js\": 16962,\n\t\"./es.js\": 68582,\n\t\"./et\": 98890,\n\t\"./et.js\": 98890,\n\t\"./eu\": 37704,\n\t\"./eu.js\": 37704,\n\t\"./fa\": 22562,\n\t\"./fa.js\": 22562,\n\t\"./fi\": 70877,\n\t\"./fi.js\": 70877,\n\t\"./fil\": 34246,\n\t\"./fil.js\": 34246,\n\t\"./fo\": 78341,\n\t\"./fo.js\": 78341,\n\t\"./fr\": 19867,\n\t\"./fr-ca\": 82347,\n\t\"./fr-ca.js\": 82347,\n\t\"./fr-ch\": 17683,\n\t\"./fr-ch.js\": 17683,\n\t\"./fr.js\": 19867,\n\t\"./fy\": 21982,\n\t\"./fy.js\": 21982,\n\t\"./ga\": 13905,\n\t\"./ga.js\": 13905,\n\t\"./gd\": 13443,\n\t\"./gd.js\": 13443,\n\t\"./gl\": 66905,\n\t\"./gl.js\": 66905,\n\t\"./gom-deva\": 91324,\n\t\"./gom-deva.js\": 91324,\n\t\"./gom-latn\": 41890,\n\t\"./gom-latn.js\": 41890,\n\t\"./gu\": 37134,\n\t\"./gu.js\": 37134,\n\t\"./he\": 96835,\n\t\"./he.js\": 96835,\n\t\"./hi\": 81394,\n\t\"./hi.js\": 81394,\n\t\"./hr\": 13564,\n\t\"./hr.js\": 13564,\n\t\"./hu\": 46269,\n\t\"./hu.js\": 46269,\n\t\"./hy-am\": 57269,\n\t\"./hy-am.js\": 57269,\n\t\"./id\": 44254,\n\t\"./id.js\": 44254,\n\t\"./is\": 8699,\n\t\"./is.js\": 8699,\n\t\"./it\": 28301,\n\t\"./it-ch\": 92887,\n\t\"./it-ch.js\": 92887,\n\t\"./it.js\": 28301,\n\t\"./ja\": 64642,\n\t\"./ja.js\": 64642,\n\t\"./jv\": 62168,\n\t\"./jv.js\": 62168,\n\t\"./ka\": 94501,\n\t\"./ka.js\": 94501,\n\t\"./kk\": 49537,\n\t\"./kk.js\": 49537,\n\t\"./km\": 45808,\n\t\"./km.js\": 45808,\n\t\"./kn\": 34881,\n\t\"./kn.js\": 34881,\n\t\"./ko\": 62951,\n\t\"./ko.js\": 62951,\n\t\"./ku\": 92452,\n\t\"./ku.js\": 92452,\n\t\"./ky\": 1853,\n\t\"./ky.js\": 1853,\n\t\"./lb\": 77639,\n\t\"./lb.js\": 77639,\n\t\"./lo\": 34502,\n\t\"./lo.js\": 34502,\n\t\"./lt\": 60874,\n\t\"./lt.js\": 60874,\n\t\"./lv\": 18237,\n\t\"./lv.js\": 18237,\n\t\"./me\": 87878,\n\t\"./me.js\": 87878,\n\t\"./mi\": 64234,\n\t\"./mi.js\": 64234,\n\t\"./mk\": 17535,\n\t\"./mk.js\": 17535,\n\t\"./ml\": 43896,\n\t\"./ml.js\": 43896,\n\t\"./mn\": 63046,\n\t\"./mn.js\": 63046,\n\t\"./mr\": 80927,\n\t\"./mr.js\": 80927,\n\t\"./ms\": 37224,\n\t\"./ms-my\": 66332,\n\t\"./ms-my.js\": 66332,\n\t\"./ms.js\": 37224,\n\t\"./mt\": 24866,\n\t\"./mt.js\": 24866,\n\t\"./my\": 24206,\n\t\"./my.js\": 24206,\n\t\"./nb\": 66723,\n\t\"./nb.js\": 66723,\n\t\"./ne\": 45097,\n\t\"./ne.js\": 45097,\n\t\"./nl\": 37529,\n\t\"./nl-be\": 1355,\n\t\"./nl-be.js\": 1355,\n\t\"./nl.js\": 37529,\n\t\"./nn\": 30296,\n\t\"./nn.js\": 30296,\n\t\"./oc-lnc\": 4802,\n\t\"./oc-lnc.js\": 4802,\n\t\"./pa-in\": 77057,\n\t\"./pa-in.js\": 77057,\n\t\"./pl\": 69850,\n\t\"./pl.js\": 69850,\n\t\"./pt\": 15552,\n\t\"./pt-br\": 83726,\n\t\"./pt-br.js\": 83726,\n\t\"./pt.js\": 15552,\n\t\"./ro\": 1717,\n\t\"./ro.js\": 1717,\n\t\"./ru\": 79117,\n\t\"./ru.js\": 79117,\n\t\"./sd\": 61742,\n\t\"./sd.js\": 61742,\n\t\"./se\": 92049,\n\t\"./se.js\": 92049,\n\t\"./si\": 83329,\n\t\"./si.js\": 83329,\n\t\"./sk\": 27619,\n\t\"./sk.js\": 27619,\n\t\"./sl\": 76707,\n\t\"./sl.js\": 76707,\n\t\"./sq\": 84281,\n\t\"./sq.js\": 84281,\n\t\"./sr\": 60436,\n\t\"./sr-cyrl\": 13408,\n\t\"./sr-cyrl.js\": 13408,\n\t\"./sr.js\": 60436,\n\t\"./ss\": 27500,\n\t\"./ss.js\": 27500,\n\t\"./sv\": 6950,\n\t\"./sv.js\": 6950,\n\t\"./sw\": 54222,\n\t\"./sw.js\": 54222,\n\t\"./ta\": 73746,\n\t\"./ta.js\": 73746,\n\t\"./te\": 1130,\n\t\"./te.js\": 1130,\n\t\"./tet\": 34740,\n\t\"./tet.js\": 34740,\n\t\"./tg\": 13378,\n\t\"./tg.js\": 13378,\n\t\"./th\": 20628,\n\t\"./th.js\": 20628,\n\t\"./tk\": 92622,\n\t\"./tk.js\": 92622,\n\t\"./tl-ph\": 30100,\n\t\"./tl-ph.js\": 30100,\n\t\"./tlh\": 22871,\n\t\"./tlh.js\": 22871,\n\t\"./tr\": 33600,\n\t\"./tr.js\": 33600,\n\t\"./tzl\": 18985,\n\t\"./tzl.js\": 18985,\n\t\"./tzm\": 3627,\n\t\"./tzm-latn\": 51145,\n\t\"./tzm-latn.js\": 51145,\n\t\"./tzm.js\": 3627,\n\t\"./ug-cn\": 4790,\n\t\"./ug-cn.js\": 4790,\n\t\"./uk\": 97712,\n\t\"./uk.js\": 97712,\n\t\"./ur\": 99529,\n\t\"./ur.js\": 99529,\n\t\"./uz\": 99141,\n\t\"./uz-latn\": 61737,\n\t\"./uz-latn.js\": 61737,\n\t\"./uz.js\": 99141,\n\t\"./vi\": 98205,\n\t\"./vi.js\": 98205,\n\t\"./x-pseudo\": 20697,\n\t\"./x-pseudo.js\": 20697,\n\t\"./yo\": 37826,\n\t\"./yo.js\": 37826,\n\t\"./zh-cn\": 83994,\n\t\"./zh-cn.js\": 83994,\n\t\"./zh-hk\": 36892,\n\t\"./zh-hk.js\": 36892,\n\t\"./zh-mo\": 43884,\n\t\"./zh-mo.js\": 43884,\n\t\"./zh-tw\": 85136,\n\t\"./zh-tw.js\": 85136\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 46700;","var map = {\n\t\"./calculator/Settings.jsx\": [\n\t\t65678,\n\t\t678\n\t],\n\t\"./edxnotes/Settings.jsx\": [\n\t\t11679,\n\t\t679\n\t],\n\t\"./live/Settings.jsx\": [\n\t\t30950,\n\t\t950\n\t],\n\t\"./ora_settings/Settings.jsx\": [\n\t\t53630,\n\t\t630\n\t],\n\t\"./proctoring/Settings.jsx\": [\n\t\t3681,\n\t\t681\n\t],\n\t\"./progress/Settings.jsx\": [\n\t\t67657,\n\t\t657\n\t],\n\t\"./teams/Settings.jsx\": [\n\t\t7370,\n\t\t370\n\t],\n\t\"./wiki/Settings.jsx\": [\n\t\t47013,\n\t\t13\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 56497;\nmodule.exports = webpackAsyncContext;"],"names":["_path","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgVideoThumbnail","props","width","height","fill","xmlns","d","DATE_FORMAT","TIME_FORMAT","DATE_TIME_FORMAT","COMMA_SEPARATED_DATE_FORMAT","DEFAULT_EMPTY_WYSIWYG_VALUE","STATEFUL_BUTTON_STATES","default","pending","error","USER_ROLES","admin","staff","NOTIFICATION_MESSAGES","saving","duplicating","deleting","DEFAULT_TIME_STAMP","COURSE_CREATOR_STATES","unrequested","granted","denied","disallowedForThisSite","RequestStatus","IN_PROGRESS","SUCCESSFUL","FAILED","DENIED","PENDING","CLEAR","TeamSizes","DEFAULT","MIN","MAX","GroupTypes","OPEN","PUBLIC_MANAGED","PRIVATE_MANAGED","DivisionSchemes","NONE","COHORT","ExamsApiService","static","getExamsBaseUrl","getConfig","EXAMS_BASE_URL","courseId","apiClient","getAuthenticatedHttpClient","providersUrl","get","getExamConfigurationUrl","dataToSave","patch","ensureConfig","getStudioBaseUrl","STUDIO_BASE_URL","StudioApiService","courseID","url","getProctoredExamSettingsUrl","post","add","state","modelType","model","id","undefined","update","_objectSpread","remove","slice","createSlice","name","initialState","reducers","addModel","_ref","payload","addModels","_ref2","models","forEach","addModelsMap","_ref3","modelsMap","values","updateModel","_ref4","updateModels","_ref5","updateModelsMap","_ref6","removeModel","_ref7","removeModels","_ref8","ids","actions","reducer","useModel","type","useSelector","shallowEqual","useModels","map","defineMessages","connectionError","defaultMessage","description","supportText","getLoadingStatus","pagesAndResources","loadingStatus","getSavingStatus","savingStatus","getCourseAppsApiStatus","courseAppsApiStatus","getCourseAppSettingValue","setting","courseAppSettings","value","getResetStatus","resetStatus","courseAppIds","fetchCourseAppsSuccess","updateLoadingStatus","status","updateSavingStatus","updateResetStatus","updateCourseAppsApiStatus","fetchCourseAppsSettingsSuccess","updateCourseAppsSettingsSuccess","getApiBaseUrl","getCourseAppsApiUrl","getCourseAdvancedSettingsApiUrl","COURSE_APPS_ORDER","fetchCourseApps","async","dispatch","courseApps","data","camelCaseObject","getCourseApps","sort","firstEl","secondEl","indexOf","courseApp","response","updateAppStatus","appId","enabled","updateCourseApp","fetchCourseAppSettings","settings","settingValues","filter_fields","snakeCase","join","getCourseAdvancedSettings","updateCourseAppSetting","updateCourseAdvancedSettings","configurationChangeConsequence","configureApp","configure","ok","cancel","confirm","confirmConfigurationChange","confirmEnableDiscussionsLabel","cancelEnableDiscussionsLabel","confirmEnableDiscussions","cancelEnableDiscussions","backButton","saveButton","savingButton","savedButton","divisionByGroup","divideByCohortsLabel","divideByCohortsHelp","divideCourseTopicsByCohortsLabel","divideCourseTopicsByCohortsHelp","divideGeneralTopic","divideQuestionsForTAsTopic","cohortsEnabled","instructorDashboard","visibilityInContext","gradedUnitPagesLabel","gradedUnitPagesHelp","groupInContextSubsectionLabel","groupInContextSubsectionHelp","anonymousPosting","allowAnonymousPostsLabel","allowAnonymousPostsHelp","allowAnonymousPostsPeersLabel","allowAnonymousPostsPeersHelp","reportedContentEmailNotifications","reportedContentEmailNotificationsLabel","reportedContentEmailNotificationsHelp","discussionTopics","discussionTopicsLabel","discussionTopicsHelp","discussionTopicRequired","discussionTopicNameAlreadyExist","addTopicButton","deleteButton","cancelButton","discussionTopicDeletionHelp","discussionTopicDeletionLabel","renameGeneralTopic","generalTopicHelp","configureAdditionalTopic","addTopicHelpText","restrictedStartDateHelp","restrictedEndDateHelp","restrictedStartTimeHelp","restrictedEndTimeHelp","restrictedDatesStatus","restrictedStartDateRequired","restrictedEndDateRequired","restrictedStartDateInPast","restrictedEndDateInPast","restrictedStartTimeInPast","restrictedEndTimeInPast","restrictedStartTimeInValidFormat","restrictedEndTimeInValidFormat","restrictedStartDateInValidFormat","restrictedEndDateInValidFormat","discussionRestrictionLabel","discussionRestrictionHelp","discussionRestrictionDatesHelp","addRestrictedDatesButton","configureRestrictedDates","activeRestrictedDatesDeletionLabel","activeRestrictedDatesDeletionHelp","completeRestrictedDatesDeletionHelp","restrictedDatesDeletionLabel","restrictedDatesDeletionHelp","discussionRestrictionOffLabelHelpText","discussionRestrictionOnLabelHelpText","discussionRestrictionScheduledLabelHelpText","enableRestrictedDatesConfirmationLabel","enableRestrictedDatesConfirmationHelp","deleteAltText","expandAltText","collapseAltText","startDateLabel","startTimeLabel","endDateLabel","endTimeLabel","filterItemFromObject","array","filter","item","checkFieldErrors","touched","errors","fieldPath","propertyName","path","Boolean","getIn","checkStatus","startDate","endDate","today","moment","isBefore","constants","isAfter","validTimeFormats","mergeDateTime","date","time","getTime","dateTime","split","hasValidDateFormat","isValid","hasValidTimeFormat","startOfDayTime","startOf","format","endOfDayTime","endOf","normalizeTime","normalizeDate","decodeDateTime","nDate","nTime","sortRestrictedDatesByStatus","order","_","obj","startTime","formatRestrictedDates","formattedDate","endTime","hasSameDay","isSameDay","isSame","hasSameMonth","isSameMonth","hasSameYear","isSameYear","isTimeAvailable","mStartDate","mEndDate","mStartDateTime","mEndDateTime","UPCOMING","COMPLETE","ACTIVE","badgeVariant","deleteRestrictedDatesHelperText","messages","discussionRestriction","DISABLED","ENABLED","SCHEDULED","discussionRestrictionOptions","message","label","FEATURE_TYPES","subtract","appIds","activeAppId","selectedAppId","saveStatus","loadApps","selectApp","updateStatus","updateSaveStatus","useIsMobile","useMediaQuery","query","useIsDesktop","convertObjectToSnakeCase","unpacked","keys","reduce","snakeCaseObj","snakeCaseKey","deepConvertingKeysToCamelCase","Array","isArray","camelCaseObj","camelCaseKey","replace","match","p1","toUpperCase","deepConvertingKeysToSnakeCase","entries","toLowerCase","transformKeysToCamelCase","letter","parseArrayOrObjectValues","result","Number","isNaN","JSON","parse","e","createCorrectInternalRoute","checkPath","basePath","PUBLIC_PATH","endsWith","startsWith","getPagePath","isMfePageEnabled","urlParameter","useAppSetting","settingName","useDispatch","useContext","PagesAndResourcesContext","settingValue","useEffect","includes","getLabelById","options","foundOption","find","option","setupYupExtensions","Yup","property","test","list","index","propertyValue","entry","push","createError","discussionTopic","parent","topic","some","startDateTime","endDateTime","isInvalidStartDateTime","isSameOrAfter","originalValue","convertToDateFromString","dateStr","utc","toDate","convertToStringFromDate","isValidDate","formattedValue","CollapsableEditor","title","open","defaultOpen","onToggle","onClose","onDelete","children","expandAlt","deleteAlt","collapseAlt","_objectWithoutProperties","_excluded","_jsxs","Collapsible","className","style","justifyContent","_jsx","whenClosed","IconButton","alt","src","ExpandMore","iconAs","Icon","variant","whenOpen","onClick","event","stopPropagation","Delete","ExpandLess","propTypes","PropTypes","defaultProps","React","ConnectionErrorAlert","intl","Alert","FormattedMessage","supportLink","href","SUPPORT_URL","formatMessage","intlShape","injectIntl","FormSwitchGroup","helpText","onChange","onBlur","checked","disabled","helpTextId","Form","controlId","SwitchControl","FormikErrorFeedback","useFormikContext","fieldTouched","fieldError","TransitionReplace","hasIcon","FormikControl","help","params","handleChange","handleBlur","setFieldError","onFocus","isInvalid","isRequired","_Fragment","Loading","Spinner","animation","role","screenReaderText","PermissionDeniedAlert","appMessages","ar","arMessages","es419Messages","fr","frMessages","zhcnMessages","pt","ptMessages","it","itMessages","de","deMessages","hi","ru","ruMessages","uk","ukMessages","footerMessages","paragonMessages","canChangeProvider","updateCanChangeProviders","canChangeProviders","applyButton","applyingButton","appliedButton","noProviderSwitchAfterCourseStarted","providerSelection","Incomplete","DiscussionsContext","DiscussionsProvider","contextValue","useMemo","Provider","normalizeRestrictedDates","normalizeData","uuid","normalizePiiSharing","piiSharing","pii_sharing_allowed","piiShareUsername","piiShareEmail","normalizeAppConfig","provider_type","enableDivideByCohorts","always_divide_inline_discussions","division_scheme","enableDivideCourseTopicsByCohorts","divided_course_wide_discussions","allowAnonymousPosts","allow_anonymous","allowAnonymousPostsPeers","allow_anonymous_to_peers","reported_content_email_notifications","enableReportedContentEmailNotifications","reported_content_email_notifications_flag","divisionScheme","alwaysDivideInlineDiscussions","restrictedDates","discussion_blackouts","allowDivisionByUnit","divideByCohorts","divideCourseTopicsByCohorts","available_division_schemes","groupAtSubsection","group_at_subsection","normalizePluginConfig","plugin_configuration","consumerKey","lti_1p1_client_key","consumerSecret","lti_1p1_client_secret","launchUrl","lti_1p1_launch_url","normalizeLtiConfig","lti_configuration","normalizeDiscussionTopic","extractDiscussionTopicIds","normalizeFeatures","apps","feature","app","featureIds","supported","normalizeSettings","enableInContext","enable_in_context","enableGradedUnits","enable_graded_units","unitLevelVisibility","unit_level_visibility","postingRestrictions","posting_restrictions","appConfig","piiConfig","discussionTopicIds","discussion_topics","divideDiscussionIds","denormalizeRestrictedDate","restrictedPeriod","getDiscussionsSettingsUrl","LOADING","LOADED","SAVING","SAVED","hasValidationError","updateValidationStatus","hasError","updateDiscussionTopicIds","updatedDiscussionTopicIds","updateDividedDiscussionsIds","updateDiscussionSettingsState","discussionSettings","fetchProviders","features","updateProviderState","getDiscussionsProvidersUrl","available","externalLinks","learnMore","external_links","learn_more","configuration","general","accessibility","contactEmail","contact_email","hasFullSupport","has_full_support","adminOnlyConfig","admin_only_config","active","normalizeProviders","getDiscussionsProviders","fetchDiscussionSettings","providerId","provider_id","getDiscussionsSettings","saveProviderConfig","drafts","successPath","pluginConfiguration","topics","currentTopic","newTopics","ltiConfiguration","pii_share_username","pii_share_email","version","apiData","context_key","denormalizeData","postDiscussionsSettings","history","heading","supportedFeatures","noApps","nextButton","appFullSupport","appBasicSupport","hideDiscussionTab","hideDiscussionTabTitle","hideDiscussionTabMessage","hideDiscussionOkButton","hideDiscussionCancelButton","SupportedFeature","Check","FeaturesList","styling","AppCard","selected","courseDetail","Card","isClickable","onKeyPress","classNames","subtitle","CheckboxControl","readOnly","appName","size","Responsive","maxWidth","breakpoints","FeaturesTable","basic","partial","full","common","featureSupportType","createRow","appCheckmarkCells","replaceAll","Remove","DataTable","itemCount","columns","Header","accessor","AppListNextButton","discussions","discussionsPath","handleStartConfig","useCallback","Button","AppList","discussionTabToggle","setDiscussionTabToggle","useState","isGlobalStaff","getAuthenticatedUser","administrator","ltiProvider","isOnSmallcreen","useWindowSize","showOneEdxProvider","handleSelectApp","updateSettings","enabledDiscussion","handleClose","handleOk","toggleVal","Container","floatLabelLeft","labelClassName","CardGrid","columnSizes","xs","sm","lg","xl","filteredApps","minWidth","AlertModal","isOpen","isBlocking","footerNode","ActionRow","StatefulButton","labels","IntlAppList","NextButton","SaveFormConnectionErrorAlert","AnonymousPostingFields","AppConfigFormDivider","ConfirmationPopup","bodyText","onConfirm","confirmLabel","onCancel","cancelLabel","confirmVariant","confirmButtonClass","cancelButtonClass","sectionClasses","FieldFeedback","feedbackClasses","transitionClasses","errorCondition","feedbackCondition","feedbackMessage","errorMessage","RestictDatesInput","fieldName","fieldClasses","formGroupClasses","fieldNameCommonBase","dataTestId","inFocus","setInFocus","isInvalidInput","handleFocusOut","handleSetFocus","floatingLabel","CollapseCardHeading","expandHeadingText","collapseHeadingText","badgeStatus","Badge","padding","lineHeight","DiscussionRestrictionItem","restrictedDate","restrictedDateError","showDeletePopup","setShowDeletePopup","collapseIsOpen","setCollapseOpen","setFieldTouched","useIntl","handleToggle","handleOnClose","field","getHeading","handleShowDeletePopup","handleCancelDeletePopup","RestrictDatesInput","zone","RestrictionSchedules","setFieldValue","validateForm","updatedRestrictedDates","newRestrictedDateItem","STATUS","onAddNewItem","FieldArray","render","iconBefore","Add","DiscussionRestriction","selectedRestrictionOption","setSelectedRestrictionOption","handleClick","handleConfirmation","handleCancel","discussionRestrictionButtons","restriction","selectedRestrictionMessage","ButtonGroup","toggle","TopicItem","isGeneralTopic","deleteTopicPopup","deleteDiscussionTopic","controlClassName","OpenedXConfigFormContext","createContext","OpenedXConfigFormProvider","isFormInvalid","discussionTopicErrors","validDiscussionTopics","validTopics","setValidDiscussionTopics","DiscussionTopics","handleOnFocus","currentValidTopics","allDiscussionTopics","allValidTopics","_createElement","topicIndex","topicId","handleTopicDelete","addNewTopic","DivisionByGroupFields","useParams","config","AppContext","learningCourseURL","LMS_BASE_URL","Hyperlink","destination","handleDivideCourseTopicsByCohortsToggle","handleCheckBoxToggle","defaultValue","ReportedContentEmailNotifications","thick","InContextDiscussionFields","showPopup","setShowPopup","OpenedXConfigForm","onSubmit","formRef","legacy","appConfigObj","discussionTopicsModel","legacyAppConfig","additionalFields","enabledGradedUnits","validationSchema","shape","checkFormat","required","when","is","then","compare","uniqueObjectProperty","Formik","initialValues","validateOnChange","handleSubmit","restrictedDatesErrors","ref","documentationPage","formInstructions","consumerKeyRequired","consumerSecretRequired","launchUrlRequired","staffOnlyConfigInfo","staffOnlyConfigGuide","contact","linkTextHeading","linkText","AppExternalLinks","providerName","showLaunchIcon","customClasses","links","linkTypes","rel","link","MailtoLink","to","LtiConfigForm","ltiAppConfig","user","useFormik","isInvalidConsumerKey","isInvalidConsumerSecret","isInvalidLaunchUrl","showLTIConfig","supportEmails","Yellowdig","InScribe","Piazza","supportEmail","AppConfigFormContext","AppConfigFormProvider","AppConfigFormSaveButton","labelText","canSubmit","submitButtonState","handleSave","current","dispatchEvent","Event","cancelable","complete","AppConfigForm","pagesAndResourcesPath","routeAppId","useRouteMatch","isLoading","setLoading","confirmationDialogVisible","setConfirmationDialogVisible","form","alert","ModalDialog","hasCloseButton","fontSize","IntlAppConfigForm","SaveButton","SELECTION_STEP","SETTINGS_STEP","DiscussionsSettings","startStep","currentStep","setCurrentStep","handleBack","FullscreenModal","Stepper","activeKey","modalBodyClassName","beforeBodyNode","eventKey","customPagesIds","addingStatus","deletingStatus","setPageIds","updateAddingStatus","updateDeletingStatus","deleteCustomPageSuccess","customPageId","addCustomPageSuccess","updateCustomPagesApiStatus","proctoringErrors","sendRequestErrors","getDataSendErrors","fetchProctoringExamErrorsSuccess","gradingSettings","courseSettings","fetchGradingSettingsSuccess","sendGradingSettingsSuccess","fetchCourseSettingsSuccess","loadingStatuses","studioHomeLoadingStatus","courseNotificationLoadingStatus","savingStatuses","courseCreatorSavingStatus","deleteNotificationSavingStatus","studioHomeData","updateLoadingStatuses","updateSavingStatuses","fetchStudioHomeDataSuccess","loadingDetailsStatus","loadingSettingsStatus","courseDetails","updateLoadingDetailsStatus","updateLoadingSettingsStatus","updateCourseDetailsSuccess","fetchCourseDetailsSuccess","assetIds","updatingStatus","usageStatus","delete","lock","download","usageMetrics","totalCount","setAssetIds","setTotalCount","updateEditStatus","editType","deleteAssetSuccess","assetId","addAssetSuccess","updateErrors","currentErrorState","clearErrors","loadingCourseTeamStatus","users","showTransferOwnershipHint","allowActions","fetchCourseTeamSuccess","updateLoadingCourseTeamStatus","deleteCourseTeamUser","email","setErrorMessage","courseUpdates","courseHandouts","createCourseUpdateQuery","editCourseUpdateQuery","deleteCourseUpdateQuery","editCourseHandoutsQuery","fetchCourseUpdatesQuery","fetchCourseHandoutsQuery","fetchCourseUpdatesSuccess","createCourseUpdate","editCourseUpdate","courseUpdate","deleteCourseUpdate","sortBy","reverse","fetchCourseHandoutsSuccess","editCourseHandouts","isShow","showProcessingNotification","hideProcessingNotification","loadingHelpUrlsStatus","pages","updatePages","updateLoadingHelpUrlsStatus","exportTriggered","currentStage","msg","unitUrl","downloadPath","successDate","isErrorModalOpen","updateExportTriggered","updateCurrentStage","updateDownloadPath","updateSuccessDate","updateError","updateIsErrorModalOpen","reset","organizationLoadingStatus","courseRerunLoadingStatus","organizations","createOrRerunCourse","courseData","courseRerunData","redirectUrlObj","postErrors","fetchOrganizations","updateCourseData","updateCourseRerunData","updateRedirectUrlObj","updatePostErrors","progress","importTriggered","fileName","updateProgress","updateImportTriggered","updateFileName","initializeStore","preloadedState","configureStore","courseDetailReducer","customPages","customPagesReducer","discussionsReducer","assets","filesReducer","pagesAndResourcesReducer","scheduleAndDetails","scheduleAndDetailsReducer","advancedSettings","advancedSettingsReducer","gradingSettingsReducer","studioHome","studioHomeReducer","modelsReducer","live","liveReducer","courseTeam","courseTeamReducer","CourseUpdatesReducer","processingNotification","processingNotificationReducer","helpUrls","helpUrlsReducer","courseExport","courseExportReducer","generic","genericReducer","courseImport","courseImportReducer","getContentMenuItems","studioBaseUrl","getSettingMenuItems","getToolsMenuItems","courseOrg","courseNumber","courseTitle","isHiddenMainMenu","mainMenuDropdowns","buttonTitle","items","outlineLink","StudioHeader","org","number","fetchCourseDetail","username","course_id","normalizeCourseDetail","getCourseDetail","Date","start","AppHeader","CourseAuthoringPage","inProgress","pathname","useLocation","showHeader","StudioFooter","viewLiveButton","contentPermissions","getXpertSettingsUrl","postXpertSettings","getXpertPluginConfigurable","getXpertConfigurationStatusUrl","fetchXpertSettings","getXpertSettings","save","saved","retry","resetAllUnits","resetAllUnitsTooltipChecked","resetAllUnitsTooltipUnchecked","errorSavingTitle","errorSavingMessage","allowedOperations","enable","documentationLinks","learnMoreConfiguration","viewBox","focusable","transform","AppSettingsForm","formikProps","showForm","SettingsModalBase","isMobile","footer","isFullscreenOnMobile","ResetUnitsButton","visible","resetStatusRequestStatus","setTimeout","messageKey","OverlayTrigger","placement","overlay","Tooltip","finish","icons","ResetIcon","SpinnerSimple","CheckCircleOutline","getResetButtonState","handleResetUnits","success","resetXpertSettings","disabledStates","SettingsModal","configureBeforeEnable","onSettingsSave","enableAppLabel","enableAppHelp","learnMoreText","helpPrivacyText","enableReinitialize","allUnitsEnabledText","noUnitsEnabledText","updateSettingsRequestStatus","alertRef","useRef","saveError","setSaveError","modalVariant","xpertSettings","handleFormikSubmit","scrollIntoView","learnMoreLink","appInfo","helpPrivacyLink","toString","oneOf","updateXpertSettings","deleteXpertSettings","removeXpertSettings","dirty","icon","Info","marginAdj","enableXpertUnitSummaryLabel","enableXpertUnitSummaryHelp","enableXpertUnitSummaryHelpPrivacyLink","enableXpertUnitSummaryLink","allUnitsEnabledByDefault","noUnitsEnabledByDefault","XpertUnitSummarySettings","CoursePageShape","legacyLink","PageCard","page","isDesktop","SettingsButton","ArrowForward","Settings","PageGrid","getPageHeadTitle","courseName","pageName","isEmpty","PagesAndResources","document","fetchXpertPluginConfigurable","LEARNING_BASE_URL","xpertPluginConfigurable","permissonPages","XpertAppInfo","PagesAndResourcesProvider","Switch","PageRoute","SettingsComponent","console","trace","Suspense","fallback","ProctoredExamSettings","loading","loaded","setLoaded","loadingConnectionError","setLoadingConnectionError","loadingPermissionError","setLoadingPermissionError","enableProctoredExams","setEnableProctoredExams","allowOptingOut","setAllowOptingOut","allowLtiProviders","setAllowLtiProviders","proctoringProvider","setProctoringProvider","availableProctoringProviders","setAvailableProctoringProviders","ltiProctoringProviders","setLtiProctoringProviders","proctortrackEscalationEmail","setProctortrackEscalationEmail","createZendeskTickets","setCreateZendeskTickets","courseStartDate","setCourseStartDate","saveSuccess","setSaveSuccess","submissionInProgress","setSubmissionInProgress","showProctortrackEscalationEmail","setShowProctortrackEscalationEmail","isEdxStaff","formStatus","setFormStatus","saveStatusAlertRef","proctoringEscalationEmailInputRef","onAllowOptingOutChange","onCreateZendeskTicketsChange","setFocusToProctortrackEscalationEmailInput","focus","isLtiProvider","provider","p","cannotEditProctoringProvider","currentDate","isDisabledOption","markDisabled","getProviderDisplayLabel","verbose_name","fetchExamSettingsPending","Promise","all","resolve","settingsResponse","examConfigResponse","ltiProvidersResponse","proctoredExamSettings","proctored_exam_settings","course_start_date","enable_proctored_exams","allow_proctoring_opt_out","isProctortrack","proctoring_provider","proctoringProvidersStudio","available_proctoring_providers","proctoringProvidersLti","enableLtiProviders","availableProviders","proctoringEscalationEmail","proctoring_escalation_email","create_zendesk_tickets","fetchExamSettingsSuccess","catch","fetchExamSettingsFailure","studioCourseRunURL","dismissible","tabIndex","renderSaveSuccess","support_link","preventDefault","EmailValidator","providerIsLti","studioDataToPostBack","saveOperations","postSettingsBackToServer","formProctortrackEscalationEmail","dialogErrorMessage","inputErrorMessage","numOfErrors","messageId","getFormErrorMessage","inline","as","providers","EditorContainer","blockType","blockId","EditorPage","studioEndpointUrl","lmsEndpointUrl","VideoSelectorContainer","VideoSelectorPage","getTabHandlerUrl","errorAlertMessage","note","addPageHeaderLabel","viewLiveLabel","pageExplanationHeader","pageExplanationBody","customPagesExplanationHeader","customPagesExplanationBody","studentViewExplanationHeader","studentViewExplanationBody","studentViewExampleButton","studentViewModalTitle","studentViewModalBody","newPageTitle","editTooltipContent","deleteTooltipContent","visibilityTooltipContent","addPageBodyLabel","addingPageBodyLabel","deleteConfirmationTitle","deleteConfirmationMessage","deletePageLabel","deletingPageBodyLabel","cancelButtonLabel","CustomPagesContext","CustomPagesProvider","CustomPageCard","deletePageStatus","setCurrentPage","isDeleteConfirmationOpen","openDeleteConfirmation","closeDeleteConfirmation","useToggle","customPagesPath","deletePageStateProps","IconButtonWithTooltip","tooltipPlacement","tooltipContent","EditOutline","handleEditOpen","courseStaffOnly","VisibilityOff","Visibility","toggleVisibilty","metadata","pageData","htmlString","put","updateCustomPage","updateCustomPageVisibility","course_staff_only","DeleteOutline","handleDelete","closeConfirmation","deleteCustomPage","deleteSingleCustomPage","EditModal","pageId","position","top","left","right","bottom","returnFunction","CustomPages","orderedPages","setOrderedPages","currentPage","close","isEditModalOpen","openEditModal","closeEditModal","getCustomPages","fetchCustomPages","addPageStatus","handleAddPage","courseBlockId","substring","category","parent_locator","addCustomPage","locator","addSingleCustomPage","addPageStateProps","Placeholder","Breadcrumb","ariaLabel","Layout","span","offset","md","ErrorAlert","hideHeading","isError","actionName","DraggableList","itemList","setState","updateOrder","handleReorder","newPageOrder","tabs","currentTab","tab_locator","updateCustomPageOrder","updatePageOrder","SortableItem","componentStyle","background","borderRadius","marginBottom","boxShadow","Image","previewLmsStaticPages","fluid","handleEditClose","content","displayName","updateSingleCustomPage","display_name","getAssetsUrl","getAssets","pageCount","images","documents","audio","code","updateFileValues","files","updatedFiles","file","wrapperType","FILES_AND_UPLOAD_TYPE_FILTERS","contentType","dateAdded","utcDateString","utcDateTime","usageLocations","getSrc","thumbnail","externalUrl","InsertDriveFile","Terminal","AudioFile","getFileSizeToClosestByte","fileSize","numberOfDivides","fileSizeFixedDecimal","parseFloat","toFixed","addAssetFile","asset","formData","FormData","append","addAsset","parsedAssest","resetErrors","errorType","subheading","apiStatusToastMessage","apiStatusAddingAction","apiStatusDeletingAction","fileSizeError","noResultsFoundMessage","addFilesButtonLabel","actionsButtonLabel","dateAddedTitle","fileSizeTitle","studioUrlTitle","webUrlTitle","lockFileTitle","lockFileTooltipContent","usageTitle","usageLoadingMessage","usageNotInUseMessage","copyStudioUrlTitle","copyWebUrlTitle","downloadTitle","lockMenuTitle","unlockMenuTitle","infoTitle","deleteTitle","deleteFileButtonLabel","sortButtonLabel","sortModalTitleLabel","sortByNameAscending","sortByNewest","sortBySizeDescending","sortByNameDescending","sortByOldest","sortBySizeAscending","applySortButton","AssetThumbnail","UsageMetricsMessage","usageMessage","usagePathStatus","location","listStyle","Row","ErrorOutline","FileInfo","handleLockedAsset","lockedState","setLockedState","locked","wordBreak","Truncate","lines","Stack","FormattedDate","year","month","day","hour","minute","portableUrl","ContentCopy","navigator","clipboard","writeText","InfoOutline","UsageMetricsMessages","FileInput","fileInput","hook","addFile","multiple","Element","FilesAndUploadsContext","FilesAndUploadsProvider","FileMenu","handleLock","onDownload","openAssetInfo","iconSrc","Dropdown","GalleryCard","original","handleBulkDownload","handleOpenDeleteConfirmation","handleOpenAssetInfo","lockAsset","MoreVert","Chip","ListCard","orientation","TableActions","selectedFlatRows","fileInputControl","handleSort","isSortOpen","openSort","closeSort","setSortBy","click","SelectableBox","ApiStatusToast","actionType","selectedRowCount","setClose","setSelectedRows","Toast","show","FilesAndUploads","defaultVal","currentView","setCurrentView","isDeleteOpen","setDeleteOpen","setDeleteClose","isAssetInfoOpen","closeAssetinfo","isAddOpen","setAddOpen","setAddClose","selectedRows","parsedAssests","fetchAssets","addAssetStatus","deleteAssetStatus","updateAssetStatus","errorMessages","onAddFile","useFileInput","sortType","newAssetIdOrder","sortFiles","direction","sortedFiles","f1","f2","lowerCaseF1","lowerCaseF2","sortedIds","updateAssetOrder","downloadErrors","zip","JSZip","folder","assetNames","definedAssets","allSettled","row","res","fetch","Error","blob","assetBlob","generateAsync","saveAs","getDownload","fetchAssetDownload","updateLockStatus","updateAssetLock","getAssetUsagePaths","getUsagePaths","headerActions","fileCard","isFilterable","isSortable","isSelectable","isPaginated","defaultColumnValues","Filter","TextFilter","dataViewToggleOptions","isDataViewToggleEnabled","onDataViewToggle","val","defaultActiveStateValue","togglePlacement","pageSize","tableActions","bulkActions","CheckboxFilter","filterChoices","Math","ceil","Dropzone","onProcessUpload","fileData","handleError","maxSize","invalidSize","multipleDragged","CardView","CardComponent","selectionPlacement","skeletonCardCount","handleBulkDelete","deleteAsset","deleteAssetFile","fileNumber","AlertProctoringError","proctoringErrorsData","deprecated","hideOnEnabledPublisher","AlertMessage","offlineWarningTitle","offlineWarningDescription","offlineWarningTitleAriaLabelledBy","offlineWarningDescriptionAriaDescribedBy","InternetConnectionAlert","isFailed","isQueryPending","onQueryProcessing","onInternetConnectionFailed","showAlert","setShowAlert","isOnline","setIsOnline","window","onLine","handleOnlineStatus","events","addEventListener","removeEventListener","WarningIcon","SubHeader","contentTitle","instruction","fetchProctoringExamErrors","getProctoringExamErrors","getCourseAppSettings","getSendRequestErrors","developer_message","helpButtonText","SettingCard","settingData","setEdited","showSaveSettingsPrompt","saveSettingsPrompt","isEditableState","setIsEditableState","initialValue","stringify","setTarget","newValue","setNewValue","capitalize","ModalPopup","hasArrow","positionRef","dangerouslySetInnerHTML","__html","TextareaAutosize","handleCardBlur","prevEditedSettings","Warning","otherLinkURLParams","grading","groupConfigurations","sidebarTitleOther","sidebarLinkToScheduleAndDetails","sidebarLinkToGrading","sidebarLinkToCourseTeam","sidebarLinkToGroupConfigurations","sidebarLinkToProctoredExamSettings","sidebarLinkToAdvancedSettings","HelpSidebarLink","pathToPage","TagElement","HelpSidebar","showOtherSettings","proctoredExamSettingsUrl","showOtherLink","generateLegacyURL","URL","scheduleAndDetailsDestination","gradingDestination","courseTeamDestination","advancedSettingsDestination","groupConfigurationsDestination","about","aboutDescription1","aboutDescription2","other","otherCourseSettingsLinkToScheduleAndDetails","otherCourseSettingsLinkToGrading","otherCourseSettingsLinkToCourseTeam","otherCourseSettingsLinkToGroupConfigurations","otherCourseSettingsLinkToProctoredExamSettings","SettingsSidebar","notice","validateAdvancedSettingsData","settingObj","setErrorFields","setEditedSettings","fieldsWithErrors","targetSettingValue","firstNonWhite","trim","quotedE","pushDataToErrorArray","prevState","headingTitle","headingSubtitle","policy","alertWarning","alertWarningDescriptions","alertSuccess","alertSuccessDescriptions","alertProctoringError","alertProctoringErrorDescriptions","buttonSaveText","buttonSavingText","buttonCancelText","deprecatedButtonShowText","deprecatedButtonHideText","alertWarningAriaLabelledby","alertWarningAriaDescribedby","alertSuccessAriaLabelledby","alertSuccessAriaDescribedby","alertProctoringAriaLabelledby","alertProctoringDescribedby","ModalErrorListItem","settingsData","modalErrorTitle","modalErrorButtonChangeManually","modalErrorButtonUndoChanges","ModalError","handleUndoChanges","showErrorModal","errorList","errorCounter","AdvancedSettings","showDeprecated","setShowDeprecated","errorModal","editedSettings","errorFields","showSuccessAlert","setShowSuccessAlert","setIsQueryPending","hasInternetConnectionError","setInternetConnectionError","sortedDisplayName","sortedSettingValues","advancedSettingsData","proctoringExamErrors","settingsWithSendErrors","updateSettingsButtonState","mfeProctoredExamSettingsUrl","scrollTo","behavior","handleResetSettingsValues","handleSettingBlur","CheckCircle","visibility","handleQueryProcessing","errorData","customAttributes","httpErrorResponseData","err","handleInternetConnectionFailed","handleUpdateAdvancedSettingsData","setToState","handleManuallyChangeClick","getCourseDetailsApiUrl","updateCourseDetailsQuery","details","detailsValues","updateCourseDetails","fetchCourseSettingsQuery","settingsValues","getCourseSettingsApiUrl","getCourseSettings","getLoadingDetailsStatus","getLoadingSettingsStatus","getCourseDetails","SectionSubHeader","basicTitle","basicDescription","basicEmailIcon","courseOrganization","courseRun","basicBannerTitle","basicBannerText","basicPromotionButton","BasicSection","run","lmsLinkForAboutPage","marketingEnabled","courseDisplayName","platformName","showPageBanner","setShowPageBanner","emailSubject","emailBody","promotionTitle","smallText","courseBasicInfo","prefix","info","PageBanner","onDismiss","process","subject","body","EmailIcon","creditTitle","creditDescription","creditHelp","creditMinimumGrade","creditProctoredExam","creditVerification","creditNotFound","CreditSection","creditRequirements","CREDIT_REQUIREMENTS_TYPES","grade","proctoredExam","reverification","requirements","creditRequirementsKeys","renderRequirementValue","requirementValue","displayValue","criteria","minGrade","renderCreditRequirements","creditRequirementsNamespace","min_grade","creditRequirementsPropTypes","detailsTitle","detailsDescription","dropdownLabel","dropdownHelpText","dropdownEmpty","DetailsSection","language","languageOptions","formattedLanguage","arr","uploadImageHelpText","uploadImageFilesAndUploads","uploadImageDropzoneText","uploadImageDropzoneAlt","uploadImageEmpty","uploadImageIconAlt","uploadImageBodyFilled","uploadImageInputPlaceholder","CourseUploadImage","customHelpText","assetImagePath","imageNameField","assetImageField","identifierFieldText","showImageBodyText","customInputPlaceholder","imageAbsolutePath","assetsUrl","handleChangeImageAsset","assetPath","imageName","inputComponent","isActive","FileUploadIcon","cardImageTextBody","hyperlink","getUploadAssetsUrl","uploadAssets","accept","placeholder","store","createStore","SUPPORTED_TEXT_EDITORS","text","expandable","Editor","connect","mapStateToProps","isLibrary","onEditorChange","TinyMceWidget","WysiwygEditor","editorType","minHeight","editorRef","refReady","setEditorRef","prepareEditorRef","textValue","editorContentHtml","handleUpdate","editor","bm","selection","getBookmark","existingContent","getContent","isEquivalentCodeQuotes","first","second","normalizeQuotes","section","isEquivalentCodeExtraSpaces","removeWhitespace","str","needToChange","setContent","moveToBookmark","initializeEditor","courseIntroductionVideoLabel","courseIntroductionVideoDelete","courseIntroductionVideoHelpText","courseIntroductionVideoPlaceholder","IntroductionVideo","introVideo","embedVideoUrl","frameBorder","allowFullScreen","extendedTitleLabel","extendedTitleHelpText","extendedTitleAriaLabel","extendedSubtitleLabel","extendedSubtitleHelpText","extendedSubtitleAriaLabel","extendedDurationLabel","extendedDurationHelpText","extendedDurationAriaLabel","extendedDescriptionLabel","extendedDescriptionHelpText","extendedDescriptionAriaLabel","ExtendedCourseDetails","duration","paramsForExtendedFields","controlName","maxLength","asTextarea","param","introducingTitle","introducingDescription","courseShortDescriptionLabel","courseShortDescriptionAriaLabel","courseShortDescriptionHelpText","courseOverviewLabel","courseOverviewHelpText","courseAboutHyperlink","courseAboutSidebarLabel","courseAboutSidebarHelpText","courseCardImageLabel","courseCardImageIdentifierText","courseBannerImageLabel","courseBannerImageInsertText","courseVideoThumbnailLabel","courseVideoThumbnailInsertText","IntroducingSection","overview","aboutSidebarHtml","shortDescription","aboutPageEditable","sidebarHtmlEnabled","courseImageAssetPath","bannerImageAssetPath","shortDescriptionEditable","enableExtendedCourseDetails","videoThumbnailImageAssetPath","overviewHelpText","aboutSidebarHelpText","pacingTitle","pacingDescription","pacingRestriction","pacingTypeInstructorLabel","pacingTypeInstructorDescription","pacingTypeSelfLabel","pacingTypeSelfDescription","PacingSection","selfPaced","canTogglePace","calendarAltText","datepickerUTC","DATEPICKER_TYPES","DatepickerControl","showUTC","readonly","inputFormat","Calendar","DatePicker","dateFormat","timeFormat","autoComplete","selectsStart","showTimeSelect","showTimeSelectOnly","placeholderText","toLocaleUpperCase","showPopperArrow","SCHEDULE_ROW_TYPES","ScheduleRow","errorFeedback","certificateBehaviorLabel","certificateBehaviorHelpText","certificateAvailableDateLabel","certificateDisplayBehaviorToggleTitle","certificateDisplayBehaviorToggleParagraph","certificateDisplayBehaviorToggleHeading1","certificateDisplayBehaviorToggleParagraph1","certificateDisplayBehaviorToggleHeading2","certificateDisplayBehaviorToggleParagraph2","certificateDisplayBehaviorToggleHeading3","certificateDisplayBehaviorToggleParagraph3","certificateBehaviorDropdownOption1","certificateBehaviorDropdownOption2","certificateBehaviorDropdownOption3","certificateBehaviorDropdownEmpty","CERTIFICATE_DISPLAY_BEHAVIOR","earlyNoInfo","end","endWithDate","CertificateDisplayRow","certificateAvailableDate","availableDateErrorFeedback","certificatesDisplayBehavior","displayBehaviorErrorFeedback","dropdownOptions","formattedCertificateBehavior","certificateDisplayValue","showAvailableDate","claswsName","handleOnChange","optionId","renderReadMoreToggle","readMore","paragraph","scheduleTitle","scheduleDescription","scheduleCourseStartDateLabel","scheduleCourseStartDateHelpText","scheduleCourseStartTimeLabel","scheduleCourseEndDateLabel","scheduleCourseEndDateHelpText","scheduleCourseEndTimeLabel","scheduleEnrollmentStartDateLabel","scheduleEnrollmentStartDateHelpText","scheduleEnrollmentStartTimeLabel","scheduleEnrollmentEndDateLabel","scheduleEnrollmentEndDateHelpText","scheduleEnrollmentEndDateRestrictedHelpText","scheduleEnrollmentEndTimeLabel","scheduleUpgradeDeadlineDateLabel","scheduleUpgradeDeadlineDateHelpText","scheduleUpgradeDeadlineTimeLabel","ScheduleSection","enrollmentEnd","enrollmentStart","upgradeDeadline","enrollmentEndEditable","canShowCertificateAvailableDateField","enrollmentEndHelpText","enrollmentEndHelpTexRestricted","computedEnrollmentEndHelpText","propsForScheduleFields","rowType","skip","fieldProps","restProps","_excluded2","outcomesTitle","outcomesDescription","outcomesDelete","outcomesAdd","outcomesInputPlaceholder","outcomesLabelIncrement","LearningOutcomesSection","learningInfo","renderLearningOutcomeItem","idx","isInline","handleInputChange","updatedInfo","splice","AddIcon","handleAdd","instructorNameLabel","instructorNameHelpText","instructorNameInputPlaceholder","instructorTitleLabel","instructorTitleHelpText","instructorTitleInputPlaceholder","instructorOrganizationLabel","instructorOrganizationHelpText","instructorOrganizationInputPlaceholder","instructorBioLabel","instructorBioHelpText","instructorBioInputPlaceholder","instructorPhotoLabel","instructorPhotoHelpText","instructorPhotoInputPlaceholder","instructorDelete","InstructorContainer","instructor","Col","organization","bio","image","instructorsTitle","instructorsDescription","instructorAdd","InstructorsSection","instructors","newInstructor","updatedInstructors","updatedInstructorInfo","requirementsEntranceCollapseLabel","requirementsEntranceCollapseHelpText","GradeRequirements","errorEffort","entranceExamMinimumScorePct","min","max","trailingElement","requirementsEntrance","requirementsEntranceCollapseTitle","requirementsEntranceCollapseParagraph","requirementsEntranceCollapseHyperlink","EntranceExam","isCheckedString","showEntranceExam","courseOutlineDestination","toggleEntranceExam","requirementsTitle","requirementsDescription","timepickerLabel","timepickerHelpText","dropdownEmptyText","RequirementsSection","effort","preRequisiteCourses","entranceExamEnabled","isEntranceExamsEnabled","possiblePreRequisiteCourses","isPrerequisiteCoursesEnabled","selectedItem","course","courseKey","formattedSelectedItem","preRequisitesCourse","lmsLink","rerunLink","LICENSE_TYPE","allRightsReserved","creativeCommons","LICENSE_COMMONS_OPTIONS","attribution","nonCommercial","noDerivatives","shareAlike","condition","wrapper","allRightReservedLabel","creativeCommonsReservedLabel","LicenseIcons","licenseType","licenseDetails","licenseURL","ApplyWrapper","gap","Copyright","Cc","Attribution","Nc","Nd","Sa","licenseDisplayLabel","licenseDisplayParagraph","LicenseDisplay","licenseChoice1","licenseChoice2","licenseTooltip1","licenseTooltip2","creativeCommonsURLParagraph","LicenseSelector","onChangeLicenseType","LICENSE_BUTTON_GROUP_LABELS","tooltip","renderButton","licenseCreativeOptionsLabel","licenseCreativeOptionsHelpText","licenseCreativeOptionBYLabel","licenseCreativeOptionBYDescription","licenseCreativeOptionNCLabel","licenseCreativeOptionNCDescription","licenseCreativeOptionNDLabel","licenseCreativeOptionNDDescription","licenseCreativeOptionSALabel","licenseCreativeOptionSADescription","LicenseCommonsOptions","onToggleCheckbox","optionDetails","handleCheckboxClick","licenseTitle","licenseDescription","LicenseSection","license","handleToggleCheckbox","handleChangeLicenseType","useLicenseDetails","setLicenseType","setLicenseDetails","setLicenseURL","defaultLicenseDetails","prevLicenseDetails","updateLicense","orderedDetails","updatedString","toggledLicenseDetail","prev","scheduleSidebarTitle","scheduleSidebarAbout","ScheduleSidebar","alertWarningOnSaveWithError","alertWarningDescriptionsOnSaveWithError","errorMessage1","errorMessage2","errorMessage3","errorMessage4","errorMessage5","errorMessage6","errorMessage7","errorMessage8","isDateBeforeOrEqual","dateFormer","dateLatter","ScheduleAndDetails","editedValues","showModifiedAlert","showSuccessfulAlert","handleResetValues","handleValuesChange","handleUpdateValues","updateDataQuery","initialEditedData","setEditedValues","setShowSuccessfulAlert","setShowModifiedAlert","validateScheduleAndDetails","prevEditedValues","updateWithDefaultValues","useSaveValuesPrompt","isCreditCourse","licensingEnabled","creditEligibilityEnabled","instructorInfo","fetchCourseDetailsQuery","showCreditSection","showRequirementsSection","hasErrors","updateValuesButtonState","alertWhileSavingTitle","alertWhileSavingDescription","CheckCircleIcon","getGradingSettings","getCourseAssignmentLists","courseAssignmentLists","getGradingSettingsApiUrl","_objectWithoutPropertiesLoose","excluded","sourceKeys","sortNumList","concat","a","b","linearInterpolator","getPercentageForValue","getValueForClientX","clientX","trackDims","addNewSegmentButtonAltText","removeSegmentButtonText","segmentFailGradingText","defaultPassText","MAXIMUM_SCALE_LENGTH","getLettersOnLongScale","letters","gradingSegments","getLettersOnShortScale","END_OF_SCALE_NAME","GradingScaleHandle","getHandleProps","cursor","display","previous","GradingScaleTick","getTickProps","GradingScaleSegment","getSegmentProps","handleLetterChange","removeGradingSegment","DEFAULT_LETTERS","getDefaultPassText","GradingScale","showSavePrompt","gradeCutoffs","setGradingData","resetDataRef","gradeLetters","sortedGrades","setOverrideInternetConnectionAlert","setEligibleGrade","setGradingSegments","setLetters","convertedResult","setConvertedResult","gradingSegmentsValues","eligibleValue","prevData","convertGradeData","convertedData","gradingSegmentIndex","prevSegments","updatedSegments","removedSegment","previousSegment","prevLetters","updatedLetters","getTrackProps","ticks","segments","handles","activeHandleIndex","_ref$interpolator","interpolator","_ref$tickSize","tickSize","controlledTicks","steps","onDrag","stepSize","_React$useState","setActiveHandleIndex","_React$useState2","tempValues","setTempValues","getLatest","useGetLatest","trackElRef","element","rect","getBoundingClientRect","getNextStep","nextIndex","nextVal","roundToStep","step","handleDrag","_getLatest","changedTouches","newRoundedValue","newValues","handleKeyDown","_getLatest2","_getLatest2$onChange","keyCode","handlePress","handleRelease","_getLatest3","_getLatest3$onChange","_getLatest3$onDrag","sortedValues","_temp","_ref2$key","_ref2$style","rest","_temp2","_ref3$key","_ref3$style","_temp3","_ref4$key","_onKeyDown","innerRef","onKeyDown","_onMouseDown","onMouseDown","_onTouchStart","onTouchStart","_ref4$style","persist","zIndex","_temp4","_ref5$style","el","userSelect","useRanger","segment","segmentDataArray","updateGradingSegments","newGradingSegmentData","sortedSegments","currentValue","previousValue","newSegmentValue","prevSegmentBoundary","nextSegmentBoundary","gradingSegment","upperBoundaryValue","lowerBoundaryValue","handleSegmentChange","IconAdd","addNewGradingSegment","firstSegment","secondSegment","newCurrentValue","newSegment","updatedSecondSegment","GradingScaleTicks","gradingSidebarTitle","gradingSidebarAbout1","gradingSidebarAbout2","gradingSidebarAbout3","GradingSidebar","policiesDescription","creditEligibilitySectionTitle","creditEligibilitySectionDescription","gradingRulesPoliciesSectionTitle","gradingRulesPoliciesSectionDescription","assignmentTypeSectionTitle","assignmentTypeSectionDescription","addNewAssignmentTypeBtn","DUPLICATE_ASSIGNMENT_NAME","ASSIGNMENT_TYPES","weight","minCount","dropCount","defaultAssignmentsPropTypes","shortLabel","updateAssignmentErrorList","assignmentName","assignmentId","setErrorList","setShowSavePrompt","assignmentValue","AssignmentItem","descriptions","errorMsg","secondErrorMsg","gradeField","assignmentTypeNameTitle","assignmentTypeNameDescription","assignmentTypeNameErrorMessage1","assignmentTypeNameErrorMessage2","assignmentTypeNameErrorMessage3","abbreviationTitle","abbreviationDescription","weightOfTotalGradeTitle","weightOfTotalGradeDescription","weightOfTotalGradeErrorMessage","totalNumberTitle","totalNumberDescription","totalNumberErrorMessage","numberOfDroppableTitle","numberOfDroppableDescription","numberOfDroppableErrorMessage","numberOfDroppableSecondErrorMessage","assignmentAlertWarningTitle","assignmentAlertWarningDescription","assignmentAlertWarningUsageTitle","assignmentAlertWarningSuccess","assignmentDeleteButton","AssignmentTypeName","initialAssignmentName","AssignmentSection","handleRemoveAssignment","graders","every","handleAssignmentChange","inputType","inputValue","parseInt","grader","validationAssignmentFields","assignmentType","courseGraders","weightOfTotalGrade","assignmentMinCount","assignmentDropCount","courseGradingTypes","courseAssignmentUsage","showDefinedCaseAlert","showNotDefinedCaseAlert","assignmentItem","creditEligibilityLabel","creditEligibilityDescription","creditEligibilityErrorMsg","eligibleGrade","minimumGradeCredit","setErrorEffort","round","formatTime","gracePeriodOnDeadlineLabel","gracePeriodOnDeadlineDescription","gracePeriodOnDeadlineErrorMsg","DeadlineSection","gracePeriod","timeStampValue","hours","minutes","newDeadlineValue","setNewDeadlineValue","setIsError","inputStr","timerValidation","GradingSettings","gradingSettingsData","courseSettingsData","showOverrideInternetConnectionAlert","gradingData","handleResetPageData","handleAddAssignment","useUpdateGradingData","uniqueId","uuidv4","gradeValues","cutoffs","sortedArray","getSortedGrades","useConvertGradeCutoffs","fetchGradingSettings","sendGradingSettings","sendGradingSetting","handleSendGradingSettingsData","addNewMemberButton","sidebarTitle","sidebarAbout_1","sidebarAbout_2","sidebarAbout_3","ownershipTitle","ownershipDescription","addAdminAccess","CourseTeamSideBar","isOwnershipHint","isShowInitialSidebar","strong","formTitle","formLabel","formPlaceholder","formHelperText","addUserButton","MODAL_TYPES","AddUserForm","validateOnBlur","button","AddTeamMember","onFormOpen","isButtonDisable","roleAdmin","roleStaff","roleYou","hint","addButton","removeButton","deleteUserButton","CourseTeamMember","userName","onChangeRole","currentUserEmail","isHideActions","isAllowActions","isAdminRole","badgeColor","deleteModalTitle","deleteModalMessage","deleteModalDeleteButton","deleteModalCancelButton","errorModalTitle","errorModalOkButton","warningModalTitle","warningModalMessage","warningModalReturnButton","InfoModal","modalType","onDeleteSubmit","currentEmail","closeButtonText","submitButtonText","closeButtonVariant","getInfoModalSettings","mainButtonVariant","isEmptyErrorMessage","getCourseTeamApiUrl","updateCourseTeamUserApiUrl","getCourseTeam","getCourseTeamUsers","getCourseTeamLoadingStatus","getErrorMessage","getIsAllowActions","getIsOwnershipHint","useCourseTeam","setModalType","isInfoModalOpen","openInfoModal","closeInfoModal","isFormVisible","openForm","hideForm","setCurrentEmail","courseTeamUsers","isSingleAdmin","handleOpenInfoModal","fetchCourseTeamQuery","isInternetConnectionAlertFailed","isShowAddTeamMember","isShowUserFilledSidebar","handleAddUserSubmit","createTeamUser","createCourseTeamQuery","handleOpenDeleteModal","handleDeleteUserSubmit","deleteTeamUser","deleteCourseTeamQuery","handleChangeRoleUserSubmit","changeRoleTeamUser","changeRoleTeamUserQuery","CourseTeam","getProcessingNotification","ProcessingNotification","IconSettings","handoutsTitle","editButton","CourseHandouts","contentForHandouts","onEdit","isDisabledButtons","isDateForUpdateValid","parsedDate","CourseUpdate","dateForUpdate","contentForUpdate","ErrorIcon","deleteModalDescription","DeleteModal","REQUEST_TYPES","updateFormDate","updateFormInValid","updateFormCalendarAltText","updateFormErrorAltText","addNewUpdateTitle","editUpdateTitle","editHandoutsTitle","postButton","UpdateForm","requestType","courseUpdatesInitialValues","isInnerForm","isFirstUpdate","currentContent","contentFieldName","geUpdateFormSettings","updatesValidationSchema","validateOnMount","CalendarIcon","sectionInfo","newUpdateButton","getCourseUpdates","getCourseHandouts","getSavingStatuses","getLoadingStatuses","getCourseUpdatesApiUrl","updateCourseUpdatesApiUrl","updateId","getCourseHandoutApiUrl","formattedCourseId","matchesAnyStatus","statuses","s","CourseUpdates","isMainFormOpen","isInnerFormOpen","isUpdateFormOpen","isDeleteModalOpen","closeUpdateForm","closeDeleteModal","handleUpdatesSubmit","handleOpenUpdateForm","handleOpenDeleteForm","handleDeleteUpdateSubmit","initialUpdate","setRequestType","openUpdateForm","openDeleteModal","currentUpdate","setCurrentUpdate","dataToSend","handleQuerySubmit","handler","createUpdate","editUpdate","editHandouts","deleteUpdate","useCourseUpdates","isShowProcessingNotification","processingNotificationTitle","anyStatusFailed","anyStatusInProgress","anyStatusPending","pageTitle","description1","description2","titleUnderButton","getPages","useHelpUrls","tokenNames","helpTokens","names","urlsDictionary","urls","getHelpUrls","title1","exportedContent","exportedContentHeading","content1","content2","content3","content4","content5","notExportedContent","content6","content7","openDownloadFile","openDownloadFileDescription","learnMoreButtonTitle","ExportSidebar","exportCourse","exportLearnMoreUrl","studioShortName","STUDIO_SHORT_NAME","getExportTriggered","getCurrentStage","getDownloadPath","getSuccessDate","getError","getIsErrorModalOpen","LAST_EXPORT_COOKIE_NAME","EXPORT_STAGES","PREPARING","EXPORTING","COMPRESSING","SUCCESS","setExportCookie","completed","Cookies","set","startExportingCourse","exportData","postExportCourseApiUrl","startCourseExporting","exportStatus","valueOf","fetchExportStatus","exportOutput","exportError","getExportStatusApiUrl","getExportStatus","abs","cookieData","rawErrorMsg","errorUnitUrl","editUnitUrl","handleAction","cancelButtonText","actionButtonText","errorTitle","errorDescriptionNotUnit","errorDescriptionUnit","errorCancelButtonUnit","errorCancelButtonNotUnit","errorActionButtonNotUnit","errorActionButtonUnit","ExportModalError","unitErrorUrl","handleUnitRedirect","handleRedirectCourseHome","exportedDataTitle","exportedDataItem1","exportedDataItem2","exportedDataItem3","exportedDataItem4","exportedDataItem5","exportedDataItem6","exportedDataItem7","notExportedDataTitle","notExportedDataItem1","notExportedDataItem2","notExportedDataItem3","notExportedDataItem4","ExportFooter","CourseStepper","percent","stepIcon","isPercentShow","isErrorMessageShow","isActiveClass","isDoneClass","isErrorClass","lastStepIndex","isActiveStep","isLastStep","isErrorStep","isLastStepDone","SuccessIcon","SettingsIcon","getStepperSettings","done","stepperPreparingTitle","stepperExportingTitle","stepperCompressingTitle","stepperSuccessTitle","stepperPreparingDescription","stepperExportingDescription","stepperCompressingDescription","stepperSuccessDescription","downloadCourseButtonTitle","stepperHeaderTitle","ExportStepper","isStopFetching","setInterval","clearInterval","successTitle","localizedSuccessDate","CourseExportPage","cookies","isShowExportButton","anyRequestFailed","anyRequestInProgress","Helmet","siteName","block","ArrowCircleDownIcon","LAST_IMPORT_COOKIE_NAME","IMPORT_STAGES","UPLOADING","UNPACKING","VERIFYING","UPDATING","setImportCookie","startCourseImporting","requestConfig","postImportCourseApiUrl","headers","fetchImportStatus","importStatus","getImportStatusApiUrl","getImportStatus","getProgress","getImportTriggered","getFileName","stepperUploadingTitle","stepperUnpackingTitle","stepperVerifyingTitle","stepperUpdatingTitle","stepperUploadingDescription","stepperUnpackingDescription","stepperVerifyingDescription","stepperUpdatingDescription","viewOutlineButton","defaultErrorMessage","ImportStepper","formattedErrorMessage","handleRedirectCourseOutline","importedContent","importedContentHeading","notImportedContent","warningTitle","warningDescription","ImportSidebar","importCourse","importLearnMoreUrl","fileChosen","FileSection","isShowedDropzone","handleProcessUpload","onUploadProgress","description3","CourseImportPage","CourseAuthoringRoutes","Head","SITE_NAME","FAVICON_URL","getStudioHomeData","aboutTitle","aboutDescription","studioHomeLinkToGettingStarted","sidebarHeader2","sidebarDescription2","sidebarDescription2MailTo","sidebarHeader3","sidebarDescription3","sidebarHeader4","sidebarDescription4","sidebarDescription4MailTo","HomeSidebar","studioName","studioRequestEmail","techSupportEmail","courseCreatorStatus","home","aboutHomeLink","isShowMailToGetInstruction","isShowUnrequestedInstruction","isShowDeniedInstruction","mailTo","addNewCourseBtnText","addNewLibraryBtnText","emailStaffBtnText","coursesTabTitle","librariesTabTitle","archivedTabTitle","defaultSection_1_Title","defaultSection_1_Description","defaultSection_2_Title","defaultSection_2_Description","btnAddNewCourseText","btnReRunText","viewLiveBtnText","organizationTitle","organizationLabel","organizationSubmitBtnText","organizationInputPlaceholder","organizationInputNoOptions","CardItem","isLibraries","allowCourseReruns","rerunCreatorStatus","courseUrl","readOnlyItem","showActions","isShowRerunLink","sortAlphabeticallyArray","firstArrayData","secondArrayData","localeCompare","LibrariesTab","libraries","libraryKey","ArchivedTab","archivedCoursesData","fetchStudioHomeData","search","getStudioHomeApiUrl","handleDeleteNotificationQuery","getCourseNotificationUrl","handleCourseNotification","requestCourseCreatorQuery","sendRequestForCourseCreator","deniedCollapsibleTitle","deniedCollapsibleDescription","deniedCollapsibleActionTitle","deniedCollapsibleState","deniedCollapsibleActionText","pendingCollapsibleTitle","pendingCollapsibleDescription","pendingCollapsibleActionTitle","pendingCollapsibleState","pendingCollapsibleActionText","unrequestedCollapsibleTitle","unrequestedCollapsibleDescription","unrequestedCollapsibleDefaultButton","unrequestedCollapsiblePendingButton","unrequestedCollapsibleFailedButton","CollapsibleStateWithAction","requestButtonStates","requestButtonCurrentState","stateName","actionText","actionTitle","Bubble","MinusIcon","ContactAdministrator","hasAbilityToCreateCourse","showNewCourseContainer","onClickNewCourse","itemInProgressFooterText","itemInProgressFooterHyperlink","itemInProgressActionText","itemIsFailedActionText","itemFailedFooterText","itemFailedFooterButton","CourseItem","isInProgress","dismissLink","RotateRightIcon","refresh","CloseIcon","processingTitle","ProcessingCourses","inProcessCourseActions","CoursesTab","coursesDataItems","isShowProcessing","optimizationEnabled","showCollapsible","TabsSection","tabsData","TABS_LIST","libraryAuthoringMfeUrl","redirectToLibraryAuthoringMfe","activeTab","courses","librariesEnabled","archivedCourses","visibleTabs","Tab","Tabs","defaultActiveKey","onSelect","tab","courseDataStructure","getOrganizations","getCourseData","getCourseRerunData","getRedirectUrlObj","getPostErrors","fetchOrganizationsQuery","fetchCourseRerunQuery","courseRerun","getCourseRerunUrl","getCourseRerun","updateCreateOrRerunCourseQuery","OrganizationSection","orgURLValue","URLSearchParams","setInputValue","FormLabel","TypeaheadDropdown","noOptionsMessage","helpMessage","bannerTitle","bannerDescription","sidebarDescription","VerifyEmailLayout","courseDisplayNameLabel","courseDisplayNamePlaceholder","courseDisplayNameCreateHelpText","courseDisplayNameRerunHelpText","courseOrgLabel","courseOrgPlaceholder","courseOrgNoOptions","courseOrgCreateHelpText","courseOrgRerunHelpText","courseNoteNoSpaceAllowedStrong","courseNoteOrgNameIsPartStrong","courseNumberLabel","courseNumberPlaceholder","courseNumberCreateHelpText","courseNumberRerunHelpText","courseNotePartCourseURLRequireStrong","courseRunLabel","courseRunPlaceholder","courseRunCreateHelpText","courseRunRerunHelpText","defaultPlaceholder","createButton","rerunCreateButton","creatingButton","rerunningCreateButton","requiredFieldError","disallowedCharsError","noSpaceError","alertErrorExistsAriaLabelledBy","alertErrorExistsAriaDescribedBy","CreateOrRerunCourseForm","isCreateNewCourse","onClickCancel","allowToCreateNewOrg","runFieldReference","displayNameFieldReference","isFormFilled","showErrorBanner","hasErrorField","createOrRerunCourseSavingStatus","allOrganizations","allowedOrganizations","setFormFilled","setShowErrorBanner","specialCharsRule","noSpaceRule","matches","errMsg","destinationCourseKey","useCreateOrRerunCourse","newCourseFields","createButtonState","handleCustomBlurForDropdown","renderOrgField","InfoIcon","handleOnClickCancel","handleOnClickCreate","sourceCourseKey","createNewCourse","CreateNewCourseForm","StudioHome","isLoadingPage","anyQueryIsFailed","isShowEmailStaff","anyQueryIsPending","isShowOrganizationDropdown","hasAbilityToCreateNewCourse","setShowNewCourseContainer","useStudioHome","newCourseData","savingCreateRerunStatus","userIsActive","headerButtons","libraryHref","getHeaderButtons","rerunCourseDescription","rerunCourseDescriptionStrong","CourseRerunForm","initialFormValues","sectionTitle1","sectionDescription1","sectionTitle2","sectionDescription2","sectionTitle3","sectionDescription3","sectionLink4","CourseRerunSideBar","learnMoreUrl","defaultCourseDate","UTC","localizedCourseDate","sidebarMessages","isLastSection","rerunTitle","CourseRerun","originalCourseData","useCourseRerun","handleRerunCourseCancel","App","AppProvider","Route","subscribe","APP_READY","ReactDOM","getElementById","APP_INIT_ERROR","ErrorPage","initialize","handlers","mergeConfig","SUPPORT_EMAIL","CALCULATOR_HELP_URL","ENABLE_PROGRESS_GRAPH_SETTINGS","ENABLE_TEAM_TYPE_SETTING","BBB_LEARN_MORE_URL","requireAuthenticatedUser","borderTopWidth","webpackContext","req","webpackContextResolve","__webpack_require__","o","module","exports","webpackAsyncContext"],"sourceRoot":""}