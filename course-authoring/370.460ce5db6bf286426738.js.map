{"version":3,"file":"370.460ce5db6bf286426738.js","mappings":"kfAEA,MAuCA,GAvCiBA,E,SAAAA,IAAe,CAC9BC,OAAQ,CACNC,GAAI,oEACJC,eAAgB,UAElBC,KAAM,CACJF,GAAI,kEACJC,eAAgB,QAElBE,OAAQ,CACNH,GAAI,oEACJC,eAAgB,UAElBG,MAAO,CACLJ,GAAI,mEACJC,eAAgB,SAElBI,MAAO,CACLL,GAAI,mEACJC,eAAgB,SAElBK,QAAS,CACPN,GAAI,oEACJC,eAAgB,WAElBM,SAAU,CACRP,GAAI,qEACJC,eAAgB,YAElBO,iBAAkB,CAChBR,GAAI,uEACJC,eAAgB,mCAElBQ,mBAAoB,CAClBT,GAAI,yEACJC,eAAgB,8C,o/BCFpB,MAAMS,EAAkBC,IAAA,IAAC,YACvBC,EAAW,SAAEC,EAAQ,SAAEC,GACxBH,EAAA,OAAKE,IACJE,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,CAAAH,SACfC,GACCC,EAAAA,EAAAA,KAACE,EAAAA,SAAc,CAAAJ,SACZA,EAASD,IADQ,gBAIpBG,EAAAA,EAAAA,KAACE,EAAAA,SAAc,GAAK,iBAGzB,EAEDP,EAAgBQ,UAAY,CAG1BN,YAAaO,IAAAA,OAAAA,WACbL,SAAUK,IAAAA,KAAAA,WACVN,SAAUM,IAAAA,MAGZT,EAAgBU,aAAe,CAC7BP,SAAU,MAGZ,MAAMQ,EAAuBC,IAAA,IAAC,KAC5BC,EAAI,MAAEC,EAAK,QAAEC,EAAO,QAAEC,EAAO,SAAEC,EAAQ,SAAEd,EAAQ,OAAEe,GACpDN,EAAA,OACCO,EAAAA,EAAAA,MAACC,EAAAA,EAAW,CACVN,MAAOA,EACPO,QAAM,EACNN,QAASA,EACTO,KAAK,KACLN,QAASA,EACTO,eAAgBN,EAChBO,sBAAoB,EAAArB,SAAA,EAEpBE,EAAAA,EAAAA,KAACe,EAAAA,EAAAA,OAAkB,CAAAjB,UACjBE,EAAAA,EAAAA,KAACe,EAAAA,EAAAA,MAAiB,CAAC,cAAY,cAAajB,SACzCW,OAGLT,EAAAA,EAAAA,KAACe,EAAAA,EAAAA,KAAgB,CAAAjB,SACdA,KAEHE,EAAAA,EAAAA,KAACe,EAAAA,EAAAA,OAAkB,CAACK,UAAU,MAAKtB,UACjCgB,EAAAA,EAAAA,MAACO,EAAAA,EAAS,CAAAvB,SAAA,EACRE,EAAAA,EAAAA,KAACe,EAAAA,EAAAA,YAAuB,CAACJ,QAAQ,WAAUb,SACxCU,EAAKc,cAAcC,EAAAA,UAErBV,SAGO,EAGhBP,EAAqBH,UAAY,CAC/BK,KAAMgB,EAAAA,GAAAA,WACNf,MAAOL,IAAAA,OAAAA,WACPM,QAASN,IAAAA,KAAAA,WACTO,QAASP,IAAAA,MAAgB,CAAC,UAAW,SAASqB,WAC9Cb,SAAUR,IAAAA,KAAAA,WACVN,SAAUM,IAAAA,KAAAA,WACVS,OAAQT,IAAAA,MAGVE,EAAqBD,aAAe,CAClCQ,OAAQ,MAGV,MAAMa,EAAmBC,IAenB,IAfoB,KACxBnB,EAAI,MACJoB,EAAK,MACLnB,EAAK,SACLX,EAAQ,sBACR+B,EAAqB,cACrBC,EAAa,iBACbC,EAAgB,QAChBrB,EAAO,eACPsB,EAAc,eACdC,EAAc,cACdC,EAAa,cACbC,EAAa,mBACbC,EAAkB,cAClBC,GACDV,EACC,MAAM,SAAEW,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAC1BC,GAAgBC,EAAAA,EAAAA,IAAYC,EAAAA,IAC5BC,GAA8BF,EAAAA,EAAAA,IAAYG,EAAAA,IAC1CC,GAAWC,EAAAA,EAAAA,QAAO,OACjBC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GACrCC,GAAUC,EAAAA,EAAAA,IAAS,aAAcxB,GACjCyB,GAAWC,EAAAA,EAAAA,MACXC,EAAoBX,IAAgCY,EAAAA,GAAAA,YAA4B,UAAY,UAC5F5C,GAAW6C,EAAAA,EAAAA,MACXC,EAAe9C,EAAW,OAAS,WAEzC+C,EAAAA,EAAAA,YAAU,KACJf,IAAgCY,EAAAA,GAAAA,aAClCH,GAASO,EAAAA,EAAAA,IAAmB,CAAEC,OAAQ,MACtCnD,IACF,GACC,CAACkC,IAEJ,MAaMkB,EAAqBC,IAAA,IAAC,aAAEC,EAAY,OAAEC,GAAQF,EAAA,OAAKG,gBAEjDF,EAAaG,GACfC,OAAOC,KAAKJ,GAAQK,OAAS,UACzBrB,GAAa,GACnBH,GAAUyB,QAAQC,mBACpB,CACD,EAEKC,GAAgBtB,EAAQuB,oBAAoBC,yBAChD3E,EAAAA,EAAAA,KAAC4E,EAAAA,GAAS,CACRxD,UAAU,mBACVyD,YAAa1B,EAAQuB,mBAAmBC,uBACxCG,OAAO,SACPC,IAAI,sBAAqBjF,SAExBqC,IAIL,OAAIM,IAAkBe,EAAAA,GAAAA,YAElBxD,EAAAA,EAAAA,KAACgF,EAAAA,GAAM,CACLlD,cAAamD,EAAA,CACX1F,UAAW4D,GAAS5D,SACjBuC,GAELC,iBACEmD,EAAAA,KACGC,MAAKF,EAAC,CACL1F,QAAS2F,EAAAA,MACNnD,IAGTqD,SA/CmBlB,UACvB,IAAImB,GAAU,EACVlC,EAAQ5D,UAAY+F,EAAO/F,UAC7B8F,QAAgBhC,GAASkC,EAAAA,EAAAA,IAAgBjD,EAAUa,EAAQlE,GAAIqG,EAAO/F,WAGpEyC,IACFqD,EAAUA,SAAiBrD,EAAesD,UAEtCrC,GAAcoC,IACnBA,GAAWvC,GAAUyB,QAAQC,gBAAgB,EAsC1CpC,mBAAoBA,EAAmBtC,SAErCD,IACAG,EAAAA,EAAAA,KAACwF,EAAAA,GAAI,CAACJ,SAAUtB,EAAmBjE,GAAaC,UAC9CgB,EAAAA,EAAAA,MAACR,EAAoB,CACnBG,MAAOA,EACPO,QAAM,EACNN,QAASA,EACTC,QAAS+C,EACT9C,SAAUA,EACVO,sBAAoB,EACpBX,KAAMA,EACNK,QACEb,EAAAA,EAAAA,KAACyF,EAAAA,EAAc,CACbC,OAAQ,CACNC,QAASnF,EAAKc,cAAcC,EAAAA,MAC5BqE,QAASpF,EAAKc,cAAcC,EAAAA,QAC5BsE,SAAUrF,EAAKc,cAAcC,EAAAA,QAE/BuE,MAAOvC,EACPwC,QAASjC,EAAmBjE,KAE9BC,SAAA,CAEDkD,IACClC,EAAAA,EAAAA,MAACkF,EAAAA,EAAK,CAACrF,QAAQ,SAASsF,KAAMC,EAAAA,EAAMC,IAAKrD,EAAShD,SAAA,EAChDE,EAAAA,EAAAA,KAACgG,EAAAA,EAAAA,QAAa,CAAAlG,SACXD,EAAYoE,OAAO1E,SAASkB,OAASD,EAAKc,cAAcC,EAAAA,oBAE1D1B,EAAYoE,OAAO1E,SAAS6G,SAAW5F,EAAKc,cAAcC,EAAAA,wBAG7Dc,IACArC,EAAAA,EAAAA,KAACqG,EAAAA,EAAe,CACdpH,GAAK,UAAS2C,WACd0E,KAAK,UACLC,SAAWpC,GAAUtE,EAAY2G,aAAarC,GAC9CsC,OAAQ5G,EAAY6G,WACpBC,QAAS9G,EAAYyF,OAAO/F,QAC5BqH,OACE9F,EAAAA,EAAAA,MAAA,OAAKM,UAAU,4BAA2BtB,SAAA,CACvCmC,EACApC,EAAYyF,OAAO/F,UAClBS,EAAAA,EAAAA,KAAC6G,EAAAA,EAAK,CAACzF,UAAU,OAAOT,QAAQ,UAAU,cAAY,eAAcb,SACjEU,EAAKc,cAAcC,EAAAA,cAK5BuF,UACEhG,EAAAA,EAAAA,MAAA,OAAAhB,SAAA,EACEE,EAAAA,EAAAA,KAAA,KAAAF,SAAIoC,KACJlC,EAAAA,EAAAA,KAAA,QAAMoB,UAAU,OAAMtB,SAAE2E,WAK9B5E,EAAYyF,OAAO/F,SAAWsC,IAA0B/B,IACrDE,EAAAA,EAAAA,KAAC+G,EAAAA,EAAoB,CAACC,UAAW,CAAErB,QAAS,EAAGsB,GAAI,MACxDjH,EAAAA,EAAAA,KAACL,EAAe,CAACE,YAAaA,EAAaE,SAAUF,EAAYyF,OAAO/F,SAAWsC,EAAsB/B,SACtGA,YASbgB,EAAAA,EAAAA,MAACR,EAAoB,CACnBE,KAAMA,EACNC,MAAOA,EACPO,QAAM,EACNN,QAASA,EACTO,KAAK,KACLN,QAAS+C,EACT9C,SAAUA,EACVO,sBAAoB,EAAArB,SAAA,CAEnB2C,IAAkBe,EAAAA,GAAAA,cAA6BxD,EAAAA,EAAAA,KAACkH,EAAAA,EAAO,IACvDzE,IAAkBe,EAAAA,GAAAA,SAAwBxD,EAAAA,EAAAA,KAACmH,EAAAA,EAAoB,IAC/D1E,IAAkBe,EAAAA,GAAAA,SAAwBxD,EAAAA,EAAAA,KAACoH,EAAAA,EAAqB,MAC5C,EAI3B1F,EAAiBvB,UAAY,CAC3BK,KAAMgB,EAAAA,GAAAA,WACNf,MAAOL,IAAAA,OAAAA,WACPwB,MAAOxB,IAAAA,OAAAA,WACPN,SAAUM,IAAAA,KACV4B,eAAgB5B,IAAAA,KAChB0B,cAAe1B,IAAAA,MAAgB,CAAC,GAChC2B,iBAAkB3B,IAAAA,MAAgB,CAAC,GACnCM,QAASN,IAAAA,KAAAA,WACT6B,eAAgB7B,IAAAA,OAAAA,WAChB8B,cAAe9B,IAAAA,OAAAA,WACf+B,cAAe/B,IAAAA,OAAAA,WACfyB,sBAAuBzB,IAAAA,KACvBgC,mBAAoBhC,IAAAA,KACpBiC,cAAejC,IAAAA,MAGjBsB,EAAiBrB,aAAe,CAC9BP,SAAU,KACVkC,eAAgB,KAChBF,cAAe,CAAC,EAChBC,iBAAkB,CAAC,EACnBF,uBAAuB,EACvBO,oBAAoB,EACpBC,eAAe,GAGjB,SAAegF,EAAAA,EAAAA,GAAW3F,E,uOC3S1B,MAwKA,GAxKiB3C,E,SAAAA,IAAe,CAC9BuI,QAAS,CACPrI,GAAI,4CACJC,eAAgB,mBAElBqI,iBAAkB,CAChBtI,GAAI,sDACJC,eAAgB,SAElBsI,gBAAiB,CACfvI,GAAI,qDACJC,eAAgB,uEAElBuI,gBAAiB,CACfxI,GAAI,qDACJC,eAAgB,0BAElBwI,SAAU,CACRzI,GAAI,qDACJC,eAAgB,aAElByI,YAAa,CACX1I,GAAI,yDACJC,eAAgB,iBAElB0I,gBAAiB,CACf3I,GAAI,6DACJC,eAAgB,uDAElB2I,iBAAkB,CAChB5I,GAAI,8DACJC,eAAgB,uBAElB4I,mBAAoB,CAClB7I,GAAI,gEACJC,eAAgB,6DAElB6I,mBAAoB,CAClB9I,GAAI,gEACJC,eAAgB,8CAElB8I,OAAQ,CACN/I,GAAI,mDACJC,eAAgB,UAElB+I,WAAY,CACVhJ,GAAI,gDACJC,eAAgB,8DAElBgJ,eAAgB,CACdjJ,GAAI,2DACJC,eAAgB,mBAElBiJ,mBAAoB,CAClBlJ,GAAI,qDACJC,eAAgB,QAElBkJ,kBAAmB,CACjBnJ,GAAI,oDACJC,eAAgB,uCAElBmJ,mBAAoB,CAClBpJ,GAAI,2DACJC,eAAgB,sCAElBoJ,oBAAqB,CACnBrJ,GAAI,4DACJC,eAAgB,6CAElBqJ,0BAA2B,CACzBtJ,GAAI,4DACJC,eAAgB,eAElBsJ,yBAA0B,CACxBvJ,GAAI,2DACJC,eAAgB,kCAElBuJ,0BAA2B,CACzBxJ,GAAI,4DACJC,eAAgB,sCAElBwJ,mBAAoB,CAClBzJ,GAAI,qDACJC,eAAgB,QAElByJ,kBAAmB,CACjB1J,GAAI,oDACJC,eAAgB,8CAElB0J,cAAe,CACb3J,GAAI,qDACJC,eAAgB,QAElB2J,yBAA0B,CACxB5J,GAAI,iEACJC,eAAgB,yDAElB4J,uBAAwB,CACtB7J,GAAI,+DACJC,eAAgB,kBAElB6J,kCAAmC,CACjC9J,GAAI,2EACJC,eAAgB,sFAElB8J,wBAAyB,CACvB/J,GAAI,gEACJC,eAAgB,mBAElB+J,mCAAoC,CAClChK,GAAI,4EACJC,eAAgB,yEAElBgK,sBAAuB,CACrBjK,GAAI,wDACJC,eAAgB,4BAElBiK,qBAAsB,CACpBlK,GAAI,uDACJC,eAAgB,qCAElBkK,SAAU,CACRnK,GAAI,oDACJC,eAAgB,aAElBmK,UAAW,CACTpK,GAAI,iDACJC,eAAgB,UAElBoK,UAAW,CACTrK,GAAI,iDACJC,eAAgB,uBAElBqK,YAAa,CACXtK,GAAI,mDACJC,eAAgB,sBAElBsK,OAAQ,CACNvK,GAAI,+DACJC,eAAgB,UAElBF,OAAQ,CACNC,GAAI,qEACJC,eAAgB,UAElBuK,mBAAoB,CAClBxK,GAAI,wDACJC,eAAgB,sBAElBwK,gBAAiB,CACfzK,GAAI,qDACJC,eAAiB,+QAGjByK,YAAa,oIAEfC,mBAAoB,CAClB3K,GAAI,2EACJC,eAAgB,kBAChByK,YAAa,+FAEfE,qBAAsB,CACpB5K,GAAI,6EACJC,eAAgB,0CAChByK,YAAa,gG,eC3JjB,MAAMG,EAAsB,CAC1B,CAACC,EAAAA,GAAAA,MAAkB,CACjBnD,MAAOrF,EAAAA,cACPoI,YAAapI,EAAAA,0BAEf,CAACwI,EAAAA,GAAAA,gBAA4B,CAC3BnD,MAAOrF,EAAAA,uBACPoI,YAAapI,EAAAA,mCAEf,CAACwI,EAAAA,GAAAA,iBAA6B,CAC5BnD,MAAOrF,EAAAA,wBACPoI,YAAapI,EAAAA,qCAIXyI,EAAcpK,IAEd,IAFe,KACnBY,EAAI,MAAEyJ,EAAK,SAAEC,EAAQ,SAAE3D,EAAQ,OAAEE,EAAM,oBAAE0D,EAAmB,OAAElG,GAC/DrE,EACC,MAAOwK,EAAYC,IAAenH,EAAAA,EAAAA,WAAS,IACpClC,EAAQsJ,IAAWpH,EAAAA,EAAAA,UAAsB,OAAb+G,EAAMhL,IAMnCsL,EAAmB,YAEzB,OACEvK,EAAAA,EAAAA,KAACC,EAAAA,EAAiB,CAAAH,SACfsK,GAEGtJ,EAAAA,EAAAA,MAAA,OAAKM,UAAU,qDAAoDtB,SAAA,EACjEE,EAAAA,EAAAA,KAAA,MAAIoB,UAAU,OAAMtB,SAAEU,EAAKc,cAAcC,EAAAA,sBACxCf,EAAKc,cAAcC,EAAAA,iBAA0BiJ,MAAM,MAAMC,KAAIC,IAAQ1K,EAAAA,EAAAA,KAAA,KAAAF,SAAI4K,OAC1E5J,EAAAA,EAAAA,MAAA,OAAKM,UAAU,sCAAqCtB,SAAA,EAClDE,EAAAA,EAAAA,KAAC2K,EAAAA,GAAM,CAAChK,QAAQ,QAAQM,KAAK,KAAK8E,QAdvB6E,IAAMP,GAAY,GAc6BvK,SACvDU,EAAKc,cAAcC,EAAAA,WAEtBvB,EAAAA,EAAAA,KAAC2K,EAAAA,GAAM,CAAChK,QAAQ,iBAAiBM,KAAK,KAAK8E,QAASA,IAAMmE,EAASD,GAAOnK,SACvEU,EAAKc,cAAcC,EAAAA,eAR8C,eAcxET,EAAAA,EAAAA,MAAC+J,EAAAA,EACC,CAEAC,KAAM9J,EACN+J,SA1BYD,GAASR,EAAQU,QAAQ/G,EAAOqC,MAAQrC,EAAO0D,aAAe1D,EAAO0F,cAAgBmB,GA2BjGZ,SA9Bee,IAAMZ,GAAY,GA+BjChB,UAAW7I,EAAKc,cAAcC,EAAAA,WAC9B+H,UAAW9I,EAAKc,cAAcC,EAAAA,WAC9BgI,YAAa/I,EAAKc,cAAcC,EAAAA,aAChCd,MACEO,GAEIhB,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,8CAA6CtB,SACzDU,EAAKc,cAAcC,EAAAA,mBAGtBT,EAAAA,EAAAA,MAAA,OAAKM,UAAU,gDAA+CtB,SAAA,EAC5DgB,EAAAA,EAAAA,MAAA,OAAKM,UAAU,sBAAqBtB,SAAA,CAAEU,EAAKc,cAAcwI,EAAoBG,EAAMiB,KAAOjB,EAAMiB,KAAOnB,EAAAA,GAAAA,MAAiBnD,OAAO,QAC/H5G,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,2CAA0CtB,SAAEmK,EAAM3D,QACjEtG,EAAAA,EAAAA,KAAA,OAAKoB,UAAU,+CAA8CtB,SAAEmK,EAAMN,iBAG5E7J,SAAA,EAEDE,EAAAA,EAAAA,KAACmL,EAAAA,EAAa,CACZ7E,KAAO,GAAE6D,SACTiB,MAAOnB,EAAM3D,KACb+E,cAAe7K,EAAKc,cAAcC,EAAAA,oBAClC+J,KAAM9K,EAAKc,cAAcC,EAAAA,mBACzBH,UAAY,GAAEmJ,cAEhBvK,EAAAA,EAAAA,KAACmL,EAAAA,EAAa,CACZ7E,KAAO,GAAE6D,gBACTiB,MAAOnB,EAAMN,YACb0B,cAAe7K,EAAKc,cAAcC,EAAAA,2BAClC+J,KAAM9K,EAAKc,cAAcC,EAAAA,0BACzBgK,GAAG,WACHC,KAAM,EACNC,MAAO,CAAEC,UAAW,UACpBtK,UAAWmJ,KAEbzJ,EAAAA,EAAAA,MAAC0E,EAAAA,GAAAA,MAAU,CAACpE,UAAWmJ,EAAiBzK,SAAA,EACtCE,EAAAA,EAAAA,KAACwF,EAAAA,GAAAA,MAAU,CAACpE,UAAU,UAAStB,SAC5BU,EAAKc,cAAcC,EAAAA,uBAEtBvB,EAAAA,EAAAA,KAACwF,EAAAA,GAAAA,SAAa,CACZc,KAAO,GAAE6D,SACTiB,MAAOnB,EAAMiB,KACb3E,SAAUA,EACVE,OAAQA,EAAO3G,SAEdsE,OAAOkB,OAAOyE,EAAAA,IAAYU,KAAIkB,IAC7B3L,EAAAA,EAAAA,KAACwF,EAAAA,GAAAA,MAAU,CAET4F,MAAOO,EACPhC,YAAanJ,EAAKc,cAAcwI,EAAoB6B,GAAWhC,aAC/DvI,UAAU,OAEVqK,MAAO,CAAEG,SAAU,UAAWF,UAAW,WAAY5L,SAEpDU,EAAKc,cAAcwI,EAAoB6B,GAAW/E,QAP9C+E,WAYb3L,EAAAA,EAAAA,KAACmL,EAAAA,EAAa,CACZD,KAAK,SACL5E,KAAO,GAAE6D,gBACTkB,cAAe7K,EAAKc,cAAcC,EAAAA,uBAClC6J,MAAOnB,EAAMtC,YACb2D,KAAM9K,EAAKc,cAAcC,EAAAA,sBACzBqF,OAAO5G,EAAAA,EAAAA,KAACwF,EAAAA,GAAAA,MAAU,CAACpE,UAAU,UAAStB,SAAEU,EAAKc,cAAcC,EAAAA,YAC3DH,UAAU,OACVyK,YAAaC,EAAAA,GAAAA,YAvEX,kBA2EQ,EAIXC,EAAa3L,IAAAA,MAAgB,CACxCnB,GAAImB,IAAAA,OACJkG,KAAMlG,IAAAA,OAAAA,WACNuJ,YAAavJ,IAAAA,OAAAA,WACb8K,KAAM9K,IAAAA,OAAAA,WACNuH,YAAavH,IAAAA,OAAAA,aAGf4J,EAAY7J,UAAY,CACtBK,KAAMgB,EAAAA,GAAAA,WACN2I,oBAAqB/J,IAAAA,OAAAA,WACrB6D,OAAQ7D,IAAAA,MAAgB,CACtBkG,KAAMlG,IAAAA,OACNuJ,YAAavJ,IAAAA,OACbuH,YAAavH,IAAAA,SAEf6J,MAAO8B,EAAWtK,WAClByI,SAAU9J,IAAAA,KAAAA,WACVmG,SAAUnG,IAAAA,KAAAA,WACVqG,OAAQrG,IAAAA,KAAAA,YAGV4J,EAAY3J,aAAe,CACzB4D,OAAQ,CACNqC,KAAM,KACNqD,YAAa,KACbhC,YAAa,OAIjB,SAAeN,EAAAA,EAAAA,GAAW2C,ICvJ1BgC,EAAAA,EAAAA,MAEA,MAAMC,EAAerM,IAGf,IAHgB,KACpBY,EAAI,QACJE,GACDd,EACC,MAAOsM,EAAoBC,IAAgBC,EAAAA,EAAAA,IAAc,sBACnDC,EAAgB,CACpB/F,KAAM,GACNqD,YAAa,GACbuB,KAAMnB,EAAAA,GAAAA,KACNpC,YAAa,KACb1I,GAAI,KACJqN,KAAKC,EAAAA,EAAAA,OAkBDC,EAAiB,CACrB/L,MAAOD,EAAKc,cAAcC,EAAAA,oBAC1B6E,QAAS5F,EAAKc,cAAcC,EAAAA,uBAG9B,OACEvB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAgB,CACfE,MAAM,QACNnB,MAAOD,EAAKc,cAAcC,EAAAA,SAC1BW,cAAe1B,EAAKc,cAAcC,EAAAA,iBAClCU,eAAgBzB,EAAKc,cAAcC,EAAAA,kBACnCY,cAAe3B,EAAKc,cAAcC,EAAAA,iBAClCb,QAASA,EACT+L,cAAc,eAGd3K,cAAe,CACb6F,YAAauE,GAAoBvE,YACjCK,OAAQkE,GAAoBQ,UAAYR,GAAoBS,QAE9D5K,iBAAkB,CAChBxC,QAAS2F,EAAAA,KACN0H,KACC,aACAJ,GACA,CAACpB,EAAOyB,KAAczB,GAASyB,EAAQC,OAAO9E,OAAO1D,OAAS,IAElEqD,YAAazC,EAAAA,KACV6H,SAASvM,EAAKc,cAAcC,EAAAA,mBAC5ByL,IAAIlB,EAAAA,GAAAA,IAAetL,EAAKc,cAAcC,EAAAA,qBACtC0L,IACCnB,EAAAA,GAAAA,IACAtL,EAAKc,cAAcC,EAAAA,mBAA6B,CAC9C0L,IAAKnB,EAAAA,GAAAA,OAGX9D,OAAQ9C,EAAAA,KAAYgI,GAClBhI,EAAAA,GAAW,CACTjG,GAAIiG,EAAAA,KAAaiI,WACjB7G,KAAMpB,EAAAA,KACH6H,SAASvM,EAAKc,cAAcC,EAAAA,qBAC5B6L,OACHlC,KAAMhG,EAAAA,KAAamI,MAAMjJ,OAAOkB,OAAOyE,EAAAA,KACvCJ,YAAazE,EAAAA,KACV6H,SAASvM,EAAKc,cAAcC,EAAAA,4BAC5B6L,OACHzF,YAAazC,EAAAA,KACViI,WACAH,IAAIlB,EAAAA,GAAAA,IAAetL,EAAKc,cAAcC,EAAAA,qBACtC0L,IACCnB,EAAAA,GAAAA,IACAtL,EAAKc,cAAcC,EAAAA,mBAA6B,CAC9C0L,IAAKnB,EAAAA,GAAAA,OAGRnG,QAAQ,SAGZ2H,KAAK,UAAW,CACfC,IAAI,EACJC,KAAMtI,EAAAA,KAAY8H,IAAI,KAEvBrH,QAAQ,IACR8H,eAAe,OAAQjN,EAAKc,cAAcC,EAAAA,uBAE/CS,eAhFuBkC,UAEzB,MAAM8D,EAAS1C,EAAO0C,QAAQyC,KAAIR,IAAS,CACzChL,GAAIgL,EAAMhL,KAAMsN,EAAAA,EAAAA,MAChBjG,KAAM2D,EAAM3D,KACZ4E,KAAMjB,EAAMiB,KACZvB,YAAaM,EAAMN,YACnB+D,cAAezD,EAAMtC,gBAEvB,OAAOwE,EAAa,CAClBwB,UAAW3F,EACX0F,cAAepI,EAAOqC,YACtBpI,QAAS+F,EAAO/F,SAChB,EAoEAsC,uBAAqB,EAAA/B,SAGnBS,IAAA,IAAC,aACCiG,EAAY,WAAEE,EAAU,OAAEpB,EAAM,OAAErB,GACnC1D,EAAA,OACCO,EAAAA,EAAAA,MAAA8M,EAAAA,SAAA,CAAA9N,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAIoB,UAAU,YAAWtB,SAAEU,EAAKc,cAAcC,EAAAA,aAC9CvB,EAAAA,EAAAA,KAACmL,EAAAA,EAAa,CACZ7E,KAAK,cACL8E,MAAO9F,EAAOqC,YACd0D,cAAe7K,EAAKc,cAAcC,EAAAA,aAClC+J,KAAM9K,EAAKc,cAAcC,EAAAA,iBACzBH,UAAU,OACV8J,KAAK,YAEPpK,EAAAA,EAAAA,MAAA,OAAKM,UAAU,4EAA2EtB,SAAA,EACxFE,EAAAA,EAAAA,KAAA,MAAAF,SAAKU,EAAKc,cAAcC,EAAAA,WACxBvB,EAAAA,EAAAA,KAACwF,EAAAA,GAAAA,KAAS,CAACpE,UAAU,OAAMtB,SAAEU,EAAKc,cAAcC,EAAAA,eAChDvB,EAAAA,EAAAA,KAAC6N,EAAAA,GAAU,CAACvH,KAAK,SAAQxG,SACtB6B,IAAA,IAAC,KAAEmM,EAAI,OAAEC,GAAQpM,EAAA,OAChBb,EAAAA,EAAAA,MAAA8M,EAAAA,SAAA,CAAA9N,SAAA,CACGwF,EAAO0C,QAAQyC,KAAI,CAACR,EAAO+D,KAC1BhO,EAAAA,EAAAA,KAACgK,EAAW,CAEVC,MAAOA,EACPhG,OAAQA,EAAO+D,SAASgG,GACxB7D,oBAAsB,UAAS6D,IAC/B9D,SAAUA,IAAM6D,EAAOC,GACvBzH,SAAUC,EACVC,OAAQC,GANHuD,EAAMhL,IAAMgL,EAAMqC,QAS3BtM,EAAAA,EAAAA,KAAC2K,EAAAA,GAAM,CACLhK,QAAQ,QACRS,UAAU,4BACV6M,WAAYC,EAAAA,EACZnI,QAASA,IAAM+H,EAAKzB,GAAevM,SAElCU,EAAKc,cAAcC,EAAAA,cAErB,SAIR,GAGU,EAIvB0K,EAAa9L,UAAY,CACvBK,KAAMgB,EAAAA,GAAAA,WACNd,QAASN,IAAAA,KAAAA,YAGX,SAAeiH,EAAAA,EAAAA,GAAW4E,E","sources":["webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/app-settings-modal/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/app-settings-modal/AppSettingsModal.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/teams/messages.js","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/teams/GroupEditor.jsx","webpack://@edx/frontend-app-course-authoring/./src/pages-and-resources/teams/Settings.jsx"],"sourcesContent":["import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  cancel: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.cancel',\n    defaultMessage: 'Cancel',\n  },\n  save: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.save',\n    defaultMessage: 'Save',\n  },\n  saving: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.saving',\n    defaultMessage: 'Saving',\n  },\n  saved: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.saved',\n    defaultMessage: 'Saved',\n  },\n  retry: {\n    id: 'course-authoring.pages-resources.app-settings-modal.button.retry',\n    defaultMessage: 'Retry',\n  },\n  enabled: {\n    id: 'course-authoring.pages-resources.app-settings-modal.badge.enabled',\n    defaultMessage: 'Enabled',\n  },\n  disabled: {\n    id: 'course-authoring.pages-resources.app-settings-modal.badge.disabled',\n    defaultMessage: 'Disabled',\n  },\n  errorSavingTitle: {\n    id: 'course-authoring.pages-resources.app-settings-modal.save-error.title',\n    defaultMessage: 'We couldn\\'t apply your changes.',\n  },\n  errorSavingMessage: {\n    id: 'course-authoring.pages-resources.app-settings-modal.save-error.message',\n    defaultMessage: 'Please check your entries and try again.',\n  },\n});\n\nexport default messages;\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  ActionRow,\n  Alert,\n  Badge,\n  Form,\n  Hyperlink,\n  ModalDialog,\n  StatefulButton,\n  TransitionReplace,\n} from '@edx/paragon';\nimport { Info } from '@edx/paragon/icons';\n\nimport { Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport React, {\n  useContext, useEffect, useRef, useState,\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport { RequestStatus } from '../../data/constants';\nimport ConnectionErrorAlert from '../../generic/ConnectionErrorAlert';\nimport FormSwitchGroup from '../../generic/FormSwitchGroup';\nimport Loading from '../../generic/Loading';\nimport { useModel } from '../../generic/model-store';\nimport PermissionDeniedAlert from '../../generic/PermissionDeniedAlert';\nimport { useIsMobile } from '../../utils';\nimport { getLoadingStatus, getSavingStatus } from '../data/selectors';\nimport { updateSavingStatus } from '../data/slice';\nimport { updateAppStatus } from '../data/thunks';\nimport AppConfigFormDivider from '../discussions/app-config-form/apps/shared/AppConfigFormDivider';\nimport { PagesAndResourcesContext } from '../PagesAndResourcesProvider';\nimport messages from './messages';\n\nconst AppSettingsForm = ({\n  formikProps, children, showForm,\n}) => children && (\n  <TransitionReplace>\n    {showForm ? (\n      <React.Fragment key=\"app-enabled\">\n        {children(formikProps)}\n      </React.Fragment>\n    ) : (\n      <React.Fragment key=\"app-disabled\" />\n    )}\n  </TransitionReplace>\n);\n\nAppSettingsForm.propTypes = {\n  // Ignore the warning here since we're just passing along the props as-is and the child component should validate\n  // eslint-disable-next-line react/forbid-prop-types\n  formikProps: PropTypes.object.isRequired,\n  showForm: PropTypes.bool.isRequired,\n  children: PropTypes.func,\n};\n\nAppSettingsForm.defaultProps = {\n  children: null,\n};\n\nconst AppSettingsModalBase = ({\n  intl, title, onClose, variant, isMobile, children, footer,\n}) => (\n  <ModalDialog\n    title={title}\n    isOpen\n    onClose={onClose}\n    size=\"lg\"\n    variant={variant}\n    hasCloseButton={isMobile}\n    isFullscreenOnMobile\n  >\n    <ModalDialog.Header>\n      <ModalDialog.Title data-testid=\"modal-title\">\n        {title}\n      </ModalDialog.Title>\n    </ModalDialog.Header>\n    <ModalDialog.Body>\n      {children}\n    </ModalDialog.Body>\n    <ModalDialog.Footer className=\"p-4\">\n      <ActionRow>\n        <ModalDialog.CloseButton variant=\"tertiary\">\n          {intl.formatMessage(messages.cancel)}\n        </ModalDialog.CloseButton>\n        {footer}\n      </ActionRow>\n    </ModalDialog.Footer>\n  </ModalDialog>\n);\n\nAppSettingsModalBase.propTypes = {\n  intl: intlShape.isRequired,\n  title: PropTypes.string.isRequired,\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.oneOf(['default', 'dark']).isRequired,\n  isMobile: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  footer: PropTypes.node,\n};\n\nAppSettingsModalBase.defaultProps = {\n  footer: null,\n};\n\nconst AppSettingsModal = ({\n  intl,\n  appId,\n  title,\n  children,\n  configureBeforeEnable,\n  initialValues,\n  validationSchema,\n  onClose,\n  onSettingsSave,\n  enableAppLabel,\n  enableAppHelp,\n  learnMoreText,\n  enableReinitialize,\n  hideAppToggle,\n}) => {\n  const { courseId } = useContext(PagesAndResourcesContext);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const updateSettingsRequestStatus = useSelector(getSavingStatus);\n  const alertRef = useRef(null);\n  const [saveError, setSaveError] = useState(false);\n  const appInfo = useModel('courseApps', appId);\n  const dispatch = useDispatch();\n  const submitButtonState = updateSettingsRequestStatus === RequestStatus.IN_PROGRESS ? 'pending' : 'default';\n  const isMobile = useIsMobile();\n  const modalVariant = isMobile ? 'dark' : 'default';\n\n  useEffect(() => {\n    if (updateSettingsRequestStatus === RequestStatus.SUCCESSFUL) {\n      dispatch(updateSavingStatus({ status: '' }));\n      onClose();\n    }\n  }, [updateSettingsRequestStatus]);\n\n  const handleFormSubmit = async (values) => {\n    let success = true;\n    if (appInfo.enabled !== values.enabled) {\n      success = await dispatch(updateAppStatus(courseId, appInfo.id, values.enabled));\n    }\n    // Call the submit handler for the settings component to save its settings\n    if (onSettingsSave) {\n      success = success && await onSettingsSave(values);\n    }\n    await setSaveError(!success);\n    !success && alertRef?.current.scrollIntoView(); // eslint-disable-line no-unused-expressions\n  };\n\n  const handleFormikSubmit = ({ handleSubmit, errors }) => async (event) => {\n    // If submitting the form with errors, show the alert and scroll to it.\n    await handleSubmit(event);\n    if (Object.keys(errors).length > 0) {\n      await setSaveError(true);\n      alertRef?.current.scrollIntoView?.(); // eslint-disable-line no-unused-expressions\n    }\n  };\n\n  const learnMoreLink = appInfo.documentationLinks?.learnMoreConfiguration && (\n    <Hyperlink\n      className=\"text-primary-500\"\n      destination={appInfo.documentationLinks.learnMoreConfiguration}\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n    >\n      {learnMoreText}\n    </Hyperlink>\n  );\n\n  if (loadingStatus === RequestStatus.SUCCESSFUL) {\n    return (\n      <Formik\n        initialValues={{\n          enabled: !!appInfo?.enabled,\n          ...initialValues,\n        }}\n        validationSchema={\n          Yup.object()\n            .shape({\n              enabled: Yup.boolean(),\n              ...validationSchema,\n            })\n        }\n        onSubmit={handleFormSubmit}\n        enableReinitialize={enableReinitialize}\n      >\n        {(formikProps) => (\n          <Form onSubmit={handleFormikSubmit(formikProps)}>\n            <AppSettingsModalBase\n              title={title}\n              isOpen\n              onClose={onClose}\n              variant={modalVariant}\n              isMobile={isMobile}\n              isFullscreenOnMobile\n              intl={intl}\n              footer={(\n                <StatefulButton\n                  labels={{\n                    default: intl.formatMessage(messages.save),\n                    pending: intl.formatMessage(messages.saving),\n                    complete: intl.formatMessage(messages.saved),\n                  }}\n                  state={submitButtonState}\n                  onClick={handleFormikSubmit(formikProps)}\n                />\n              )}\n            >\n              {saveError && (\n                <Alert variant=\"danger\" icon={Info} ref={alertRef}>\n                  <Alert.Heading>\n                    {formikProps.errors.enabled?.title || intl.formatMessage(messages.errorSavingTitle)}\n                  </Alert.Heading>\n                  {formikProps.errors.enabled?.message || intl.formatMessage(messages.errorSavingMessage)}\n                </Alert>\n              )}\n              {!hideAppToggle && (\n                <FormSwitchGroup\n                  id={`enable-${appId}-toggle`}\n                  name=\"enabled\"\n                  onChange={(event) => formikProps.handleChange(event)}\n                  onBlur={formikProps.handleBlur}\n                  checked={formikProps.values.enabled}\n                  label={(\n                    <div className=\"d-flex align-items-center\">\n                      {enableAppLabel}\n                      {formikProps.values.enabled && (\n                        <Badge className=\"ml-2\" variant=\"success\" data-testid=\"enable-badge\">\n                          {intl.formatMessage(messages.enabled)}\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                  helpText={(\n                    <div>\n                      <p>{enableAppHelp}</p>\n                      <span className=\"py-3\">{learnMoreLink}</span>\n                    </div>\n                  )}\n                />\n              )}\n              {(formikProps.values.enabled || configureBeforeEnable) && children\n                && <AppConfigFormDivider marginAdj={{ default: 0, sm: 0 }} />}\n              <AppSettingsForm formikProps={formikProps} showForm={formikProps.values.enabled || configureBeforeEnable}>\n                {children}\n              </AppSettingsForm>\n            </AppSettingsModalBase>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n  return (\n    <AppSettingsModalBase\n      intl={intl}\n      title={title}\n      isOpen\n      onClose={onClose}\n      size=\"sm\"\n      variant={modalVariant}\n      isMobile={isMobile}\n      isFullscreenOnMobile\n    >\n      {loadingStatus === RequestStatus.IN_PROGRESS && <Loading />}\n      {loadingStatus === RequestStatus.FAILED && <ConnectionErrorAlert />}\n      {loadingStatus === RequestStatus.DENIED && <PermissionDeniedAlert />}\n    </AppSettingsModalBase>\n  );\n};\n\nAppSettingsModal.propTypes = {\n  intl: intlShape.isRequired,\n  title: PropTypes.string.isRequired,\n  appId: PropTypes.string.isRequired,\n  children: PropTypes.func,\n  onSettingsSave: PropTypes.func,\n  initialValues: PropTypes.shape({}),\n  validationSchema: PropTypes.shape({}),\n  onClose: PropTypes.func.isRequired,\n  enableAppLabel: PropTypes.string.isRequired,\n  enableAppHelp: PropTypes.string.isRequired,\n  learnMoreText: PropTypes.string.isRequired,\n  configureBeforeEnable: PropTypes.bool,\n  enableReinitialize: PropTypes.bool,\n  hideAppToggle: PropTypes.bool,\n};\n\nAppSettingsModal.defaultProps = {\n  children: null,\n  onSettingsSave: null,\n  initialValues: {},\n  validationSchema: {},\n  configureBeforeEnable: false,\n  enableReinitialize: false,\n  hideAppToggle: false,\n};\n\nexport default injectIntl(AppSettingsModal);\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  heading: {\n    id: 'authoring.pagesAndResources.teams.heading',\n    defaultMessage: 'Configure teams',\n  },\n  enableTeamsLabel: {\n    id: 'authoring.pagesAndResources.teams.enableTeams.label',\n    defaultMessage: 'Teams',\n  },\n  enableTeamsHelp: {\n    id: 'authoring.pagesAndResources.teams.enableTeams.help',\n    defaultMessage: 'Allow learners to work together on specific projects or activities.',\n  },\n  enableTeamsLink: {\n    id: 'authoring.pagesAndResources.teams.enableTeams.link',\n    defaultMessage: 'Learn more about teams',\n  },\n  teamSize: {\n    id: 'authoring.pagesAndResources.teams.teamSize.heading',\n    defaultMessage: 'Team size',\n  },\n  maxTeamSize: {\n    id: 'authoring.pagesAndResources.teams.teamSize.maxTeamSize',\n    defaultMessage: 'Max team size',\n  },\n  maxTeamSizeHelp: {\n    id: 'authoring.pagesAndResources.teams.teamSize.maxTeamSizeHelp',\n    defaultMessage: 'The maximum number of learners that can join a team',\n  },\n  maxTeamSizeEmpty: {\n    id: 'authoring.pagesAndResources.teams.teamSize.maxTeamSizeEmpty',\n    defaultMessage: 'Enter max team size',\n  },\n  maxTeamSizeInvalid: {\n    id: 'authoring.pagesAndResources.teams.teamSize.maxTeamSizeInvalid',\n    defaultMessage: 'Max team size must be a positive number larger than zero.',\n  },\n  maxTeamSizeTooHigh: {\n    id: 'authoring.pagesAndResources.teams.teamSize.maxTeamSizeTooHigh',\n    defaultMessage: 'Max team size cannot be greater than {max}',\n  },\n  groups: {\n    id: 'authoring.pagesAndResources.teams.groups.heading',\n    defaultMessage: 'Groups',\n  },\n  groupsHelp: {\n    id: 'authoring.pagesAndResources.teams.groups.help',\n    defaultMessage: 'Groups are spaces where learners can create or join teams.',\n  },\n  configureGroup: {\n    id: 'authoring.pagesAndResources.teams.configureGroup.heading',\n    defaultMessage: 'Configure group',\n  },\n  groupFormNameLabel: {\n    id: 'authoring.pagesAndResources.teams.group.name.label',\n    defaultMessage: 'Name',\n  },\n  groupFormNameHelp: {\n    id: 'authoring.pagesAndResources.teams.group.name.help',\n    defaultMessage: 'Choose a unique name for this group',\n  },\n  groupFormNameEmpty: {\n    id: 'authoring.pagesAndResources.teams.group.name.error.empty',\n    defaultMessage: 'Enter a unique name for this group',\n  },\n  groupFormNameExists: {\n    id: 'authoring.pagesAndResources.teams.group.name.error.exists',\n    defaultMessage: 'It looks like this name is already in use',\n  },\n  groupFormDescriptionLabel: {\n    id: 'authoring.pagesAndResources.teams.group.description.label',\n    defaultMessage: 'Description',\n  },\n  groupFormDescriptionHelp: {\n    id: 'authoring.pagesAndResources.teams.group.description.help',\n    defaultMessage: 'Enter details about this group',\n  },\n  groupFormDescriptionError: {\n    id: 'authoring.pagesAndResources.teams.group.description.error',\n    defaultMessage: 'Enter a description for this group',\n  },\n  groupFormTypeLabel: {\n    id: 'authoring.pagesAndResources.teams.group.type.label',\n    defaultMessage: 'Type',\n  },\n  groupFormTypeHelp: {\n    id: 'authoring.pagesAndResources.teams.group.type.help',\n    defaultMessage: 'Control who can see, create and join teams',\n  },\n  groupTypeOpen: {\n    id: 'authoring.pagesAndResources.teams.group.types.open',\n    defaultMessage: 'Open',\n  },\n  groupTypeOpenDescription: {\n    id: 'authoring.pagesAndResources.teams.group.types.open.description',\n    defaultMessage: 'Learners can create, join, leave, and see other teams',\n  },\n  groupTypePublicManaged: {\n    id: 'authoring.pagesAndResources.teams.group.types.public_managed',\n    defaultMessage: 'Public managed',\n  },\n  groupTypePublicManagedDescription: {\n    id: 'authoring.pagesAndResources.teams.group.types.public_managed.description',\n    defaultMessage: 'Only course staff can control teams and memberships. Learners can see other teams.',\n  },\n  groupTypePrivateManaged: {\n    id: 'authoring.pagesAndResources.teams.group.types.private_managed',\n    defaultMessage: 'Private managed',\n  },\n  groupTypePrivateManagedDescription: {\n    id: 'authoring.pagesAndResources.teams.group.types.private_managed.description',\n    defaultMessage: 'Only course staff can control teams, memberships, and see other teams',\n  },\n  groupFormMaxSizeLabel: {\n    id: 'authoring.pagesAndResources.teams.group.maxSize.label',\n    defaultMessage: 'Max team size (optional)',\n  },\n  groupFormMaxSizeHelp: {\n    id: 'authoring.pagesAndResources.teams.group.maxSize.help',\n    defaultMessage: 'Override the global max team size',\n  },\n  addGroup: {\n    id: 'authoring.pagesAndResources.teams.addGroup.button',\n    defaultMessage: 'Add group',\n  },\n  deleteAlt: {\n    id: 'authoring.pagesAndResources.teams.group.delete',\n    defaultMessage: 'Delete',\n  },\n  expandAlt: {\n    id: 'authoring.pagesAndResources.teams.group.expand',\n    defaultMessage: 'Expand group editor',\n  },\n  collapseAlt: {\n    id: 'authoring.pagesAndResources.teams.group.collapse',\n    defaultMessage: 'Close group editor',\n  },\n  delete: {\n    id: 'authoring.pagesAndResources.teams.deleteGroup.initiateDelete',\n    defaultMessage: 'Delete',\n  },\n  cancel: {\n    id: 'authoring.pagesAndResources.teams.deleteGroup.cancel-delete.button',\n    defaultMessage: 'Cancel',\n  },\n  groupDeleteHeading: {\n    id: 'authoring.pagesAndResources.teams.deleteGroup.heading',\n    defaultMessage: 'Delete this group?',\n  },\n  groupDeleteBody: {\n    id: 'authoring.pagesAndResources.teams.deleteGroup.body',\n    defaultMessage: `edX recommends that you do not delete groups once your course is running.\n    Your group will no longer be visible in the LMS and learners will not be able to leave teams associated with it.\n    Please delete learners from teams before deleting the associated group.`,\n    description: 'Message displayed to admins when deleting a group. Make sure to include line breaks so that the final text is rendered properly.',\n  },\n  noGroupsErrorTitle: {\n    id: 'authoring.pagesAndResources.teams.enableGroups.error.noGroupsFound.title',\n    defaultMessage: 'No groups found',\n    description: 'Title of error message displayed when a user tries to enable teams but no group is defined.',\n  },\n  noGroupsErrorMessage: {\n    id: 'authoring.pagesAndResources.teams.enableGroups.error.noGroupsFound.message',\n    defaultMessage: 'Add one or more groups to enable teams.',\n    description: 'Body of error message displayed when a user tries to enable teams but no group is defined.',\n  },\n});\n\nexport default messages;\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button, Form, TransitionReplace } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { GroupTypes, TeamSizes } from '../../data/constants';\n\nimport CollapsableEditor from '../../generic/CollapsableEditor';\nimport FormikControl from '../../generic/FormikControl';\nimport messages from './messages';\n\n// Maps a team type to its corresponding intl message\nconst TeamTypeNameMessage = {\n  [GroupTypes.OPEN]: {\n    label: messages.groupTypeOpen,\n    description: messages.groupTypeOpenDescription,\n  },\n  [GroupTypes.PUBLIC_MANAGED]: {\n    label: messages.groupTypePublicManaged,\n    description: messages.groupTypePublicManagedDescription,\n  },\n  [GroupTypes.PRIVATE_MANAGED]: {\n    label: messages.groupTypePrivateManaged,\n    description: messages.groupTypePrivateManagedDescription,\n  },\n};\n\nconst GroupEditor = ({\n  intl, group, onDelete, onChange, onBlur, fieldNameCommonBase, errors,\n}) => {\n  const [isDeleting, setDeleting] = useState(false);\n  const [isOpen, setOpen] = useState(group.id === null);\n  const initiateDeletion = () => setDeleting(true);\n  const cancelDeletion = () => setDeleting(false);\n\n  const handleToggle = (open) => setOpen(Boolean(errors.name || errors.maxTeamSize || errors.description) || open);\n\n  const formGroupClasses = 'mb-4 mx-2';\n\n  return (\n    <TransitionReplace>\n      {isDeleting\n        ? (\n          <div className=\"d-flex flex-column card rounded mb-3 px-4 py-2 p-4\" key=\"isDeleting\">\n            <h4 className=\"mb-3\">{intl.formatMessage(messages.groupDeleteHeading)}</h4>\n            {intl.formatMessage(messages.groupDeleteBody).split('\\n').map(text => <p>{text}</p>)}\n            <div className=\"d-flex flex-row justify-content-end\">\n              <Button variant=\"muted\" size=\"sm\" onClick={cancelDeletion}>\n                {intl.formatMessage(messages.cancel)}\n              </Button>\n              <Button variant=\"outline-danger\" size=\"sm\" onClick={() => onDelete(group)}>\n                {intl.formatMessage(messages.delete)}\n              </Button>\n            </div>\n          </div>\n        )\n        : (\n          <CollapsableEditor\n            // If there is no id, this is a new team, so automatically open it\n            key=\"isConfiguring\"\n            open={isOpen}\n            onToggle={handleToggle}\n            onDelete={initiateDeletion}\n            deleteAlt={intl.formatMessage(messages.deleteAlt)}\n            expandAlt={intl.formatMessage(messages.expandAlt)}\n            collapseAlt={intl.formatMessage(messages.collapseAlt)}\n            title={\n              isOpen\n                ? (\n                  <div className=\"d-flex flex-column flex-shrink-1 h4 p-0 m-0\">\n                    {intl.formatMessage(messages.configureGroup)}\n                  </div>\n                ) : (\n                  <div className=\"d-flex flex-column flex-shrink-1 small mw-100\">\n                    <div className=\"small text-gray-500\">{intl.formatMessage(TeamTypeNameMessage[group.type ? group.type : GroupTypes.OPEN].label)} </div>\n                    <div className=\"h4 text-truncate my-1 font-weight-normal\">{group.name}</div>\n                    <div className=\"small text-truncate text-muted text-gray-500\">{group.description}</div>\n                  </div>\n                )\n            }\n          >\n            <FormikControl\n              name={`${fieldNameCommonBase}.name`}\n              value={group.name}\n              floatingLabel={intl.formatMessage(messages.groupFormNameLabel)}\n              help={intl.formatMessage(messages.groupFormNameHelp)}\n              className={`${formGroupClasses} mt-2.5`}\n            />\n            <FormikControl\n              name={`${fieldNameCommonBase}.description`}\n              value={group.description}\n              floatingLabel={intl.formatMessage(messages.groupFormDescriptionLabel)}\n              help={intl.formatMessage(messages.groupFormDescriptionHelp)}\n              as=\"textarea\"\n              rows={4}\n              style={{ minHeight: '2.5rem' }}\n              className={formGroupClasses}\n            />\n            <Form.Group className={formGroupClasses}>\n              <Form.Label className=\"h4 my-3\">\n                {intl.formatMessage(messages.groupFormTypeLabel)}\n              </Form.Label>\n              <Form.RadioSet\n                name={`${fieldNameCommonBase}.type`}\n                value={group.type}\n                onChange={onChange}\n                onBlur={onBlur}\n              >\n                {Object.values(GroupTypes).map(groupType => (\n                  <Form.Radio\n                    key={groupType}\n                    value={groupType}\n                    description={intl.formatMessage(TeamTypeNameMessage[groupType].description)}\n                    className=\"my-2\"\n                    // TODO: This should probably be fixed on the paragon side\n                    style={{ minWidth: '1.25rem', minHeight: '1.25rem' }}\n                  >\n                    {intl.formatMessage(TeamTypeNameMessage[groupType].label)}\n                  </Form.Radio>\n                ))}\n              </Form.RadioSet>\n            </Form.Group>\n            <FormikControl\n              type=\"number\"\n              name={`${fieldNameCommonBase}.maxTeamSize`}\n              floatingLabel={intl.formatMessage(messages.groupFormMaxSizeLabel)}\n              value={group.maxTeamSize}\n              help={intl.formatMessage(messages.groupFormMaxSizeHelp)}\n              label={<Form.Label className=\"h4 pb-4\">{intl.formatMessage(messages.teamSize)}</Form.Label>}\n              className=\"mx-2\"\n              placeholder={TeamSizes.DEFAULT}\n            />\n          </CollapsableEditor>\n        )}\n    </TransitionReplace>\n  );\n};\n\nexport const groupShape = PropTypes.shape({\n  id: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  maxTeamSize: PropTypes.number.isRequired,\n});\n\nGroupEditor.propTypes = {\n  intl: intlShape.isRequired,\n  fieldNameCommonBase: PropTypes.string.isRequired,\n  errors: PropTypes.shape({\n    name: PropTypes.string,\n    description: PropTypes.string,\n    maxTeamSize: PropTypes.string,\n  }),\n  group: groupShape.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\n\nGroupEditor.defaultProps = {\n  errors: {\n    name: null,\n    description: null,\n    maxTeamSize: null,\n  },\n};\n\nexport default injectIntl(GroupEditor);\n","import { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { Button, Form } from '@edx/paragon';\nimport { Add } from '@edx/paragon/icons';\n\nimport { FieldArray } from 'formik';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport * as Yup from 'yup';\nimport { GroupTypes, TeamSizes } from '../../data/constants';\nimport FormikControl from '../../generic/FormikControl';\nimport { setupYupExtensions, useAppSetting } from '../../utils';\nimport AppSettingsModal from '../app-settings-modal/AppSettingsModal';\nimport GroupEditor from './GroupEditor';\nimport messages from './messages';\n\nsetupYupExtensions();\n\nconst TeamSettings = ({\n  intl,\n  onClose,\n}) => {\n  const [teamsConfiguration, saveSettings] = useAppSetting('teamsConfiguration');\n  const blankNewGroup = {\n    name: '',\n    description: '',\n    type: GroupTypes.OPEN,\n    maxTeamSize: null,\n    id: null,\n    key: uuid(),\n  };\n\n  const handleSettingsSave = async (values) => {\n    // For newly-added teams, fill in an id.\n    const groups = values.groups?.map(group => ({\n      id: group.id || uuid(),\n      name: group.name,\n      type: group.type,\n      description: group.description,\n      max_team_size: group.maxTeamSize,\n    }));\n    return saveSettings({\n      team_sets: groups,\n      max_team_size: values.maxTeamSize,\n      enabled: values.enabled,\n    });\n  };\n  const enableAppError = {\n    title: intl.formatMessage(messages.noGroupsErrorTitle),\n    message: intl.formatMessage(messages.noGroupsErrorMessage),\n  };\n\n  return (\n    <AppSettingsModal\n      appId=\"teams\"\n      title={intl.formatMessage(messages.heading)}\n      enableAppHelp={intl.formatMessage(messages.enableTeamsHelp)}\n      enableAppLabel={intl.formatMessage(messages.enableTeamsLabel)}\n      learnMoreText={intl.formatMessage(messages.enableTeamsLink)}\n      onClose={onClose}\n      bodyClassName=\"bg-light-200\"\n      // Topic is supported for backwards compatibility, the new field is team_sets:\n      // ref: https://github.com/openedx/edx-platform/blob/15461d3b6e6c0a724a7b8ed09241d970f201e5e7/openedx/core/lib/teams_config.py#L104-L108\n      initialValues={{\n        maxTeamSize: teamsConfiguration?.maxTeamSize,\n        groups: teamsConfiguration?.teamSets || teamsConfiguration?.topics,\n      }}\n      validationSchema={{\n        enabled: Yup.boolean()\n          .test(\n            'has-groups',\n            enableAppError,\n            (value, context) => (!value || context.parent.groups.length > 0),\n          ),\n        maxTeamSize: Yup.number()\n          .required(intl.formatMessage(messages.maxTeamSizeEmpty))\n          .min(TeamSizes.MIN, intl.formatMessage(messages.maxTeamSizeInvalid))\n          .max(\n            TeamSizes.MAX,\n            intl.formatMessage(messages.maxTeamSizeTooHigh, {\n              max: TeamSizes.MAX,\n            }),\n          ),\n        groups: Yup.array().of(\n          Yup.object({\n            id: Yup.string().nullable(),\n            name: Yup.string()\n              .required(intl.formatMessage(messages.groupFormNameEmpty))\n              .trim(),\n            type: Yup.string().oneOf(Object.values(GroupTypes)),\n            description: Yup.string()\n              .required(intl.formatMessage(messages.groupFormDescriptionError))\n              .trim(),\n            maxTeamSize: Yup.number()\n              .nullable()\n              .min(TeamSizes.MIN, intl.formatMessage(messages.maxTeamSizeInvalid))\n              .max(\n                TeamSizes.MAX,\n                intl.formatMessage(messages.maxTeamSizeTooHigh, {\n                  max: TeamSizes.MAX,\n                }),\n              )\n              .default(null),\n          }),\n        )\n          .when('enabled', {\n            is: true,\n            then: Yup.array().min(1),\n          })\n          .default([])\n          .uniqueProperty('name', intl.formatMessage(messages.groupFormNameExists)),\n      }}\n      onSettingsSave={handleSettingsSave}\n      configureBeforeEnable\n    >\n      {\n        ({\n          handleChange, handleBlur, values, errors,\n        }) => (\n          <>\n            <h4 className=\"my-3 pb-2\">{intl.formatMessage(messages.teamSize)}</h4>\n            <FormikControl\n              name=\"maxTeamSize\"\n              value={values.maxTeamSize}\n              floatingLabel={intl.formatMessage(messages.maxTeamSize)}\n              help={intl.formatMessage(messages.maxTeamSizeHelp)}\n              className=\"pb-1\"\n              type=\"number\"\n            />\n            <div className=\"bg-light-200 d-flex flex-column mx-n4 px-4 py-4 border border-top mb-n3.5\">\n              <h4>{intl.formatMessage(messages.groups)}</h4>\n              <Form.Text className=\"mb-3\">{intl.formatMessage(messages.groupsHelp)}</Form.Text>\n              <FieldArray name=\"groups\">\n                {({ push, remove }) => (\n                  <>\n                    {values.groups?.map((group, index) => (\n                      <GroupEditor\n                        key={group.id || group.key}\n                        group={group}\n                        errors={errors.groups?.[index]}\n                        fieldNameCommonBase={`groups.${index}`}\n                        onDelete={() => remove(index)}\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                      />\n                    ))}\n                    <Button\n                      variant=\"plain\"\n                      className=\"p-0 align-self-start mt-3\"\n                      iconBefore={Add}\n                      onClick={() => push(blankNewGroup)}\n                    >\n                      {intl.formatMessage(messages.addGroup)}\n                    </Button>\n                  </>\n                )}\n              </FieldArray>\n            </div>\n          </>\n        )\n      }\n    </AppSettingsModal>\n  );\n};\n\nTeamSettings.propTypes = {\n  intl: intlShape.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(TeamSettings);\n"],"names":["defineMessages","cancel","id","defaultMessage","save","saving","saved","retry","enabled","disabled","errorSavingTitle","errorSavingMessage","AppSettingsForm","_ref","formikProps","children","showForm","_jsx","TransitionReplace","React","propTypes","PropTypes","defaultProps","AppSettingsModalBase","_ref2","intl","title","onClose","variant","isMobile","footer","_jsxs","ModalDialog","isOpen","size","hasCloseButton","isFullscreenOnMobile","className","ActionRow","formatMessage","messages","intlShape","isRequired","AppSettingsModal","_ref3","appId","configureBeforeEnable","initialValues","validationSchema","onSettingsSave","enableAppLabel","enableAppHelp","learnMoreText","enableReinitialize","hideAppToggle","courseId","useContext","PagesAndResourcesContext","loadingStatus","useSelector","getLoadingStatus","updateSettingsRequestStatus","getSavingStatus","alertRef","useRef","saveError","setSaveError","useState","appInfo","useModel","dispatch","useDispatch","submitButtonState","RequestStatus","useIsMobile","modalVariant","useEffect","updateSavingStatus","status","handleFormikSubmit","_ref4","handleSubmit","errors","async","event","Object","keys","length","current","scrollIntoView","learnMoreLink","documentationLinks","learnMoreConfiguration","Hyperlink","destination","target","rel","Formik","_objectSpread","Yup","shape","onSubmit","success","values","updateAppStatus","Form","StatefulButton","labels","default","pending","complete","state","onClick","Alert","icon","Info","ref","message","FormSwitchGroup","name","onChange","handleChange","onBlur","handleBlur","checked","label","Badge","helpText","AppConfigFormDivider","marginAdj","sm","Loading","ConnectionErrorAlert","PermissionDeniedAlert","injectIntl","heading","enableTeamsLabel","enableTeamsHelp","enableTeamsLink","teamSize","maxTeamSize","maxTeamSizeHelp","maxTeamSizeEmpty","maxTeamSizeInvalid","maxTeamSizeTooHigh","groups","groupsHelp","configureGroup","groupFormNameLabel","groupFormNameHelp","groupFormNameEmpty","groupFormNameExists","groupFormDescriptionLabel","groupFormDescriptionHelp","groupFormDescriptionError","groupFormTypeLabel","groupFormTypeHelp","groupTypeOpen","groupTypeOpenDescription","groupTypePublicManaged","groupTypePublicManagedDescription","groupTypePrivateManaged","groupTypePrivateManagedDescription","groupFormMaxSizeLabel","groupFormMaxSizeHelp","addGroup","deleteAlt","expandAlt","collapseAlt","delete","groupDeleteHeading","groupDeleteBody","description","noGroupsErrorTitle","noGroupsErrorMessage","TeamTypeNameMessage","GroupTypes","GroupEditor","group","onDelete","fieldNameCommonBase","isDeleting","setDeleting","setOpen","formGroupClasses","split","map","text","Button","cancelDeletion","CollapsableEditor","open","onToggle","Boolean","initiateDeletion","type","FormikControl","value","floatingLabel","help","as","rows","style","minHeight","groupType","minWidth","placeholder","TeamSizes","groupShape","setupYupExtensions","TeamSettings","teamsConfiguration","saveSettings","useAppSetting","blankNewGroup","key","uuid","enableAppError","bodyClassName","teamSets","topics","test","context","parent","required","min","max","of","nullable","trim","oneOf","when","is","then","uniqueProperty","max_team_size","team_sets","_Fragment","FieldArray","push","remove","index","iconBefore","Add"],"sourceRoot":""}