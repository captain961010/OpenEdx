{"version":3,"file":"app.558db010845355511e02.js","mappings":"iniCA8BA,GACE,GAAMA,EACN,Q,0tCACA,QAASC,EACT,GAAMC,EACN,QAASC,EACT,GAAMC,EACN,GAAMC,EACN,GAAMC,EACN,GAAMC,EACN,QAASC,EACT,QAASC,EACT,QAASC,EACT,GAAMC,EACN,GAAMC,EACN,GAAMC,EACN,QAASC,EACT,GAAMC,EACN,QAASC,EACT,SAAUC,EACV,GAAMC,EACN,QAASC,EACT,GAAMC,EACN,GAAMC,G,wklDCvBR,IACE,GAAMrB,EACN,Q,g3DACA,QAASC,GACT,GAAMC,GACN,QAASC,GACT,GAAMC,GACN,GAAMC,EACN,GAAMC,EACN,GAAMC,EACN,QAASC,EACT,QAASC,EACT,QAASC,EACT,GAAMC,EACN,GAAMC,EACN,GAAMC,EACN,QAASC,EACT,GAAMC,EACN,QAASC,EACT,SAAUC,EACV,GAAMC,EACN,QAASC,EACT,GAAMC,EACN,GAAMC,G,q2/HCvBR,IACE,GAAMrB,GACN,Q,uwHACA,QAASC,GACT,GAAMC,GACN,QAASC,GACT,GAAMC,GACN,GAAMC,GACN,GAAMC,GACN,GAAMC,GACN,QAASC,GACT,QAASC,GACT,QAASC,GACT,GAAMC,GACN,GAAMC,GACN,GAAMC,GACN,QAASC,GACT,GAAMC,GACN,QAASC,GACT,SAAUC,GACV,GAAMC,GACN,QAASC,GACT,GAAMC,GACN,GAAMC,I,0viJC1CR,IACEC,EACAC,GACAC,GCeF,CACE,GAAMxB,GACN,Q,q1JACA,QAASC,GACT,GAAMC,GACN,QAASC,GACT,GAAMC,GACN,GAAMC,GACN,GAAMC,GACN,GAAMC,GACN,QAASC,GACT,QAASC,GACT,QAASC,GACT,GAAMC,GACN,GAAMC,GACN,GAAMC,GACN,QAASC,GACT,GAAMC,GACN,QAASC,GACT,SAAUC,GACV,GAAMC,GACN,QAASC,GACT,GAAME,K,iJCjDR,MAwJA,IAxJiBI,EAAAA,GAAAA,IAAe,CAE9BC,8BAA+B,CAC7BC,GAAI,2DACJC,eAAgB,4FAElBC,YAAa,CACXF,GAAI,qDACJC,eAAgB,8CAElBE,kBAAmB,CACjBH,G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","sources":["webpack://@edx/frontend-app-communications/./src/i18n/messages/frontend-component-header/index.js","webpack://@edx/frontend-app-communications/./src/i18n/messages/frontend-component-footer/index.js","webpack://@edx/frontend-app-communications/./src/i18n/messages/paragon/index.js","webpack://@edx/frontend-app-communications/./src/i18n/index.js","webpack://@edx/frontend-app-communications/./src/i18n/messages/frontend-app-communications/index.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/messages.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/data/api.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/BulkEmailHistoryTable.jsx","webpack://@edx/frontend-app-communications/./src/utils/useAsyncReducer.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-form/data/reducer.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/bulk-email-scheduled-emails-table/data/reducer.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-context/BulkEmailProvider.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-form/data/actions.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/ViewEmailModal.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/BulkEmailContentHistory.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/BulkEmailTaskHistory.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/bulk-email-scheduled-emails-table/data/actions.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/bulk-email-scheduled-emails-table/data/thunks.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/bulk-email-scheduled-emails-table/data/api.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/bulk-email-scheduled-emails-table/messages.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/task-alert-modal/TaskAlertModal.jsx","webpack://@edx/frontend-app-communications/./src/utils/formatDateAndTime.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/bulk-email-scheduled-emails-table/BulkEmailScheduledEmailsTable.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/BulkEmailPendingTasksAlert.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-task-manager/BulkEmailTaskManager.jsx","webpack://@edx/frontend-app-communications/./src/components/navigation-tabs/NavigationTabs.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/text-editor/TextEditor.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-form/bulk-email-recipient/BulkEmailRecipient.jsx","webpack://@edx/frontend-app-communications/./src/utils/useMobileResponsive.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-form/ScheduleEmailForm.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-form/messages.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-form/BulkEmailForm.jsx","webpack://@edx/frontend-app-communications/./src/utils/useTimeout.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-form/data/thunks.js","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/bulk-email-form/data/api.js","webpack://@edx/frontend-app-communications/./src/components/page-container/data/api.js","webpack://@edx/frontend-app-communications/./src/components/page-container/PageContainer.jsx","webpack://@edx/frontend-app-communications/./src/components/navigation-tabs/BackToInstructor.jsx","webpack://@edx/frontend-app-communications/./src/components/bulk-email-tool/BulkEmailTool.jsx","webpack://@edx/frontend-app-communications/./src/index.jsx"],"sourcesContent":["// This file is generated by the openedx/frontend-platform's \"intl-import.js\" script.\n//\n// Refer to the i18n documents in https://docs.openedx.org/en/latest/developers/references/i18n.html to update\n// the file and use the Micro-frontend i18n pattern in new repositories.\n//\n\nimport messagesOfArLanguage from './ar.json';\nimport messagesOfDaLanguage from './da.json';\nimport messagesOfDeLanguage from './de.json';\nimport messagesOfDeDeLanguage from './de_DE.json';\nimport messagesOfElLanguage from './el.json';\nimport messagesOfEs419Language from './es_419.json';\nimport messagesOfEsEsLanguage from './es_ES.json';\nimport messagesOfFaLanguage from './fa.json';\nimport messagesOfFrCaLanguage from './fr_CA.json';\nimport messagesOfHeLanguage from './he.json';\nimport messagesOfHiLanguage from './hi.json';\nimport messagesOfIdLanguage from './id.json';\nimport messagesOfItItLanguage from './it_IT.json';\nimport messagesOfPtBrLanguage from './pt_BR.json';\nimport messagesOfPtPtLanguage from './pt_PT.json';\nimport messagesOfRuLanguage from './ru.json';\nimport messagesOfSwLanguage from './sw.json';\nimport messagesOfTeLanguage from './te.json';\nimport messagesOfThLanguage from './th.json';\nimport messagesOfTrTrLanguage from './tr_TR.json';\nimport messagesOfUkLanguage from './uk.json';\nimport messagesOfZhCnLanguage from './zh_CN.json';\nimport messagesOfZhHkLanguage from './zh_HK.json';\n\nexport default {\n  'ar': messagesOfArLanguage,\n  'zh-hk': messagesOfZhHkLanguage,\n  'zh-cn': messagesOfZhCnLanguage,\n  'uk': messagesOfUkLanguage,\n  'tr-tr': messagesOfTrTrLanguage,\n  'th': messagesOfThLanguage,\n  'te': messagesOfTeLanguage,\n  'sw': messagesOfSwLanguage,\n  'ru': messagesOfRuLanguage,\n  'pt-pt': messagesOfPtPtLanguage,\n  'pt-br': messagesOfPtBrLanguage,\n  'it-it': messagesOfItItLanguage,\n  'id': messagesOfIdLanguage,\n  'hi': messagesOfHiLanguage,\n  'he': messagesOfHeLanguage,\n  'fr-ca': messagesOfFrCaLanguage,\n  'fa': messagesOfFaLanguage,\n  'es-es': messagesOfEsEsLanguage,\n  'es-419': messagesOfEs419Language,\n  'el': messagesOfElLanguage,\n  'de-de': messagesOfDeDeLanguage,\n  'de': messagesOfDeLanguage,\n  'da': messagesOfDaLanguage,\n};\n","// This file is generated by the openedx/frontend-platform's \"intl-import.js\" script.\n//\n// Refer to the i18n documents in https://docs.openedx.org/en/latest/developers/references/i18n.html to update\n// the file and use the Micro-frontend i18n pattern in new repositories.\n//\n\nimport messagesOfArLanguage from './ar.json';\nimport messagesOfDaLanguage from './da.json';\nimport messagesOfDeLanguage from './de.json';\nimport messagesOfDeDeLanguage from './de_DE.json';\nimport messagesOfElLanguage from './el.json';\nimport messagesOfEs419Language from './es_419.json';\nimport messagesOfEsEsLanguage from './es_ES.json';\nimport messagesOfFaLanguage from './fa.json';\nimport messagesOfFrCaLanguage from './fr_CA.json';\nimport messagesOfHeLanguage from './he.json';\nimport messagesOfHiLanguage from './hi.json';\nimport messagesOfIdLanguage from './id.json';\nimport messagesOfItItLanguage from './it_IT.json';\nimport messagesOfPtBrLanguage from './pt_BR.json';\nimport messagesOfPtPtLanguage from './pt_PT.json';\nimport messagesOfRuLanguage from './ru.json';\nimport messagesOfSwLanguage from './sw.json';\nimport messagesOfTeLanguage from './te.json';\nimport messagesOfThLanguage from './th.json';\nimport messagesOfTrTrLanguage from './tr_TR.json';\nimport messagesOfUkLanguage from './uk.json';\nimport messagesOfZhCnLanguage from './zh_CN.json';\nimport messagesOfZhHkLanguage from './zh_HK.json';\n\nexport default {\n  'ar': messagesOfArLanguage,\n  'zh-hk': messagesOfZhHkLanguage,\n  'zh-cn': messagesOfZhCnLanguage,\n  'uk': messagesOfUkLanguage,\n  'tr-tr': messagesOfTrTrLanguage,\n  'th': messagesOfThLanguage,\n  'te': messagesOfTeLanguage,\n  'sw': messagesOfSwLanguage,\n  'ru': messagesOfRuLanguage,\n  'pt-pt': messagesOfPtPtLanguage,\n  'pt-br': messagesOfPtBrLanguage,\n  'it-it': messagesOfItItLanguage,\n  'id': messagesOfIdLanguage,\n  'hi': messagesOfHiLanguage,\n  'he': messagesOfHeLanguage,\n  'fr-ca': messagesOfFrCaLanguage,\n  'fa': messagesOfFaLanguage,\n  'es-es': messagesOfEsEsLanguage,\n  'es-419': messagesOfEs419Language,\n  'el': messagesOfElLanguage,\n  'de-de': messagesOfDeDeLanguage,\n  'de': messagesOfDeLanguage,\n  'da': messagesOfDaLanguage,\n};\n","// This file is generated by the openedx/frontend-platform's \"intl-import.js\" script.\n//\n// Refer to the i18n documents in https://docs.openedx.org/en/latest/developers/references/i18n.html to update\n// the file and use the Micro-frontend i18n pattern in new repositories.\n//\n\nimport messagesOfArLanguage from './ar.json';\nimport messagesOfDaLanguage from './da.json';\nimport messagesOfDeLanguage from './de.json';\nimport messagesOfDeDeLanguage from './de_DE.json';\nimport messagesOfElLanguage from './el.json';\nimport messagesOfEs419Language from './es_419.json';\nimport messagesOfEsEsLanguage from './es_ES.json';\nimport messagesOfFaLanguage from './fa.json';\nimport messagesOfFrCaLanguage from './fr_CA.json';\nimport messagesOfHeLanguage from './he.json';\nimport messagesOfHiLanguage from './hi.json';\nimport messagesOfIdLanguage from './id.json';\nimport messagesOfItItLanguage from './it_IT.json';\nimport messagesOfPtBrLanguage from './pt_BR.json';\nimport messagesOfPtPtLanguage from './pt_PT.json';\nimport messagesOfRuLanguage from './ru.json';\nimport messagesOfSwLanguage from './sw.json';\nimport messagesOfTeLanguage from './te.json';\nimport messagesOfThLanguage from './th.json';\nimport messagesOfTrTrLanguage from './tr_TR.json';\nimport messagesOfUkLanguage from './uk.json';\nimport messagesOfZhCnLanguage from './zh_CN.json';\nimport messagesOfZhHkLanguage from './zh_HK.json';\n\nexport default {\n  'ar': messagesOfArLanguage,\n  'zh-hk': messagesOfZhHkLanguage,\n  'zh-cn': messagesOfZhCnLanguage,\n  'uk': messagesOfUkLanguage,\n  'tr-tr': messagesOfTrTrLanguage,\n  'th': messagesOfThLanguage,\n  'te': messagesOfTeLanguage,\n  'sw': messagesOfSwLanguage,\n  'ru': messagesOfRuLanguage,\n  'pt-pt': messagesOfPtPtLanguage,\n  'pt-br': messagesOfPtBrLanguage,\n  'it-it': messagesOfItItLanguage,\n  'id': messagesOfIdLanguage,\n  'hi': messagesOfHiLanguage,\n  'he': messagesOfHeLanguage,\n  'fr-ca': messagesOfFrCaLanguage,\n  'fa': messagesOfFaLanguage,\n  'es-es': messagesOfEsEsLanguage,\n  'es-419': messagesOfEs419Language,\n  'el': messagesOfElLanguage,\n  'de-de': messagesOfDeDeLanguage,\n  'de': messagesOfDeLanguage,\n  'da': messagesOfDaLanguage,\n};\n","// This file is generated by the openedx/frontend-platform's \"intl-import.js\" script.\n//\n// Refer to the i18n documents in https://docs.openedx.org/en/latest/developers/references/i18n.html to update\n// the file and use the Micro-frontend i18n pattern in new repositories.\n//\n\nimport messagesFromFrontendComponentHeader from './messages/frontend-component-header';\nimport messagesFromFrontendComponentFooter from './messages/frontend-component-footer';\nimport messagesFromParagon from './messages/paragon';\nimport messagesFromFrontendAppCommunications from './messages/frontend-app-communications';\n\nexport default [\n  messagesFromFrontendComponentHeader,\n  messagesFromFrontendComponentFooter,\n  messagesFromParagon,\n  messagesFromFrontendAppCommunications,\n];\n","// This file is generated by the openedx/frontend-platform's \"intl-import.js\" script.\n//\n// Refer to the i18n documents in https://docs.openedx.org/en/latest/developers/references/i18n.html to update\n// the file and use the Micro-frontend i18n pattern in new repositories.\n//\n\nimport messagesOfArLanguage from './ar.json';\nimport messagesOfDaLanguage from './da.json';\nimport messagesOfDeDeLanguage from './de_DE.json';\nimport messagesOfElLanguage from './el.json';\nimport messagesOfEs419Language from './es_419.json';\nimport messagesOfEsEsLanguage from './es_ES.json';\nimport messagesOfFaLanguage from './fa.json';\nimport messagesOfFrCaLanguage from './fr_CA.json';\nimport messagesOfHeLanguage from './he.json';\nimport messagesOfHiLanguage from './hi.json';\nimport messagesOfIdLanguage from './id.json';\nimport messagesOfItItLanguage from './it_IT.json';\nimport messagesOfPtBrLanguage from './pt_BR.json';\nimport messagesOfPtPtLanguage from './pt_PT.json';\nimport messagesOfRuLanguage from './ru.json';\nimport messagesOfSwLanguage from './sw.json';\nimport messagesOfTeLanguage from './te.json';\nimport messagesOfThLanguage from './th.json';\nimport messagesOfTrTrLanguage from './tr_TR.json';\nimport messagesOfUkLanguage from './uk.json';\nimport messagesOfZhCnLanguage from './zh_CN.json';\nimport messagesOfZhHkLanguage from './zh_HK.json';\n\nexport default {\n  'ar': messagesOfArLanguage,\n  'zh-hk': messagesOfZhHkLanguage,\n  'zh-cn': messagesOfZhCnLanguage,\n  'uk': messagesOfUkLanguage,\n  'tr-tr': messagesOfTrTrLanguage,\n  'th': messagesOfThLanguage,\n  'te': messagesOfTeLanguage,\n  'sw': messagesOfSwLanguage,\n  'ru': messagesOfRuLanguage,\n  'pt-pt': messagesOfPtPtLanguage,\n  'pt-br': messagesOfPtBrLanguage,\n  'it-it': messagesOfItItLanguage,\n  'id': messagesOfIdLanguage,\n  'hi': messagesOfHiLanguage,\n  'he': messagesOfHeLanguage,\n  'fr-ca': messagesOfFrCaLanguage,\n  'fa': messagesOfFaLanguage,\n  'es-es': messagesOfEsEsLanguage,\n  'es-419': messagesOfEs419Language,\n  'el': messagesOfElLanguage,\n  'de-de': messagesOfDeDeLanguage,\n  'da': messagesOfDaLanguage,\n};\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  /* BulkEmailContentHistory.jsx Messages */\n  errorFetchingEmailHistoryData: {\n    id: 'bulk.email.content.history.table.alert.errorFetchingData',\n    defaultMessage: 'An error occurred retrieving email history data for this course. Please try again later.',\n  },\n  noEmailData: {\n    id: 'bulk.email.content.history.table.alert.noEmailData',\n    defaultMessage: 'There is no email history for this course.',\n  },\n  buttonViewMessage: {\n    id: 'bulk.email.content.history.table.button.viewMessage',\n    defaultMessage: 'View Message',\n  },\n  modalMessageSubject: {\n    id: 'bulk.email.content.history.table.modal.subject',\n    defaultMessage: 'Subject:',\n  },\n  modalMessageSentBy: {\n    id: 'bulk.email.content.history.table.modal.sentBy',\n    defaultMessage: 'Sent by:',\n  },\n  modalMessageTimeSent: {\n    id: 'bulk.email.content.history.table.modal.timeSent',\n    defaultMessage: 'Time sent:',\n  },\n  modalMessageSentTo: {\n    id: 'bulk.email.content.history.table.modal.sentTo',\n    defaultMessage: 'Sent to:',\n  },\n  modalMessageBody: {\n    id: 'bulk.email.content.history.table.modal.messageBody',\n    defaultMessage: 'Message:',\n  },\n  modalCloseButton: {\n    id: 'bulk.email.tool.close.modalDialog.button',\n    defaultMessage: 'Close',\n  },\n  emailHistoryTableViewMessageInstructions: {\n    id: 'bulk.email.content.history.table.viewMessageInstructions',\n    defaultMessage: 'To read a sent email message, click the `View Message` button within the table.',\n  },\n  emailHistoryTableColumnHeaderSubject: {\n    id: 'bulk.email.content.history.table.column.header.subject',\n    defaultMessage: 'Subject',\n  },\n  emailHistoryTableColumnHeaderAuthor: {\n    id: 'bulk.email.content.history.table.column.header.author',\n    defaultMessage: 'Sent By',\n  },\n  emailHistoryTableColumnHeaderRecipients: {\n    id: 'bulk.email.content.history.table.column.header.recipients',\n    defaultMessage: 'Sent To',\n  },\n  emailHistoryTableColumnHeaderTimeSent: {\n    id: 'bulk.email.content.history.table.column.header.timeSent',\n    defaultMessage: 'Time Sent',\n  },\n  emailHistoryTableColumnHeaderNumberSent: {\n    id: 'bulk.email.content.history.table.column.header.numberSent',\n    defaultMessage: 'Number Sent',\n  },\n  emailHistoryTableSectionButtonHeader: {\n    id: 'bulk.email.content.history.table.button.header',\n    defaultMessage: 'View the content of previously sent emails',\n  },\n  emailHistoryTableSectionButton: {\n    id: 'bulk.email.content.history.table.button',\n    defaultMessage: 'Show Sent Email History',\n  },\n  /* BulkEmailTaskManager.jsx messages */\n  pendingTasksHeader: {\n    id: 'bulk.email.pending.tasks.header',\n    defaultMessage: 'Pending tasks has moved',\n  },\n  emailTaskHistoryHeader: {\n    id: 'bulk.email.email.task.history.header',\n    defaultMessage: 'Email Task History',\n  },\n  /* BulkEmailPendingTasks.jsx messages */\n  pendingTaskSectionInfo: {\n    id: 'bulk.email.pending.tasks.section.info',\n    defaultMessage: 'Email actions run in the background. The status for any active tasks - including email tasks - appears in the table below.',\n  },\n  errorFetchingPendingTaskData: {\n    id: 'bulk.email.pending.tasks.table.alert.errorFetchingData',\n    defaultMessage: 'Error fetching running task data. This request will be retried automatically.',\n  },\n  noPendingTaskData: {\n    id: 'bulk.email.pending.tasks.table.alert.noTaskData',\n    defaultMessage: 'No tasks currently running.',\n  },\n  /* BulkEmailTaskHistory.jsx messages */\n  emailTaskHistoryTableSectionButtonHeader: {\n    id: 'bulk.email.task.history.table.button.header',\n    defaultMessage: 'View the status for all email tasks created for this course',\n  },\n  emailTaskHistoryTableSectionButton: {\n    id: 'bulk.email.task.history.table.button',\n    defaultMessage: 'Show Email Task History',\n  },\n  errorFetchingTaskHistoryData: {\n    id: 'bulk.email.task.history.table.alert.errorFetchingData',\n    defaultMessage: 'Error fetching email task history data for this course. Please try again later.',\n  },\n  noTaskHistoryData: {\n    id: 'bulk.email.task.history.table.alert.noTaskData',\n    defaultMessage: 'There is no email task history for this course.',\n  },\n  /* Common Messages */\n  taskHistoryTableColumnHeaderTaskType: {\n    id: 'bulk.email.task.history.table.column.header.taskType',\n    defaultMessage: 'Task Type',\n  },\n  taskHistoryTableColumnHeaderTaskInputs: {\n    id: 'bulk.email.task.history.table.column.header.taskInputs',\n    defaultMessage: 'Task Inputs',\n  },\n  taskHistoryTableColumnHeaderTaskId: {\n    id: 'bulk.email.task.history.table.column.header.taskId',\n    defaultMessage: 'Task Id',\n  },\n  taskHistoryTableColumnHeaderTaskRequester: {\n    id: 'bulk.email.task.history.table.column.header.taskRequester',\n    defaultMessage: 'Requester',\n  },\n  taskHistoryTableColumnHeaderTaskSubmittedDate: {\n    id: 'bulk.email.task.history.table.column.header.taskSubmittedDate',\n    defaultMessage: 'Submitted',\n  },\n  taskHistoryTableColumnHeaderTaskDuration: {\n    id: 'bulk.email.task.history.table.column.header.taskDuration',\n    defaultMessage: 'Duration (seconds)',\n  },\n  taskHistoryTableColumnHeaderTaskState: {\n    id: 'bulk.email.task.history.table.column.header.taskState',\n    defaultMessage: 'State',\n  },\n  taskHistoryTableColumnHeaderTaskStatus: {\n    id: 'bulk.email.task.history.table.column.header.taskStatus',\n    defaultMessage: 'Status',\n  },\n  taskHistoryTableColumnHeaderTaskProgress: {\n    id: 'bulk.email.task.history.table.column.header.taskProgress',\n    defaultMessage: 'Task Progress',\n  },\n  scheduledEmailsTableHeader: {\n    id: 'bulk.email.scheduled.emails.table.header',\n    defaultMessage: 'Scheduled emails',\n  },\n});\n\nexport default messages;\n","import { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nasync function getBulkCourseEmailData(courseId, endpoint) {\n  const endpointUrl = `${getConfig().LMS_BASE_URL}/courses/${courseId}/instructor/api/${endpoint}`;\n  // Yes, even though these edx-platform endpoints retrieve data, the Instructor Dashboard REST API's require a POST or\n  // the call will fail with a 405 error...\n  const { data } = await getAuthenticatedHttpClient().post(endpointUrl);\n  return data;\n}\n\nexport async function getSentEmailHistory(courseId) {\n  const data = await getBulkCourseEmailData(courseId, 'list_email_content');\n  return data;\n}\n\nexport async function getEmailTaskHistory(courseId) {\n  const data = await getBulkCourseEmailData(courseId, 'list_background_email_tasks');\n  return data;\n}\n\nexport async function getInstructorTasks(courseId) {\n  const data = await getBulkCourseEmailData(courseId, 'list_instructor_tasks');\n  return data;\n}\n","import { Alert, DataTable } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default function BulkEmailTaskManagerTable(props) {\n  const {\n    errorRetrievingData,\n    tableData,\n    tableDescription,\n    alertWarningMessage,\n    alertErrorMessage,\n    columns,\n    additionalColumns,\n  } = props;\n\n  /**\n   * Sub-render function that creates an Alert component with a specific type and message for display to a user.\n   */\n  const renderAlert = (alertType, alertMessage) => (\n    <div className=\"pt-1\">\n      <Alert variant={`${alertType}`}>\n        <p className=\"font-weight-bold\">\n          {`${alertMessage}`}\n        </p>\n      </Alert>\n    </div>\n  );\n\n  /**\n   * Responsible for rendering the tables used by the BulkEmailContentHistory, BulkEmailTaskManager, and\n   * BulkEmailTaskHistory components. Conditionally renders a table description as well.\n   */\n  const renderTable = () => (\n    <div className=\"pb-3\">\n      {tableDescription && (\n        <p className=\"font-italic\">\n          {tableDescription}\n        </p>\n      )}\n      <DataTable\n        itemCount={tableData.length}\n        columns={columns}\n        data={tableData}\n        additionalColumns={additionalColumns}\n      />\n    </div>\n  );\n\n  /**\n   * Sub-render function that determines if we can render the DataTable. If not, we will render an Alert component to\n   * inform the user why the data/table cannot be displayed.\n   */\n  const canRenderTable = () => {\n    if (errorRetrievingData) {\n      return renderAlert('danger', alertErrorMessage);\n    }\n\n    if (!tableData.length) {\n      return renderAlert('warning', alertWarningMessage);\n    }\n\n    return renderTable();\n  };\n\n  return (\n    <div>\n      {canRenderTable()}\n    </div>\n  );\n}\n\nBulkEmailTaskManagerTable.propTypes = {\n  errorRetrievingData: PropTypes.bool.isRequired,\n  tableData: PropTypes.arrayOf(PropTypes.shape({})),\n  tableDescription: PropTypes.string,\n  alertWarningMessage: PropTypes.string.isRequired,\n  alertErrorMessage: PropTypes.string.isRequired,\n  columns: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  additionalColumns: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nBulkEmailTaskManagerTable.defaultProps = {\n  tableData: [],\n  tableDescription: '',\n  additionalColumns: [],\n};\n","import { useMemo, useReducer } from 'react';\n\n/**\n * This helper function wraps the useReducer dispatch function to allow for invoking function calls\n * when a state change is dispatched.\n * @param {Function} dispatch useReducer's dispatch function.\n * @returns a wrapped dispatch that execututes function actions.\n */\nexport function wrapAsync(dispatch) {\n  return (action) => {\n    if (typeof action === 'function') {\n      return action(dispatch);\n    }\n    return dispatch(action);\n  };\n}\n\n/**\n * A utility function to combine reducers. this allows us to organize and create individual reducers\n * for components with its own slice of the store. This function the returns a combined reducer to make\n * dispatching easier amoungst multiple components. This function isnt used directly by this hook, but is a part of\n * the ecosystem around it, and is meant to be used as a step before calling the hook.\n * @param {Object} slices reducer functions to be combined.\n * @returns a single reducer function\n*/\nexport function combineReducers(slices) {\n  return (prevState, action) => Object.keys(slices).reduce(\n    (nextState, nextProp) => ({\n      ...nextState,\n      [nextProp]: slices[nextProp](prevState[nextProp], action),\n    }),\n    prevState,\n  );\n}\n\n/**\n * By default, the useReducer hook does not allow for async dispatches. This small\n * hook takes the dispatch function from useReducer and wraps it to allow for the execution\n * of functions that are invoked with the dispatch object. This makes it easier for us to perform\n * async operations, or to execute multiple dispatches in a row using a single thunk.\n * @param {Function} reducer a reducer function for the context state.\n * @param {Object} initialState an initial state for the context store.\n * @returns [state, asyncDispatch ]\n */\nconst useAsyncReducer = (reducer, initialState = null) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const asyncDispatch = useMemo(() => wrapAsync(dispatch), [dispatch]);\n\n  return [state, asyncDispatch];\n};\n\nexport default useAsyncReducer;\n","export function editorReducer(state, action) {\n  switch (action.type) {\n    case 'EDITOR_ON_CHANGE':\n      return {\n        ...state,\n        ...action.payload,\n      };\n    case 'COPY_TO_EDITOR':\n      return {\n        ...state,\n        emailBody: action.payload.emailBody || '',\n        emailSubject: action.payload.emailSubject || '',\n        emailRecipients: action.payload.emailRecipients || [],\n        scheduleDate: action.payload.scheduleDate || '',\n        scheduleTime: action.payload.scheduleTime || '',\n        schedulingId: action.payload.schedulingId || '',\n        emailId: action.payload.emailId || null,\n        editMode: action.payload.editMode || false,\n      };\n    case 'ADD_RECIPIENT':\n      return {\n        ...state,\n        emailRecipients: [...state.emailRecipients, action.payload],\n      };\n    case 'REMOVE_RECIPIENT':\n      return {\n        ...state,\n        emailRecipients: state.emailRecipients.filter((value) => value !== action.payload),\n      };\n    case 'CLEAR_RECIPIENTS':\n      return {\n        ...state,\n        emailRecipients: [],\n      };\n    case 'CLEAR_DATE_TIME':\n      return {\n        ...state,\n        scheduleDate: '',\n        scheduleTime: '',\n        editMode: false,\n      };\n    case 'CLEAR_EDITOR':\n      return {\n        ...state,\n        emailBody: '',\n        emailSubject: '',\n        scheduleDate: '',\n        scheduleTime: '',\n        emailRecipients: [],\n        editMode: false,\n        schedulingId: '',\n        emailId: null,\n        errorRetrievingData: false,\n        formComplete: false,\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        errorRetrievingData: false,\n        formComplete: false,\n      };\n    case 'SET_EDIT_MODE':\n      return {\n        ...state,\n        editMode: action.payload,\n      };\n    case 'PATCH_SCHEDULED_EMAIL':\n      return state;\n    case 'PATCH_START':\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case 'PATCH_COMPLETE':\n      return {\n        ...state,\n        isLoading: false,\n        errorRetrievingData: false,\n        formComplete: true,\n        ...action.payload,\n      };\n    case 'PATCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        errorRetrievingData: true,\n        formComplete: false,\n      };\n    case 'POST_BULK_EMAIL':\n      return state;\n    case 'POST_START':\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case 'POST_COMPLETE':\n      return {\n        ...state,\n        isLoading: false,\n        errorRetrievingData: false,\n        formComplete: true,\n        ...action.payload,\n      };\n    case 'POST_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        errorRetrievingData: true,\n        formComplete: false,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const editorInitialState = {\n  emailBody: '',\n  emailSubject: '',\n  scheduleDate: '',\n  scheduleTime: '',\n  emailRecipients: [],\n  editMode: false,\n  schedulingId: '',\n  emailId: null,\n  isLoading: false,\n  errorRetrievingData: false,\n  formComplete: false,\n};\n\nexport default editorReducer;\n","export function scheduledEmailsTableReducer(state, action) {\n  switch (action.type) {\n    case 'FETCH_SCHEDULED_EMAILS':\n      return state;\n    case 'FETCH_START':\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case 'FETCH_COMPLETE':\n      return {\n        ...state,\n        isLoading: false,\n        errorRetrievingData: false,\n        ...action.payload,\n      };\n    case 'FETCH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        errorRetrievingData: true,\n      };\n    case 'DELETE_SCHEDULED_EMAIL':\n      return state;\n    case 'DELETE_START':\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case 'DELETE_COMPLETE':\n      return {\n        ...state,\n        isLoading: false,\n        errorRetrievingData: false,\n        ...action.payload,\n      };\n    case 'DELETE_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        errorRetrievingData: true,\n      };\n    default:\n      return state;\n  }\n}\n\nexport const scheduledEmailsTableInitialState = {\n  results: [],\n  isLoading: false,\n  errorRetrievingData: false,\n  count: 0,\n  numPages: 0,\n  currentPage: 0,\n  start: 0,\n  previous: null,\n  next: null,\n};\n\nexport default scheduledEmailsTableReducer;\n","/* eslint-disable react/jsx-no-constructed-context-values */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport useAsyncReducer, { combineReducers } from '../../../utils/useAsyncReducer';\nimport editor, { editorInitialState } from '../bulk-email-form/data/reducer';\nimport scheduledEmailsTable, {\n  scheduledEmailsTableInitialState,\n} from '../bulk-email-task-manager/bulk-email-scheduled-emails-table/data/reducer';\n\nexport const BulkEmailContext = React.createContext();\n\nexport default function BulkEmailProvider({ children }) {\n  const initialState = {\n    editor: editorInitialState,\n    scheduledEmailsTable: scheduledEmailsTableInitialState,\n  };\n  const [state, dispatch] = useAsyncReducer(\n    combineReducers({ editor, scheduledEmailsTable }),\n    initialState,\n  );\n  return <BulkEmailContext.Provider value={[state, dispatch]}>{children}</BulkEmailContext.Provider>;\n}\n\nBulkEmailProvider.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,\n};\n","export const handleEditorChange = (fieldName, fieldValue) => ({\n  type: 'EDITOR_ON_CHANGE',\n  payload: {\n    [fieldName]: fieldValue,\n  },\n});\n\nexport const clearEditor = () => ({\n  type: 'CLEAR_EDITOR',\n});\n\nexport const clearErrorState = () => ({\n  type: 'CLEAR_ERROR',\n});\n\nexport const copyToEditor = (payload) => ({\n  type: 'COPY_TO_EDITOR',\n  payload,\n});\n\nexport const addRecipient = (payload) => ({\n  type: 'ADD_RECIPIENT',\n  payload,\n});\n\nexport const removeRecipient = (payload) => ({\n  type: 'REMOVE_RECIPIENT',\n  payload,\n});\n\nexport const clearRecipients = () => ({\n  type: 'CLEAR_RECIPIENTS',\n});\n\nexport const clearDateTime = () => ({\n  type: 'CLEAR_DATE_TIME',\n});\n\nexport const setEditMode = (editMode = false) => ({\n  type: 'SET_EDIT_MODE',\n  payload: editMode,\n});\n\nexport const patchScheduledEmail = () => ({\n  type: 'PATCH_SCHEDULED_EMAIL',\n});\n\nexport const patchScheduledEmailStart = () => ({\n  type: 'PATCH_START',\n});\n\nexport const patchScheduledEmailComplete = () => ({\n  type: 'PATCH_COMPLETE',\n});\n\nexport const patchScheduledEmailError = () => ({\n  type: 'PATCH_FAILURE',\n});\n\nexport const postBulkEmail = () => ({\n  type: 'POST_BULK_EMAIL',\n});\n\nexport const postBulkEmailStart = () => ({\n  type: 'POST_START',\n});\n\nexport const postBulkEmailComplete = () => ({\n  type: 'POST_COMPLETE',\n});\n\nexport const postBulkEmailError = () => ({\n  type: 'POST_FAILURE',\n});\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { ActionRow, Button, ModalDialog } from '@edx/paragon';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport messages from './messages';\nimport { BulkEmailContext } from '../bulk-email-context';\nimport { copyToEditor } from '../bulk-email-form/data/actions';\n\nfunction ViewEmailModal({\n  intl, messageContent, isOpen, setModalOpen,\n}) {\n  const [, dispatch] = useContext(BulkEmailContext);\n  return (\n    <div>\n      <ModalDialog\n        isOpen={isOpen}\n        onClose={() => setModalOpen(false)}\n        hasCloseButton\n      >\n        <ModalDialog.Body>\n\n          <div>\n            <div className=\"d-flex flex-row\">\n              <p>{intl.formatMessage(messages.modalMessageSubject)}</p>\n              <p className=\"pl-2\">{messageContent.subject}</p>\n            </div>\n            <div className=\"d-flex flex-row\">\n              <p>{intl.formatMessage(messages.modalMessageSentBy)}</p>\n              <p className=\"pl-2\">{messageContent.requester}</p>\n            </div>\n            <div className=\"d-flex flex-row\">\n              <p>{intl.formatMessage(messages.modalMessageTimeSent)}</p>\n              <p className=\"pl-2\">{messageContent.created}</p>\n            </div>\n            <div className=\"d-flex flex-row\">\n              <p>{intl.formatMessage(messages.modalMessageSentTo)}</p>\n              <p className=\"pl-2\">{messageContent.sent_to}</p>\n            </div>\n            <hr className=\"py-2\" />\n            <div>\n              <p>{intl.formatMessage(messages.modalMessageBody)}</p>\n              {/* eslint-disable-next-line react/no-danger */}\n              <div dangerouslySetInnerHTML={{ __html: messageContent.email.html_message }} />\n            </div>\n          </div>\n        </ModalDialog.Body>\n        <ModalDialog.Footer>\n          <ActionRow>\n            <ModalDialog.CloseButton variant=\"link\">\n              <FormattedMessage id=\"bulk.email.tool.close.modalDialog.button\" defaultMessage=\"Close\" />\n            </ModalDialog.CloseButton>\n            <Button\n              onClick={() => {\n                dispatch(\n                  copyToEditor({\n                    emailBody: messageContent.email.html_message,\n                    emailSubject: messageContent.subject,\n                  }),\n                );\n                setModalOpen(false);\n              }}\n              variant=\"primary\"\n            >\n              <FormattedMessage id=\"bulk.email.tool.copy.message.button\" defaultMessage=\"Copy to editor\" />\n\n            </Button>\n          </ActionRow>\n        </ModalDialog.Footer>\n      </ModalDialog>\n    </div>\n  );\n}\n\nViewEmailModal.propTypes = {\n  intl: intlShape.isRequired,\n  messageContent: PropTypes.shape({\n    subject: PropTypes.string,\n    requester: PropTypes.string,\n    created: PropTypes.string,\n    email: PropTypes.shape({\n      html_message: PropTypes.string,\n    }).isRequired,\n    sent_to: PropTypes.string,\n  }).isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  setModalOpen: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(ViewEmailModal);\n","/* eslint-disable react/no-unstable-nested-components */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport {\n  Button, Collapsible, Icon,\n} from '@edx/paragon';\nimport { SpinnerSimple } from '@edx/paragon/icons';\nimport messages from './messages';\nimport { getSentEmailHistory } from './data/api';\nimport BulkEmailTaskManagerTable from './BulkEmailHistoryTable';\nimport ViewEmailModal from './ViewEmailModal';\n\nfunction BulkEmailContentHistory({ intl }) {\n  const { courseId } = useParams();\n  const [emailHistoryData, setEmailHistoryData] = useState();\n  const [errorRetrievingData, setErrorRetrievingData] = useState(false);\n  const [showHistoricalEmailContentTable, setShowHistoricalEmailContentTable] = useState(false);\n  const [isMessageModalOpen, setIsMessageModalOpen] = useState(false);\n  const [messageContent, setMessageContent] = useState();\n\n  /**\n   * Async function that makes a REST API call to retrieve historical email message data sent by the bulk course email\n   * tool from edx-platform.\n   */\n  async function fetchSentEmailHistoryData() {\n    setErrorRetrievingData(false);\n    setShowHistoricalEmailContentTable(false);\n\n    let data = null;\n    try {\n      data = await getSentEmailHistory(courseId);\n    } catch (error) {\n      setErrorRetrievingData(true);\n    }\n\n    if (data) {\n      const { emails } = data;\n      setEmailHistoryData(emails);\n    }\n\n    setShowHistoricalEmailContentTable(true);\n  }\n\n  /**\n   * This utility function transforms the data stored in `emailHistoryData` to make it easier to display in the Paragon\n   * DataTable component. Some of the information we want displayed is in an inner object so we extract it and move it\n   * up a level (the `subject` field). We also convert the `sent_to` data to be a String rather than an array to fix a\n   * display bug in the table.\n   */\n  function transformDataForTable() {\n    let tableData = [];\n    if (emailHistoryData) {\n      tableData = emailHistoryData.map((item) => ({\n        ...item,\n        subject: item.email.subject,\n        sent_to: item.sent_to.join(', '),\n      }));\n    }\n    return tableData;\n  }\n\n  /**\n   * This function is responsible for setting the current `messageContent` state data. This will be the contents of a\n   * previously sent email message from the bulk course email tool. This also toggles a modal to be visible to display\n   * the message contents to the end user.\n   */\n  const onViewMessageClick = (tableData) => {\n    setMessageContent(tableData);\n    setIsMessageModalOpen(true);\n  };\n\n  const tableColumns = [\n    {\n      Header: `${intl.formatMessage(messages.emailHistoryTableColumnHeaderSubject)}`,\n      accessor: 'subject',\n    },\n    {\n      Header: `${intl.formatMessage(messages.emailHistoryTableColumnHeaderAuthor)}`,\n      accessor: 'requester',\n    },\n    {\n      Header: `${intl.formatMessage(messages.emailHistoryTableColumnHeaderRecipients)}`,\n      accessor: 'sent_to',\n    },\n    {\n      Header: `${intl.formatMessage(messages.emailHistoryTableColumnHeaderTimeSent)}`,\n      accessor: 'created',\n    },\n    {\n      Header: `${intl.formatMessage(messages.emailHistoryTableColumnHeaderNumberSent)}`,\n      accessor: 'number_sent',\n    },\n  ];\n\n  /**\n   * Paragon's DataTable supports the ability to add extra columns that might not directly coincide with the data being\n   * represented in the table. We are using an additional column to embed a button that will open a Modal to display the\n   * contents of a previously sent message.\n   */\n  const additionalColumns = () => {\n    const tableData = transformDataForTable();\n\n    return [\n      {\n        id: 'view_message',\n        Header: '',\n        Cell: ({ row }) => (\n          <Button variant=\"link\" className=\"px-1\" onClick={() => onViewMessageClick(tableData[row.index])}>\n            {intl.formatMessage(messages.buttonViewMessage)}\n            <span className=\"sr-only\">&nbsp;{row.index}</span>\n          </Button>\n        ),\n      },\n    ];\n  };\n\n  return (\n    <div>\n      {messageContent && (\n        <ViewEmailModal\n          messageContent={messageContent}\n          isOpen={isMessageModalOpen}\n          setModalOpen={setIsMessageModalOpen}\n        />\n      )}\n      <div>\n        <p>{intl.formatMessage(messages.emailHistoryTableSectionButtonHeader)}</p>\n        <Collapsible\n          styling=\"card\"\n          title={intl.formatMessage(messages.emailHistoryTableSectionButton)}\n          className=\"mb-3\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onOpen={fetchSentEmailHistoryData}\n        >\n          {showHistoricalEmailContentTable ? (\n            <BulkEmailTaskManagerTable\n              errorRetrievingData={errorRetrievingData}\n              tableData={transformDataForTable()}\n              tableDescription={intl.formatMessage(messages.emailHistoryTableViewMessageInstructions)}\n              alertWarningMessage={intl.formatMessage(messages.noEmailData)}\n              alertErrorMessage={intl.formatMessage(messages.errorFetchingEmailHistoryData)}\n              columns={tableColumns}\n              additionalColumns={additionalColumns()}\n            />\n          ) : (\n            <Icon src={SpinnerSimple} className=\"icon-spin mx-auto\" />\n          )}\n        </Collapsible>\n      </div>\n    </div>\n  );\n}\n\nBulkEmailContentHistory.propTypes = {\n  intl: intlShape.isRequired,\n  row: PropTypes.shape({\n    index: PropTypes.number,\n  }),\n};\n\nBulkEmailContentHistory.defaultProps = {\n  row: {},\n};\n\nexport default injectIntl(BulkEmailContentHistory);\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nimport { Icon, Collapsible } from '@edx/paragon';\nimport { SpinnerSimple } from '@edx/paragon/icons';\nimport { getEmailTaskHistory } from './data/api';\nimport messages from './messages';\n\nimport BulkEmailTaskManagerTable from './BulkEmailHistoryTable';\n\nimport './bulkEmailTaskHistory.scss';\n\nfunction BulkEmailTaskHistory({ intl }) {\n  const { courseId } = useParams();\n\n  const [emailTaskHistoryData, setEmailTaskHistoryData] = useState([]);\n  const [showHistoricalTaskContentTable, setShowHistoricalTaskContentTable] = useState(false);\n  const [errorRetrievingData, setErrorRetrievingData] = useState(false);\n\n  /**\n   * Async function that makes a REST API call to retrieve historical bulk email (Instructor) task data for display\n   * within this component.\n   */\n  async function fetchEmailTaskHistoryData() {\n    setErrorRetrievingData(false);\n    setShowHistoricalTaskContentTable(false);\n\n    let data = null;\n    try {\n      data = await getEmailTaskHistory(courseId);\n    } catch (error) {\n      setErrorRetrievingData(true);\n    }\n\n    if (data) {\n      const { tasks } = data;\n      setEmailTaskHistoryData(tasks);\n    }\n\n    setShowHistoricalTaskContentTable(true);\n  }\n\n  const tableColumns = [\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskType)}`,\n      accessor: 'task_type',\n    },\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskInputs)}`,\n      accessor: 'task_input',\n    },\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskId)}`,\n      accessor: 'task_id',\n    },\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskRequester)}`,\n      accessor: 'requester',\n    },\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskSubmittedDate)}`,\n      accessor: 'created',\n    },\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskDuration)}`,\n      accessor: 'duration_sec',\n    },\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskState)}`,\n      accessor: 'task_state',\n    },\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskStatus)}`,\n      accessor: 'status',\n    },\n    {\n      Header: `${intl.formatMessage(messages.taskHistoryTableColumnHeaderTaskProgress)}`,\n      accessor: 'task_message',\n    },\n  ];\n\n  return (\n    <div className=\"pb-4.5\">\n      <div>\n        <p>\n          {intl.formatMessage(messages.emailTaskHistoryTableSectionButtonHeader)}\n        </p>\n        <Collapsible\n          styling=\"card\"\n          title={intl.formatMessage(messages.emailTaskHistoryTableSectionButton)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onOpen={fetchEmailTaskHistoryData}\n        >\n          {showHistoricalTaskContentTable ? (\n            <BulkEmailTaskManagerTable\n              errorRetrievingData={errorRetrievingData}\n              tableData={emailTaskHistoryData}\n              alertWarningMessage={intl.formatMessage(messages.noTaskHistoryData)}\n              alertErrorMessage={intl.formatMessage(messages.errorFetchingTaskHistoryData)}\n              columns={tableColumns}\n            />\n          ) : (\n            <Icon src={SpinnerSimple} className=\"icon-spin mx-auto\" />\n          )}\n        </Collapsible>\n      </div>\n    </div>\n  );\n}\n\nBulkEmailTaskHistory.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(BulkEmailTaskHistory);\n","export const fetchScheduledEmails = () => ({\n  type: 'FETCH_SCHEDULED_EMAILS',\n});\n\nexport const fetchScheduledEmailsStart = () => ({\n  type: 'FETCH_START',\n});\n\nexport const fetchScheduledEmailsComplete = (payload) => ({\n  type: 'FETCH_COMPLETE',\n  payload,\n});\n\nexport const fetchScheduledEmailsError = () => ({\n  type: 'FETCH_FAILURE',\n});\n\nexport const deleteScheduledEmail = () => ({\n  type: 'DELETE_SCHEDULED_EMAIL',\n});\nexport const deleteScheduledEmailStart = () => ({\n  type: 'DELETE_START',\n});\n\nexport const deleteScheduledEmailComplete = () => ({\n  type: 'DELETE_COMPLETE',\n});\n\nexport const deleteScheduledEmailError = () => ({\n  type: 'DELETE_FAILURE',\n});\n","import {\n  deleteScheduledEmail,\n  deleteScheduledEmailComplete,\n  deleteScheduledEmailError,\n  deleteScheduledEmailStart,\n  fetchScheduledEmails,\n  fetchScheduledEmailsComplete,\n  fetchScheduledEmailsError,\n  fetchScheduledEmailsStart,\n} from './actions';\nimport { deleteScheduledBulkEmailInstructorTask, getScheduledBulkEmailIntructorTaskData } from './api';\n\nexport function getScheduledBulkEmailThunk(courseId, page) {\n  return async (dispatch) => {\n    dispatch(fetchScheduledEmails());\n    dispatch(fetchScheduledEmailsStart());\n    function onComplete(data) {\n      dispatch(fetchScheduledEmailsComplete(data));\n      return data;\n    }\n    function onError(error) {\n      dispatch(fetchScheduledEmailsError());\n      return error;\n    }\n    try {\n      const data = await getScheduledBulkEmailIntructorTaskData(courseId, page);\n      return onComplete(data);\n    } catch (error) {\n      return onError(error);\n    }\n  };\n}\n\nexport function deleteScheduledEmailThunk(courseId, emailIndex) {\n  return async (dispatch) => {\n    dispatch(deleteScheduledEmail());\n    dispatch(deleteScheduledEmailStart());\n    function onComplete(data) {\n      dispatch(deleteScheduledEmailComplete(data));\n      return data;\n    }\n    function onError(error) {\n      dispatch(deleteScheduledEmailError());\n      return error;\n    }\n    try {\n      const status = await deleteScheduledBulkEmailInstructorTask(courseId, emailIndex);\n      return onComplete(status);\n    } catch (error) {\n      return onError(error);\n    }\n  };\n}\n","import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { logError } from '@edx/frontend-platform/logging';\n\n// eslint-disable-next-line import/prefer-default-export\nexport async function getScheduledBulkEmailIntructorTaskData(courseId, page = 1) {\n  const endpointUrl = `${\n    getConfig().LMS_BASE_URL\n  }/api/instructor_task/v1/schedules/${courseId}/bulk_email/?page=${page}`;\n  try {\n    const { data } = await getAuthenticatedHttpClient().get(endpointUrl);\n    return camelCaseObject(data);\n  } catch (error) {\n    logError(error);\n    throw new Error(error);\n  }\n}\n\nexport async function deleteScheduledBulkEmailInstructorTask(courseId, scheduleId) {\n  const endpointUrl = `${getConfig().LMS_BASE_URL}/api/instructor_task/v1/schedules/${courseId}/bulk_email/${scheduleId}`;\n  try {\n    const { status } = await getAuthenticatedHttpClient().delete(endpointUrl);\n    return status;\n  } catch (error) {\n    logError(error);\n    throw new Error(error);\n  }\n}\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  /* BulkEmailScheduledEmailsTable.jsx Messages */\n  bulkEmailScheduledEmailsTableErrorHeader: {\n    id: 'bulk.email.scheduled.emails.table.error.header',\n    defaultMessage: 'Error',\n  },\n\n  bulkEmailScheduledEmailsTableError: {\n    id: 'bulk.email.scheduled.emails.table.error',\n    defaultMessage: 'An error occured while retrieving scheduled email information. Please try again later.',\n    description: 'An error message that shows if the app is unable to display scheduled emails in the table',\n  },\n  bulkEmailScheduledEmailsTableSendDate: {\n    id: 'bulk.email.scheduled.emails.table.sendDate',\n    defaultMessage: 'Send date',\n  },\n  bulkEmailScheduledEmailsTableSendTo: {\n    id: 'bulk.email.scheduled.emails.table.sendTo',\n    defaultMessage: 'Send to',\n  },\n  bulkEmailScheduledEmailsTableSubject: {\n    id: 'bulk.email.scheduled.emails.table.subject',\n    defaultMessage: 'Subject',\n  },\n  bulkEmailScheduledEmailsTableAuthor: {\n    id: 'bulk.email.scheduled.emails.table.Author',\n    defaultMessage: 'Author',\n  },\n  bulkEmailScheduledEmailsTableConfirmDelete: {\n    id: 'bulk.email.scheduled.emails.table.confirm.delete',\n    defaultMessage: 'You are deleting an email scheduled to be sent on {date}. The email will not be sent and the scheduling canceled. Are you sure?',\n  },\n});\n\nexport default messages;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ActionRow, AlertModal, Button } from '@edx/paragon';\nimport { FormattedMessage, injectIntl, intlShape } from '@edx/frontend-platform/i18n';\n\nfunction TaskAlertModal(props) {\n  const {\n    isOpen, close, alertMessage, intl,\n  } = props;\n\n  const messages = {\n    taskAlertTitle: {\n      id: 'bulk.email.task.alert.title',\n      defaultMessage: 'Caution',\n      description: 'Title in the header of the alert',\n    },\n  };\n  return (\n    <AlertModal\n      title={intl.formatMessage(messages.taskAlertTitle)}\n      isBlocking\n      isOpen={isOpen}\n      onClose={close}\n      footerNode={(\n        <ActionRow>\n          <Button variant=\"tertiary\" onClick={close} name=\"cancel\">\n            <FormattedMessage\n              id=\"bulk.email.task.alert.cancel\"\n              defaultMessage=\"Cancel\"\n              description=\"Cancel button for the task alert\"\n            />\n          </Button>\n          <Button variant=\"primary\" onClick={close} name=\"continue\">\n            <FormattedMessage\n              id=\"bulk.email.form.recipients.Contine\"\n              defaultMessage=\"Continue\"\n              description=\"Continue button for the task alert\"\n            >\n              { // FormattedMessage wraps the translated string in a <span/> by default. This was\n                // causing strange click event target issues in safari. To solve this, we want to\n                // wrap the string in a fragment instead of a span, so that the whole button considered\n                // a \"button\" target, and not a \"span inside a button\"\n                // eslint-disable-next-line react/jsx-no-useless-fragment\n                msg => <>{msg}</>\n              }\n            </FormattedMessage>\n          </Button>\n        </ActionRow>\n      )}\n    >\n      {alertMessage}\n    </AlertModal>\n  );\n}\n\nTaskAlertModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  close: PropTypes.func.isRequired,\n  alertMessage: PropTypes.node.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(TaskAlertModal);\n","const normalizeDigits = (value) => (value < 10 ? `0${value}` : value);\nexport const formatDate = (date) => {\n  const day = normalizeDigits(date.getDate());\n  const month = normalizeDigits(date.getMonth() + 1);\n  const year = date.getFullYear();\n\n  return `${year}-${month}-${day}`;\n};\nexport const formatTime = (date) => {\n  const hours = normalizeDigits(date.getHours());\n  const mins = normalizeDigits(date.getMinutes());\n\n  return `${hours}:${mins}`;\n};\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/no-unstable-nested-components */\n\nimport React, {\n  useCallback, useContext, useState, useEffect,\n} from 'react';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Alert, DataTable, Icon, IconButton, useToggle,\n} from '@edx/paragon';\nimport {\n  Delete, Info, Visibility, Edit,\n} from '@edx/paragon/icons';\nimport { useParams } from 'react-router-dom';\nimport { BulkEmailContext } from '../../bulk-email-context';\nimport { deleteScheduledEmailThunk, getScheduledBulkEmailThunk } from './data/thunks';\nimport messages from './messages';\nimport ViewEmailModal from '../ViewEmailModal';\nimport { copyToEditor } from '../../bulk-email-form/data/actions';\nimport TaskAlertModal from '../../task-alert-modal';\nimport { formatDate, formatTime } from '../../../../utils/formatDateAndTime';\n\nfunction flattenScheduledEmailsArray(emails) {\n  return emails.map((email) => ({\n    schedulingId: email.id,\n    emailId: email.courseEmail.id,\n    task: email.task,\n    taskDue: new Date(email.taskDue).toLocaleString(),\n    taskDueUTC: email.taskDue,\n    ...email.courseEmail,\n    targets: email.courseEmail.targets.join(', '),\n  }));\n}\n\nfunction BulkEmailScheduledEmailsTable({ intl }) {\n  const { courseId } = useParams();\n  const [{ scheduledEmailsTable }, dispatch] = useContext(BulkEmailContext);\n  const [tableData, setTableData] = useState([]);\n  const [viewModal, setViewModal] = useState({\n    isOpen: false,\n    messageContent: {},\n  });\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useToggle();\n  const [currentTask, setCurrentTask] = useState({});\n\n  useEffect(() => {\n    setTableData(flattenScheduledEmailsArray(scheduledEmailsTable.results));\n  }, [scheduledEmailsTable.results]);\n\n  const fetchTableData = useCallback((args) => {\n    dispatch(getScheduledBulkEmailThunk(courseId, args.pageIndex + 1));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleViewEmail = (row) => {\n    setViewModal({\n      isOpen: true,\n      messageContent: {\n        subject: row.original.subject,\n        requester: row.original.sender,\n        created: row.original.taskDue,\n        email: {\n          html_message: row.original.htmlMessage,\n        },\n        sent_to: row.original.targets,\n      },\n    });\n  };\n  if (scheduledEmailsTable.errorRetrievingData) {\n    return (\n      <div className=\"pb-4\">\n        <Alert variant=\"danger\" icon={Info}>\n          <Alert.Heading>{intl.formatMessage(messages.bulkEmailScheduledEmailsTableErrorHeader)}</Alert.Heading>\n          <p>{intl.formatMessage(messages.bulkEmailScheduledEmailsTableError)}</p>\n        </Alert>\n      </div>\n    );\n  }\n\n  const handleDeleteEmail = async () => {\n    const {\n      row, pageIndex, page, previousPage,\n    } = currentTask;\n    await dispatch(deleteScheduledEmailThunk(courseId, row.original.schedulingId));\n    if (page.length === 1 && pageIndex !== 0) {\n      previousPage();\n    } else {\n      dispatch(getScheduledBulkEmailThunk(courseId, pageIndex + 1));\n    }\n  };\n\n  const handleEditEmail = (row) => {\n    const {\n      original: {\n        htmlMessage: emailBody, subject: emailSubject, taskDueUTC, targets, schedulingId, emailId,\n      },\n    } = row;\n    const dateTime = new Date(taskDueUTC);\n    const emailRecipients = targets.replaceAll('-', ':').split(', ');\n    const scheduleDate = formatDate(dateTime);\n    const scheduleTime = formatTime(dateTime);\n    dispatch(\n      copyToEditor({\n        emailId,\n        emailBody,\n        emailSubject,\n        emailRecipients,\n        scheduleDate,\n        scheduleTime,\n        schedulingId,\n        editMode: true,\n      }),\n    );\n  };\n  return (\n    <>\n      <TaskAlertModal\n        isOpen={isConfirmModalOpen}\n        close={(event) => {\n          closeConfirmModal();\n          if (event.target.name === 'continue') {\n            handleDeleteEmail();\n          }\n        }}\n        alertMessage={intl.formatMessage(\n          messages.bulkEmailScheduledEmailsTableConfirmDelete,\n          { date: currentTask?.row?.original?.taskDue ?? '' },\n        )}\n      />\n      {viewModal.isOpen && (\n        <ViewEmailModal\n          isOpen={viewModal.isOpen}\n          setModalOpen={(open) => setViewModal({ isOpen: open })}\n          messageContent={viewModal.messageContent}\n        />\n      )}\n      <div className=\"pb-4\">\n        <DataTable\n          isLoading={scheduledEmailsTable.isLoading}\n          itemCount={scheduledEmailsTable.count}\n          pageCount={scheduledEmailsTable.numPages}\n          data={tableData}\n          isPaginated\n          manualPagination\n          fetchData={fetchTableData}\n          initialState={{\n            pageSize: 10,\n            pageIndex: 0,\n          }}\n          columns={[\n            {\n              Header: intl.formatMessage(messages.bulkEmailScheduledEmailsTableSendDate),\n              accessor: 'taskDue',\n            },\n            {\n              Header: intl.formatMessage(messages.bulkEmailScheduledEmailsTableSendTo),\n              accessor: 'targets',\n            },\n            {\n              Header: intl.formatMessage(messages.bulkEmailScheduledEmailsTableSubject),\n              accessor: 'subject',\n            },\n            {\n              Header: intl.formatMessage(messages.bulkEmailScheduledEmailsTableAuthor),\n              accessor: 'sender',\n            },\n          ]}\n          additionalColumns={[\n            {\n              id: 'action',\n              Header: 'Action',\n              Cell: ({\n                row, state, page, previousPage,\n              }) => (\n                <>\n                  <IconButton src={Visibility} iconAs={Icon} alt=\"View\" onClick={() => handleViewEmail(row)} />\n                  <IconButton\n                    src={Delete}\n                    iconAs={Icon}\n                    alt=\"Delete\"\n                    onClick={() => {\n                      setCurrentTask({\n                        row, pageIndex: state.pageIndex, page, previousPage,\n                      });\n                      openConfirmModal();\n                    }}\n                  />\n                  <IconButton src={Edit} iconAs={Icon} alt=\"Edit\" onClick={() => handleEditEmail(row)} />\n                </>\n              ),\n            },\n          ]}\n        />\n      </div>\n    </>\n  );\n}\n\nBulkEmailScheduledEmailsTable.propTypes = {\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(BulkEmailScheduledEmailsTable);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { Hyperlink, Alert } from '@edx/paragon';\nimport { WarningFilled } from '@edx/paragon/icons';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nexport default function BulkEmailPendingTasksAlert(props) {\n  const { courseId } = props;\n\n  return (\n    <Alert variant=\"warning\" icon={WarningFilled}>\n      <FormattedMessage\n        id=\"bulk.email.pending.tasks.description.one\"\n        defaultMessage=\"To view all pending tasks, including email, visit&nbsp;\"\n      />\n      <Hyperlink\n        destination={`${getConfig().LMS_BASE_URL}/courses/${courseId}/instructor#view-course-info`}\n        target=\"_blank\"\n        isInline\n        showLaunchIcon={false}\n      >\n        <FormattedMessage\n          id=\"bulk.email.pending.tasks.link\"\n          defaultMessage=\"Course Info\"\n        />\n      </Hyperlink>\n      <FormattedMessage\n        id=\"bulk.email.pending.tasks.description.two\"\n        defaultMessage=\"&nbsp;in the Instructor Dashboard.\"\n      />\n    </Alert>\n\n  );\n}\n\nBulkEmailPendingTasksAlert.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport { getConfig } from '@edx/frontend-platform';\nimport BulkEmailContentHistory from './BulkEmailContentHistory';\nimport BulkEmailTaskHistory from './BulkEmailTaskHistory';\nimport messages from './messages';\nimport BulkEmailScheduledEmailsTable from './bulk-email-scheduled-emails-table';\nimport BulkEmailPendingTasksAlert from './BulkEmailPendingTasksAlert';\n\nfunction BulkEmailTaskManager({ intl, courseId }) {\n  return (\n    <div className=\"w-100\">\n      {getConfig().SCHEDULE_EMAIL_SECTION && (\n        <div>\n          <h2 className=\"h3 text-primary-500\">{intl.formatMessage(messages.scheduledEmailsTableHeader)}</h2>\n          <BulkEmailScheduledEmailsTable />\n        </div>\n      )}\n      <div>\n        <h2 className=\"h3 text-primary-500\">{intl.formatMessage(messages.emailTaskHistoryHeader)}</h2>\n        <BulkEmailContentHistory />\n      </div>\n      <div>\n        <BulkEmailTaskHistory />\n      </div>\n      <div className=\"border-top border-primary-500 pt-4.5\">\n        <h2 className=\"h3 mb-4 text-primary-500\">{intl.formatMessage(messages.pendingTasksHeader)}</h2>\n        <BulkEmailPendingTasksAlert courseId={courseId} />\n      </div>\n    </div>\n  );\n}\n\nBulkEmailTaskManager.propTypes = {\n  intl: intlShape.isRequired,\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(BulkEmailTaskManager);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Nav } from '@edx/paragon';\n\nexport default function NavigationTabs(props) {\n  const { tabData } = props;\n\n  return (\n    <div className=\"py-4\">\n      <Nav variant=\"tabs\" defaultActiveKey=\"Instructor\">\n        {tabData && tabData.map(tab => (\n          <Nav.Item key={tab.tab_id}>\n            <Nav.Link eventKey={tab.title} href={tab.url}>\n              {tab.title}\n            </Nav.Link>\n          </Nav.Item>\n        ))}\n      </Nav>\n    </div>\n  );\n}\n\nNavigationTabs.propTypes = {\n  tabData: PropTypes.arrayOf(PropTypes.shape({\n    tab_id: PropTypes.string,\n    title: PropTypes.string,\n    url: PropTypes.string,\n  })),\n};\n\nNavigationTabs.defaultProps = {\n  tabData: [],\n};\n","import React from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport PropTypes from 'prop-types';\nimport 'tinymce';\n\nimport 'tinymce/icons/default';\nimport 'tinymce/themes/silver';\nimport 'tinymce/skins/ui/oxide/skin.css';\nimport 'tinymce/plugins/advlist';\nimport 'tinymce/plugins/code';\nimport 'tinymce/plugins/emoticons';\nimport 'tinymce/plugins/emoticons/js/emojis';\nimport 'tinymce/plugins/link';\nimport 'tinymce/plugins/lists';\nimport 'tinymce/plugins/table';\nimport 'tinymce/plugins/image';\nimport 'tinymce/plugins/codesample';\nimport '@edx/tinymce-language-selector';\n\nimport contentUiCss from 'tinymce/skins/ui/oxide/content.css';\nimport contentCss from 'tinymce/skins/content/default/content.css';\n\nexport default function TextEditor(props) {\n  const {\n    onChange, onKeyUp, onInit, disabled, value,\n  } = props;\n\n  return (\n    <Editor\n      initialValue=\"\"\n      init={{\n        selector: 'textarea#editor',\n        height: 600,\n        branding: false,\n        menubar: 'edit view insert format table tools',\n        plugins: 'advlist code link lists table image codesample',\n        toolbar:\n          'formatselect fontselect bold italic underline forecolor | codesample bullist numlist alignleft aligncenter alignright alignjustify indent | blockquote link image code ',\n        skin: false,\n        content_css: false,\n        content_style: `${contentUiCss.toString()}\\n${contentCss.toString()}`,\n        extended_valid_elements: 'span[lang|id] -span',\n        block_unsupported_drop: false,\n        image_advtab: true,\n        name: 'emailBody',\n        relative_urls: false,\n        remove_script_host: false,\n      }}\n      onEditorChange={onChange}\n      value={value}\n      onKeyUp={onKeyUp}\n      onInit={onInit}\n      disabled={disabled}\n    />\n  );\n}\n\nTextEditor.defaultProps = {\n  onChange: () => {},\n  onKeyUp: () => {},\n  onInit: () => {},\n  disabled: false,\n  value: '',\n};\n\nTextEditor.propTypes = {\n  onChange: PropTypes.func,\n  onKeyUp: PropTypes.func,\n  onInit: PropTypes.func,\n  disabled: PropTypes.bool,\n  value: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from '@edx/paragon';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\n\nimport './bulkEmailRecepient.scss';\n\nconst DEFAULT_GROUPS = {\n  SELF: 'myself',\n  STAFF: 'staff',\n  ALL_LEARNERS: 'learners',\n  VERIFIED: 'track:verified',\n  AUDIT: 'track:audit',\n};\n\nexport default function BulkEmailRecipient(props) {\n  const {\n    handleCheckboxes,\n    selectedGroups,\n    additionalCohorts,\n    courseModes,\n  } = props;\n  const hasCourseModes = courseModes && courseModes.length > 1;\n  return (\n    <Form.Group>\n      <Form.Label>\n        <span className=\"h3 text-primary-500\">\n          <FormattedMessage\n            id=\"bulk.email.form.recipients.sendLabel\"\n            defaultMessage=\"Send to\"\n            description=\"A label before the list of potential recipients\"\n          />\n        </span>\n      </Form.Label>\n      <Form.CheckboxSet\n        name=\"recipientGroups\"\n        className=\"flex-wrap flex-row recipient-groups w-100\"\n        onChange={handleCheckboxes}\n        value={selectedGroups}\n      >\n        <Form.Checkbox key=\"myself\" value=\"myself\" className=\"mt-2.5 col col-lg-4 col-sm-6 col-12\">\n          <FormattedMessage\n            id=\"bulk.email.form.recipients.myself\"\n            defaultMessage=\"Myself\"\n            description=\"A selectable choice from a list of potential email recipients\"\n          />\n        </Form.Checkbox>\n        <Form.Checkbox\n          key=\"staff\"\n          value=\"staff\"\n          className=\"col col-lg-4 col-sm-6 col-12\"\n        >\n          <FormattedMessage\n            id=\"bulk.email.form.recipients.staff\"\n            defaultMessage=\"Staff/Administrators\"\n            description=\"A selectable choice from a list of potential email recipients\"\n          />\n        </Form.Checkbox>\n        {\n          // additional modes\n          hasCourseModes\n          && courseModes.map((courseMode) => (\n            <Form.Checkbox\n              key={`track:${courseMode.slug}`}\n              value={`track:${courseMode.slug}`}\n              disabled={selectedGroups.find((group) => group === DEFAULT_GROUPS.ALL_LEARNERS)}\n              className=\"col col-lg-4 col-sm-6 col-12\"\n            >\n              <FormattedMessage\n                id=\"bulk.email.form.mode.label\"\n                defaultMessage=\"Learners in the {courseModeName} Track\"\n                values={{ courseModeName: courseMode.name }}\n              />\n            </Form.Checkbox>\n          ))\n        }\n        {\n          // additional cohorts\n          additionalCohorts\n          && additionalCohorts.map((cohort) => (\n            <Form.Checkbox\n              key={cohort}\n              value={`cohort:${cohort}`}\n              disabled={selectedGroups.find((group) => group === DEFAULT_GROUPS.ALL_LEARNERS)}\n              className=\"col col-lg-4 col-sm-6 col-12\"\n            >\n              <FormattedMessage\n                id=\"bulk.email.form.cohort.label\"\n                defaultMessage=\"Cohort: {cohort}\"\n                values={{ cohort }}\n              />\n            </Form.Checkbox>\n          ))\n        }\n        <Form.Checkbox\n          key=\"learners\"\n          value=\"learners\"\n          className=\"col col-lg-4 col-sm-6 col-12\"\n        >\n          <FormattedMessage\n            id=\"bulk.email.form.recipients.learners\"\n            defaultMessage=\"All Learners\"\n            description=\"A selectable choice from a list of potential email recipients\"\n          />\n        </Form.Checkbox>\n      </Form.CheckboxSet>\n      {!props.isValid && (\n        <Form.Control.Feedback className=\"px-3\" hasIcon type=\"invalid\">\n          <FormattedMessage\n            id=\"bulk.email.form.recipients.error\"\n            defaultMessage=\"At least one recipient is required\"\n            description=\"An Error message located under the recipients list. Visible only on failure\"\n          />\n        </Form.Control.Feedback>\n      )}\n    </Form.Group>\n  );\n}\n\nBulkEmailRecipient.defaultProps = {\n  isValid: true,\n  additionalCohorts: [],\n};\n\nBulkEmailRecipient.propTypes = {\n  selectedGroups: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleCheckboxes: PropTypes.func.isRequired,\n  isValid: PropTypes.bool,\n  additionalCohorts: PropTypes.arrayOf(PropTypes.string),\n  courseModes: PropTypes.arrayOf(\n    PropTypes.shape({\n      slug: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n","import { useState, useEffect } from 'react';\n\n// NOTE: These are the breakpoints used in Bootstrap v4.0.0 as seen in\n// the documentation (https://getbootstrap.com/docs/4.0/layout/overview/#responsive-breakpoints)\nconst breakpoints = {\n  extraSmall: {\n    maxWidth: 575.98,\n  },\n  small: {\n    minWidth: 576,\n    maxWidth: 767.98,\n  },\n  medium: {\n    minWidth: 768,\n    maxWidth: 991.98,\n  },\n  large: {\n    minWidth: 992,\n    maxWidth: 1199.98,\n  },\n  extraLarge: {\n    minWidth: 1200,\n  },\n};\n\n/**\n * A react hook used to determine if the current window is mobile or not.\n * returns true if the window is of mobile size.\n */\nexport default function useMobileResponsive(breakpoint) {\n  const [isMobileWindow, setIsMobileWindow] = useState();\n  const checkForMobile = () => {\n    setIsMobileWindow(window.matchMedia(`(max-width: ${breakpoint || breakpoints.small.maxWidth}px)`).matches);\n  };\n  useEffect(() => {\n    checkForMobile();\n    window.addEventListener('resize', checkForMobile);\n    // return this function here to clean up the event listener\n    return () => window.removeEventListener('resize', checkForMobile);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return isMobileWindow;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Form } from '@edx/paragon';\nimport useMobileResponsive from '../../../utils/useMobileResponsive';\n\nfunction ScheduleEmailForm(props) {\n  const isMobile = useMobileResponsive();\n  const { isValid, onDateTimeChange, dateTime } = props;\n  const { date, time } = dateTime;\n  const descriptionDate = new Date();\n  descriptionDate.setDate(new Date().getDate() + 1);\n  return (\n    <Form.Group>\n      <div className={classNames('d-flex', isMobile ? 'flex-column' : 'flex-row', 'my-3')}>\n        <div className=\"w-md-50 mx-2\">\n          <Form.Control\n            type=\"date\"\n            name=\"scheduleDate\"\n            data-testid=\"scheduleDate\"\n            onChange={onDateTimeChange}\n            value={date}\n            floatingLabel={(\n              <FormattedMessage\n                id=\"bulk.email.form.schedule.date\"\n                defaultMessage=\"Send date\"\n                description=\"Label for the date portion of the email schedule form\"\n              />\n            )}\n          />\n          <small className=\"text-gray-500 x-small\">\n            <FormattedMessage\n              id=\"bulk.email.form.schedule.date.description\"\n              defaultMessage=\"Enter a start date, e.g. {date}\"\n              values={{\n                date: descriptionDate.toLocaleDateString(),\n              }}\n            />\n          </small>\n        </div>\n        <div className=\"w-md-50 mx-2\">\n          <Form.Control\n            type=\"time\"\n            name=\"scheduleTime\"\n            data-testid=\"scheduleTime\"\n            onChange={onDateTimeChange}\n            value={time}\n            floatingLabel={(\n              <FormattedMessage\n                id=\"bulk.email.form.schedule.time\"\n                defaultMessage=\"Send time\"\n                description=\"Label for the time portion of the email schedule form\"\n              />\n            )}\n          />\n          <small className=\"text-gray-500 x-small\">\n            <FormattedMessage\n              id=\"bulk.email.form.schedule.time.description\"\n              defaultMessage=\"Enter a start time, e.g. {time}\"\n              values={{\n                time: descriptionDate.toLocaleTimeString([], { timeStyle: 'short' }),\n              }}\n            />\n          </small>\n        </div>\n      </div>\n      {!isValid && (\n        <Form.Control.Feedback className=\"pb-2\" hasIcon type=\"invalid\">\n          <FormattedMessage\n            id=\"bulk.email.form.dateTime.error\"\n            defaultMessage=\"Date and time cannot be blank, and must be a date in the future\"\n            description=\"An error message located under the date-time selector. Visible only on failure.\"\n          />\n        </Form.Control.Feedback>\n      )}\n    </Form.Group>\n  );\n}\n\nScheduleEmailForm.defaultProps = {\n  dateTime: {\n    date: '',\n    time: '',\n  },\n};\n\nScheduleEmailForm.propTypes = {\n  isValid: PropTypes.bool.isRequired,\n  onDateTimeChange: PropTypes.func.isRequired,\n  dateTime: PropTypes.shape({\n    date: PropTypes.string,\n    time: PropTypes.string,\n  }),\n};\n\nexport default ScheduleEmailForm;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  /* BulkEmailForm.jsx Messages */\n  bulkEmailSubmitButtonDefault: {\n    id: 'bulk.email.submit.button.default',\n    defaultMessage: 'Send email',\n  },\n  bulkEmailSubmitButtonSchedule: {\n    id: 'bulk.email.submit.button.schedule',\n    defaultMessage: 'Schedule Email',\n  },\n  bulkEmailSubmitButtonPending: {\n    id: 'bulk.email.submit.button.pending',\n    defaultMessage: 'Submitting',\n  },\n  bulkEmailSubmitButtonComplete: {\n    id: 'bulk.email.submit.button.send.complete',\n    defaultMessage: 'Email Created',\n  },\n  bulkEmailSubmitButtonError: {\n    id: 'bulk.email.submit.button.error',\n    defaultMessage: 'Error',\n  },\n  bulkEmailSubmitButtonCompleteSchedule: {\n    id: 'bulk.email.submit.button.schedule.complete',\n    defaultMessage: 'Scheduling Done',\n  },\n  bulkEmailTaskAlertRecipients: {\n    id: 'bulk.email.task.alert.recipients',\n    defaultMessage: 'You are sending an email message with the subject {subject} to the following recipients:',\n    description: 'A warning shown to the user after submitting the email, to confirm the email recipients.',\n  },\n  bulkEmailToolLabel: {\n    id: 'bulk.email.tool.label',\n    defaultMessage: 'Email',\n    description: 'Tool label. Describes the function of the tool (to send email).',\n  },\n  bulkEmailSubjectLabel: {\n    id: 'bulk.email.subject.label',\n    defaultMessage: 'Subject',\n    description: 'Email subject line input label. Meant to have colon or equivilant punctuation.',\n  },\n  bulkEmailFormSubjectTip: {\n    id: 'bulk.email.form.subject.tip',\n    defaultMessage: '(Maximum 128 characters)',\n    description: 'Default Subject tip',\n  },\n  bulkEmailFormSubjectError: {\n    id: 'bulk.email.form.subject.error',\n    defaultMessage: 'A subject is required',\n    description: 'An Error message located under the subject line. Visible only on failure.',\n  },\n  bulkEmailBodyLabel: {\n    id: 'bulk.email.body.label',\n    defaultMessage: 'Body',\n    description: 'Email Body label. Meant to have colon or equivilant punctuation.',\n  },\n  bulkEmailFormBodyError: {\n    id: 'bulk.email.form.body.error',\n    defaultMessage: 'The message cannot be blank',\n    description: 'An error message located under the body editor. Visible only on failure.',\n  },\n  bulkEmailInstructionsProofreading: {\n    id: 'bulk.email.instructions.proofreading',\n    defaultMessage: 'We recommend sending learners no more than one email message per week. Before you send your email, review the text carefully and send it to yourself first, so that you can preview the formatting and make sure embedded images and links work correctly.',\n    description: 'A set of instructions to give users a heads up about the formatting of the email they are about to send',\n  },\n  bulkEmailInstructionsCaution: { id: 'bulk.email.instructions.caution', defaultMessage: 'Caution!' },\n\n  bulkEmailInstructionsCautionMessage: {\n    id: 'bulk.email.instructions.caution.message.new.email',\n    defaultMessage:\n      ' When you select Send Email, you are creating a new email message that is added to the queue for sending, and cannot be cancelled.',\n    description: 'A warning about how emails are sent out to users',\n  },\n  bulkEmailFormScheduleBox: {\n    id: 'bulk.email.form.scheduleBox',\n    defaultMessage: 'Schedule this email for a future date',\n    description: 'Checkbox to schedule sending the email at a later date',\n  },\n  bulkEmailSendEmailButton: {\n    id: 'bulk.email.send.email.button',\n    defaultMessage: 'Send Email',\n    description: 'Schedule/Send email button',\n  },\n  bulkEmailFormError: {\n    id: 'bulk.email.form.error',\n    defaultMessage: 'An error occured while attempting to send the email.',\n    description: 'An Error message located under the submit button for the email form. Visible only on a failure.',\n  },\n  bulkEmailFormSuccess: {\n    id: 'bilk.email.form.success',\n    defaultMessage: 'Email successfully created',\n  },\n  bulkEmailFormScheduledSuccess: {\n    id: 'bulk.email.form.scheduled.success',\n    defaultMessage: 'Email successfully scheduled',\n  },\n  bulkEmailSubmitButtonReschedule: {\n    id: 'bulk.email.submit.button.reschedule',\n    defaultMessage: 'Reschedule Email',\n  },\n  bulkEmailTaskAlertEditingDate: {\n    id: 'bulk.email.task.alert.editing',\n    defaultMessage: 'You are editing a scheduled email to be sent on: {dateTime}',\n    description: 'This alert pops up before submitting when editing an email that has already been scheduled',\n  },\n  bulkEmailTaskAlertEditingSubject: {\n    id: 'bulk.email.task.alert.subject',\n    defaultMessage: 'with the subject: {subject}',\n  },\n  bulkEmailTaskAlertEditingTo: {\n    id: 'bulk.email.task.alert.to',\n    defaultMessage: 'to recipients:',\n  },\n  bulkEmailTaskAlertEditingWarning: {\n    id: 'bulk.email.task.alert.warning',\n    defaultMessage: 'This will not create a new scheduled email task and instead overwrite the one currently selected. Do you want to overwrite this scheduled email?',\n    description: 'This alert pops up before submitting when editing an email that has already been scheduled',\n  },\n});\n\nexport default messages;\n","/* eslint-disable react/no-unstable-nested-components */\nimport React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Form, Icon, StatefulButton, Toast, useToggle,\n} from '@edx/paragon';\nimport {\n  SpinnerSimple, Cancel, Send, Event, Check,\n} from '@edx/paragon/icons';\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport classNames from 'classnames';\nimport { getConfig } from '@edx/frontend-platform';\nimport TextEditor from '../text-editor/TextEditor';\nimport BulkEmailRecipient from './bulk-email-recipient';\nimport TaskAlertModal from '../task-alert-modal';\nimport useTimeout from '../../../utils/useTimeout';\nimport useMobileResponsive from '../../../utils/useMobileResponsive';\nimport ScheduleEmailForm from './ScheduleEmailForm';\nimport messages from './messages';\nimport { BulkEmailContext } from '../bulk-email-context';\nimport {\n  addRecipient,\n  clearEditor,\n  clearErrorState,\n  handleEditorChange,\n  removeRecipient,\n} from './data/actions';\nimport { editScheduledEmailThunk, postBulkEmailThunk } from './data/thunks';\nimport { getScheduledBulkEmailThunk } from '../bulk-email-task-manager/bulk-email-scheduled-emails-table/data/thunks';\n\nimport './bulkEmailForm.scss';\n\nexport const FORM_SUBMIT_STATES = {\n  DEFAULT: 'default',\n  PENDING: 'pending',\n  COMPLETE: 'complete',\n  COMPLETE_SCHEDULE: 'completed_schedule',\n  SCHEDULE: 'schedule',\n  RESCHEDULE: 'reschedule',\n  ERROR: 'error',\n};\n\nconst FORM_ACTIONS = {\n  POST: 'POST',\n  PATCH: 'PATCH',\n};\n\nfunction BulkEmailForm(props) {\n  const {\n    courseId,\n    cohorts,\n    courseModes,\n    intl,\n  } = props;\n  const [{ editor }, dispatch] = useContext(BulkEmailContext);\n  const [emailFormStatus, setEmailFormStatus] = useState(FORM_SUBMIT_STATES.DEFAULT);\n  const [emailFormValidation, setEmailFormValidation] = useState({\n    // set these as true on initialization, to prevent invalid messages from prematurely showing\n    subject: true,\n    body: true,\n    recipients: true,\n    schedule: true,\n  });\n  const [isTaskAlertOpen, openTaskAlert, closeTaskAlert] = useToggle(false);\n  const [isScheduled, toggleScheduled] = useState(false);\n  const isMobile = useMobileResponsive();\n\n  /**\n   * Since we are working with both an old and new API endpoint, the body for the POST\n   * and the PATCH have different signatures. Therefore, based on the action required, we need to\n   * format the data properly to be accepted on the back end.\n   * @param {*} action \"POST\" or \"PATCH\" of the FORM_ACTIONS constant\n   * @returns formatted Data\n   */\n  const formatDataForFormAction = (action) => {\n    if (action === FORM_ACTIONS.POST) {\n      const emailData = new FormData();\n      emailData.append('action', 'send');\n      emailData.append('send_to', JSON.stringify(editor.emailRecipients));\n      emailData.append('subject', editor.emailSubject);\n      emailData.append('message', editor.emailBody);\n      if (isScheduled) {\n        emailData.append('schedule', new Date(`${editor.scheduleDate} ${editor.scheduleTime}`).toISOString());\n      }\n      return emailData;\n    }\n    if (action === FORM_ACTIONS.PATCH) {\n      return {\n        email: {\n          targets: editor.emailRecipients,\n          subject: editor.emailSubject,\n          message: editor.emailBody,\n          id: editor.emailId,\n        },\n        schedule: isScheduled ? new Date(`${editor.scheduleDate} ${editor.scheduleTime}`).toISOString() : null,\n      };\n    }\n    return {};\n  };\n\n  /**\n   * This function resets the form based on what state the form is currently in. Used after\n   * successfully sending or scheduling and email, or on error.\n   *\n   * @param {Boolean} error If true, resets just the state of the form, and not the editor.\n   * if false, reset the form completely, and wipe all email data form the form.\n   */\n  const resetEmailForm = (error) => {\n    if (error) {\n      dispatch(clearErrorState());\n    } else {\n      dispatch(clearEditor());\n    }\n  };\n\n  /**\n   * Allows for a delayed form reset, to give the user time to process completion and error\n   * states before reseting the form.\n   */\n  const delayedEmailFormReset = useTimeout(\n    () => resetEmailForm(editor.errorRetrievingData),\n    3000,\n  );\n\n  const onFormChange = (event) => dispatch(handleEditorChange(event.target.name, event.target.value));\n\n  const onRecipientChange = (event) => {\n    if (event.target.checked) {\n      dispatch(addRecipient(event.target.value));\n      // if \"All Learners\" is checked then we want to remove any cohorts, verified learners, and audit learners\n      if (event.target.value === 'learners') {\n        editor.emailRecipients.forEach(recipient => {\n          if (/^cohort/.test(recipient) || /^track/.test(recipient)) {\n            dispatch(removeRecipient(recipient));\n          }\n        });\n      }\n    } else {\n      dispatch(removeRecipient(event.target.value));\n    }\n  };\n\n  const validateDateTime = (date, time) => {\n    if (isScheduled) {\n      const now = new Date();\n      const newSchedule = new Date(`${editor.scheduleDate} ${editor.scheduleTime}`);\n      return !!date && !!time && newSchedule > now;\n    }\n    return true;\n  };\n\n  const validateEmailForm = () => {\n    const subjectValid = editor.emailSubject.length !== 0;\n    const bodyValid = editor.emailBody.length !== 0;\n    const recipientsValid = editor.emailRecipients.length !== 0;\n    const scheduleValid = validateDateTime(editor.scheduleDate, editor.scheduleTime);\n    setEmailFormValidation({\n      subject: subjectValid,\n      recipients: recipientsValid,\n      body: bodyValid,\n      schedule: scheduleValid,\n    });\n    return subjectValid && bodyValid && recipientsValid && scheduleValid;\n  };\n\n  const createEmailTask = async () => {\n    if (validateEmailForm()) {\n      if (editor.editMode) {\n        const editedEmail = formatDataForFormAction(FORM_ACTIONS.PATCH);\n        await dispatch(editScheduledEmailThunk(editedEmail, courseId, editor.schedulingId));\n      } else {\n        const emailData = formatDataForFormAction(FORM_ACTIONS.POST);\n        await dispatch(postBulkEmailThunk(emailData, courseId));\n      }\n      dispatch(getScheduledBulkEmailThunk(courseId, 1));\n    }\n  };\n\n  /**\n   * State manager for the various states the form can be in at any given time.\n   * The states of the form are based off various pieces of the editor store, and\n   * calculates what state and whether to reset the form based on these booleans.\n   * Any time the form needs to change state, the conditions for that state change should\n   * placed here to prevent unecessary rerenders and implicit/flakey state update batching.\n   */\n  useEffect(() => {\n    if (editor.isLoading) {\n      setEmailFormStatus(FORM_SUBMIT_STATES.PENDING);\n      return;\n    }\n    if (editor.errorRetrievingData) {\n      setEmailFormStatus(FORM_SUBMIT_STATES.ERROR);\n      delayedEmailFormReset();\n      return;\n    }\n    if (editor.formComplete) {\n      if (isScheduled) {\n        setEmailFormStatus(FORM_SUBMIT_STATES.COMPLETE_SCHEDULE);\n      } else {\n        setEmailFormStatus(FORM_SUBMIT_STATES.COMPLETE);\n      }\n      delayedEmailFormReset();\n      return;\n    }\n    if (editor.editMode === true) {\n      toggleScheduled(true);\n      setEmailFormStatus(FORM_SUBMIT_STATES.RESCHEDULE);\n    } else if (isScheduled) {\n      setEmailFormStatus(FORM_SUBMIT_STATES.SCHEDULE);\n    } else {\n      setEmailFormStatus(FORM_SUBMIT_STATES.DEFAULT);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isScheduled, editor.editMode, editor.isLoading, editor.errorRetrievingData, editor.formComplete]);\n\n  const AlertMessage = () => (\n    <>\n      <p>{intl.formatMessage(messages.bulkEmailTaskAlertRecipients, { subject: editor.emailSubject })}</p>\n      <ul className=\"list-unstyled\">\n        {editor.emailRecipients.map((group) => (\n          <li key={group}>{group}</li>\n        ))}\n      </ul>\n      {!isScheduled && (\n        <p>\n          <strong>{intl.formatMessage(messages.bulkEmailInstructionsCaution)}</strong>\n          {intl.formatMessage(messages.bulkEmailInstructionsCautionMessage)}\n        </p>\n      )}\n    </>\n  );\n\n  const EditMessage = () => (\n    <>\n      <p>\n        {intl.formatMessage(messages.bulkEmailTaskAlertEditingDate, {\n          dateTime: new Date(`${editor.scheduleDate} ${editor.scheduleTime}`).toLocaleString(),\n        })}\n      </p>\n      <p>\n        {intl.formatMessage(messages.bulkEmailTaskAlertEditingSubject, {\n          subject: editor.emailSubject,\n        })}\n      </p>\n      <p>{intl.formatMessage(messages.bulkEmailTaskAlertEditingTo)}</p>\n      <ul className=\"list-unstyled\">\n        {editor.emailRecipients.map((group) => (\n          <li key={group}>{group}</li>\n        ))}\n      </ul>\n      <p>{intl.formatMessage(messages.bulkEmailTaskAlertEditingWarning)}</p>\n      {!isScheduled && (\n        <p>\n          <strong>{intl.formatMessage(messages.bulkEmailInstructionsCaution)}</strong>\n          {intl.formatMessage(messages.bulkEmailInstructionsCautionMessage)}\n        </p>\n      )}\n    </>\n  );\n\n  return (\n    <div className={classNames('w-100 m-auto', !isMobile && 'p-4 border border-primary-200')}>\n      <TaskAlertModal\n        isOpen={isTaskAlertOpen}\n        alertMessage={editor.editMode ? EditMessage() : AlertMessage()}\n        close={(event) => {\n          closeTaskAlert();\n          if (event.target.name === 'continue') {\n            createEmailTask();\n          }\n        }}\n      />\n      <Form>\n        <BulkEmailRecipient\n          selectedGroups={editor.emailRecipients}\n          handleCheckboxes={onRecipientChange}\n          additionalCohorts={cohorts}\n          isValid={emailFormValidation.recipients}\n          courseModes={courseModes}\n        />\n        <Form.Group controlId=\"emailSubject\">\n          <Form.Label className=\"h3 text-primary-500\">{intl.formatMessage(messages.bulkEmailSubjectLabel)}</Form.Label>\n          <Form.Control name=\"emailSubject\" className=\"w-lg-50\" onChange={onFormChange} value={editor.emailSubject} maxLength={128} />\n          <Form.Control.Feedback className=\"px-3\" type=\"default\">\n            {intl.formatMessage(messages.bulkEmailFormSubjectTip)}\n          </Form.Control.Feedback>\n          {!emailFormValidation.subject && (\n            <Form.Control.Feedback className=\"px-3\" hasIcon type=\"invalid\">\n              {intl.formatMessage(messages.bulkEmailFormSubjectError)}\n            </Form.Control.Feedback>\n          )}\n        </Form.Group>\n        <Form.Group controlId=\"emailBody\">\n          <Form.Label className=\"h3 text-primary-500\">{intl.formatMessage(messages.bulkEmailBodyLabel)}</Form.Label>\n          <TextEditor onChange={(value) => dispatch(handleEditorChange('emailBody', value))} value={editor.emailBody} />\n          {!emailFormValidation.body && (\n            <Form.Control.Feedback className=\"px-3\" hasIcon type=\"invalid\">\n              {intl.formatMessage(messages.bulkEmailFormBodyError)}\n            </Form.Control.Feedback>\n          )}\n        </Form.Group>\n        <div>\n          <p>{intl.formatMessage(messages.bulkEmailInstructionsProofreading)}</p>\n        </div>\n        <Form.Group>\n          {getConfig().SCHEDULE_EMAIL_SECTION && (\n            <div className=\"mb-3\">\n              <Form.Checkbox\n                name=\"scheduleEmailBox\"\n                checked={isScheduled}\n                onChange={() => toggleScheduled((prev) => !prev)}\n                disabled={emailFormStatus === FORM_SUBMIT_STATES.PENDING}\n              >\n                {intl.formatMessage(messages.bulkEmailFormScheduleBox)}\n              </Form.Checkbox>\n            </div>\n          )}\n          {isScheduled && (\n            <ScheduleEmailForm\n              isValid={emailFormValidation.schedule}\n              onDateTimeChange={onFormChange}\n              dateTime={{ date: editor.scheduleDate, time: editor.scheduleTime }}\n            />\n          )}\n          <div\n            className={classNames('d-flex', {\n              'mt-n4.5': !isScheduled && !isMobile,\n              'flex-row-reverse align-items-end': !isMobile,\n              'border-top pt-2': isScheduled,\n            })}\n          >\n            {editor.editMode && <Button className=\"ml-2\" variant=\"outline-brand\" onClick={() => dispatch(clearEditor())}>Cancel</Button>}\n            <StatefulButton\n              className=\"send-email-btn\"\n              variant=\"primary\"\n              onClick={(event) => {\n                event.preventDefault();\n                openTaskAlert();\n              }}\n              state={emailFormStatus}\n              icons={{\n                [FORM_SUBMIT_STATES.DEFAULT]: <Icon src={Send} />,\n                [FORM_SUBMIT_STATES.SCHEDULE]: <Icon src={Event} />,\n                [FORM_SUBMIT_STATES.RESCHEDULE]: <Icon src={Event} />,\n                [FORM_SUBMIT_STATES.PENDING]: <Icon src={SpinnerSimple} className=\"icon-spin\" />,\n                [FORM_SUBMIT_STATES.COMPLETE]: <Icon src={Check} />,\n                [FORM_SUBMIT_STATES.COMPLETE_SCHEDULE]: <Icon src={Check} />,\n                [FORM_SUBMIT_STATES.ERROR]: <Icon src={Cancel} />,\n              }}\n              labels={{\n                [FORM_SUBMIT_STATES.DEFAULT]: intl.formatMessage(messages.bulkEmailSubmitButtonDefault),\n                [FORM_SUBMIT_STATES.SCHEDULE]: intl.formatMessage(messages.bulkEmailSubmitButtonSchedule),\n                [FORM_SUBMIT_STATES.RESCHEDULE]: intl.formatMessage(messages.bulkEmailSubmitButtonReschedule),\n                [FORM_SUBMIT_STATES.PENDING]: intl.formatMessage(messages.bulkEmailSubmitButtonPending),\n                [FORM_SUBMIT_STATES.COMPLETE]: intl.formatMessage(messages.bulkEmailSubmitButtonComplete),\n                [FORM_SUBMIT_STATES.COMPLETE_SCHEDULE]: intl.formatMessage(\n                  messages.bulkEmailSubmitButtonCompleteSchedule,\n                ),\n                [FORM_SUBMIT_STATES.ERROR]: intl.formatMessage(messages.bulkEmailSubmitButtonError),\n              }}\n              disabledStates={[\n                FORM_SUBMIT_STATES.PENDING,\n                FORM_SUBMIT_STATES.COMPLETE,\n                FORM_SUBMIT_STATES.COMPLETE_SCHEDULE,\n              ]}\n            />\n            <Toast\n              show={\n                emailFormStatus === FORM_SUBMIT_STATES.ERROR\n                || emailFormStatus === FORM_SUBMIT_STATES.COMPLETE\n                || emailFormStatus === FORM_SUBMIT_STATES.COMPLETE_SCHEDULE\n              }\n              onClose={() => resetEmailForm(emailFormStatus === FORM_SUBMIT_STATES.ERROR)}\n            >\n              {emailFormStatus === FORM_SUBMIT_STATES.ERROR && intl.formatMessage(messages.bulkEmailFormError)}\n              {emailFormStatus === FORM_SUBMIT_STATES.COMPLETE && intl.formatMessage(messages.bulkEmailFormSuccess)}\n              {emailFormStatus === FORM_SUBMIT_STATES.COMPLETE_SCHEDULE\n                && intl.formatMessage(messages.bulkEmailFormScheduledSuccess)}\n            </Toast>\n          </div>\n        </Form.Group>\n      </Form>\n    </div>\n  );\n}\n\nBulkEmailForm.defaultProps = {\n  cohorts: [],\n};\n\nBulkEmailForm.propTypes = {\n  courseId: PropTypes.string.isRequired,\n  cohorts: PropTypes.arrayOf(PropTypes.string),\n  intl: intlShape.isRequired,\n  courseModes: PropTypes.arrayOf(\n    PropTypes.shape({\n      slug: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default injectIntl(BulkEmailForm);\n","import { useRef, useEffect } from 'react';\n\n/**\n * React hook to delay a function being called by a given delay amount.\n * Works by creating a ref to a setTimeout() function call to the DOM and\n * waiting for the timer to end before firing the callback. if multiple\n * timouts are made at once, the hook will remove all previous timeouts\n * and only allow one at a time.\n * @param {function} callback The function to call once the delay ends\n * @param {millisecond} delay time to delay function call\n * @param {bool} cancel cancels the callback early if true\n */\nexport default function useTimeout(callback, delay, cancel) {\n  const timeoutRef = useRef(null);\n\n  useEffect(() => {\n    const timeout = timeoutRef.current;\n    if (timeout || cancel) {\n      clearTimeout(timeout);\n    }\n  }, [cancel]);\n\n  return () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(callback, delay);\n  };\n}\n","import {\n  patchScheduledEmail,\n  patchScheduledEmailComplete,\n  patchScheduledEmailError,\n  patchScheduledEmailStart,\n  postBulkEmail,\n  postBulkEmailComplete,\n  postBulkEmailError,\n  postBulkEmailStart,\n} from './actions';\nimport { patchScheduledBulkEmailInstructorTask, postBulkEmailInstructorTask } from './api';\n\nexport function postBulkEmailThunk(emailData, courseId) {\n  return async (dispatch) => {\n    dispatch(postBulkEmail());\n    dispatch(postBulkEmailStart());\n    function onComplete(data) {\n      dispatch(postBulkEmailComplete());\n      return data;\n    }\n    function onError(error) {\n      dispatch(postBulkEmailError());\n      return error;\n    }\n    try {\n      const data = await postBulkEmailInstructorTask(emailData, courseId);\n      return onComplete(data);\n    } catch (error) {\n      return onError(error);\n    }\n  };\n}\n\nexport function editScheduledEmailThunk(emailData, courseId, schedulingId) {\n  return async (dispatch) => {\n    dispatch(patchScheduledEmail());\n    dispatch(patchScheduledEmailStart());\n    function onComplete(data) {\n      dispatch(patchScheduledEmailComplete());\n      return data;\n    }\n    function onError(error) {\n      dispatch(patchScheduledEmailError());\n      return error;\n    }\n    try {\n      const data = await patchScheduledBulkEmailInstructorTask(emailData, courseId, schedulingId);\n      return onComplete(data);\n    } catch (error) {\n      return onError(error);\n    }\n  };\n}\n","/* eslint-disable import/prefer-default-export */\nimport { getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\nimport { logError } from '@edx/frontend-platform/logging';\n\nexport async function postBulkEmailInstructorTask(email, courseId) {\n  try {\n    const url = `${getConfig().LMS_BASE_URL}/courses/${courseId}/instructor/api/send_email`;\n    const response = await getAuthenticatedHttpClient().post(url, email);\n    return response;\n  } catch (error) {\n    logError(error);\n    throw new Error(error);\n  }\n}\n\nexport async function patchScheduledBulkEmailInstructorTask(emailData, courseId, scheduleId) {\n  const endpointUrl = `${getConfig().LMS_BASE_URL}/api/instructor_task/v1/schedules/${courseId}/bulk_email/${scheduleId}`;\n  try {\n    const response = await getAuthenticatedHttpClient().patch(endpointUrl, emailData);\n    return response;\n  } catch (error) {\n    logError(error);\n    throw new Error(error);\n  }\n}\n","import { camelCaseObject, getConfig } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nexport const getCourseHomeBaseUrl = () => `${getConfig().LMS_BASE_URL}/api/course_home/v1/course_metadata`;\n\nexport async function getCourseHomeCourseMetadata(courseId) {\n  const courseHomeMetadataUrl = `${getCourseHomeBaseUrl()}/${courseId}`;\n  const { data } = await getAuthenticatedHttpClient().get(courseHomeMetadataUrl);\n  return camelCaseObject(data);\n}\n\nexport async function getCohorts(courseId) {\n  const url = `${getConfig().LMS_BASE_URL}/courses/${courseId}/cohorts/`;\n  const { data } = await getAuthenticatedHttpClient().get(url);\n  return data;\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\n\nimport { LearningHeader as Header } from '@edx/frontend-component-header';\nimport Footer from '@edx/frontend-component-footer';\nimport { Spinner } from '@edx/paragon';\n\nimport { getCohorts, getCourseHomeCourseMetadata } from './data/api';\n\nimport './PageContainer.scss';\n\nexport const CourseMetadataContext = React.createContext();\n\nexport default function PageContainer(props) {\n  const { children } = props;\n  const { courseId } = useParams();\n\n  const [courseMetadata, setCourseMetadata] = useState();\n\n  useEffect(() => {\n    async function fetchCourseMetadata() {\n      let metadataResponse;\n      let cohortsResponse;\n\n      try {\n        metadataResponse = await getCourseHomeCourseMetadata(courseId);\n        cohortsResponse = await getCohorts(courseId);\n      } catch (e) {\n        setCourseMetadata({\n          org: '',\n          number: '',\n          title: '',\n          originalUserIsStaff: false,\n          tabs: [],\n          cohorts: [],\n        });\n        return;\n      }\n\n      const {\n        org, number, title, tabs, originalUserIsStaff, courseModes,\n      } = metadataResponse;\n      const { cohorts } = cohortsResponse;\n\n      setCourseMetadata({\n        org,\n        number,\n        title,\n        originalUserIsStaff,\n        courseModes,\n        tabs: [...tabs],\n        cohorts: cohorts.map(({ name }) => name),\n      });\n    }\n    fetchCourseMetadata();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (courseMetadata) {\n    return (\n      <CourseMetadataContext.Provider value={courseMetadata}>\n        <>\n          <Header\n            className=\"learning-header\"\n            courseOrg={courseMetadata.org}\n            courseNumber={courseMetadata.number}\n            courseTitle={courseMetadata.title}\n          />\n          <div className=\"pb-3 container\">\n            <main>\n              {children}\n            </main>\n          </div>\n          <Footer />\n        </>\n      </CourseMetadataContext.Provider>\n    );\n  }\n\n  return (\n    <div className=\"d-flex justify-content-center\">\n      <Spinner\n        animation=\"border\"\n        variant=\"primary\"\n        role=\"status\"\n        screenreadertext=\"loading\"\n        className=\"spinner-border spinner-border-lg text-primary p-5 m-5\"\n      />\n    </div>\n  );\n}\n\nPageContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getConfig } from '@edx/frontend-platform';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Button, Icon } from '@edx/paragon';\nimport { ArrowBack } from '@edx/paragon/icons';\n\nexport default function BackToInstructor(props) {\n  const { courseId } = props;\n\n  return (\n    <Button\n      variant=\"tertiary\"\n      className=\"mb-4.5 ml-n4.5 text-primary-500\"\n      href={`${getConfig().LMS_BASE_URL}/courses/${courseId}/instructor#view-course-info`}\n    >\n      <Icon\n        src={ArrowBack}\n        className=\"mr-2\"\n      />\n      <FormattedMessage\n        id=\"bulk.email.back.to.instructorDashboard\"\n        defaultMessage=\"Back to Instructor Dashboard\"\n        description=\"A link to take the user back to the instructor dashboard\"\n      />\n    </Button>\n  );\n}\n\nBackToInstructor.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport { ErrorPage } from '@edx/frontend-platform/react';\nimport { Container } from '@edx/paragon';\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport BulkEmailTaskManager from './bulk-email-task-manager/BulkEmailTaskManager';\nimport NavigationTabs from '../navigation-tabs/NavigationTabs';\nimport BulkEmailForm from './bulk-email-form';\nimport { CourseMetadataContext } from '../page-container/PageContainer';\nimport { BulkEmailProvider } from './bulk-email-context';\nimport BackToInstructor from '../navigation-tabs/BackToInstructor';\n\nexport default function BulkEmailTool() {\n  const { courseId } = useParams();\n\n  return (\n    <CourseMetadataContext.Consumer>\n      {(courseMetadata) => (courseMetadata.originalUserIsStaff ? (\n        <>\n          <NavigationTabs courseId={courseId} tabData={courseMetadata.tabs} />\n          <BulkEmailProvider>\n            <Container size=\"md\">\n              <BackToInstructor courseId={courseId} />\n              <div className=\"row pb-4.5\">\n                <h1 className=\"text-primary-500\" id=\"main-content\">\n                  <FormattedMessage\n                    id=\"bulk.email.send.email.header\"\n                    defaultMessage=\"Send an email\"\n                    description=\"A label for email form\"\n                  />\n                </h1>\n              </div>\n              <div className=\"row\">\n                <BulkEmailForm\n                  courseId={courseId}\n                  cohorts={courseMetadata.cohorts}\n                  courseModes={courseMetadata.courseModes}\n                />\n              </div>\n              <div className=\"row py-5\">\n                <BulkEmailTaskManager courseId={courseId} />\n              </div>\n            </Container>\n          </BulkEmailProvider>\n        </>\n      ) : (\n        <ErrorPage />\n      ))}\n    </CourseMetadataContext.Consumer>\n  );\n}\n","import 'core-js/stable';\nimport 'regenerator-runtime/runtime';\n\nimport {\n  APP_INIT_ERROR, APP_READY, subscribe, initialize, mergeConfig, getConfig,\n} from '@edx/frontend-platform';\nimport { AppProvider, AuthenticatedPageRoute, ErrorPage } from '@edx/frontend-platform/react';\nimport ReactDOM from 'react-dom';\n\nimport { Helmet } from 'react-helmet';\nimport { Routes, Route } from 'react-router-dom';\nimport messages from './i18n';\n\nimport './index.scss';\nimport BulkEmailTool from './components/bulk-email-tool';\nimport PageContainer from './components/page-container/PageContainer';\n\nsubscribe(APP_READY, () => {\n  ReactDOM.render(\n    <AppProvider>\n      <Helmet>\n        <link rel=\"shortcut icon\" href={getConfig().FAVICON_URL} type=\"image/x-icon\" />\n      </Helmet>\n      <Routes>\n        <Route\n          path=\"/courses/:courseId/bulk_email\"\n          element={(\n            <AuthenticatedPageRoute>\n              <PageContainer>\n                <BulkEmailTool />\n              </PageContainer>\n            </AuthenticatedPageRoute>\n          )}\n        />\n      </Routes>\n    </AppProvider>,\n    document.getElementById('root'),\n  );\n});\n\nsubscribe(APP_INIT_ERROR, (error) => {\n  ReactDOM.render(<ErrorPage message={error.message} />, document.getElementById('root'));\n});\n\ninitialize({\n  handlers: {\n    config: () => {\n      mergeConfig(\n        {\n          // MICROBA-1505: Remove this when we remove the flag from config\n          SCHEDULE_EMAIL_SECTION: process.env.SCHEDULE_EMAIL_SECTION || null,\n        },\n        'CommunicationsAppConfig',\n      );\n    },\n  },\n  messages,\n});\n"],"names":["messagesOfArLanguage","messagesOfZhCnLanguage","messagesOfUkLanguage","messagesOfTrTrLanguage","messagesOfThLanguage","messagesOfTeLanguage","messagesOfSwLanguage","messagesOfRuLanguage","messagesOfPtPtLanguage","messagesOfPtBrLanguage","messagesOfItItLanguage","messagesOfIdLanguage","messagesOfHiLanguage","messagesOfHeLanguage","messagesOfFrCaLanguage","messagesOfFaLanguage","messagesOfEsEsLanguage","messagesOfEs419Language","messagesOfElLanguage","messagesOfDeDeLanguage","messagesOfDeLanguage","messagesOfDaLanguage","messagesFromFrontendComponentHeader","messagesFromFrontendComponentFooter","messagesFromParagon","defineMessages","errorFetchingEmailHistoryData","id","defaultMessage","noEmailData","buttonViewMessage","modalMessageSubject","modalMessageSentBy","modalMessageTimeSent","modalMessageSentTo","modalMessageBody","modalCloseButton","emailHistoryTableViewMessageInstructions","emailHistoryTableColumnHeaderSubject","emailHistoryTableColumnHeaderAuthor","emailHistoryTableColumnHeaderRecipients","emailHistoryTableColumnHeaderTimeSent","emailHistoryTableColumnHeaderNumberSent","emailHistoryTableSectionButtonHeader","emailHistoryTableSectionButton","pendingTasksHeader","emailTaskHistoryHeader","pendingTaskSectionInfo","errorFetchingPendingTaskData","noPendingTaskData","emailTaskHistoryTableSectionButtonHeader","emailTaskHistoryTableSectionButton","errorFetchingTaskHistoryData","noTaskHistoryData","taskHistoryTableColumnHeaderTaskType","taskHistoryTableColumnHeaderTaskInputs","taskHistoryTableColumnHeaderTaskId","taskHistoryTableColumnHeaderTaskRequester","taskHistoryTableColumnHeaderTaskSubmittedDate","taskHistoryTableColumnHeaderTaskDuration","taskHistoryTableColumnHeaderTaskState","taskHistoryTableColumnHeaderTaskStatus","taskHistoryTableColumnHeaderTaskProgress","scheduledEmailsTableHeader","async","getBulkCourseEmailData","courseId","endpoint","endpointUrl","getConfig","LMS_BASE_URL","data","getAuthenticatedHttpClient","post","BulkEmailTaskManagerTable","props","errorRetrievingData","tableData","tableDescription","alertWarningMessage","alertErrorMessage","columns","additionalColumns","renderAlert","alertType","alertMessage","_jsx","className","children","Alert","variant","length","_jsxs","DataTable","itemCount","propTypes","PropTypes","isRequired","defaultProps","reducer","initialState","arguments","undefined","state","dispatch","useReducer","asyncDispatch","useMemo","action","wrapAsync","editorInitialState","emailBody","emailSubject","scheduleDate","scheduleTime","emailRecipients","editMode","schedulingId","emailId","isLoading","formComplete","type","_objectSpread","payload","filter","value","scheduledEmailsTableInitialState","results","count","numPages","currentPage","start","previous","next","BulkEmailContext","React","BulkEmailProvider","_ref","editor","scheduledEmailsTable","useAsyncReducer","slices","prevState","Object","keys","reduce","nextState","nextProp","Provider","handleEditorChange","fieldName","fieldValue","copyToEditor","removeRecipient","patchScheduledEmail","patchScheduledEmailStart","patchScheduledEmailComplete","patchScheduledEmailError","postBulkEmail","postBulkEmailStart","postBulkEmailComplete","postBulkEmailError","ViewEmailModal","intl","messageContent","isOpen","setModalOpen","useContext","ModalDialog","onClose","hasCloseButton","Body","formatMessage","messages","subject","requester","created","sent_to","dangerouslySetInnerHTML","__html","email","html_message","Footer","ActionRow","CloseButton","FormattedMessage","Button","onClick","intlShape","injectIntl","BulkEmailContentHistory","useParams","emailHistoryData","setEmailHistoryData","useState","setErrorRetrievingData","showHistoricalEmailContentTable","setShowHistoricalEmailContentTable","isMessageModalOpen","setIsMessageModalOpen","setMessageContent","transformDataForTable","map","item","join","tableColumns","Header","accessor","Collapsible","styling","title","onOpen","getSentEmailHistory","error","emails","Cell","_ref2","row","onViewMessageClick","index","Icon","src","SpinnerSimple","BulkEmailTaskHistory","emailTaskHistoryData","setEmailTaskHistoryData","showHistoricalTaskContentTable","setShowHistoricalTaskContentTable","getEmailTaskHistory","tasks","fetchScheduledEmails","fetchScheduledEmailsStart","fetchScheduledEmailsComplete","fetchScheduledEmailsError","deleteScheduledEmail","deleteScheduledEmailStart","deleteScheduledEmailComplete","deleteScheduledEmailError","getScheduledBulkEmailThunk","page","get","camelCaseObject","logError","Error","getScheduledBulkEmailIntructorTaskData","onComplete","onError","bulkEmailScheduledEmailsTableErrorHeader","bulkEmailScheduledEmailsTableError","description","bulkEmailScheduledEmailsTableSendDate","bulkEmailScheduledEmailsTableSendTo","bulkEmailScheduledEmailsTableSubject","bulkEmailScheduledEmailsTableAuthor","bulkEmailScheduledEmailsTableConfirmDelete","TaskAlertModal","close","AlertModal","isBlocking","footerNode","name","msg","_Fragment","normalizeDigits","BulkEmailScheduledEmailsTable","setTableData","viewModal","setViewModal","isConfirmModalOpen","openConfirmModal","closeConfirmModal","useToggle","currentTask","setCurrentTask","useEffect","courseEmail","task","taskDue","Date","toLocaleString","taskDueUTC","targets","fetchTableData","useCallback","args","pageIndex","icon","Info","Heading","event","target","previousPage","emailIndex","status","scheduleId","delete","deleteScheduledBulkEmailInstructorTask","deleteScheduledEmailThunk","original","handleDeleteEmail","date","open","pageCount","isPaginated","manualPagination","fetchData","pageSize","IconButton","Visibility","iconAs","alt","sender","htmlMessage","handleViewEmail","Delete","Edit","dateTime","replaceAll","split","day","getDate","month","getMonth","getFullYear","formatDate","getHours","getMinutes","handleEditEmail","BulkEmailPendingTasksAlert","WarningFilled","Hyperlink","destination","isInline","showLaunchIcon","BulkEmailTaskManager","SCHEDULE_EMAIL_SECTION","NavigationTabs","tabData","Nav","defaultActiveKey","tab","Item","Link","eventKey","href","url","tab_id","TextEditor","onChange","onKeyUp","onInit","disabled","Editor","initialValue","init","selector","height","branding","menubar","plugins","toolbar","skin","content_css","content_style","contentUiCss","toString","contentCss","extended_valid_elements","block_unsupported_drop","image_advtab","relative_urls","remove_script_host","onEditorChange","DEFAULT_GROUPS","SELF","STAFF","ALL_LEARNERS","VERIFIED","AUDIT","BulkEmailRecipient","handleCheckboxes","selectedGroups","additionalCohorts","courseModes","hasCourseModes","Form","Group","Label","CheckboxSet","Checkbox","courseMode","slug","find","group","values","courseModeName","cohort","isValid","Control","Feedback","hasIcon","breakpoints","extraSmall","maxWidth","small","minWidth","medium","large","extraLarge","useMobileResponsive","breakpoint","isMobileWindow","setIsMobileWindow","checkForMobile","window","matchMedia","matches","addEventListener","removeEventListener","ScheduleEmailForm","isMobile","onDateTimeChange","time","descriptionDate","setDate","classNames","floatingLabel","toLocaleDateString","toLocaleTimeString","timeStyle","bulkEmailSubmitButtonDefault","bulkEmailSubmitButtonSchedule","bulkEmailSubmitButtonPending","bulkEmailSubmitButtonComplete","bulkEmailSubmitButtonError","bulkEmailSubmitButtonCompleteSchedule","bulkEmailTaskAlertRecipients","bulkEmailToolLabel","bulkEmailSubjectLabel","bulkEmailFormSubjectTip","bulkEmailFormSubjectError","bulkEmailBodyLabel","bulkEmailFormBodyError","bulkEmailInstructionsProofreading","bulkEmailInstructionsCaution","bulkEmailInstructionsCautionMessage","bulkEmailFormScheduleBox","bulkEmailSendEmailButton","bulkEmailFormError","bulkEmailFormSuccess","bulkEmailFormScheduledSuccess","bulkEmailSubmitButtonReschedule","bulkEmailTaskAlertEditingDate","bulkEmailTaskAlertEditingSubject","bulkEmailTaskAlertEditingTo","bulkEmailTaskAlertEditingWarning","FORM_SUBMIT_STATES","FORM_ACTIONS","BulkEmailForm","cohorts","emailFormStatus","setEmailFormStatus","emailFormValidation","setEmailFormValidation","body","recipients","schedule","isTaskAlertOpen","openTaskAlert","closeTaskAlert","isScheduled","toggleScheduled","formatDataForFormAction","emailData","FormData","append","JSON","stringify","toISOString","message","resetEmailForm","delayedEmailFormReset","callback","delay","cancel","timeoutRef","useRef","timeout","current","clearTimeout","setTimeout","useTimeout","onFormChange","validateEmailForm","subjectValid","bodyValid","recipientsValid","scheduleValid","validateDateTime","now","newSchedule","editedEmail","patch","patchScheduledBulkEmailInstructorTask","editScheduledEmailThunk","postBulkEmailInstructorTask","postBulkEmailThunk","createEmailTask","checked","forEach","recipient","test","controlId","maxLength","prev","StatefulButton","preventDefault","icons","Send","Event","Check","Cancel","labels","disabledStates","Toast","show","CourseMetadataContext","PageContainer","courseMetadata","setCourseMetadata","metadataResponse","cohortsResponse","courseHomeMetadataUrl","getCourseHomeCourseMetadata","getCohorts","e","org","number","originalUserIsStaff","tabs","fetchCourseMetadata","courseOrg","courseNumber","courseTitle","Spinner","animation","role","screenreadertext","BackToInstructor","ArrowBack","BulkEmailTool","Consumer","Container","size","ErrorPage","subscribe","APP_READY","ReactDOM","AppProvider","Helmet","rel","FAVICON_URL","Routes","Route","path","element","AuthenticatedPageRoute","document","getElementById","APP_INIT_ERROR","initialize","handlers","config","mergeConfig"],"sourceRoot":""}