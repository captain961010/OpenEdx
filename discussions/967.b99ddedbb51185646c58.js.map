{"version":3,"file":"967.b99ddedbb51185646c58.js","mappings":"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","sources":["webpack://@edx/frontend-app-discussions/./node_modules/@edx/paragon/src/ProductTour/CheckpointActionRow.jsx","webpack://@edx/frontend-app-discussions/./node_modules/@edx/paragon/src/ProductTour/CheckpointBody.jsx","webpack://@edx/frontend-app-discussions/./node_modules/@edx/paragon/src/ProductTour/CheckpointBreadcrumbs.jsx","webpack://@edx/frontend-app-discussions/./node_modules/@edx/paragon/src/ProductTour/CheckpointTitle.jsx","webpack://@edx/frontend-app-discussions/./node_modules/@edx/paragon/src/ProductTour/Checkpoint.jsx","webpack://@edx/frontend-app-discussions/./node_modules/@edx/paragon/src/ProductTour/index.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/tours/DiscussionsProductTour.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '../Button';\n\nconst CheckpointActionRow = React.forwardRef(({\n  advanceButtonText,\n  dismissButtonText,\n  endButtonText,\n  isLastCheckpoint,\n  onAdvance,\n  onDismiss,\n  onEnd,\n  showDismissButton,\n  index,\n}, ref) => (\n  <div className=\"pgn__checkpoint-action-row\" ref={ref}>\n    {(showDismissButton === undefined ? !isLastCheckpoint : showDismissButton) && (\n      <Button\n        variant=\"tertiary\"\n        className=\"pgn__checkpoint-button_dismiss\"\n        onClick={onDismiss}\n      >\n        {dismissButtonText}\n      </Button>\n    )}\n    <Button\n      autoFocus\n      className=\"pgn__checkpoint-button_advance\"\n      variant=\"primary\"\n      onClick={isLastCheckpoint ? () => onEnd(index) : () => onAdvance(index)}\n    >\n      {isLastCheckpoint ? endButtonText : advanceButtonText}\n    </Button>\n  </div>\n));\n\nCheckpointActionRow.defaultProps = {\n  advanceButtonText: '',\n  dismissButtonText: '',\n  endButtonText: '',\n  isLastCheckpoint: false,\n  onAdvance: () => {},\n  onDismiss: () => {},\n  onEnd: () => {},\n  showDismissButton: undefined,\n  index: 0,\n};\n\nCheckpointActionRow.propTypes = {\n  /** The text displayed on the button used to advance the tour. */\n  advanceButtonText: PropTypes.node,\n  /** The text displayed on the button used to dismiss the tour. */\n  dismissButtonText: PropTypes.node,\n  /** The text displayed on the button used to end the tour. */\n  endButtonText: PropTypes.node,\n  /** Whether the parent Checkpoint is the last in the tour. */\n  isLastCheckpoint: PropTypes.bool,\n  /** A function that runs when triggering the `onClick` event of the advance button. */\n  onAdvance: PropTypes.func,\n  /** A function that runs when triggering the `onClick` event of the dismiss button. */\n  onDismiss: PropTypes.func,\n  /** A function that runs when triggering the `onClick` event of the advance button if isLastCheckpoint is true. */\n  onEnd: PropTypes.func,\n  /** Enforces visibility of the dismiss button under all circumstances */\n  showDismissButton: PropTypes.bool,\n  /** Allows visibility of last index value for onEnd checkpoint compatibility */\n  index: PropTypes.number,\n};\n\nexport default CheckpointActionRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CheckpointBody = React.forwardRef(({ children }, ref) => {\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <div className=\"pgn__checkpoint-body\" ref={ref}>\n      {children}\n    </div>\n  );\n});\n\nCheckpointBody.defaultProps = {\n  children: null,\n};\n\nCheckpointBody.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default CheckpointBody;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CheckpointBreadcrumbs = React.forwardRef(({ currentIndex, totalCheckpoints }, ref) => {\n  if (totalCheckpoints === 1) {\n    return null;\n  }\n  return (\n    <span className=\"pgn__checkpoint-breadcrumb-container\" ref={ref}>\n      {new Array(totalCheckpoints).fill(0).map((v, i) => (\n        i === currentIndex\n          ? (\n            <span\n              /* eslint-disable-next-line react/no-array-index-key */\n              key={i}\n              className=\"pgn__checkpoint-breadcrumb pgn__checkpoint-breadcrumb_active\"\n              data-testid=\"pgn__checkpoint-breadcrumb_active\"\n            />\n          )\n          : (\n            <span\n              /* eslint-disable-next-line react/no-array-index-key */\n              key={i}\n              className=\"pgn__checkpoint-breadcrumb pgn__checkpoint-breadcrumb_inactive\"\n              data-testid=\"pgn__checkpoint-breadcrumb_inactive\"\n            />\n          )\n      ))}\n    </span>\n  );\n});\n\nCheckpointBreadcrumbs.defaultProps = {\n  currentIndex: null,\n  totalCheckpoints: null,\n};\n\nCheckpointBreadcrumbs.propTypes = {\n  /** The current index of the parent Checkpoint within the tour. */\n  currentIndex: PropTypes.number,\n  /** The total number of Checkpoints within the tour. */\n  totalCheckpoints: PropTypes.number,\n};\n\nexport default CheckpointBreadcrumbs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CheckpointTitle = React.forwardRef(({ children }, ref) => (\n  <h2 id=\"pgn__checkpoint-title\" ref={ref}>\n    {children}\n  </h2>\n));\n\nCheckpointTitle.defaultProps = {\n  children: null,\n};\n\nCheckpointTitle.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default CheckpointTitle;\n","import React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport PropTypes from 'prop-types';\nimport { createPopper } from '@popperjs/core';\n\nimport breakpoints from '../utils/breakpoints';\n\nimport CheckpointActionRow from './CheckpointActionRow';\nimport CheckpointBody from './CheckpointBody';\nimport CheckpointBreadcrumbs from './CheckpointBreadcrumbs';\nimport CheckpointTitle from './CheckpointTitle';\n\nconst Checkpoint = React.forwardRef(({\n  body,\n  index,\n  placement,\n  target,\n  title,\n  totalCheckpoints,\n  ...props\n}, ref) => {\n  const [checkpointVisible, setCheckpointVisible] = useState(false);\n  const isMobile = useMediaQuery({ maxWidth: breakpoints.small.maxWidth });\n\n  useEffect(() => {\n    const targetElement = document.querySelector(target);\n    const checkpoint = document.querySelector('#pgn__checkpoint');\n    if (targetElement && checkpoint) {\n      // Use the Popper library to translate the Checkpoint to its target's coordinates\n      const checkpointPopper = createPopper(targetElement, checkpoint, {\n        placement: isMobile ? 'top' : placement,\n        modifiers: [\n          {\n            name: 'arrow',\n            options: {\n              padding: 25,\n            },\n          },\n          {\n            name: 'offset',\n            options: {\n              offset: [0, 20],\n            },\n          },\n          {\n            name: 'preventOverflow',\n            options: {\n              padding: 20,\n              tetherOffset: 35,\n            },\n          },\n        ],\n      });\n      setCheckpointVisible(true);\n      if (checkpointPopper) {\n        checkpointPopper.forceUpdate();\n      }\n    }\n  }, [target, isMobile, placement]);\n\n  useEffect(() => {\n    if (checkpointVisible) {\n      // Scroll the Checkpoint into view once its rendered\n      const targetElement = document.querySelector(target);\n      let targetOffset = targetElement.getBoundingClientRect().top;\n      if ((targetOffset < 0) || (targetElement.getBoundingClientRect().bottom > global.innerHeight)) {\n        if (placement.includes('top')) {\n          if (targetOffset < 0) {\n            targetOffset *= -1;\n          }\n          targetOffset -= 280;\n        } else {\n          targetOffset -= 80;\n        }\n\n        global.scrollTo({\n          top: targetOffset, behavior: 'smooth',\n        });\n      }\n\n      const button = document.querySelector('.pgn__checkpoint-button_advance');\n      button.focus();\n    }\n  }, [target, checkpointVisible, placement]);\n\n  const isLastCheckpoint = index + 1 === totalCheckpoints;\n  const isOnlyCheckpoint = totalCheckpoints === 1;\n\n  return (\n    <div\n      id=\"pgn__checkpoint\"\n      className=\"pgn__checkpoint\"\n      aria-labelledby=\"pgn__checkpoint-title\"\n      ref={ref}\n      role=\"dialog\"\n      style={{ visibility: checkpointVisible ? 'visible' : 'hidden', pointerEvents: checkpointVisible ? 'auto' : 'none' }}\n    >\n      {/* This text is not translated due to Paragon's lack of i18n support */}\n      <span className=\"sr-only\">Top of step {index + 1}</span>\n      {(title || !isOnlyCheckpoint) && (\n        <div className=\"pgn__checkpoint-header\">\n          <CheckpointTitle>{title}</CheckpointTitle>\n          <CheckpointBreadcrumbs currentIndex={index} totalCheckpoints={totalCheckpoints} />\n        </div>\n      )}\n      <CheckpointBody>{body}</CheckpointBody>\n      <CheckpointActionRow\n        isLastCheckpoint={isLastCheckpoint}\n        index={index}\n        {...props}\n      />\n      <div id=\"pgn__checkpoint-arrow\" data-popper-arrow />\n      {/* This text is not translated due to Paragon's lack of i18n support */}\n      <span className=\"sr-only\">Bottom of step {index + 1}</span>\n    </div>\n  );\n});\n\nCheckpoint.defaultProps = {\n  advanceButtonText: null,\n  body: null,\n  dismissButtonText: null,\n  endButtonText: null,\n  placement: 'top',\n  title: null,\n  showDismissButton: undefined,\n};\n\nCheckpoint.propTypes = {\n  /** The text displayed on the button used to advance the tour for the given Checkpoint. */\n  advanceButtonText: PropTypes.node,\n  /** The text displayed in the body of the Checkpoint */\n  body: PropTypes.node,\n  /** The text displayed on the button used to dismiss the tour for the given Checkpoint. */\n  dismissButtonText: PropTypes.node,\n  /** The text displayed on the button used to end the tour for the given Checkpoint. */\n  endButtonText: PropTypes.node,\n  /** The current index of the given Checkpoint */\n  index: PropTypes.number.isRequired,\n  /** A function that runs when triggering the `onClick` event of the advance\n   * button for the given Checkpoint. */\n  onAdvance: PropTypes.func.isRequired,\n  /** A function that runs when triggering the `onClick` event of the dismiss\n   * button for the given Checkpoint. */\n  onDismiss: PropTypes.func.isRequired,\n  /** A function that runs when triggering the `onClick` event of the advance\n   * button if the given Checkpoint is the only or last Checkpoint in a tour. */\n  onEnd: PropTypes.func.isRequired,\n  /** A string that dictates the alignment of the Checkpoint around its target. */\n  placement: PropTypes.oneOf([\n    'top', 'top-start', 'top-end', 'right-start', 'right', 'right-end',\n    'left-start', 'left', 'left-end', 'bottom', 'bottom-start', 'bottom-end',\n  ]),\n  /** The CSS selector for the Checkpoint's desired target. */\n  target: PropTypes.string.isRequired,\n  /** The text displayed in the title of the Checkpoint */\n  title: PropTypes.node,\n  /** The total number of Checkpoints in a tour */\n  totalCheckpoints: PropTypes.number.isRequired,\n  /** Enforces visibility of the dismiss button under all circumstances */\n  showDismissButton: PropTypes.bool,\n};\n\nexport default Checkpoint;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Checkpoint from './Checkpoint';\n\nconst ProductTour = React.forwardRef(({ tours }, ref) => {\n  const tourValue = tours.find((tour) => tour.enabled);\n  const {\n    enabled, checkpoints = [], startingIndex, onEscape, onEnd, onDismiss: tourOnDismiss,\n    advanceButtonText: tourAdvanceButtonText, dismissButtonText: tourDismissButtonText,\n    endButtonText: tourEndButtonText,\n  } = tourValue || {};\n  const [currentCheckpointData, setCurrentCheckpointData] = useState(null);\n  const [index, setIndex] = useState(0);\n  const [isTourEnabled, setIsTourEnabled] = useState(false);\n  const [prunedCheckpoints, setPrunedCheckpoints] = useState([]);\n  const {\n    title, body, onAdvance, onDismiss, advanceButtonText, dismissButtonText,\n    endButtonText, placement, target, showDismissButton,\n  } = currentCheckpointData || {};\n\n  /**\n   * Takes a list of checkpoints and verifies that each target string provided is\n   * an element in the DOM.\n   */\n  const pruneCheckpoints = (checkpointList) => {\n    const checkpointsWithRenderedTargets = checkpointList.filter(\n      (checkpoint) => !!document.querySelector(checkpoint.target),\n    );\n    setPrunedCheckpoints(checkpointsWithRenderedTargets);\n  };\n\n  useEffect(() => {\n    if (enabled && checkpoints) {\n      setIsTourEnabled(enabled);\n      pruneCheckpoints(checkpoints);\n      setIndex(startingIndex || 0);\n    }\n  }, [enabled, checkpoints, startingIndex]);\n\n  useEffect(() => {\n    if (isTourEnabled && prunedCheckpoints.length) {\n      setCurrentCheckpointData(prunedCheckpoints[index]);\n    }\n  }, [index, isTourEnabled, prunedCheckpoints]);\n\n  useEffect(() => {\n    const handleEsc = (event) => {\n      if (event.keyCode === 27) {\n        setIsTourEnabled(false);\n        if (onEscape) {\n          onEscape();\n        }\n      }\n    };\n    global.addEventListener('keydown', handleEsc);\n\n    return () => {\n      global.removeEventListener('keydown', handleEsc);\n    };\n  }, [onEscape]);\n\n  if (!tourValue || !currentCheckpointData || !isTourEnabled) {\n    return null;\n  }\n\n  const handleAdvance = () => {\n    setIndex(index + 1);\n    if (onAdvance) {\n      onAdvance();\n    }\n  };\n\n  const handleDismiss = () => {\n    setIndex(0);\n    setIsTourEnabled(false);\n    if (onDismiss) {\n      onDismiss();\n    } else {\n      tourOnDismiss();\n    }\n    setCurrentCheckpointData(null);\n  };\n  /* eslint-disable */\n  /**\n   * Takes the final checkpoint array index value and looks for an existing onEnd callback.\n   * \n   * If an onEnd callback exist on checkpointIndex value and it is the final checkpoint \n   * in the array, the onEnd callback will be called for the parent, and individual onEnd object. \n   * \n   * @param {Integer} checkpointIndex \n   */\n  /* eslint-enable */\n  const handleEnd = (checkpointIndex) => {\n    setIndex(0);\n    setIsTourEnabled(false);\n    if (prunedCheckpoints[checkpointIndex].onEnd) {\n      prunedCheckpoints[checkpointIndex].onEnd();\n    } else if (onEnd) {\n      onEnd(prunedCheckpoints[checkpointIndex]);\n    }\n    setCurrentCheckpointData(null);\n  };\n  return (\n    <Checkpoint\n      advanceButtonText={advanceButtonText || tourAdvanceButtonText}\n      body={body}\n      currentCheckpointData={currentCheckpointData}\n      dismissButtonText={dismissButtonText || tourDismissButtonText}\n      endButtonText={endButtonText || tourEndButtonText}\n      index={index}\n      onAdvance={handleAdvance}\n      onDismiss={handleDismiss}\n      onEnd={handleEnd}\n      placement={placement}\n      target={target}\n      title={title}\n      totalCheckpoints={prunedCheckpoints.length}\n      showDismissButton={showDismissButton}\n      ref={ref}\n    />\n  );\n});\n\nProductTour.defaultProps = {\n  tours: {\n    advanceButtonText: '',\n    checkpoints: {\n      advanceButtonText: '',\n      body: '',\n      dismissButtonText: '',\n      endButtonText: '',\n      onAdvance: () => {},\n      onDismiss: () => {},\n      placement: 'top',\n      title: '',\n      showDismissButton: undefined,\n    },\n    dismissButtonText: '',\n    endButtonText: '',\n    onDismiss: () => {},\n    onEnd: () => {},\n    onEscape: () => {},\n    startingIndex: 0,\n  },\n};\n\nProductTour.propTypes = {\n  tours: PropTypes.arrayOf(PropTypes.shape({\n    /** The text displayed on all buttons used to advance the tour. */\n    advanceButtonText: PropTypes.node,\n    /** An array comprised of checkpoint objects supporting the following values: */\n    checkpoints: PropTypes.arrayOf(PropTypes.shape({\n      /** The text displayed on the button used to advance the tour for the given Checkpoint\n       * (overrides the* `advanceButtonText` defined in the parent tour object). */\n      advanceButtonText: PropTypes.node,\n      /** The text displayed in the body of the Checkpoint */\n      body: PropTypes.node,\n      /** The text displayed on the button used to dismiss the tour for the given Checkpoint\n       * (overrides the `dismissButtonText` defined in the parent tour object). */\n      dismissButtonText: PropTypes.node,\n      /** The text displayed on the button used to end the tour for the given Checkpoint\n       * (overrides the `endButtonText` defined in the parent tour object). */\n      endButtonText: PropTypes.node,\n      /** A function that runs when triggering the `onClick` event of the advance\n       * button for the given Checkpoint. */\n      onAdvance: PropTypes.func,\n      /** A function that runs when triggering the `onClick` event of the dismiss\n       * button for the given Checkpoint (overrides the `onDismiss` function defined in the parent tour object). */\n      onDismiss: PropTypes.func,\n      /** A function that runs when triggering the `onClick` event of the advance\n      * button if the given Checkpoint is the only or last Checkpoint in a tour. */\n      onEnd: PropTypes.func,\n      /** A string that dictates the alignment of the Checkpoint around its target. */\n      placement: PropTypes.oneOf([\n        'top', 'top-start', 'top-end', 'right-start', 'right', 'right-end',\n        'left-start', 'left', 'left-end', 'bottom', 'bottom-start', 'bottom-end',\n      ]),\n      /** The CSS selector for the Checkpoint's desired target. */\n      target: PropTypes.string.isRequired,\n      /** The text displayed in the title of the Checkpoint */\n      title: PropTypes.node,\n      /** Enforces visibility of the dismiss button under all circumstances */\n      showDismissButton: PropTypes.bool,\n    })),\n    /** The text displayed on the button used to dismiss the tour. */\n    dismissButtonText: PropTypes.node,\n    /** Whether the tour is enabled. If there are multiple tours defined, only one should be enabled at a time. */\n    enabled: PropTypes.bool.isRequired,\n    /** The text displayed on the button used to end the tour. */\n    endButtonText: PropTypes.node,\n    /** A function that runs when triggering the `onClick` event of the dismiss button. */\n    onDismiss: PropTypes.func,\n    /** A function that runs when triggering the `onClick` event of the end button. */\n    onEnd: PropTypes.func,\n    /** A function that runs when pressing the Escape key. */\n    onEscape: PropTypes.func,\n    /** The index of the desired `Checkpoint` to render when the tour starts. */\n    startingIndex: PropTypes.number,\n    /** The ID of the tour */\n    tourId: PropTypes.string.isRequired,\n  })),\n};\n\nexport default ProductTour;\n","import React, { useEffect } from 'react';\n\nimport isEmpty from 'lodash/isEmpty';\nimport { useDispatch } from 'react-redux';\n\nimport { ProductTour } from '@edx/paragon';\n\nimport { useTourConfiguration } from '../data/hooks';\nimport { fetchDiscussionTours } from './data/thunks';\n\nconst DiscussionsProductTour = () => {\n  const dispatch = useDispatch();\n  const config = useTourConfiguration();\n\n  useEffect(() => {\n    dispatch(fetchDiscussionTours());\n  }, []);\n\n  return (\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    <>\n      {!isEmpty(config) && (\n        <ProductTour\n          tours={config}\n        />\n      )}\n    </>\n  );\n};\n\nexport default DiscussionsProductTour;\n"],"names":["CheckpointActionRow","React","_ref","ref","advanceButtonText","dismissButtonText","endButtonText","isLastCheckpoint","onAdvance","onDismiss","onEnd","showDismissButton","index","className","undefined","Button","variant","onClick","autoFocus","defaultProps","propTypes","PropTypes","CheckpointBody","children","CheckpointBreadcrumbs","currentIndex","totalCheckpoints","Array","fill","map","v","i","key","CheckpointTitle","id","Checkpoint","body","placement","target","title","props","_objectWithoutProperties","_excluded","checkpointVisible","setCheckpointVisible","useState","isMobile","useMediaQuery","maxWidth","breakpoints","useEffect","targetElement","document","querySelector","checkpoint","checkpointPopper","createPopper","modifiers","name","options","padding","offset","tetherOffset","forceUpdate","targetOffset","getBoundingClientRect","top","bottom","global","innerHeight","includes","scrollTo","behavior","focus","isOnlyCheckpoint","role","style","visibility","pointerEvents","_extends","ProductTour","tours","tourValue","find","tour","enabled","checkpoints","startingIndex","onEscape","tourOnDismiss","tourAdvanceButtonText","tourDismissButtonText","tourEndButtonText","currentCheckpointData","setCurrentCheckpointData","setIndex","isTourEnabled","setIsTourEnabled","prunedCheckpoints","setPrunedCheckpoints","checkpointList","checkpointsWithRenderedTargets","filter","pruneCheckpoints","length","handleEsc","event","keyCode","addEventListener","removeEventListener","handleAdvance","handleDismiss","checkpointIndex","tourId","DiscussionsProductTour","dispatch","useDispatch","config","useTourConfiguration","fetchDiscussionTours","_jsx","_Fragment","isEmpty"],"sourceRoot":""}