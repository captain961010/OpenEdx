{"version":3,"file":"525.f05fb71b31a33c1320fe.js","mappings":"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","sources":["webpack://@edx/frontend-app-discussions/./src/discussions/in-context-topics/topic/Topic.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/in-context-topics/topic/ArchivedBaseGroup.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/in-context-topics/topic/SectionBaseGroup.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/in-context-topics/TopicsView.jsx"],"sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars, react/forbid-prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Icon, OverlayTrigger, Tooltip } from '@edx/paragon';\nimport { HelpOutline, PostOutline, Report } from '@edx/paragon/icons';\n\nimport TopicStats from '../../../components/TopicStats';\nimport { Routes } from '../../../data/constants';\nimport { selectUserHasModerationPrivileges, selectUserIsGroupTa } from '../../data/selectors';\nimport { discussionsPath } from '../../utils';\nimport messages from '../messages';\n\nconst Topic = ({\n  topic,\n  showDivider,\n  index,\n}) => {\n  const intl = useIntl();\n  const { courseId } = useParams();\n  const userHasModerationPrivileges = useSelector(selectUserHasModerationPrivileges);\n  const userIsGroupTa = useSelector(selectUserIsGroupTa);\n  const { inactiveFlags, activeFlags } = topic;\n  const canSeeReportedStats = (activeFlags || inactiveFlags) && (userHasModerationPrivileges || userIsGroupTa);\n  const isSelected = (id) => window.location.pathname.includes(id);\n  const topicUrl = discussionsPath(Routes.TOPICS.TOPIC, {\n    courseId,\n    topicId: topic.id,\n  });\n\n  return (\n    <>\n      <Link\n        className={classNames('discussion-topic p-0 text-decoration-none text-primary-500', {\n          'border-light-400 border-bottom': showDivider,\n        })}\n        data-topic-id={topic.id}\n        to={topicUrl}\n        onClick={() => isSelected(topic.id)}\n        aria-current={isSelected(topic.id) ? 'page' : undefined}\n        role=\"option\"\n        tabIndex={(isSelected(topic.id) || index === 0) ? 0 : -1}\n      >\n        <div className=\"d-flex flex-row pt-2.5 pb-2 px-4\">\n          <div className=\"d-flex flex-column flex-fill\" style={{ minWidth: 0 }}>\n            <div className=\"d-flex flex-column justify-content-start mw-100 flex-fill\">\n              <div className=\"topic-name text-truncate\">\n                {topic?.name || topic?.displayName || intl.formatMessage(messages.unnamedTopicSubCategories)}\n              </div>\n            </div>\n            <TopicStats threadCounts={topic?.threadCounts} />\n          </div>\n        </div>\n      </Link>\n      {!showDivider && (\n        <>\n          <div className=\"divider border-top border-light-500\" />\n          <div className=\"divider pt-1 bg-light-300\" />\n        </>\n      )}\n    </>\n  );\n};\n\nexport const topicShape = PropTypes.shape({\n  id: PropTypes.string,\n  usage_key: PropTypes.string,\n  name: PropTypes.string,\n  thread_counts: PropTypes.shape({\n    discussions: PropTypes.number,\n    questions: PropTypes.number,\n  }),\n  enabled_in_context: PropTypes.bool,\n  flags: PropTypes.number,\n});\n\nTopic.propTypes = {\n  topic: topicShape,\n  showDivider: PropTypes.bool,\n  index: PropTypes.number,\n};\n\nTopic.defaultProps = {\n  showDivider: true,\n  index: -1,\n  topic: {\n    usage_key: '',\n  },\n};\n\nexport default React.memo(Topic);\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport messages from '../messages';\nimport Topic, { topicShape } from './Topic';\n\nconst ArchivedBaseGroup = ({\n  archivedTopics,\n  showDivider,\n}) => {\n  const intl = useIntl();\n\n  const renderArchivedTopics = useMemo(() => (\n    archivedTopics?.map((topic, index) => (\n      <Topic\n        key={topic.id}\n        topic={topic}\n        showDivider={(archivedTopics.length - 1) !== index}\n      />\n    ))\n  ), [archivedTopics]);\n\n  return (\n    <>\n      {showDivider && (\n        <>\n          <div className=\"divider border-top border-light-500\" />\n          <div className=\"divider pt-1 bg-light-300\" />\n        </>\n      )}\n      <div\n        className=\"discussion-topic-group d-flex flex-column text-primary-500\"\n        data-testid=\"archived-group\"\n      >\n        <div className=\"pt-3 px-4 font-weight-bold\">{intl.formatMessage(messages.archivedTopics)}</div>\n        {renderArchivedTopics}\n      </div>\n    </>\n  );\n};\n\nArchivedBaseGroup.propTypes = {\n  archivedTopics: PropTypes.arrayOf(topicShape).isRequired,\n  showDivider: PropTypes.bool,\n};\n\nArchivedBaseGroup.defaultProps = {\n  showDivider: false,\n};\nexport default React.memo(ArchivedBaseGroup);\n","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport TopicStats from '../../../components/TopicStats';\nimport { Routes } from '../../../data/constants';\nimport { discussionsPath } from '../../utils';\nimport messages from '../messages';\nimport { topicShape } from './Topic';\n\nconst SectionBaseGroup = ({\n  section,\n  sectionTitle,\n  sectionId,\n  showDivider,\n}) => {\n  const intl = useIntl();\n  const { courseId } = useParams();\n\n  const isSelected = useCallback((id) => (\n    window.location.pathname.includes(id)\n  ), []);\n\n  const sectionUrl = useCallback((id) => discussionsPath(Routes.TOPICS.CATEGORY, {\n    courseId,\n    category: id,\n  }), [courseId]);\n\n  const renderSection = useMemo(() => (\n    section?.map((subsection, index) => (\n      <Link\n        className={classNames('subsection p-0 text-decoration-none text-primary-500', {\n          'border-bottom border-light-400': (section.length - 1 !== index),\n        })}\n        key={subsection.id}\n        role=\"option\"\n        data-subsection-id={subsection.id}\n        data-testid=\"subsection-group\"\n        to={sectionUrl(subsection.id)}\n        onClick={() => isSelected(subsection.id)}\n        aria-current={isSelected(section.id) ? 'page' : undefined}\n        tabIndex={(isSelected(subsection.id) || index === 0) ? 0 : -1}\n      >\n        <div className=\"d-flex flex-row pt-2.5 pb-2 px-4\">\n          <div className=\"d-flex flex-column flex-fill\" style={{ minWidth: 0 }}>\n            <div className=\"d-flex flex-column justify-content-start mw-100 flex-fill\">\n              <div className=\"topic-name text-truncate\">\n                {subsection?.displayName || intl.formatMessage(messages.unnamedSubsection)}\n              </div>\n              <TopicStats threadCounts={subsection?.threadCounts} />\n            </div>\n          </div>\n        </div>\n      </Link>\n    ))\n  ), [section, sectionUrl, isSelected]);\n\n  return (\n    <div\n      className=\"discussion-topic-group d-flex flex-column text-primary-500\"\n      data-section-id={sectionId}\n      data-testid=\"section-group\"\n    >\n      <div className=\"pt-3 px-4 font-weight-bold\">\n        {sectionTitle || intl.formatMessage(messages.unnamedSection)}\n      </div>\n      {renderSection}\n      {showDivider && (\n        <>\n          <div className=\"divider border-top border-light-500\" />\n          <div className=\"divider pt-1 bg-light-300\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nSectionBaseGroup.propTypes = {\n  section: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    blockId: PropTypes.string,\n    lmsWebUrl: PropTypes.string,\n    legacyWebUrl: PropTypes.string,\n    studentViewUrl: PropTypes.string,\n    type: PropTypes.string,\n    displayName: PropTypes.string,\n    children: PropTypes.arrayOf(topicShape),\n  })).isRequired,\n  sectionTitle: PropTypes.string.isRequired,\n  sectionId: PropTypes.string.isRequired,\n  showDivider: PropTypes.bool.isRequired,\n};\n\nexport default React.memo(SectionBaseGroup);\n","import React, {\n  useCallback, useContext, useEffect, useMemo,\n} from 'react';\n\nimport classNames from 'classnames';\nimport isEmpty from 'lodash/isEmpty';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Spinner } from '@edx/paragon';\n\nimport SearchInfo from '../../components/SearchInfo';\nimport { RequestStatus } from '../../data/constants';\nimport { DiscussionContext } from '../common/context';\nimport { selectAreThreadsFiltered, selectDiscussionProvider } from '../data/selectors';\nimport { clearFilter, clearSort } from '../posts/data/slices';\nimport NoResults from '../posts/NoResults';\nimport { handleKeyDown } from '../utils';\nimport {\n  selectArchivedTopics, selectCoursewareTopics, selectFilteredTopics, selectLoadingStatus,\n  selectNonCoursewareTopics, selectTopicFilter, selectTopics,\n} from './data/selectors';\nimport { setFilter } from './data/slices';\nimport { fetchCourseTopicsV3 } from './data/thunks';\nimport { ArchivedBaseGroup, SectionBaseGroup, Topic } from './topic';\n\nconst TopicsList = () => {\n  const loadingStatus = useSelector(selectLoadingStatus);\n  const coursewareTopics = useSelector(selectCoursewareTopics);\n  const nonCoursewareTopics = useSelector(selectNonCoursewareTopics);\n  const archivedTopics = useSelector(selectArchivedTopics);\n\n  const renderNonCoursewareTopics = useMemo(() => (\n    nonCoursewareTopics?.map((topic, index) => (\n      <Topic\n        key={topic.id}\n        topic={topic}\n        showDivider={(nonCoursewareTopics.length - 1) !== index}\n      />\n    ))\n  ), [nonCoursewareTopics]);\n\n  const renderCoursewareTopics = useMemo(() => (\n    coursewareTopics?.map((topic, index) => (\n      <SectionBaseGroup\n        key={topic.id}\n        section={topic?.children}\n        sectionId={topic.id}\n        sectionTitle={topic.displayName}\n        showDivider={(coursewareTopics.length - 1) !== index}\n      />\n    ))\n  ), [coursewareTopics]);\n\n  return (\n    <>\n      {renderNonCoursewareTopics}\n      {renderCoursewareTopics}\n      {!isEmpty(archivedTopics) && (\n        <ArchivedBaseGroup\n          archivedTopics={archivedTopics}\n          showDivider={(!isEmpty(nonCoursewareTopics) || !isEmpty(coursewareTopics))}\n        />\n      )}\n      {loadingStatus === RequestStatus.IN_PROGRESS && (\n        <div className=\"d-flex justify-content-center p-4\">\n          <Spinner animation=\"border\" variant=\"primary\" size=\"lg\" />\n        </div>\n      )}\n    </>\n  );\n};\n\nconst TopicsView = () => {\n  const dispatch = useDispatch();\n  const { courseId } = useContext(DiscussionContext);\n  const provider = useSelector(selectDiscussionProvider);\n  const topicFilter = useSelector(selectTopicFilter);\n  const filteredTopics = useSelector(selectFilteredTopics);\n  const loadingStatus = useSelector(selectLoadingStatus);\n  const isPostsFiltered = useSelector(selectAreThreadsFiltered);\n  const topics = useSelector(selectTopics);\n\n  useEffect(() => {\n    if (provider) {\n      dispatch(fetchCourseTopicsV3(courseId));\n    }\n  }, [provider]);\n\n  useEffect(() => {\n    if (isPostsFiltered) {\n      dispatch(clearFilter());\n      dispatch(clearSort());\n    }\n  }, [isPostsFiltered]);\n\n  const handleOnClear = useCallback(() => {\n    dispatch(setFilter(''));\n  }, []);\n\n  return (\n    <div className=\"d-flex flex-column h-100\" data-testid=\"inContext-topics-view\">\n      {topicFilter && (\n        <>\n          <SearchInfo\n            text={topicFilter}\n            count={filteredTopics.length}\n            loadingStatus={loadingStatus}\n            onClear={handleOnClear}\n          />\n          {filteredTopics.length === 0 && loadingStatus === RequestStatus.SUCCESSFUL && <NoResults />}\n        </>\n      )}\n      <div\n        className={classNames('list-group list-group-flush flex-fill', {\n          'justify-content-center': loadingStatus === RequestStatus.IN_PROGRESS && isEmpty(topics),\n        })}\n        role=\"list\"\n        onKeyDown={e => handleKeyDown(e)}\n      >\n        {topicFilter ? (\n          filteredTopics?.map((topic) => (\n            <Topic\n              key={topic.id}\n              topic={topic}\n            />\n          ))\n        ) : (\n          <TopicsList />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TopicsView;\n"],"names":["Topic","_ref","topic","showDivider","index","intl","useIntl","courseId","useParams","inactiveFlags","activeFlags","useSelector","selectUserHasModerationPrivileges","selectUserIsGroupTa","isSelected","id","window","location","pathname","includes","topicUrl","discussionsPath","Routes","topicId","_jsxs","_Fragment","children","_jsx","Link","className","classNames","to","onClick","undefined","role","tabIndex","style","minWidth","name","displayName","formatMessage","messages","TopicStats","threadCounts","topicShape","PropTypes","usage_key","thread_counts","discussions","questions","enabled_in_context","flags","propTypes","defaultProps","React","ArchivedBaseGroup","archivedTopics","renderArchivedTopics","useMemo","map","length","isRequired","SectionBaseGroup","section","sectionTitle","sectionId","useCallback","sectionUrl","category","renderSection","subsection","blockId","lmsWebUrl","legacyWebUrl","studentViewUrl","type","TopicsList","loadingStatus","selectLoadingStatus","coursewareTopics","selectCoursewareTopics","nonCoursewareTopics","selectNonCoursewareTopics","selectArchivedTopics","renderNonCoursewareTopics","renderCoursewareTopics","isEmpty","RequestStatus","Spinner","animation","variant","size","TopicsView","dispatch","useDispatch","useContext","DiscussionContext","provider","selectDiscussionProvider","topicFilter","selectTopicFilter","filteredTopics","selectFilteredTopics","isPostsFiltered","selectAreThreadsFiltered","topics","selectTopics","useEffect","fetchCourseTopicsV3","clearFilter","clearSort","handleOnClear","setFilter","SearchInfo","text","count","onClear","NoResults","onKeyDown","e","handleKeyDown"],"sourceRoot":""}