{"version":3,"file":"466.33371f1288eeec13b0ae.js","mappings":"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","sources":["webpack://@edx/frontend-app-discussions/./src/discussions/learners/messages.js","webpack://@edx/frontend-app-discussions/./src/discussions/learners/data/selectors.js","webpack://@edx/frontend-app-discussions/./src/discussions/learners/learner/LearnerAvatar.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/learners/learner/LearnerFooter.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/learners/learner/proptypes.js","webpack://@edx/frontend-app-discussions/./src/discussions/learners/learner/LearnerCard.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/learners/learner/LearnerFilterBar.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/learners/LearnersView.jsx"],"sourcesContent":["import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  reported: {\n    id: 'discussions.learner.reported',\n    defaultMessage: '{reported} reported',\n  },\n  previouslyReported: {\n    id: 'discussions.learner.previouslyReported',\n    defaultMessage: '{previouslyReported} previously reported',\n  },\n  lastActive: {\n    id: 'discussions.learner.lastLogin',\n    defaultMessage: 'Last active {lastActiveTime}',\n  },\n  loadMore: {\n    id: 'discussions.learner.loadMostLearners',\n    defaultMessage: 'Load more',\n    description: 'Text on button for loading more learners',\n  },\n  back: {\n    id: 'discussions.learner.back',\n    defaultMessage: 'Back',\n    description: 'Text on button for back to learners list',\n  },\n  activityForLearner: {\n    id: 'discussions.learner.activityForLearner',\n    defaultMessage: 'Activity for {username}',\n    description: 'Text for learners post header',\n  },\n  mostActivity: {\n    id: 'discussions.learner.mostActivity',\n    defaultMessage: 'Most activity',\n    description: 'Text for learners sorting by most activity',\n  },\n  reportedActivity: {\n    id: 'discussions.learner.reportedActivity',\n    defaultMessage: 'Reported activity',\n    description: 'Text for learners sorting by reported activity',\n  },\n  recentActivity: {\n    id: 'discussions.learner.recentActivity',\n    defaultMessage: 'Recent activity',\n    description: 'Text for learners sorting by recent activity',\n  },\n  sortFilterStatus: {\n    id: 'discussions.learner.sortFilterStatus',\n    defaultMessage: `All learners sorted by {sort, select,\n      flagged {reported activity}\n      activity {most activity}\n      other {{sort}}\n    }`,\n    description: 'Text for current selected learners filter',\n  },\n  allActivity: {\n    id: 'discussion.learner.allActivity',\n    defaultMessage: 'All activity',\n    description: 'Tooltip text for all activity icon',\n  },\n  posts: {\n    id: 'discussion.learner.posts',\n    defaultMessage: 'Posts',\n    description: 'Tooltip text for all posts icon',\n  },\n});\n\nexport default messages;\n","/* eslint-disable import/prefer-default-export */\n\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const selectAllLearners = createSelector(\n  state => state.learners.pages,\n  pages => pages.flat(),\n);\n\nexport const learnersLoadingStatus = () => state => state.learners.status;\n\nexport const selectUsernameSearch = () => state => state.learners.usernameSearch;\n\nexport const selectLearnerSorting = () => state => state.learners.sortedBy;\n\nexport const selectLearnerNextPage = () => state => state.learners.nextPage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Avatar } from '@edx/paragon';\n\nconst LearnerAvatar = ({ username }) => (\n  <div className=\"mr-3 mt-1\">\n    <Avatar\n      size=\"sm\"\n      alt={username}\n      style={{\n        height: '2rem',\n        width: '2rem',\n      }}\n    />\n  </div>\n);\n\nLearnerAvatar.propTypes = {\n  username: PropTypes.string.isRequired,\n};\n\nexport default React.memo(LearnerAvatar);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useSelector } from 'react-redux';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Icon, OverlayTrigger, Tooltip } from '@edx/paragon';\nimport { Edit, Report, ReportGmailerrorred } from '@edx/paragon/icons';\n\nimport { QuestionAnswerOutline } from '../../../components/icons';\nimport { selectUserHasModerationPrivileges, selectUserIsGroupTa } from '../../data/selectors';\nimport messages from '../messages';\n\nconst LearnerFooter = ({\n  inactiveFlags, activeFlags, threads, responses, replies, username,\n}) => {\n  const intl = useIntl();\n  const userHasModerationPrivileges = useSelector(selectUserHasModerationPrivileges);\n  const userIsGroupTa = useSelector(selectUserIsGroupTa);\n  const canSeeLearnerReportedStats = (activeFlags || inactiveFlags) && (userHasModerationPrivileges || userIsGroupTa);\n\n  return (\n    <div className=\"d-flex align-items-center pt-1 mt-2.5\" style={{ marginBottom: '2px' }}>\n      <OverlayTrigger\n        placement=\"right\"\n        id={`learner-${username}-responses`}\n        overlay={(\n          <Tooltip id={`learner-${username}-responses`}>\n            <div className=\"d-flex flex-column align-items-start\">\n              {intl.formatMessage(messages.allActivity)}\n            </div>\n          </Tooltip>\n        )}\n      >\n        <div className=\"d-flex align-items-center\">\n          <Icon src={QuestionAnswerOutline} className=\"icon-size mr-2\" />\n          {threads + responses + replies}\n        </div>\n      </OverlayTrigger>\n      <OverlayTrigger\n        placement=\"right\"\n        id={`learner-${username}-posts`}\n        overlay={(\n          <Tooltip id={`learner-${username}-posts`}>\n            <div className=\"d-flex flex-column align-items-start\">\n              {intl.formatMessage(messages.posts)}\n            </div>\n          </Tooltip>\n        )}\n      >\n        <div className=\"d-flex align-items-center\">\n          <Icon src={Edit} className=\"icon-size mr-2 ml-4\" />\n          {threads}\n        </div>\n      </OverlayTrigger>\n      {Boolean(canSeeLearnerReportedStats) && (\n        <OverlayTrigger\n          placement=\"right\"\n          id={`learner-${username}-flags`}\n          overlay={(\n            <Tooltip id={`learner-${username}-flags`}>\n              <div className=\"d-flex flex-column align-items-start\">\n                {Boolean(activeFlags)\n                  && (\n                  <span>\n                    {intl.formatMessage(messages.reported, { reported: activeFlags })}\n                  </span>\n                  )}\n                {Boolean(inactiveFlags)\n                      && (\n                        <span>\n                          {intl.formatMessage(messages.previouslyReported, { previouslyReported: inactiveFlags })}\n                        </span>\n                      )}\n              </div>\n            </Tooltip>\n          )}\n        >\n          <div className=\"d-flex align-items-center\">\n            <Icon src={activeFlags ? Report : ReportGmailerrorred} className=\"icon-size mr-2 ml-4 text-danger\" />\n            {activeFlags} {Boolean(inactiveFlags) && `/ ${inactiveFlags}`}\n          </div>\n        </OverlayTrigger>\n      )}\n    </div>\n  );\n};\n\nLearnerFooter.propTypes = {\n  inactiveFlags: PropTypes.number,\n  activeFlags: PropTypes.number,\n  threads: PropTypes.number,\n  responses: PropTypes.number,\n  replies: PropTypes.number,\n  username: PropTypes.string,\n};\n\nLearnerFooter.defaultProps = {\n  inactiveFlags: 0,\n  activeFlags: 0,\n  threads: 0,\n  responses: 0,\n  replies: 0,\n  username: '',\n};\n\nexport default React.memo(LearnerFooter);\n","/* eslint-disable import/prefer-default-export */\nimport PropTypes from 'prop-types';\n\nexport const learnerShape = PropTypes.shape({\n  activeFlags: PropTypes.number,\n  inactiveFlags: PropTypes.number,\n  username: PropTypes.string,\n  replies: PropTypes.number,\n  responses: PropTypes.number,\n  threads: PropTypes.number,\n});\n","import React, { useContext } from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { Routes } from '../../../data/constants';\nimport { DiscussionContext } from '../../common/context';\nimport { discussionsPath } from '../../utils';\nimport LearnerAvatar from './LearnerAvatar';\nimport LearnerFooter from './LearnerFooter';\nimport { learnerShape } from './proptypes';\n\nconst LearnerCard = ({ learner }) => {\n  const {\n    username, threads, inactiveFlags, activeFlags, responses, replies,\n  } = learner;\n  const { enableInContextSidebar, learnerUsername, courseId } = useContext(DiscussionContext);\n  const linkUrl = discussionsPath(Routes.LEARNERS.POSTS, {\n    0: enableInContextSidebar ? 'in-context' : undefined,\n    learnerUsername: learner.username,\n    courseId,\n  });\n\n  return (\n    <Link\n      className=\"discussion-post p-0 text-decoration-none text-gray-900 border-bottom border-light-400\"\n      to={linkUrl}\n    >\n      <div\n        className=\"d-flex flex-row flex-fill mw-100 py-3 px-4 border-primary-500\"\n        style={username === learnerUsername ? {\n          borderRightWidth: '4px',\n          borderRightStyle: 'solid',\n        } : null}\n      >\n        <LearnerAvatar username={username} />\n        <div className=\"d-flex flex-column flex-fill\" style={{ minWidth: 0 }}>\n          <div className=\"d-flex flex-column justify-content-start mw-100 flex-fill\">\n            <div className=\"d-flex align-items-center flex-fill\">\n              <div\n                className=\"text-truncate font-weight-500 font-size-14 text-primary-500 font-style\"\n              >\n                {username}\n              </div>\n            </div>\n            {threads !== null && (\n              <LearnerFooter\n                inactiveFlags={inactiveFlags}\n                activeFlags={activeFlags}\n                threads={threads}\n                responses={responses}\n                replies={replies}\n                username={username}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nLearnerCard.propTypes = {\n  learner: learnerShape.isRequired,\n};\n\nexport default React.memo(LearnerCard);\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Collapsible, Form, Icon } from '@edx/paragon';\nimport { Check, Tune } from '@edx/paragon/icons';\n\nimport { LearnersOrdering } from '../../../data/constants';\nimport { selectUserHasModerationPrivileges, selectUserIsGroupTa } from '../../data/selectors';\nimport { setSortedBy } from '../data';\nimport { selectLearnerSorting } from '../data/selectors';\nimport messages from '../messages';\n\nconst ActionItem = React.memo(({\n  id,\n  label,\n  value,\n  selected,\n}) => (\n  <label\n    htmlFor={id}\n    className=\"focus border-bottom-0 d-flex align-items-center w-100 py-2 m-0 font-weight-500 filter-menu\"\n    data-testid={value === selected ? `${value} selected` : null}\n    style={{ cursor: 'pointer' }}\n    aria-checked={value === selected}\n    // eslint-disable-next-line jsx-a11y/no-noninteractive-tabindex\n    tabIndex={value === selected ? '0' : '-1'}\n  >\n    <Icon src={Check} className={classNames('text-success mr-2', { invisible: value !== selected })} />\n    <Form.Radio id={id} className=\"sr-only sr-only-focusable\" value={value} tabIndex=\"0\">\n      {label}\n    </Form.Radio>\n    <span aria-hidden className=\"text-truncate\">\n      {label}\n    </span>\n  </label>\n));\n\nActionItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  selected: PropTypes.string.isRequired,\n};\n\nconst LearnerFilterBar = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const userHasModerationPrivileges = useSelector(selectUserHasModerationPrivileges);\n  const userIsGroupTa = useSelector(selectUserIsGroupTa);\n  const currentSorting = useSelector(selectLearnerSorting());\n  const [isOpen, setOpen] = useState(false);\n\n  const handleSortFilterChange = useCallback((event) => {\n    const { name, value } = event.currentTarget;\n\n    if (name === 'sort') {\n      dispatch(setSortedBy(value));\n      sendTrackEvent(\n        'edx.forum.sort.user',\n        {\n          sort: value,\n        },\n      );\n    }\n  }, []);\n\n  const handleOnToggle = useCallback(() => {\n    setOpen(!isOpen);\n  }, [isOpen]);\n\n  return (\n    <Collapsible.Advanced\n      open={isOpen}\n      onToggle={handleOnToggle}\n      className=\"filter-bar collapsible-card-lg border-0\"\n    >\n      <Collapsible.Trigger className=\"collapsible-trigger border-0\">\n        <span className=\"text-primary-700 pr-4\">\n          {intl.formatMessage(messages.sortFilterStatus, {\n            sort: currentSorting,\n          })}\n        </span>\n        <Collapsible.Visible whenClosed>\n          <Icon src={Tune} />\n        </Collapsible.Visible>\n        <Collapsible.Visible whenOpen>\n          <Icon src={Tune} />\n        </Collapsible.Visible>\n      </Collapsible.Trigger>\n      <Collapsible.Body className=\"collapsible-body px-4 pb-3 pt-0\">\n        <Form>\n          <div className=\"d-flex flex-row py-2 justify-content-between\">\n            <Form.RadioSet\n              name=\"sort\"\n              className=\"d-flex flex-column list-group list-group-flush\"\n              value={currentSorting}\n              onChange={handleSortFilterChange}\n            >\n              <ActionItem\n                id=\"sort-activity\"\n                label={intl.formatMessage(messages.mostActivity)}\n                value={LearnersOrdering.BY_LAST_ACTIVITY}\n                selected={currentSorting}\n              />\n              {(userHasModerationPrivileges || userIsGroupTa) && (\n                <ActionItem\n                  id=\"sort-reported\"\n                  label={intl.formatMessage(messages.reportedActivity)}\n                  value={LearnersOrdering.BY_FLAG}\n                  selected={currentSorting}\n                />\n              )}\n              <ActionItem\n                id=\"sort-recency\"\n                label={intl.formatMessage(messages.recentActivity)}\n                value={LearnersOrdering.BY_RECENCY}\n                selected={currentSorting}\n              />\n            </Form.RadioSet>\n          </div>\n        </Form>\n      </Collapsible.Body>\n    </Collapsible.Advanced>\n  );\n};\n\nexport default LearnerFilterBar;\n","import React, { useCallback, useEffect, useMemo } from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Redirect, useLocation, useParams,\n} from 'react-router';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Button, Spinner } from '@edx/paragon';\n\nimport SearchInfo from '../../components/SearchInfo';\nimport { RequestStatus, Routes } from '../../data/constants';\nimport { selectconfigLoadingStatus, selectLearnersTabEnabled } from '../data/selectors';\nimport NoResults from '../posts/NoResults';\nimport {\n  learnersLoadingStatus,\n  selectAllLearners,\n  selectLearnerNextPage,\n  selectLearnerSorting,\n  selectUsernameSearch,\n} from './data/selectors';\nimport { setUsernameSearch } from './data/slices';\nimport { fetchLearners } from './data/thunks';\nimport { LearnerCard, LearnerFilterBar } from './learner';\nimport messages from './messages';\n\nconst LearnersView = () => {\n  const intl = useIntl();\n  const { courseId } = useParams();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const orderBy = useSelector(selectLearnerSorting());\n  const nextPage = useSelector(selectLearnerNextPage());\n  const loadingStatus = useSelector(learnersLoadingStatus());\n  const usernameSearch = useSelector(selectUsernameSearch());\n  const courseConfigLoadingStatus = useSelector(selectconfigLoadingStatus);\n  const learnersTabEnabled = useSelector(selectLearnersTabEnabled);\n  const learners = useSelector(selectAllLearners);\n\n  useEffect(() => {\n    if (learnersTabEnabled) {\n      if (usernameSearch) {\n        dispatch(fetchLearners(courseId, { orderBy, usernameSearch }));\n      } else {\n        dispatch(fetchLearners(courseId, { orderBy }));\n      }\n    }\n  }, [courseId, orderBy, learnersTabEnabled, usernameSearch]);\n\n  const loadPage = useCallback(async () => {\n    if (nextPage) {\n      dispatch(fetchLearners(courseId, {\n        orderBy,\n        page: nextPage,\n        usernameSearch,\n      }));\n    }\n  }, [courseId, orderBy, nextPage, usernameSearch]);\n\n  const handleOnClear = useCallback(() => {\n    dispatch(setUsernameSearch(''));\n  }, []);\n\n  const renderLearnersList = useMemo(() => (\n    (\n      courseConfigLoadingStatus === RequestStatus.SUCCESSFUL && learnersTabEnabled && learners.map((learner) => (\n        <LearnerCard learner={learner} key={learner.username} />\n      ))\n    // eslint-disable-next-line react/jsx-no-useless-fragment\n    ) || <></>\n  ), [courseConfigLoadingStatus, learnersTabEnabled, learners]);\n\n  return (\n    <div className=\"d-flex flex-column border-right border-light-400\">\n      {!usernameSearch && <LearnerFilterBar /> }\n      <div className=\"border-bottom border-light-400\" />\n      {usernameSearch && (\n        <SearchInfo\n          text={usernameSearch}\n          count={learners.length}\n          loadingStatus={loadingStatus}\n          onClear={handleOnClear}\n        />\n      )}\n      <div className=\"list-group list-group-flush learner\" role=\"list\">\n        {courseConfigLoadingStatus === RequestStatus.SUCCESSFUL && !learnersTabEnabled && (\n        <Redirect\n          to={{\n            ...location,\n            pathname: Routes.DISCUSSIONS.PATH,\n          }}\n        />\n        )}\n        {renderLearnersList}\n        {loadingStatus === RequestStatus.IN_PROGRESS ? (\n          <div className=\"d-flex justify-content-center p-4\">\n            <Spinner animation=\"border\" variant=\"primary\" size=\"lg\" />\n          </div>\n        ) : (\n          nextPage && loadingStatus === RequestStatus.SUCCESSFUL && (\n            <Button onClick={() => loadPage()} variant=\"primary\" size=\"md\" data-testid=\"load-more-learners\">\n              {intl.formatMessage(messages.loadMore)}\n            </Button>\n          )\n        )}\n        { usernameSearch !== '' && learners.length === 0 && loadingStatus === RequestStatus.SUCCESSFUL && <NoResults />}\n      </div>\n    </div>\n  );\n};\n\nexport default LearnersView;\n"],"names":["defineMessages","reported","id","defaultMessage","previouslyReported","lastActive","loadMore","description","back","activityForLearner","mostActivity","reportedActivity","recentActivity","sortFilterStatus","allActivity","posts","selectAllLearners","createSelector","state","learners","pages","flat","LearnerAvatar","_ref","username","_jsx","className","children","Avatar","size","alt","style","height","width","propTypes","PropTypes","React","LearnerFooter","inactiveFlags","activeFlags","threads","responses","replies","intl","useIntl","userHasModerationPrivileges","useSelector","selectUserHasModerationPrivileges","userIsGroupTa","selectUserIsGroupTa","canSeeLearnerReportedStats","_jsxs","marginBottom","OverlayTrigger","placement","overlay","Tooltip","formatMessage","messages","Icon","src","QuestionAnswerOutline","Edit","Boolean","Report","ReportGmailerrorred","defaultProps","learnerShape","LearnerCard","learner","enableInContextSidebar","learnerUsername","courseId","useContext","DiscussionContext","linkUrl","discussionsPath","Routes","undefined","Link","to","borderRightWidth","borderRightStyle","minWidth","isRequired","ActionItem","label","value","selected","htmlFor","cursor","tabIndex","Check","classNames","invisible","Form","LearnerFilterBar","dispatch","useDispatch","currentSorting","sortedBy","isOpen","setOpen","useState","handleSortFilterChange","useCallback","event","name","currentTarget","setSortedBy","sendTrackEvent","sort","handleOnToggle","Collapsible","open","onToggle","whenClosed","Tune","whenOpen","onChange","LearnersOrdering","LearnersView","useParams","location","useLocation","orderBy","nextPage","loadingStatus","status","usernameSearch","courseConfigLoadingStatus","selectconfigLoadingStatus","learnersTabEnabled","selectLearnersTabEnabled","useEffect","fetchLearners","loadPage","async","page","handleOnClear","setUsernameSearch","renderLearnersList","useMemo","RequestStatus","map","_Fragment","SearchInfo","text","count","length","onClear","role","Redirect","_objectSpread","pathname","Spinner","animation","variant","Button","onClick","NoResults"],"sourceRoot":""}