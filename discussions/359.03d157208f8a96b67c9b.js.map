{"version":3,"file":"359.03d157208f8a96b67c9b.js","mappings":"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","sources":["webpack://@edx/frontend-app-discussions/./src/discussions/learners/messages.js","webpack://@edx/frontend-app-discussions/./src/components/FilterBar.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/learners/learner-post-filter-bar/LearnerPostFilterBar.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/learners/LearnerPostsView.jsx"],"sourcesContent":["import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  reported: {\n    id: 'discussions.learner.reported',\n    defaultMessage: '{reported} reported',\n  },\n  previouslyReported: {\n    id: 'discussions.learner.previouslyReported',\n    defaultMessage: '{previouslyReported} previously reported',\n  },\n  lastActive: {\n    id: 'discussions.learner.lastLogin',\n    defaultMessage: 'Last active {lastActiveTime}',\n  },\n  loadMore: {\n    id: 'discussions.learner.loadMostLearners',\n    defaultMessage: 'Load more',\n    description: 'Text on button for loading more learners',\n  },\n  back: {\n    id: 'discussions.learner.back',\n    defaultMessage: 'Back',\n    description: 'Text on button for back to learners list',\n  },\n  activityForLearner: {\n    id: 'discussions.learner.activityForLearner',\n    defaultMessage: 'Activity for {username}',\n    description: 'Text for learners post header',\n  },\n  mostActivity: {\n    id: 'discussions.learner.mostActivity',\n    defaultMessage: 'Most activity',\n    description: 'Text for learners sorting by most activity',\n  },\n  reportedActivity: {\n    id: 'discussions.learner.reportedActivity',\n    defaultMessage: 'Reported activity',\n    description: 'Text for learners sorting by reported activity',\n  },\n  recentActivity: {\n    id: 'discussions.learner.recentActivity',\n    defaultMessage: 'Recent activity',\n    description: 'Text for learners sorting by recent activity',\n  },\n  sortFilterStatus: {\n    id: 'discussions.learner.sortFilterStatus',\n    defaultMessage: `All learners sorted by {sort, select,\n      flagged {reported activity}\n      activity {most activity}\n      other {{sort}}\n    }`,\n    description: 'Text for current selected learners filter',\n  },\n  allActivity: {\n    id: 'discussion.learner.allActivity',\n    defaultMessage: 'All activity',\n    description: 'Tooltip text for all activity icon',\n  },\n  posts: {\n    id: 'discussion.learner.posts',\n    defaultMessage: 'Posts',\n    description: 'Tooltip text for all posts icon',\n  },\n});\n\nexport default messages;\n","/* eslint-disable react/forbid-prop-types */\nimport React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { capitalize, toString } from 'lodash';\nimport { useSelector } from 'react-redux';\n\nimport { injectIntl, intlShape } from '@edx/frontend-platform/i18n';\nimport {\n  Collapsible, Form, Icon, Spinner,\n} from '@edx/paragon';\nimport { Tune } from '@edx/paragon/icons';\n\nimport {\n  PostsStatusFilter, RequestStatus,\n  ThreadOrdering, ThreadType,\n} from '../data/constants';\nimport { selectCourseCohorts } from '../discussions/cohorts/data/selectors';\nimport messages from '../discussions/posts/post-filter-bar/messages';\nimport { ActionItem } from '../discussions/posts/post-filter-bar/PostFilterBar';\n\nconst FilterBar = ({\n  intl,\n  filters,\n  selectedFilters,\n  onFilterChange,\n  showCohortsFilter,\n}) => {\n  const [isOpen, setOpen] = useState(false);\n  const cohorts = useSelector(selectCourseCohorts);\n  const { status } = useSelector(state => state.cohorts);\n  const selectedCohort = useMemo(\n    () => cohorts.find(cohort => (\n      toString(cohort.id) === selectedFilters.cohort)),\n    [selectedFilters.cohort],\n  );\n\n  const allFilters = [\n    {\n      id: 'type-all',\n      label: intl.formatMessage(messages.allPosts),\n      value: ThreadType.ALL,\n    },\n    {\n      id: 'type-discussions',\n      label: intl.formatMessage(messages.filterDiscussions),\n      value: ThreadType.DISCUSSION,\n    },\n    {\n      id: 'type-questions',\n      label: intl.formatMessage(messages.filterQuestions),\n      value: ThreadType.QUESTION,\n    },\n    {\n      id: 'status-any',\n      label: intl.formatMessage(messages.filterAnyStatus),\n      value: PostsStatusFilter.ALL,\n    },\n    {\n      id: 'status-unread',\n      label: intl.formatMessage(messages.filterUnread),\n      value: PostsStatusFilter.UNREAD,\n    },\n    {\n      id: 'status-reported',\n      label: intl.formatMessage(messages.filterReported),\n      value: PostsStatusFilter.REPORTED,\n    },\n    {\n      id: 'status-unanswered',\n      label: intl.formatMessage(messages.filterUnanswered),\n      value: PostsStatusFilter.UNANSWERED,\n    },\n    {\n      id: 'status-unresponded',\n      label: intl.formatMessage(messages.filterUnresponded),\n      value: PostsStatusFilter.UNRESPONDED,\n    },\n    {\n      id: 'sort-activity',\n      label: intl.formatMessage(messages.lastActivityAt),\n      value: ThreadOrdering.BY_LAST_ACTIVITY,\n    },\n    {\n      id: 'sort-comments',\n      label: intl.formatMessage(messages.commentCount),\n      value: ThreadOrdering.BY_COMMENT_COUNT,\n    },\n    {\n      id: 'sort-votes',\n      label: intl.formatMessage(messages.voteCount),\n      value: ThreadOrdering.BY_VOTE_COUNT,\n    },\n  ];\n\n  return (\n    <Collapsible.Advanced\n      open={isOpen}\n      onToggle={() => setOpen(!isOpen)}\n      className=\"filter-bar collapsible-card-lg border-0\"\n    >\n      <Collapsible.Trigger className=\"collapsible-trigger border-0\">\n        <span className=\"text-primary-700 pr-4\">\n          {intl.formatMessage(messages.sortFilterStatus, {\n            own: false,\n            type: selectedFilters.postType,\n            sort: selectedFilters.orderBy,\n            status: selectedFilters.status,\n            cohortType: selectedCohort?.name ? 'group' : 'all',\n            cohort: capitalize(selectedCohort?.name),\n          })}\n        </span>\n        <Collapsible.Visible whenClosed>\n          <Icon src={Tune} />\n        </Collapsible.Visible>\n        <Collapsible.Visible whenOpen>\n          <Icon src={Tune} />\n        </Collapsible.Visible>\n      </Collapsible.Trigger>\n      <Collapsible.Body className=\"collapsible-body px-4 pb-3 pt-0\">\n        <Form>\n          <div className=\"d-flex flex-row py-2 justify-content-between\">\n            {filters.map((value) => (\n              <Form.RadioSet\n                key={value.name}\n                name={value.name}\n                className=\"d-flex flex-column list-group list-group-flush\"\n                value={selectedFilters[value.name]}\n                onChange={onFilterChange}\n              >\n                {value.filters.map(filterName => {\n                  const element = allFilters.find(obj => obj.id === filterName);\n                  if (element) {\n                    return (\n                      <ActionItem\n                        key={element.id}\n                        id={element.id}\n                        label={element.label}\n                        value={element.value}\n                        selected={selectedFilters[value.name]}\n                      />\n                    );\n                  }\n                  return false;\n                })}\n              </Form.RadioSet>\n            ))}\n          </div>\n          {showCohortsFilter && (\n            <>\n              <div className=\"border-bottom my-2\" />\n              {status === RequestStatus.IN_PROGRESS ? (\n                <div className=\"d-flex justify-content-center p-4\">\n                  <Spinner animation=\"border\" variant=\"primary\" size=\"lg\" />\n                </div>\n              ) : (\n                <div className=\"d-flex flex-row pt-2\">\n                  <Form.RadioSet\n                    name=\"cohort\"\n                    className=\"d-flex flex-column list-group list-group-flush w-100\"\n                    value={selectedFilters.cohort}\n                    onChange={onFilterChange}\n                  >\n                    <ActionItem\n                      id=\"all-groups\"\n                      label=\"All groups\"\n                      value=\"\"\n                      selected={selectedFilters.cohort}\n                    />\n                    {cohorts.map(cohort => (\n                      <ActionItem\n                        key={toString(cohort.id)}\n                        id={toString(cohort.id)}\n                        label={capitalize(cohort.name)}\n                        value={toString(cohort.id)}\n                        selected={selectedFilters.cohort}\n                      />\n                    ))}\n                  </Form.RadioSet>\n                </div>\n              )}\n            </>\n          )}\n        </Form>\n      </Collapsible.Body>\n    </Collapsible.Advanced>\n  );\n};\n\nFilterBar.propTypes = {\n  intl: intlShape.isRequired,\n  filters: PropTypes.array.isRequired,\n  selectedFilters: PropTypes.object.isRequired,\n  onFilterChange: PropTypes.func.isRequired,\n  showCohortsFilter: PropTypes.bool,\n};\n\nFilterBar.defaultProps = {\n  showCohortsFilter: false,\n};\n\nexport default injectIntl(FilterBar);\n","import React, { useEffect } from 'react';\n\nimport { isEmpty } from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { sendTrackEvent } from '@edx/frontend-platform/analytics';\n\nimport FilterBar from '../../../components/FilterBar';\nimport { selectCourseCohorts } from '../../cohorts/data/selectors';\nimport { fetchCourseCohorts } from '../../cohorts/data/thunks';\nimport { selectUserHasModerationPrivileges, selectUserIsGroupTa } from '../../data/selectors';\nimport { setPostFilter } from '../data/slices';\n\nconst LearnerPostFilterBar = () => {\n  const dispatch = useDispatch();\n  const { courseId } = useParams();\n  const userHasModerationPrivileges = useSelector(selectUserHasModerationPrivileges);\n  const userIsGroupTa = useSelector(selectUserIsGroupTa);\n  const cohorts = useSelector(selectCourseCohorts);\n  const postFilter = useSelector(state => state.learners.postFilter);\n\n  const filtersToShow = [\n    {\n      name: 'postType',\n      filters: ['type-all', 'type-discussions', 'type-questions'],\n    },\n    {\n      name: 'status',\n      filters: ['status-any', 'status-unread', 'status-unanswered', 'status-unresponded'],\n    },\n    {\n      name: 'orderBy',\n      filters: ['sort-activity', 'sort-comments', 'sort-votes'],\n    },\n  ];\n\n  if (userHasModerationPrivileges || userIsGroupTa) {\n    filtersToShow[1].filters.splice(2, 0, 'status-reported');\n  }\n\n  const handleFilterChange = (event) => {\n    const { name, value } = event.currentTarget;\n    const filterContentEventProperties = {\n      statusFilter: postFilter.status,\n      threadTypeFilter: postFilter.postType,\n      sortFilter: postFilter.orderBy,\n      cohortFilter: postFilter.cohort,\n      triggeredBy: name,\n    };\n    if (name === 'postType') {\n      if (postFilter.postType !== value) {\n        dispatch(setPostFilter({\n          ...postFilter,\n          postType: value,\n        }));\n        filterContentEventProperties.threadTypeFilter = value;\n      }\n    } else if (name === 'status') {\n      if (postFilter.status !== value) {\n        dispatch(setPostFilter({\n          ...postFilter,\n          status: value,\n        }));\n        filterContentEventProperties.statusFilter = value;\n      }\n    } else if (name === 'orderBy') {\n      if (postFilter.orderBy !== value) {\n        dispatch(setPostFilter({\n          ...postFilter,\n          orderBy: value,\n        }));\n        filterContentEventProperties.sortFilter = value;\n      }\n    } else if (name === 'cohort') {\n      if (postFilter.cohort !== value) {\n        dispatch(setPostFilter({\n          ...postFilter,\n          cohort: value,\n        }));\n        filterContentEventProperties.cohortFilter = value;\n      }\n    }\n    sendTrackEvent('edx.forum.filter.content', filterContentEventProperties);\n  };\n\n  useEffect(() => {\n    if (userHasModerationPrivileges && isEmpty(cohorts)) {\n      dispatch(fetchCourseCohorts(courseId));\n    }\n  }, [courseId, userHasModerationPrivileges]);\n\n  return (\n    <FilterBar\n      filters={filtersToShow}\n      selectedFilters={postFilter}\n      onFilterChange={handleFilterChange}\n      showCohortsFilter={userHasModerationPrivileges || userIsGroupTa}\n    />\n  );\n};\n\nexport default LearnerPostFilterBar;\n","import React, {\n  useCallback, useContext, useEffect, useMemo,\n} from 'react';\n\nimport capitalize from 'lodash/capitalize';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport {\n  Button, Icon, IconButton, Spinner,\n} from '@edx/paragon';\nimport { ArrowBack } from '@edx/paragon/icons';\n\nimport {\n  RequestStatus,\n  Routes,\n} from '../../data/constants';\nimport { DiscussionContext } from '../common/context';\nimport { selectUserHasModerationPrivileges, selectUserIsStaff } from '../data/selectors';\nimport { usePostList } from '../posts/data/hooks';\nimport {\n  selectAllThreadsIds,\n  selectThreadNextPage,\n  threadsLoadingStatus,\n} from '../posts/data/selectors';\nimport { clearPostsPages } from '../posts/data/slices';\nimport NoResults from '../posts/NoResults';\nimport { PostLink } from '../posts/post';\nimport { discussionsPath } from '../utils';\nimport { fetchUserPosts } from './data/thunks';\nimport LearnerPostFilterBar from './learner-post-filter-bar/LearnerPostFilterBar';\nimport messages from './messages';\n\nconst LearnerPostsView = () => {\n  const intl = useIntl();\n  const location = useLocation();\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const postsIds = useSelector(selectAllThreadsIds);\n  const loadingStatus = useSelector(threadsLoadingStatus());\n  const postFilter = useSelector(state => state.learners.postFilter);\n  const { courseId, learnerUsername: username } = useContext(DiscussionContext);\n  const nextPage = useSelector(selectThreadNextPage());\n  const userHasModerationPrivileges = useSelector(selectUserHasModerationPrivileges);\n  const userIsStaff = useSelector(selectUserIsStaff);\n  const sortedPostsIds = usePostList(postsIds);\n\n  const loadMorePosts = useCallback((pageNum = undefined) => {\n    const params = {\n      author: username,\n      page: pageNum,\n      filters: postFilter,\n      orderBy: postFilter.orderBy,\n      countFlagged: (userHasModerationPrivileges || userIsStaff) || undefined,\n    };\n\n    dispatch(fetchUserPosts(courseId, params));\n  }, [courseId, postFilter, username, userHasModerationPrivileges, userIsStaff]);\n\n  const postInstances = useMemo(() => (\n    sortedPostsIds?.map((postId, idx) => (\n      <PostLink\n        postId={postId}\n        idx={idx}\n        key={postId}\n        showDivider={(sortedPostsIds.length - 1) !== idx}\n      />\n    ))\n  ), [sortedPostsIds]);\n\n  useEffect(() => {\n    dispatch(clearPostsPages());\n    loadMorePosts();\n  }, [courseId, postFilter, username]);\n\n  return (\n    <div className=\"discussion-posts d-flex flex-column\">\n      <div className=\"d-flex align-items-center justify-content-between px-2.5\">\n        <IconButton\n          src={ArrowBack}\n          iconAs={Icon}\n          style={{ padding: '18px' }}\n          size=\"inline\"\n          onClick={() => history.push(discussionsPath(Routes.LEARNERS.PATH, { courseId })(location))}\n          alt={intl.formatMessage(messages.back)}\n        />\n        <div className=\"text-primary-500 font-style font-weight-bold py-2.5\">\n          {intl.formatMessage(messages.activityForLearner, { username: capitalize(username) })}\n        </div>\n        <div style={{ padding: '18px' }} />\n      </div>\n      <div className=\"bg-light-400 border border-light-300\" />\n      <LearnerPostFilterBar />\n      <div className=\"border-bottom border-light-400\" />\n      <div className=\"list-group list-group-flush\">\n        {postInstances}\n        {loadingStatus !== RequestStatus.IN_PROGRESS && sortedPostsIds?.length === 0 && <NoResults />}\n        {loadingStatus === RequestStatus.IN_PROGRESS ? (\n          <div className=\"d-flex justify-content-center p-4\">\n            <Spinner animation=\"border\" variant=\"primary\" size=\"lg\" />\n          </div>\n        ) : (\n          nextPage && loadingStatus === RequestStatus.SUCCESSFUL && (\n            <Button onClick={() => loadMorePosts(nextPage)} variant=\"primary\" size=\"md\" data-testid=\"load-more-posts\">\n              {intl.formatMessage(messages.loadMore)}\n            </Button>\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default LearnerPostsView;\n"],"names":["defineMessages","reported","id","defaultMessage","previouslyReported","lastActive","loadMore","description","back","activityForLearner","mostActivity","reportedActivity","recentActivity","sortFilterStatus","allActivity","posts","FilterBar","_ref","intl","filters","selectedFilters","onFilterChange","showCohortsFilter","isOpen","setOpen","useState","cohorts","useSelector","selectCourseCohorts","status","state","selectedCohort","useMemo","find","cohort","toString","allFilters","label","formatMessage","messages","value","ThreadType","PostsStatusFilter","ThreadOrdering","_jsxs","Collapsible","open","onToggle","className","children","_jsx","own","type","postType","sort","orderBy","cohortType","name","capitalize","whenClosed","Icon","src","Tune","whenOpen","Form","map","onChange","filterName","element","obj","ActionItem","selected","_Fragment","RequestStatus","Spinner","animation","variant","size","propTypes","intlShape","PropTypes","defaultProps","injectIntl","LearnerPostFilterBar","dispatch","useDispatch","courseId","useParams","userHasModerationPrivileges","selectUserHasModerationPrivileges","userIsGroupTa","selectUserIsGroupTa","postFilter","learners","filtersToShow","splice","useEffect","isEmpty","fetchCourseCohorts","event","currentTarget","filterContentEventProperties","statusFilter","threadTypeFilter","sortFilter","cohortFilter","triggeredBy","setPostFilter","_objectSpread","sendTrackEvent","LearnerPostsView","useIntl","location","useLocation","history","useHistory","postsIds","selectAllThreadsIds","loadingStatus","threadsLoadingStatus","learnerUsername","username","useContext","DiscussionContext","nextPage","selectThreadNextPage","userIsStaff","selectUserIsStaff","sortedPostsIds","usePostList","loadMorePosts","useCallback","params","author","page","arguments","length","undefined","countFlagged","fetchUserPosts","postInstances","postId","idx","PostLink","showDivider","clearPostsPages","IconButton","ArrowBack","iconAs","style","padding","onClick","push","discussionsPath","Routes","alt","NoResults","Button"],"sourceRoot":""}