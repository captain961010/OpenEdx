{"version":3,"file":"858.410aafa4f5e0adacc9d6.js","mappings":"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","sources":["webpack://@edx/frontend-app-discussions/./src/discussions/in-context-topics/topic/Topic.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/in-context-topics/topic/ArchivedBaseGroup.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/in-context-topics/topic/SectionBaseGroup.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/in-context-topics/TopicPostsView.jsx"],"sourcesContent":["/* eslint-disable react/prop-types */\n/* eslint-disable no-unused-vars, react/forbid-prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Icon, OverlayTrigger, Tooltip } from '@edx/paragon';\nimport { HelpOutline, PostOutline, Report } from '@edx/paragon/icons';\n\nimport TopicStats from '../../../components/TopicStats';\nimport { Routes } from '../../../data/constants';\nimport { selectUserHasModerationPrivileges, selectUserIsGroupTa } from '../../data/selectors';\nimport { discussionsPath } from '../../utils';\nimport messages from '../messages';\n\nconst Topic = ({\n  topic,\n  showDivider,\n  index,\n}) => {\n  const intl = useIntl();\n  const { courseId } = useParams();\n  const userHasModerationPrivileges = useSelector(selectUserHasModerationPrivileges);\n  const userIsGroupTa = useSelector(selectUserIsGroupTa);\n  const { inactiveFlags, activeFlags } = topic;\n  const canSeeReportedStats = (activeFlags || inactiveFlags) && (userHasModerationPrivileges || userIsGroupTa);\n  const isSelected = (id) => window.location.pathname.includes(id);\n  const topicUrl = discussionsPath(Routes.TOPICS.TOPIC, {\n    courseId,\n    topicId: topic.id,\n  });\n\n  return (\n    <>\n      <Link\n        className={classNames('discussion-topic p-0 text-decoration-none text-primary-500', {\n          'border-light-400 border-bottom': showDivider,\n        })}\n        data-topic-id={topic.id}\n        to={topicUrl}\n        onClick={() => isSelected(topic.id)}\n        aria-current={isSelected(topic.id) ? 'page' : undefined}\n        role=\"option\"\n        tabIndex={(isSelected(topic.id) || index === 0) ? 0 : -1}\n      >\n        <div className=\"d-flex flex-row pt-2.5 pb-2 px-4\">\n          <div className=\"d-flex flex-column flex-fill\" style={{ minWidth: 0 }}>\n            <div className=\"d-flex flex-column justify-content-start mw-100 flex-fill\">\n              <div className=\"topic-name text-truncate\">\n                {topic?.name || topic?.displayName || intl.formatMessage(messages.unnamedTopicSubCategories)}\n              </div>\n            </div>\n            <TopicStats threadCounts={topic?.threadCounts} />\n          </div>\n        </div>\n      </Link>\n      {!showDivider && (\n        <>\n          <div className=\"divider border-top border-light-500\" />\n          <div className=\"divider pt-1 bg-light-300\" />\n        </>\n      )}\n    </>\n  );\n};\n\nexport const topicShape = PropTypes.shape({\n  id: PropTypes.string,\n  usage_key: PropTypes.string,\n  name: PropTypes.string,\n  thread_counts: PropTypes.shape({\n    discussions: PropTypes.number,\n    questions: PropTypes.number,\n  }),\n  enabled_in_context: PropTypes.bool,\n  flags: PropTypes.number,\n});\n\nTopic.propTypes = {\n  topic: topicShape,\n  showDivider: PropTypes.bool,\n  index: PropTypes.number,\n};\n\nTopic.defaultProps = {\n  showDivider: true,\n  index: -1,\n  topic: {\n    usage_key: '',\n  },\n};\n\nexport default React.memo(Topic);\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport messages from '../messages';\nimport Topic, { topicShape } from './Topic';\n\nconst ArchivedBaseGroup = ({\n  archivedTopics,\n  showDivider,\n}) => {\n  const intl = useIntl();\n\n  const renderArchivedTopics = useMemo(() => (\n    archivedTopics?.map((topic, index) => (\n      <Topic\n        key={topic.id}\n        topic={topic}\n        showDivider={(archivedTopics.length - 1) !== index}\n      />\n    ))\n  ), [archivedTopics]);\n\n  return (\n    <>\n      {showDivider && (\n        <>\n          <div className=\"divider border-top border-light-500\" />\n          <div className=\"divider pt-1 bg-light-300\" />\n        </>\n      )}\n      <div\n        className=\"discussion-topic-group d-flex flex-column text-primary-500\"\n        data-testid=\"archived-group\"\n      >\n        <div className=\"pt-3 px-4 font-weight-bold\">{intl.formatMessage(messages.archivedTopics)}</div>\n        {renderArchivedTopics}\n      </div>\n    </>\n  );\n};\n\nArchivedBaseGroup.propTypes = {\n  archivedTopics: PropTypes.arrayOf(topicShape).isRequired,\n  showDivider: PropTypes.bool,\n};\n\nArchivedBaseGroup.defaultProps = {\n  showDivider: false,\n};\nexport default React.memo(ArchivedBaseGroup);\n","import React, { useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport { useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport TopicStats from '../../../components/TopicStats';\nimport { Routes } from '../../../data/constants';\nimport { discussionsPath } from '../../utils';\nimport messages from '../messages';\nimport { topicShape } from './Topic';\n\nconst SectionBaseGroup = ({\n  section,\n  sectionTitle,\n  sectionId,\n  showDivider,\n}) => {\n  const intl = useIntl();\n  const { courseId } = useParams();\n\n  const isSelected = useCallback((id) => (\n    window.location.pathname.includes(id)\n  ), []);\n\n  const sectionUrl = useCallback((id) => discussionsPath(Routes.TOPICS.CATEGORY, {\n    courseId,\n    category: id,\n  }), [courseId]);\n\n  const renderSection = useMemo(() => (\n    section?.map((subsection, index) => (\n      <Link\n        className={classNames('subsection p-0 text-decoration-none text-primary-500', {\n          'border-bottom border-light-400': (section.length - 1 !== index),\n        })}\n        key={subsection.id}\n        role=\"option\"\n        data-subsection-id={subsection.id}\n        data-testid=\"subsection-group\"\n        to={sectionUrl(subsection.id)}\n        onClick={() => isSelected(subsection.id)}\n        aria-current={isSelected(section.id) ? 'page' : undefined}\n        tabIndex={(isSelected(subsection.id) || index === 0) ? 0 : -1}\n      >\n        <div className=\"d-flex flex-row pt-2.5 pb-2 px-4\">\n          <div className=\"d-flex flex-column flex-fill\" style={{ minWidth: 0 }}>\n            <div className=\"d-flex flex-column justify-content-start mw-100 flex-fill\">\n              <div className=\"topic-name text-truncate\">\n                {subsection?.displayName || intl.formatMessage(messages.unnamedSubsection)}\n              </div>\n              <TopicStats threadCounts={subsection?.threadCounts} />\n            </div>\n          </div>\n        </div>\n      </Link>\n    ))\n  ), [section, sectionUrl, isSelected]);\n\n  return (\n    <div\n      className=\"discussion-topic-group d-flex flex-column text-primary-500\"\n      data-section-id={sectionId}\n      data-testid=\"section-group\"\n    >\n      <div className=\"pt-3 px-4 font-weight-bold\">\n        {sectionTitle || intl.formatMessage(messages.unnamedSection)}\n      </div>\n      {renderSection}\n      {showDivider && (\n        <>\n          <div className=\"divider border-top border-light-500\" />\n          <div className=\"divider pt-1 bg-light-300\" />\n        </>\n      )}\n    </div>\n  );\n};\n\nSectionBaseGroup.propTypes = {\n  section: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    blockId: PropTypes.string,\n    lmsWebUrl: PropTypes.string,\n    legacyWebUrl: PropTypes.string,\n    studentViewUrl: PropTypes.string,\n    type: PropTypes.string,\n    displayName: PropTypes.string,\n    children: PropTypes.arrayOf(topicShape),\n  })).isRequired,\n  sectionTitle: PropTypes.string.isRequired,\n  sectionId: PropTypes.string.isRequired,\n  showDivider: PropTypes.bool.isRequired,\n};\n\nexport default React.memo(SectionBaseGroup);\n","import React, {\n  useCallback, useContext, useEffect, useMemo,\n} from 'react';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Spinner } from '@edx/paragon';\n\nimport { RequestStatus, Routes } from '../../data/constants';\nimport { DiscussionContext } from '../common/context';\nimport { selectDiscussionProvider } from '../data/selectors';\nimport { selectTopicThreadsIds } from '../posts/data/selectors';\nimport PostsList from '../posts/PostsList';\nimport { discussionsPath, handleKeyDown } from '../utils';\nimport {\n  selectArchivedTopic, selectLoadingStatus, selectNonCoursewareTopics,\n  selectSubsection, selectSubsectionUnits, selectUnits,\n} from './data/selectors';\nimport { fetchCourseTopicsV3 } from './data/thunks';\nimport { BackButton, NoResults } from './components';\nimport messages from './messages';\nimport { Topic } from './topic';\n\nconst TopicPostsView = () => {\n  const intl = useIntl();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { courseId, topicId, category } = useContext(DiscussionContext);\n  const provider = useSelector(selectDiscussionProvider);\n  const topicsStatus = useSelector(selectLoadingStatus);\n  const postsIds = useSelector(selectTopicThreadsIds([topicId]));\n  const selectedSubsectionUnits = useSelector(selectSubsectionUnits(category));\n  const selectedSubsection = useSelector(selectSubsection(category));\n  const units = useSelector(selectUnits);\n  const nonCoursewareTopics = useSelector(selectNonCoursewareTopics);\n  const selectedArchivedTopic = useSelector(selectArchivedTopic(topicId));\n  const topicsInProgress = topicsStatus === RequestStatus.IN_PROGRESS;\n\n  const selectedUnit = useMemo(() => (\n    units?.find(unit => unit.id === topicId)\n  ), [units, topicId]);\n\n  const selectedNonCoursewareTopic = useMemo(() => (\n    nonCoursewareTopics?.find(topic => topic.id === topicId)\n  ), [nonCoursewareTopics, topicId]);\n\n  const backButtonPath = useCallback(() => {\n    const path = selectedUnit ? Routes.TOPICS.CATEGORY : Routes.TOPICS.ALL;\n    const params = selectedUnit ? { courseId, category: selectedUnit?.parentId } : { courseId };\n    return discussionsPath(path, params)(location);\n  }, [selectedUnit]);\n\n  useEffect(() => {\n    if (provider && topicsStatus === RequestStatus.IDLE) {\n      dispatch(fetchCourseTopicsV3(courseId));\n    }\n  }, [provider]);\n\n  return (\n    <div className=\"discussion-posts d-flex flex-column h-100\">\n      {topicId ? (\n        <BackButton\n          loading={topicsInProgress}\n          path={backButtonPath()}\n          title={selectedUnit?.name || selectedNonCoursewareTopic?.name || selectedArchivedTopic?.name\n            || intl.formatMessage(messages.unnamedTopic)}\n        />\n      ) : (\n        <BackButton\n          loading={topicsInProgress}\n          path={discussionsPath(Routes.TOPICS.ALL, { courseId })(location)}\n          title={selectedSubsection?.displayName || intl.formatMessage(messages.unnamedSubsection)}\n        />\n      )}\n      <div className=\"border-bottom border-light-400\" />\n      <div className=\"list-group list-group-flush flex-fill\" role=\"list\" onKeyDown={e => handleKeyDown(e)}>\n        {topicId ? (\n          <PostsList\n            postsIds={postsIds}\n            topicsIds={[topicId]}\n            parentIsLoading={topicsInProgress}\n          />\n        ) : (\n          selectedSubsectionUnits?.map((unit) => (\n            <Topic\n              key={unit.id}\n              topic={unit}\n            />\n          ))\n        )}\n        {(category && selectedSubsectionUnits.length === 0 && topicsStatus === RequestStatus.SUCCESSFUL) && (\n          <NoResults />\n        )}\n        {(category && topicsInProgress) && (\n          <div className=\"d-flex justify-content-center p-4\">\n            <Spinner animation=\"border\" variant=\"primary\" size=\"lg\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(TopicPostsView);\n"],"names":["Topic","_ref","topic","showDivider","index","intl","useIntl","courseId","useParams","inactiveFlags","activeFlags","useSelector","selectUserHasModerationPrivileges","selectUserIsGroupTa","isSelected","id","window","location","pathname","includes","topicUrl","discussionsPath","Routes","topicId","_jsxs","_Fragment","children","_jsx","Link","className","classNames","to","onClick","undefined","role","tabIndex","style","minWidth","name","displayName","formatMessage","messages","TopicStats","threadCounts","topicShape","PropTypes","usage_key","thread_counts","discussions","questions","enabled_in_context","flags","propTypes","defaultProps","React","ArchivedBaseGroup","archivedTopics","renderArchivedTopics","useMemo","map","length","isRequired","SectionBaseGroup","section","sectionTitle","sectionId","useCallback","sectionUrl","category","renderSection","subsection","blockId","lmsWebUrl","legacyWebUrl","studentViewUrl","type","TopicPostsView","useLocation","dispatch","useDispatch","useContext","DiscussionContext","provider","selectDiscussionProvider","topicsStatus","selectLoadingStatus","postsIds","selectTopicThreadsIds","selectedSubsectionUnits","selectSubsectionUnits","selectedSubsection","selectSubsection","units","selectUnits","nonCoursewareTopics","selectNonCoursewareTopics","selectedArchivedTopic","selectArchivedTopic","topicsInProgress","RequestStatus","selectedUnit","find","unit","selectedNonCoursewareTopic","backButtonPath","path","params","parentId","useEffect","fetchCourseTopicsV3","BackButton","loading","title","onKeyDown","e","handleKeyDown","PostsList","topicsIds","parentIsLoading","NoResults","Spinner","animation","variant","size"],"sourceRoot":""}