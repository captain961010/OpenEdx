{"version":3,"file":"843.58dc265152a484a13d4e.js","mappings":"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","sources":["webpack://@edx/frontend-app-discussions/./src/components/NavigationBar/data/api.js","webpack://@edx/frontend-app-discussions/./src/components/NavigationBar/tabs/useIndexOfLastVisibleChild.js","webpack://@edx/frontend-app-discussions/./src/components/NavigationBar/tabs/Tabs.jsx","webpack://@edx/frontend-app-discussions/./src/components/NavigationBar/messages.js","webpack://@edx/frontend-app-discussions/./src/components/NavigationBar/CourseTabsNavigation.jsx","webpack://@edx/frontend-app-discussions/./src/components/NavigationBar/data/thunks.js"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\nimport { camelCaseObject } from '@edx/frontend-platform';\nimport { getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';\n\nimport { getApiBaseUrl } from '../../../data/constants';\n\nexport const getCourseMetadataApiUrl = (courseId) => `${getApiBaseUrl()}/api/course_home/course_metadata/${courseId}`;\n\nfunction normalizeCourseHomeCourseMetadata(metadata, rootSlug) {\n  const data = camelCaseObject(metadata);\n  return {\n    ...data,\n    tabs: data.tabs.map(tab => ({\n      // The API uses \"courseware\" as a slug for both courseware and the outline tab.\n      // If needed, we switch it to \"outline\" here for\n      // use within the MFE to differentiate between course home and courseware.\n      slug: tab.tabId === 'courseware' ? rootSlug : tab.tabId,\n      title: tab.title,\n      url: tab.url,\n    })),\n    isMasquerading: data.originalUserIsStaff && !data.isStaff,\n  };\n}\n\nexport async function getCourseHomeCourseMetadata(courseId, rootSlug) {\n  const url = getCourseMetadataApiUrl(courseId);\n  // don't know the context of adding timezone in url. hence omitting it\n  // url = appendBrowserTimezoneToUrl(url);\n  const { data } = await getAuthenticatedHttpClient().get(url);\n  return normalizeCourseHomeCourseMetadata(data, rootSlug);\n}\n","import { useLayoutEffect, useRef, useState } from 'react';\n\nimport { useWindowSize } from '@edx/paragon';\n\nconst invisibleStyle = {\n  position: 'absolute',\n  left: 0,\n  pointerEvents: 'none',\n  visibility: 'hidden',\n};\n\n/**\n * This hook will find the index of the last child of a containing element\n * that fits within its bounding rectangle. This is done by summing the widths\n * of the children until they exceed the width of the container.\n *\n * The hook returns an array containing:\n * [indexOfLastVisibleChild, containerElementRef, invisibleStyle, overflowElementRef]\n *\n * indexOfLastVisibleChild - the index of the last visible child\n * containerElementRef - a ref to be added to the containing html node\n * invisibleStyle - a set of styles to be applied to child of the containing node\n *    if it needs to be hidden. These styles remove the element visually, from\n *    screen readers, and from normal layout flow. But, importantly, these styles\n *    preserve the width of the element, so that future width calculations will\n *    still be accurate.\n * overflowElementRef - a ref to be added to an html node inside the container\n *    that is likely to be used to contain a \"More\" type dropdown or other\n *    mechanism to reveal hidden children. The width of this element is always\n *    included when determining which children will fit or not. Usage of this ref\n *    is optional.\n */\nexport default function useIndexOfLastVisibleChild() {\n  const containerElementRef = useRef(null);\n  const overflowElementRef = useRef(null);\n  const containingRectRef = useRef({});\n  const [indexOfLastVisibleChild, setIndexOfLastVisibleChild] = useState(-1);\n  const windowSize = useWindowSize();\n\n  useLayoutEffect(() => {\n    const containingRect = containerElementRef.current.getBoundingClientRect();\n\n    // No-op if the width is unchanged.\n    // (Assumes tabs themselves don't change count or width).\n    if (!containingRect.width === containingRectRef.current.width) {\n      return;\n    }\n    // Update for future comparison\n    containingRectRef.current = containingRect;\n\n    // Get array of child nodes from NodeList form\n    const childNodesArr = Array.prototype.slice.call(containerElementRef.current.children);\n    const { nextIndexOfLastVisibleChild } = childNodesArr\n      // filter out the overflow element\n      .filter(childNode => childNode !== overflowElementRef.current)\n      // sum the widths to find the last visible element's index\n      .reduce((acc, childNode, index) => {\n        // use floor to prevent rounding errors\n        acc.sumWidth += Math.floor(childNode.getBoundingClientRect().width);\n        if (acc.sumWidth <= containingRect.width) {\n          acc.nextIndexOfLastVisibleChild = index;\n        }\n        return acc;\n      }, {\n        // Include the overflow element's width to begin with. Doing this means\n        // sometimes we'll show a dropdown with one item in it when it would fit,\n        // but allowing this case dramatically simplifies the calculations we need\n        // to do above.\n        sumWidth: overflowElementRef.current ? overflowElementRef.current.getBoundingClientRect().width : 0,\n        nextIndexOfLastVisibleChild: -1,\n      });\n\n    setIndexOfLastVisibleChild(nextIndexOfLastVisibleChild);\n  }, [windowSize, containerElementRef.current]);\n\n  return [indexOfLastVisibleChild, containerElementRef, invisibleStyle, overflowElementRef];\n}\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\n\nimport { FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Dropdown } from '@edx/paragon';\n\nimport useIndexOfLastVisibleChild from './useIndexOfLastVisibleChild';\n\nconst Tabs = ({ children, className, ...attrs }) => {\n  const [\n    indexOfLastVisibleChild,\n    containerElementRef,\n    invisibleStyle,\n    overflowElementRef,\n  ] = useIndexOfLastVisibleChild();\n\n  const tabChildren = useMemo(() => {\n    const childrenArray = React.Children.toArray(children);\n    const indexOfOverflowStart = indexOfLastVisibleChild + 1;\n\n    // All tabs will be rendered. Those that would overflow are set to invisible.\n    const wrappedChildren = childrenArray.map((child, index) => React.cloneElement(child, {\n      style: index > indexOfLastVisibleChild ? invisibleStyle : null,\n    }));\n\n    // Build the list of items to put in the overflow menu\n    const overflowChildren = childrenArray.slice(indexOfOverflowStart)\n      .map(overflowChild => React.cloneElement(overflowChild, { className: 'dropdown-item' }));\n\n    // Insert the overflow menu at the cut off index (even if it will be hidden\n    // it so it can be part of measurements)\n    wrappedChildren.splice(\n      indexOfOverflowStart,\n      0, (\n        <div\n          className=\"nav-item flex-shrink-0\"\n          style={indexOfOverflowStart >= React.Children.count(children) ? invisibleStyle : null}\n          ref={overflowElementRef}\n          key=\"overflow\"\n        >\n          <Dropdown className=\"h-100\">\n            <Dropdown.Toggle variant=\"link\" className=\"nav-link h-100\" id=\"learn.course.tabs.navigation.overflow.menu\">\n              <FormattedMessage\n                id=\"learn.course.tabs.navigation.overflow.menu\"\n                description=\"The title of the overflow menu for course tabs\"\n                defaultMessage=\"More...\"\n              />\n            </Dropdown.Toggle>\n            <Dropdown.Menu className=\"dropdown-menu-right\">{overflowChildren}</Dropdown.Menu>\n          </Dropdown>\n        </div>\n      ),\n    );\n    return wrappedChildren;\n  }, [children, indexOfLastVisibleChild]);\n\n  return (\n    <nav\n      {...attrs}\n      className={classNames('nav flex-nowrap', className)}\n      ref={containerElementRef}\n    >\n      {tabChildren}\n    </nav>\n  );\n};\n\nTabs.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n};\n\nTabs.defaultProps = {\n  children: null,\n  className: undefined,\n};\n\nexport default Tabs;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  courseMaterial: {\n    id: 'navigation.course.tabs.label',\n    defaultMessage: 'Course Material',\n    description: 'The accessible label for course tabs navigation',\n  },\n});\n\nexport default messages;\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\n\nimport { fetchTab } from './data/thunks';\nimport Tabs from './tabs/Tabs';\nimport messages from './messages';\n\nimport './navBar.scss';\n\nconst CourseTabsNavigation = ({\n  activeTab, className, courseId, rootSlug,\n}) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const tabs = useSelector(state => state.courseTabs.tabs);\n\n  useEffect(() => {\n    dispatch(fetchTab(courseId, rootSlug));\n  }, [courseId]);\n\n  return (\n    <div id=\"courseTabsNavigation\" className={classNames('course-tabs-navigation px-4', className)}>\n      {!!tabs.length && (\n        <Tabs\n          className=\"nav-underline-tabs\"\n          aria-label={intl.formatMessage(messages.courseMaterial)}\n        >\n          {tabs.map(({ url, title, slug }) => (\n            <a\n              key={slug}\n              className={classNames('nav-item flex-shrink-0 nav-link', { active: slug === activeTab })}\n              href={url}\n            >\n              {title}\n            </a>\n          ))}\n        </Tabs>\n      )}\n    </div>\n  );\n};\n\nCourseTabsNavigation.propTypes = {\n  activeTab: PropTypes.string,\n  className: PropTypes.string,\n  rootSlug: PropTypes.string,\n  courseId: PropTypes.string.isRequired,\n};\n\nCourseTabsNavigation.defaultProps = {\n  activeTab: undefined,\n  className: null,\n  rootSlug: 'outline',\n};\n\nexport default React.memo(CourseTabsNavigation);\n","/* eslint-disable import/prefer-default-export, no-unused-expressions */\nimport { logError } from '@edx/frontend-platform/logging';\n\nimport { getHttpErrorStatus } from '../../../discussions/utils';\nimport { getCourseHomeCourseMetadata } from './api';\nimport {\n  fetchTabDenied,\n  fetchTabFailure,\n  fetchTabRequest,\n  fetchTabSuccess,\n} from './slice';\n\nexport function fetchTab(courseId, rootSlug) {\n  return async (dispatch) => {\n    dispatch(fetchTabRequest({ courseId }));\n    try {\n      const courseHomeCourseMetadata = await getCourseHomeCourseMetadata(courseId, rootSlug);\n      if (!courseHomeCourseMetadata.courseAccess.hasAccess) {\n        dispatch(fetchTabDenied({ courseId }));\n      } else {\n        dispatch(fetchTabSuccess({\n          courseId,\n          tabs: courseHomeCourseMetadata.tabs,\n          org: courseHomeCourseMetadata.org,\n          courseNumber: courseHomeCourseMetadata.number,\n          courseTitle: courseHomeCourseMetadata.title,\n        }));\n      }\n    } catch (e) {\n      if (getHttpErrorStatus(e) === 403) {\n        dispatch(fetchTabDenied({ courseId }));\n      } else {\n        dispatch(fetchTabFailure({ courseId }));\n      }\n      logError(e);\n    }\n  };\n}\n"],"names":["async","getCourseHomeCourseMetadata","courseId","rootSlug","url","getApiBaseUrl","getCourseMetadataApiUrl","data","getAuthenticatedHttpClient","get","metadata","camelCaseObject","_objectSpread","tabs","map","tab","slug","tabId","title","isMasquerading","originalUserIsStaff","isStaff","normalizeCourseHomeCourseMetadata","invisibleStyle","position","left","pointerEvents","visibility","useIndexOfLastVisibleChild","containerElementRef","useRef","overflowElementRef","containingRectRef","indexOfLastVisibleChild","setIndexOfLastVisibleChild","useState","windowSize","useWindowSize","useLayoutEffect","containingRect","current","getBoundingClientRect","width","childNodesArr","Array","prototype","slice","call","children","nextIndexOfLastVisibleChild","filter","childNode","reduce","acc","index","sumWidth","Math","floor","Tabs","_ref","className","attrs","_objectWithoutProperties","_excluded","tabChildren","useMemo","childrenArray","React","indexOfOverflowStart","wrappedChildren","child","style","overflowChildren","overflowChild","splice","_jsx","ref","_jsxs","Dropdown","variant","id","FormattedMessage","description","defaultMessage","classNames","propTypes","PropTypes","defaultProps","undefined","defineMessages","courseMaterial","CourseTabsNavigation","activeTab","dispatch","useDispatch","intl","useIntl","useSelector","state","courseTabs","useEffect","fetchTabRequest","courseHomeCourseMetadata","courseAccess","hasAccess","fetchTabSuccess","org","courseNumber","number","courseTitle","fetchTabDenied","e","getHttpErrorStatus","fetchTabFailure","logError","fetchTab","length","formatMessage","messages","_ref2","active","href"],"sourceRoot":""}