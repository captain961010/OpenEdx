{"version":3,"file":"223.40fefa3efda7ed9d1ab6.js","mappings":"0wCAOA,SAASA,EAAIC,GACX,OAAOC,EAAAA,cAACC,EAAAA,EAAYF,EACtB,CACA,SAASG,EAAQH,GACf,OAAOC,EAAAA,cAACG,EAAAA,EAAgBJ,EAC1B,CACA,SAASK,EAAQL,GACf,OAAOC,EAAAA,cAACK,EAAAA,EAAgBN,EAC1B,CACA,SAASO,EAAYP,GACnB,OAAOC,EAAAA,cAACO,EAAAA,EAAoBR,EAC9B,CAQAD,EAAIU,UAAY,CAEdC,mBAAoBC,IAAAA,OAEpBC,iBAAkBD,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAEzDE,UAAWF,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAElDG,GAAIH,IAAAA,YAEJI,KAAMJ,IAAAA,KAENK,QAASL,IAAAA,KAKTM,OAAQN,IAAAA,KAERO,UAAWP,IAAAA,KAEXQ,SAAUR,IAAAA,KAKVS,KAAMT,IAAAA,OAENU,QAASV,IAAAA,MAAgB,CAAC,OAAQ,UAElCW,SAAUX,IAAAA,QAGZR,EAAQM,UAAY,CAElBW,KAAMT,IAAAA,OAENG,GAAIH,IAAAA,YAEJW,SAAUX,IAAAA,QAGZN,EAAQI,UAAY,CAElBU,SAAUR,IAAAA,OAEVY,OAAQZ,IAAAA,KAERG,GAAIH,IAAAA,YAEJa,SAAUb,IAAAA,KAKVc,SAAUd,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,SAEjDe,KAAMf,IAAAA,OAENS,KAAMT,IAAAA,OAENW,SAAUX,IAAAA,QAGZJ,EAAYE,UAAY,CAEtBkB,GAAIhB,IAAAA,OAAAA,WAEJiB,MAAOjB,IAAAA,KAAAA,WAEPY,OAAQZ,IAAAA,KAERa,SAAUb,IAAAA,KAEVkB,SAAUlB,IAAAA,OAEVmB,YAAanB,IAAAA,MAAgB,CAAC,SAE9BoB,QAASpB,IAAAA,KAETqB,kBAAmBrB,IAAAA,KAEnBsB,eAAgBtB,IAAAA,OAEhBW,SAAUX,IAAAA,QAGZZ,EAAImC,aAAYC,EAAA,GACXjC,EAAAA,EAAAA,cAGLK,EAAY2B,aAAYC,EAAA,GACnB3B,EAAAA,EAAAA,cAGLL,EAAQ+B,aAAYC,EAAA,GACf/B,EAAAA,EAAAA,cAGLC,EAAQ6B,aAAYC,EAAA,GACf7B,EAAAA,EAAAA,cAGLP,EAAIqC,KAAOjC,EACXJ,EAAIsC,KAAOhC,EACXE,EAAY6B,KAhHZ,SAAyBpC,GACvB,OAAOC,EAAAA,cAACO,EAAAA,EAAAA,KAAyBR,EACnC,EA+GAO,EAAY+B,QA9GZ,SAA4BtC,GAC1B,OAAOC,EAAAA,cAACO,EAAAA,EAAAA,QAA4BR,EACtC,EA+GA,U,+CCrIA,MAwBA,GAxBiBuC,E,SAAAA,IAAe,CAC9BC,SAAU,CACRb,GAAI,gDACJc,eAAgB,YAChBC,YAAa,sCAEfC,UAAW,CACThB,GAAI,iDACJc,eAAgB,SAChBC,YAAa,uCAEfE,QAAS,CACPjB,GAAI,+CACJc,eAAgB,WAChBC,YAAa,2CAEfG,SAAU,CACRlB,GAAI,gDACJc,eAAgB,WAChBC,YAAa,uC,eCPjB,MAAMI,EAAgBA,KACpB,MAAMC,GAAOC,EAAAA,EAAAA,MACP,SAAEC,IAAaC,EAAAA,EAAAA,YAAWC,EAAAA,GAC1BC,GAAkBC,EAAAA,EAAAA,MAElBC,GAAWC,EAAAA,EAAAA,UAAQ,IAAO,CAC9B,CACEC,MAAOC,EAAAA,GAAAA,MAAAA,SACPC,aAAcC,EAAAA,SAEhB,CACEH,MAAOC,EAAAA,GAAAA,MAAAA,UACPC,aAAcC,EAAAA,UAEhB,CACEH,MAAOC,EAAAA,GAAAA,OAAAA,IACPG,SAAUA,CAACC,EAAOC,IAAaC,SAAQC,EAAAA,EAAAA,IAAUF,EAASG,SAAU,CAAEC,KAAMT,EAAAA,GAAAA,OAAAA,QAC5EC,aAAcC,EAAAA,aAEd,IAWJ,OATAJ,EAAAA,EAAAA,UAAQ,KACFH,GACFE,EAASa,KAAK,CACZX,MAAOC,EAAAA,GAAAA,SAAAA,KACPC,aAAcC,EAAAA,UAElB,GACC,CAACP,KAGFgB,EAAAA,EAAAA,KAACrE,EAAG,CAACsB,QAAQ,QAAQgD,UAAU,wBAAuBC,SACnDhB,EAASiB,KAAIC,IACZJ,EAAAA,EAAAA,KAACrE,EAAAA,KAAQ,CAAAuE,UACPF,EAAAA,EAAAA,KAACrE,EAAAA,KAAQ,CAEPe,GAAIT,EAAAA,GACJoE,IAAIC,EAAAA,EAAAA,IAAgBF,EAAKhB,MAAO,CAAEP,aAClCW,SAAUY,EAAKZ,SAASU,SAEvBvB,EAAK4B,cAAcH,EAAKd,eALpBc,EAAKhB,QAFCgB,EAAKhB,UAWlB,EAIV,EAAevD,EAAAA,KAAW6C,E","sources":["webpack://@edx/frontend-app-discussions/./node_modules/@edx/paragon/src/Nav/index.jsx","webpack://@edx/frontend-app-discussions/./src/discussions/navigation/navigation-bar/messages.js","webpack://@edx/frontend-app-discussions/./src/discussions/navigation/navigation-bar/NavigationBar.jsx"],"sourcesContent":["import React from 'react';\nimport BaseNav from 'react-bootstrap/Nav';\nimport BaseNavDropdown from 'react-bootstrap/NavDropdown';\nimport BaseNavItem from 'react-bootstrap/NavItem';\nimport BaseNavLink from 'react-bootstrap/NavLink';\nimport PropTypes from 'prop-types';\n\nfunction Nav(props) {\n  return <BaseNav {...props} />;\n}\nfunction NavItem(props) {\n  return <BaseNavItem {...props} />;\n}\nfunction NavLink(props) {\n  return <BaseNavLink {...props} />;\n}\nfunction NavDropdown(props) {\n  return <BaseNavDropdown {...props} />;\n}\nfunction NavDropdownItem(props) {\n  return <BaseNavDropdown.Item {...props} />;\n}\nfunction NavDropdownDivider(props) {\n  return <BaseNavDropdown.Divider {...props} />;\n}\n\nNav.propTypes = {\n  /** Change the underlying component CSS base class name and modifier class names prefix. */\n  cardHeaderBsPrefix: PropTypes.string,\n  /** Specifies default active nav (uncontrolled usage). */\n  defaultActiveKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Marks the NavItem with a matching eventKey (or href if present) as active. */\n  activeKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** Set a custom element for this component. */\n  as: PropTypes.elementType,\n  /** Have all `NavItems` proportionately fill all available width. */\n  fill: PropTypes.bool,\n  /** Have all `NavItems` evenly fill all available width. */\n  justify: PropTypes.bool,\n  /**\n   * Apply styling an alignment for use in a `Navbar`.\n   * This prop will be set automatically when the `Nav` is used inside a `Navbar`.\n   */\n  navbar: PropTypes.bool,\n  /** Callback fired when a key is pressed. */\n  onKeyDown: PropTypes.func,\n  /** A callback fired when a NavItem is selected. */\n  onSelect: PropTypes.func,\n  /**\n   * ARIA role for the `Nav`, in the context of a `TabContainer`,\n   * the default will be set to \"tablist\", but can be overridden by the `Nav` when set explicitly.\n   */\n  role: PropTypes.string,\n  /** The visual variant of the nav items. */\n  variant: PropTypes.oneOf(['tabs', 'pills']),\n  /** Change the underlying component CSS base class name and modifier class names prefix. */\n  bsPrefix: PropTypes.string,\n};\n\nNavItem.propTypes = {\n  /** The ARIA role for the `NavItem` */\n  role: PropTypes.string,\n  /** Set a custom element for this component. */\n  as: PropTypes.elementType,\n  /** Change the underlying component CSS base class name and modifier class names prefix. */\n  bsPrefix: PropTypes.string,\n};\n\nNavLink.propTypes = {\n  /** Callback fired when the active item changes. */\n  onSelect: PropTypes.string,\n  /** The active state of the `NavItem` item. */\n  active: PropTypes.bool,\n  /** You can use a custom element type for this component. */\n  as: PropTypes.elementType,\n  /** The disabled state of the `NavItem` item. */\n  disabled: PropTypes.bool,\n  /**\n   * Uniquely identifies the `NavItem` amongst its siblings,\n   * used to determine and control the active state of the parent `Nav`\n   */\n  eventKey: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  /** The HTML href attribute for the `NavLink` */\n  href: PropTypes.string,\n  /** The ARIA role for the `NavLink`, In the context of a 'tablist' parent `Nav`, the role defaults to 'tab' */\n  role: PropTypes.string,\n  /** Change the underlying component CSS base class name and modifier class names prefix. */\n  bsPrefix: PropTypes.string,\n};\n\nNavDropdown.propTypes = {\n  /** An html id attribute for the `Toggle` button, necessary for assistive technologies, such as screen readers. */\n  id: PropTypes.string.isRequired,\n  /** The content of the non-toggle Button. */\n  title: PropTypes.node.isRequired,\n  /** Style the toggle `NavLink` as active */\n  active: PropTypes.bool,\n  /** Disables the toggle `NavLink` */\n  disabled: PropTypes.bool,\n  /** An ARIA accessible role applied to the `Menu` component. */\n  menuRole: PropTypes.string,\n  /** Menu color variant. Omitting this will use the default light color. */\n  menuVariant: PropTypes.oneOf(['dark']),\n  /** An `onClick` handler passed to the `Toggle` component */\n  onClick: PropTypes.func,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown. */\n  renderMenuOnMount: PropTypes.bool,\n  /** Which event when fired outside the component will cause it to be closed. */\n  rootCloseEvent: PropTypes.string,\n  /** Change the underlying component CSS base class name and modifier class names prefix. */\n  bsPrefix: PropTypes.string,\n};\n\nNav.defaultProps = {\n  ...BaseNav.defaultProps,\n};\n\nNavDropdown.defaultProps = {\n  ...BaseNavDropdown.defaultProps,\n};\n\nNavItem.defaultProps = {\n  ...BaseNavItem.defaultProps,\n};\n\nNavLink.defaultProps = {\n  ...BaseNavLink.defaultProps,\n};\n\nNav.Item = NavItem;\nNav.Link = NavLink;\nNavDropdown.Item = NavDropdownItem;\nNavDropdown.Divider = NavDropdownDivider;\n\nexport { NavDropdown, NavItem, NavLink };\nexport default Nav;\n","import { defineMessages } from '@edx/frontend-platform/i18n';\n\nconst messages = defineMessages({\n  allPosts: {\n    id: 'discussions.navigation.navigationBar.allPosts',\n    defaultMessage: 'All posts',\n    description: 'Option in navbar to show all posts',\n  },\n  allTopics: {\n    id: 'discussions.navigation.navigationBar.allTopics',\n    defaultMessage: 'Topics',\n    description: 'Option in navbar to show all topics',\n  },\n  myPosts: {\n    id: 'discussions.navigation.navigationBar.myPosts',\n    defaultMessage: 'My posts',\n    description: 'Option in navbar to show a user\\'s posts',\n  },\n  learners: {\n    id: 'discussions.navigation.navigationBar.learners',\n    defaultMessage: 'Learners',\n    description: 'Option in navbar to show learners',\n  },\n\n});\n\nexport default messages;\n","import React, { useContext, useMemo } from 'react';\n\nimport { matchPath } from 'react-router';\nimport { NavLink } from 'react-router-dom';\n\nimport { useIntl } from '@edx/frontend-platform/i18n';\nimport { Nav } from '@edx/paragon';\n\nimport { Routes } from '../../../data/constants';\nimport { DiscussionContext } from '../../common/context';\nimport { useShowLearnersTab } from '../../data/hooks';\nimport { discussionsPath } from '../../utils';\nimport messages from './messages';\n\nconst NavigationBar = () => {\n  const intl = useIntl();\n  const { courseId } = useContext(DiscussionContext);\n  const showLearnersTab = useShowLearnersTab();\n\n  const navLinks = useMemo(() => ([\n    {\n      route: Routes.POSTS.MY_POSTS,\n      labelMessage: messages.myPosts,\n    },\n    {\n      route: Routes.POSTS.ALL_POSTS,\n      labelMessage: messages.allPosts,\n    },\n    {\n      route: Routes.TOPICS.ALL,\n      isActive: (match, location) => Boolean(matchPath(location.pathname, { path: Routes.TOPICS.PATH })),\n      labelMessage: messages.allTopics,\n    },\n  ]), []);\n\n  useMemo(() => {\n    if (showLearnersTab) {\n      navLinks.push({\n        route: Routes.LEARNERS.PATH,\n        labelMessage: messages.learners,\n      });\n    }\n  }, [showLearnersTab]);\n\n  return (\n    <Nav variant=\"pills\" className=\"py-2 nav-button-group\">\n      {navLinks.map(link => (\n        <Nav.Item key={link.route}>\n          <Nav.Link\n            key={link.route}\n            as={NavLink}\n            to={discussionsPath(link.route, { courseId })}\n            isActive={link.isActive}\n          >\n            {intl.formatMessage(link.labelMessage)}\n          </Nav.Link>\n        </Nav.Item>\n      ))}\n    </Nav>\n  );\n};\n\nexport default React.memo(NavigationBar);\n"],"names":["Nav","props","React","BaseNav","NavItem","BaseNavItem","NavLink","BaseNavLink","NavDropdown","BaseNavDropdown","propTypes","cardHeaderBsPrefix","PropTypes","defaultActiveKey","activeKey","as","fill","justify","navbar","onKeyDown","onSelect","role","variant","bsPrefix","active","disabled","eventKey","href","id","title","menuRole","menuVariant","onClick","renderMenuOnMount","rootCloseEvent","defaultProps","_objectSpread","Item","Link","Divider","defineMessages","allPosts","defaultMessage","description","allTopics","myPosts","learners","NavigationBar","intl","useIntl","courseId","useContext","DiscussionContext","showLearnersTab","useShowLearnersTab","navLinks","useMemo","route","Routes","labelMessage","messages","isActive","match","location","Boolean","matchPath","pathname","path","push","_jsx","className","children","map","link","to","discussionsPath","formatMessage"],"sourceRoot":""}